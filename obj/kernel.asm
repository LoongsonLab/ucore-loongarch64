
obj/ucore-kernel-initrd:     file format elf64-loongarch


Disassembly of section .text:

9000000000000000 <_wrs_kernel_text_start>:
.section .startup

#define KSTACKSIZE (4096*2)

kernel_entry:
  b reset
9000000000000000:	50001000 	b	16(0x10) # 9000000000000010 <reset>
  nop
9000000000000004:	03400000 	andi	$r0,$r0,0x0
	...

9000000000000010 <reset>:
    .align 4
reset:
    la t0, 1f
9000000000000010:	1c00442c 	pcaddu12i	$r12,545(0x221)
9000000000000014:	28db618c 	ld.d	$r12,$r12,1752(0x6d8)
    jirl zero, t0, 0
9000000000000018:	4c000180 	jirl	$r0,$r12,0
1:
    la sp, bootstacktop
900000000000001c:	1c004423 	pcaddu12i	$r3,545(0x221)
9000000000000020:	28deb063 	ld.d	$r3,$r3,1964(0x7ac)
#zero bss
    la t0, edata
9000000000000024:	1c00442c 	pcaddu12i	$r12,545(0x221)
9000000000000028:	28dbb18c 	ld.d	$r12,$r12,1772(0x6ec)
    la t1, end
900000000000002c:	1c00442d 	pcaddu12i	$r13,545(0x221)
9000000000000030:	28dcd1ad 	ld.d	$r13,$r13,1844(0x734)
2:
    st.d zero, t0, 0
9000000000000034:	29c00180 	st.d	$r0,$r12,0
    addi.w t0, t0, 4
9000000000000038:	0280118c 	addi.w	$r12,$r12,4(0x4)
    slt t3, t0, t1
900000000000003c:	0012358f 	slt	$r15,$r12,$r13
    bgtz t3, 2b
9000000000000040:	63fff40f 	blt	$r0,$r15,-12(0x3fff4) # 9000000000000034 <reset+0x24>
    addi.d sp, sp, -16
9000000000000044:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
    # Config direct window and set PG
    li.d    t0, 0x9000000000000011
9000000000000048:	0380440c 	ori	$r12,$r0,0x11
900000000000004c:	0324018c 	lu52i.d	$r12,$r12,-1792(0x900)
    csrwr   t0, 0x180
9000000000000050:	0406002c 	csrwr	$r12,0x180
    // DMWIN0: 0x9000000000000000-0x9fffffffffffffff->0x000000000000-0xffffffffffff Cached
    li.d    t0, 0x8000000000000001
9000000000000054:	0380040c 	ori	$r12,$r0,0x1
9000000000000058:	0320018c 	lu52i.d	$r12,$r12,-2048(0x800)
    csrwr   t0, LISA_CSR_DMWIN1
900000000000005c:	0406042c 	csrwr	$r12,0x181
    // DMWIN1: 0x8000000000000000-0x8fffffffffffffff->0x000000000000-0xffffffffffff Uncached (serial port is here)
    # Enable PG
    li.d    t0, 0xb0    # PLV=0, IE=0, PG
9000000000000060:	0382c00c 	ori	$r12,$r0,0xb0
    csrwr   t0, LISA_CSR_CRMD
9000000000000064:	0400002c 	csrwr	$r12,0x0
     # pgsize
    li.w    t0, 0x0    
9000000000000068:	0015000c 	move	$r12,$r0
    csrwr   t0, LISA_CSR_FTLBPGSIZE
900000000000006c:	0400782c 	csrwr	$r12,0x1e
    # the pgsize support by tlb
    li.d    t0, 0x0    
9000000000000070:	0015000c 	move	$r12,$r0
    csrrd   t0, 0x1f
9000000000000074:	04007c0c 	csrrd	$r12,0x1f
    b kern_init
9000000000000078:	50013000 	b	304(0x130) # 90000000000001a8 <kern_init>

900000000000007c <fence_i>:

#define TIMER0_IRQ      11

#define CACHELINE_SIZE  16

static void fence_i(void *va_start, int size) {
900000000000007c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000000080:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000000084:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000000088:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000000008c:	001500ac 	move	$r12,$r5
9000000000000090:	0040818c 	slli.w	$r12,$r12,0x0
9000000000000094:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
9000000000000098:	38720000 	dbar	0x0
        As loongarch64 didn't guarantee any cache coherence, we need to make dirty d-cache writeback to memory and invalidte it from i-cache. 

        This operation is not necessary when running on ISA level emulator like QEMU, but it must be done when running on real hardware or FPGA.
     */
    asm volatile(".word 0b00111000011100100000000000000000"); // dbar, used for out-of-order machine
    void *va_end = va_start + size;
900000000000009c:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
90000000000000a0:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
90000000000000a4:	0010b1ac 	add.d	$r12,$r13,$r12
90000000000000a8:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
90000000000000ac:	50002000 	b	32(0x20) # 90000000000000cc <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
90000000000000b0:	06000189 	cacop	0x9,$r12,0
90000000000000b4:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
90000000000000b8:	06000188 	cacop	0x8,$r12,0
90000000000000bc:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
90000000000000c0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000000c4:	02c0418c 	addi.d	$r12,$r12,16(0x10)
90000000000000c8:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
90000000000000cc:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
90000000000000d0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000000d4:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 90000000000000b0 <fence_i+0x34>
90000000000000d8:	38728000 	ibar	0x0
    }
    asm volatile(".word 0b00111000011100101000000000000000"); // ibar, used for flush pipeline and instruction buffer.
}
90000000000000dc:	03400000 	andi	$r0,$r0,0x0
90000000000000e0:	28c0a076 	ld.d	$r22,$r3,40(0x28)
90000000000000e4:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000000000e8:	4c000020 	jirl	$r0,$r1,0

90000000000000ec <setup_exception_vector>:
#include <sched.h>
#include <ide.h>
#include <fs.h>

void setup_exception_vector()
{
90000000000000ec:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000000000f0:	29c06076 	st.d	$r22,$r3,24(0x18)
90000000000000f4:	02c08076 	addi.d	$r22,$r3,32(0x20)
    extern unsigned char exception_handler[];
    extern unsigned char tlbrefill_handler[];
    extern unsigned char tlbrefill_redirector[];
    unsigned long long isTLBR=0x1;
90000000000000f8:	0280040c 	addi.w	$r12,$r0,1(0x1)
90000000000000fc:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    __csrwr_d(exception_handler, LISA_CSR_EBASE);
9000000000000100:	1c00442c 	pcaddu12i	$r12,545(0x221)
9000000000000104:	28dc418c 	ld.d	$r12,$r12,1808(0x710)
9000000000000108:	0400302c 	csrwr	$r12,0xc
    __csrwr_d(((unsigned long long)tlbrefill_redirector|isTLBR), LISA_CSR_KS3);
900000000000010c:	1c00442d 	pcaddu12i	$r13,545(0x221)
9000000000000110:	28db91ad 	ld.d	$r13,$r13,1764(0x6e4)
9000000000000114:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000000118:	001531ac 	or	$r12,$r13,$r12
900000000000011c:	0400cc2c 	csrwr	$r12,0x33
    __csrwr_d((unsigned long long)tlbrefill_handler & 0x0fffffffffffffff, LISA_CSR_RFBASE);
9000000000000120:	1c00442d 	pcaddu12i	$r13,545(0x221)
9000000000000124:	28d881ad 	ld.d	$r13,$r13,1568(0x620)
9000000000000128:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
900000000000012c:	0303fd8c 	lu52i.d	$r12,$r12,255(0xff)
9000000000000130:	0014b1ac 	and	$r12,$r13,$r12
9000000000000134:	0402202c 	csrwr	$r12,0x88
}
9000000000000138:	03400000 	andi	$r0,$r0,0x0
900000000000013c:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000000140:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000000144:	4c000020 	jirl	$r0,$r1,0

9000000000000148 <check_tlb>:

void check_tlb() {
9000000000000148:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000000014c:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000000000150:	29c00076 	st.d	$r22,$r3,0
9000000000000154:	02c04076 	addi.d	$r22,$r3,16(0x10)
    kprintf("tlbidx = %08x\n",read_csr_tlbidx());
9000000000000158:	0400400c 	csrrd	$r12,0x10
900000000000015c:	00150185 	move	$r5,$r12
9000000000000160:	1c0003c4 	pcaddu12i	$r4,30(0x1e)
9000000000000164:	02fe0084 	addi.d	$r4,$r4,-128(0xf80)
9000000000000168:	543cb400 	bl	15540(0x3cb4) # 9000000000003e1c <kprintf>
    kprintf("stlbps = %08x\n",read_csr_stlbps());
900000000000016c:	0400780c 	csrrd	$r12,0x1e
9000000000000170:	00150185 	move	$r5,$r12
9000000000000174:	1c0003c4 	pcaddu12i	$r4,30(0x1e)
9000000000000178:	02fdf084 	addi.d	$r4,$r4,-132(0xf7c)
900000000000017c:	543ca000 	bl	15520(0x3ca0) # 9000000000003e1c <kprintf>
    kprintf("entryrhi = %08x\n",read_csr_entryrhi());
9000000000000180:	0402380c 	csrrd	$r12,0x8e
9000000000000184:	00150185 	move	$r5,$r12
9000000000000188:	1c0003c4 	pcaddu12i	$r4,30(0x1e)
900000000000018c:	02fde084 	addi.d	$r4,$r4,-136(0xf78)
9000000000000190:	543c8c00 	bl	15500(0x3c8c) # 9000000000003e1c <kprintf>
}
9000000000000194:	03400000 	andi	$r0,$r0,0x0
9000000000000198:	28c02061 	ld.d	$r1,$r3,8(0x8)
900000000000019c:	28c00076 	ld.d	$r22,$r3,0
90000000000001a0:	02c04063 	addi.d	$r3,$r3,16(0x10)
90000000000001a4:	4c000020 	jirl	$r0,$r1,0

90000000000001a8 <kern_init>:

void __noreturn
kern_init(void) {
90000000000001a8:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000000001ac:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000000001b0:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000000001b4:	02c08076 	addi.d	$r22,$r3,32(0x20)
    setup_exception_vector();
90000000000001b8:	57ff37ff 	bl	-204(0xfffff34) # 90000000000000ec <setup_exception_vector>
    tlb_invalidate_all();
90000000000001bc:	5489d800 	bl	35288(0x89d8) # 9000000000008b94 <tlb_invalidate_all>
    pic_init();                 // init interrupt controller
90000000000001c0:	540dc800 	bl	3528(0xdc8) # 9000000000000f88 <pic_init>
    cons_init();                // init the console
90000000000001c4:	54069400 	bl	1684(0x694) # 9000000000000858 <cons_init>
    clock_init();               // init clock interrupt
90000000000001c8:	54012400 	bl	292(0x124) # 90000000000002ec <clock_init>
    const char *message = "(THU.CST) os is loading ...\n\n";
90000000000001cc:	1c0003cc 	pcaddu12i	$r12,30(0x1e)
90000000000001d0:	02fd318c 	addi.d	$r12,$r12,-180(0xf4c)
90000000000001d4:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    kprintf(message);
90000000000001d8:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
90000000000001dc:	543c4000 	bl	15424(0x3c40) # 9000000000003e1c <kprintf>
    print_kerninfo();
90000000000001e0:	54c59c00 	bl	50588(0xc59c) # 900000000000c77c <print_kerninfo>
#ifdef LAB2_EX1
    pmm_init();                 // init physical memory management
90000000000001e4:	5496a000 	bl	38560(0x96a0) # 9000000000009884 <pmm_init>
    kprintf("LAB1 Check - Please press your keyboard manually and see what happend.\n");
    intr_enable();
    while(1) asm volatile ("\tidle 0\n");
#endif
#ifdef LAB3_EX1
    vmm_init();                 // init virtual memory management
90000000000001e8:	54ba5c00 	bl	47708(0xba5c) # 900000000000bc44 <vmm_init>
    // For LAB3
    kprintf("LAB3 Check Pass!\n");
    intr_enable();
    while(1) asm volatile ("\tidle 0\n");
#endif
    sched_init();
90000000000001ec:	551f6c00 	bl	73580(0x11f6c) # 9000000000012158 <sched_init>
    proc_init();                // init process table
90000000000001f0:	5513f800 	bl	70648(0x113f8) # 90000000000115e8 <proc_init>
#ifdef LAB8_EX2
    check_initrd();
90000000000001f4:	540e4400 	bl	3652(0xe44) # 9000000000001038 <check_initrd>
    ide_init();
90000000000001f8:	54086000 	bl	2144(0x860) # 9000000000000a58 <ide_init>
    fs_init();
90000000000001fc:	55448400 	bl	83076(0x14484) # 9000000000014680 <fs_init>
#endif
    intr_enable();              // enable irq interrupt
9000000000000200:	540c4800 	bl	3144(0xc48) # 9000000000000e48 <intr_enable>
    cpu_idle();
9000000000000204:	5516c000 	bl	71360(0x116c0) # 90000000000118c4 <cpu_idle>

9000000000000208 <fence_i>:
static void fence_i(void *va_start, int size) {
9000000000000208:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000020c:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000000210:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000000214:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000000218:	001500ac 	move	$r12,$r5
900000000000021c:	0040818c 	slli.w	$r12,$r12,0x0
9000000000000220:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
9000000000000224:	38720000 	dbar	0x0
    void *va_end = va_start + size;
9000000000000228:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
900000000000022c:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000000230:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000000234:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
9000000000000238:	50002000 	b	32(0x20) # 9000000000000258 <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
900000000000023c:	06000189 	cacop	0x9,$r12,0
9000000000000240:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
9000000000000244:	06000188 	cacop	0x8,$r12,0
9000000000000248:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
900000000000024c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000000250:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000000254:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
9000000000000258:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000025c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000000260:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 900000000000023c <fence_i+0x34>
9000000000000264:	38728000 	ibar	0x0
}
9000000000000268:	03400000 	andi	$r0,$r0,0x0
900000000000026c:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000000270:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000000274:	4c000020 	jirl	$r0,$r1,0

9000000000000278 <reload_timer>:


#define HZ 100

static void reload_timer()
{
9000000000000278:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000000027c:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000000000280:	02c04076 	addi.d	$r22,$r3,16(0x10)
  write_csr_tmintclear(CSR_TMINTCLR_TI);
9000000000000284:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000000288:	0401102c 	csrwr	$r12,0x44
}
900000000000028c:	03400000 	andi	$r0,$r0,0x0
9000000000000290:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000000000294:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000000000298:	4c000020 	jirl	$r0,$r1,0

900000000000029c <clock_int_handler>:

int clock_int_handler(void * data)
{
900000000000029c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000000002a0:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000000002a4:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000000002a8:	02c08076 	addi.d	$r22,$r3,32(0x20)
90000000000002ac:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
#ifdef LAB1_EX4
  // LAB1 EXERCISE4: YOUR CODE
  // (1) count ticks here
  ticks ++;
90000000000002b0:	1c00442c 	pcaddu12i	$r12,545(0x221)
90000000000002b4:	28d4218c 	ld.d	$r12,$r12,1288(0x508)
90000000000002b8:	28c0018c 	ld.d	$r12,$r12,0
90000000000002bc:	02c0058d 	addi.d	$r13,$r12,1(0x1)
90000000000002c0:	1c00442c 	pcaddu12i	$r12,545(0x221)
90000000000002c4:	28d3e18c 	ld.d	$r12,$r12,1272(0x4f8)
90000000000002c8:	29c0018d 	st.d	$r13,$r12,0
    kprintf("100 ticks\n");
  }
#endif
#endif
#ifdef LAB7_EX1
  run_timer_list();
90000000000002cc:	5523ec00 	bl	74732(0x123ec) # 90000000000126b8 <run_timer_list>
#endif
  reload_timer();
90000000000002d0:	57ffabff 	bl	-88(0xfffffa8) # 9000000000000278 <reload_timer>
  return 0;
90000000000002d4:	0015000c 	move	$r12,$r0
}
90000000000002d8:	00150184 	move	$r4,$r12
90000000000002dc:	28c06061 	ld.d	$r1,$r3,24(0x18)
90000000000002e0:	28c04076 	ld.d	$r22,$r3,16(0x10)
90000000000002e4:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000000002e8:	4c000020 	jirl	$r0,$r1,0

90000000000002ec <clock_init>:

void
clock_init(void) {
90000000000002ec:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000000002f0:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000000002f4:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000000002f8:	02c08076 	addi.d	$r22,$r3,32(0x20)
  // setup timer
  unsigned long timer_config;
  unsigned long period = 200000000;
90000000000002fc:	1417d78c 	lu12i.w	$r12,48828(0xbebc)
9000000000000300:	0388018c 	ori	$r12,$r12,0x200
9000000000000304:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
  period = period / HZ;
9000000000000308:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000030c:	0045098d 	srli.d	$r13,$r12,0x2
9000000000000310:	14b851ec 	lu12i.w	$r12,377487(0x5c28f)
9000000000000314:	03970d8c 	ori	$r12,$r12,0x5c3
9000000000000318:	16b851ec 	lu32i.d	$r12,377487(0x5c28f)
900000000000031c:	030a3d8c 	lu52i.d	$r12,$r12,655(0x28f)
9000000000000320:	001db1b0 	mul.d	$r16,$r13,$r12
9000000000000324:	001eb1ac 	mulh.du	$r12,$r13,$r12
9000000000000328:	0015020e 	move	$r14,$r16
900000000000032c:	0015018f 	move	$r15,$r12
9000000000000330:	004509ec 	srli.d	$r12,$r15,0x2
9000000000000334:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
  timer_config = period & LISA_CSR_TMCFG_TIMEVAL;
9000000000000338:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000033c:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
9000000000000340:	161fffec 	lu32i.d	$r12,65535(0xffff)
9000000000000344:	0014b1ac 	and	$r12,$r13,$r12
9000000000000348:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
  timer_config |= (LISA_CSR_TMCFG_PERIOD | LISA_CSR_TMCFG_EN);
900000000000034c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000000350:	03800d8c 	ori	$r12,$r12,0x3
9000000000000354:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
  __csrwr(timer_config, LISA_CSR_TMCFG);
9000000000000358:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
900000000000035c:	0401042c 	csrwr	$r12,0x41
  pic_enable(TIMER0_IRQ);
9000000000000360:	02802c04 	addi.w	$r4,$r0,11(0xb)
9000000000000364:	540b8000 	bl	2944(0xb80) # 9000000000000ee4 <pic_enable>
  kprintf("++setup timer interrupts\n");
9000000000000368:	1c0003c4 	pcaddu12i	$r4,30(0x1e)
900000000000036c:	02f74084 	addi.d	$r4,$r4,-560(0xdd0)
9000000000000370:	543aac00 	bl	15020(0x3aac) # 9000000000003e1c <kprintf>
}
9000000000000374:	03400000 	andi	$r0,$r0,0x0
9000000000000378:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000000037c:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000000380:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000000384:	4c000020 	jirl	$r0,$r1,0

9000000000000388 <fence_i>:
static void fence_i(void *va_start, int size) {
9000000000000388:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000038c:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000000390:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000000394:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000000398:	001500ac 	move	$r12,$r5
900000000000039c:	0040818c 	slli.w	$r12,$r12,0x0
90000000000003a0:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
90000000000003a4:	38720000 	dbar	0x0
    void *va_end = va_start + size;
90000000000003a8:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
90000000000003ac:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
90000000000003b0:	0010b1ac 	add.d	$r12,$r13,$r12
90000000000003b4:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
90000000000003b8:	50002000 	b	32(0x20) # 90000000000003d8 <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
90000000000003bc:	06000189 	cacop	0x9,$r12,0
90000000000003c0:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
90000000000003c4:	06000188 	cacop	0x8,$r12,0
90000000000003c8:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
90000000000003cc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000003d0:	02c0418c 	addi.d	$r12,$r12,16(0x10)
90000000000003d4:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
90000000000003d8:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
90000000000003dc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000003e0:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 90000000000003bc <fence_i+0x34>
90000000000003e4:	38728000 	ibar	0x0
}
90000000000003e8:	03400000 	andi	$r0,$r0,0x0
90000000000003ec:	28c0a076 	ld.d	$r22,$r3,40(0x28)
90000000000003f0:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000000003f4:	4c000020 	jirl	$r0,$r1,0

90000000000003f8 <__intr_save>:
void intr_enable(void);
void intr_disable(void);


static inline unsigned long __intr_save(void)
{
90000000000003f8:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
90000000000003fc:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000000000400:	02c04076 	addi.d	$r22,$r3,16(0x10)
	return __csrxchg(0, LISA_CSR_CRMD_IE, LISA_CSR_CRMD);
9000000000000404:	0015000d 	move	$r13,$r0
9000000000000408:	0280100c 	addi.w	$r12,$r0,4(0x4)
900000000000040c:	0400018d 	csrxchg	$r13,$r12,0x0
9000000000000410:	001501ac 	move	$r12,$r13
9000000000000414:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
}
9000000000000418:	00150184 	move	$r4,$r12
900000000000041c:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000000000420:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000000000424:	4c000020 	jirl	$r0,$r1,0

9000000000000428 <__intr_restore>:

static inline void __intr_restore(unsigned long flags)
{
9000000000000428:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000042c:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000000430:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000000434:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
	__csrxchg(flags, LISA_CSR_CRMD_IE, LISA_CSR_CRMD);
9000000000000438:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000000043c:	0280100d 	addi.w	$r13,$r0,4(0x4)
9000000000000440:	040001ac 	csrxchg	$r12,$r13,0x0
}
9000000000000444:	03400000 	andi	$r0,$r0,0x0
9000000000000448:	28c06076 	ld.d	$r22,$r3,24(0x18)
900000000000044c:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000000450:	4c000020 	jirl	$r0,$r1,0

9000000000000454 <delay>:
#include <picirq.h>
#include <intr.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
9000000000000454:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000000000458:	29c02076 	st.d	$r22,$r3,8(0x8)
900000000000045c:	02c04076 	addi.d	$r22,$r3,16(0x10)
}
9000000000000460:	03400000 	andi	$r0,$r0,0x0
9000000000000464:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000000000468:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000000046c:	4c000020 	jirl	$r0,$r1,0

9000000000000470 <serial_init>:


static bool serial_exists = 0;

static void
serial_init(void) {
9000000000000470:	02fe0063 	addi.d	$r3,$r3,-128(0xf80)
9000000000000474:	29c1e061 	st.d	$r1,$r3,120(0x78)
9000000000000478:	29c1c076 	st.d	$r22,$r3,112(0x70)
900000000000047c:	02c20076 	addi.d	$r22,$r3,128(0x80)
    
    volatile unsigned char *uart = (unsigned long long*)COM1;
9000000000000480:	143fc00c 	lu12i.w	$r12,130560(0x1fe00)
9000000000000484:	0387818c 	ori	$r12,$r12,0x1e0
9000000000000488:	0320018c 	lu52i.d	$r12,$r12,-2048(0x800)
900000000000048c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    if(serial_exists)
9000000000000490:	1c00442c 	pcaddu12i	$r12,545(0x221)
9000000000000494:	02ce418c 	addi.d	$r12,$r12,912(0x390)
9000000000000498:	2880018c 	ld.w	$r12,$r12,0
900000000000049c:	4400ed80 	bnez	$r12,236(0xec) # 9000000000000588 <serial_init+0x118>
      return ;
    serial_exists = 1;
90000000000004a0:	1c00442c 	pcaddu12i	$r12,545(0x221)
90000000000004a4:	02ce018c 	addi.d	$r12,$r12,896(0x380)
90000000000004a8:	0280040d 	addi.w	$r13,$r0,1(0x1)
90000000000004ac:	2980018d 	st.w	$r13,$r12,0
90000000000004b0:	143fc00c 	lu12i.w	$r12,130560(0x1fe00)
90000000000004b4:	0387898c 	ori	$r12,$r12,0x1e2
90000000000004b8:	0320018c 	lu52i.d	$r12,$r12,-2048(0x800)
90000000000004bc:	29fe42cc 	st.d	$r12,$r22,-112(0xf90)
90000000000004c0:	293e3ec0 	st.b	$r0,$r22,-113(0xf8f)
    *((volatile uint8_t*) port) = data;
90000000000004c4:	28fe42cc 	ld.d	$r12,$r22,-112(0xf90)
90000000000004c8:	2a3e3ecd 	ld.bu	$r13,$r22,-113(0xf8f)
90000000000004cc:	2900018d 	st.b	$r13,$r12,0
90000000000004d0:	143fc00c 	lu12i.w	$r12,130560(0x1fe00)
90000000000004d4:	03878d8c 	ori	$r12,$r12,0x1e3
90000000000004d8:	0320018c 	lu52i.d	$r12,$r12,-2048(0x800)
90000000000004dc:	29fe82cc 	st.d	$r12,$r22,-96(0xfa0)
90000000000004e0:	02be000c 	addi.w	$r12,$r0,-128(0xf80)
90000000000004e4:	293e7ecc 	st.b	$r12,$r22,-97(0xf9f)
90000000000004e8:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
90000000000004ec:	2a3e7ecd 	ld.bu	$r13,$r22,-97(0xf9f)
90000000000004f0:	2900018d 	st.b	$r13,$r12,0
90000000000004f4:	143fc00c 	lu12i.w	$r12,130560(0x1fe00)
90000000000004f8:	0387858c 	ori	$r12,$r12,0x1e1
90000000000004fc:	0320018c 	lu52i.d	$r12,$r12,-2048(0x800)
9000000000000500:	29fec2cc 	st.d	$r12,$r22,-80(0xfb0)
9000000000000504:	293ebec0 	st.b	$r0,$r22,-81(0xfaf)
9000000000000508:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000000050c:	2a3ebecd 	ld.bu	$r13,$r22,-81(0xfaf)
9000000000000510:	2900018d 	st.b	$r13,$r12,0
9000000000000514:	143fc00c 	lu12i.w	$r12,130560(0x1fe00)
9000000000000518:	03878d8c 	ori	$r12,$r12,0x1e3
900000000000051c:	0320018c 	lu52i.d	$r12,$r12,-2048(0x800)
9000000000000520:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
9000000000000524:	02800c0c 	addi.w	$r12,$r0,3(0x3)
9000000000000528:	293efecc 	st.b	$r12,$r22,-65(0xfbf)
900000000000052c:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000000530:	2a3efecd 	ld.bu	$r13,$r22,-65(0xfbf)
9000000000000534:	2900018d 	st.b	$r13,$r12,0
9000000000000538:	143fc00c 	lu12i.w	$r12,130560(0x1fe00)
900000000000053c:	0387918c 	ori	$r12,$r12,0x1e4
9000000000000540:	0320018c 	lu52i.d	$r12,$r12,-2048(0x800)
9000000000000544:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
9000000000000548:	293f3ec0 	st.b	$r0,$r22,-49(0xfcf)
900000000000054c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000000550:	2a3f3ecd 	ld.bu	$r13,$r22,-49(0xfcf)
9000000000000554:	2900018d 	st.b	$r13,$r12,0
9000000000000558:	143fc00c 	lu12i.w	$r12,130560(0x1fe00)
900000000000055c:	0387858c 	ori	$r12,$r12,0x1e1
9000000000000560:	0320018c 	lu52i.d	$r12,$r12,-2048(0x800)
9000000000000564:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000000568:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000000056c:	293f7ecc 	st.b	$r12,$r22,-33(0xfdf)
9000000000000570:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000000574:	2a3f7ecd 	ld.bu	$r13,$r22,-33(0xfdf)
9000000000000578:	2900018d 	st.b	$r13,$r12,0
    // No modem controls
    outb(COM1 + COM_MCR, 0);
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    pic_enable(COM1_IRQ);
900000000000057c:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000000000580:	54096400 	bl	2404(0x964) # 9000000000000ee4 <pic_enable>
9000000000000584:	50000800 	b	8(0x8) # 900000000000058c <serial_init+0x11c>
      return ;
9000000000000588:	03400000 	andi	$r0,$r0,0x0
}
900000000000058c:	28c1e061 	ld.d	$r1,$r3,120(0x78)
9000000000000590:	28c1c076 	ld.d	$r22,$r3,112(0x70)
9000000000000594:	02c20063 	addi.d	$r3,$r3,128(0x80)
9000000000000598:	4c000020 	jirl	$r0,$r1,0

900000000000059c <serial_putc_sub>:


static void
serial_putc_sub(int c) {
900000000000059c:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
90000000000005a0:	29c0e076 	st.d	$r22,$r3,56(0x38)
90000000000005a4:	02c10076 	addi.d	$r22,$r3,64(0x40)
90000000000005a8:	0015008c 	move	$r12,$r4
90000000000005ac:	0040818c 	slli.w	$r12,$r12,0x0
90000000000005b0:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
    while (!(inb(COM1 + COM_LSR) & COM_LSR_TXRDY)) {
90000000000005b4:	03400000 	andi	$r0,$r0,0x0
90000000000005b8:	143fc00c 	lu12i.w	$r12,130560(0x1fe00)
90000000000005bc:	0387958c 	ori	$r12,$r12,0x1e5
90000000000005c0:	0320018c 	lu52i.d	$r12,$r12,-2048(0x800)
90000000000005c4:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    uint8_t data = *((const volatile uint8_t*) port);
90000000000005c8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000005cc:	2a00018c 	ld.bu	$r12,$r12,0
90000000000005d0:	293f9ecc 	st.b	$r12,$r22,-25(0xfe7)
    return data;
90000000000005d4:	2a3f9ecc 	ld.bu	$r12,$r22,-25(0xfe7)
90000000000005d8:	0340818c 	andi	$r12,$r12,0x20
90000000000005dc:	43ffdd9f 	beqz	$r12,-36(0x7fffdc) # 90000000000005b8 <serial_putc_sub+0x1c>
    }
    outb(COM1 + COM_TX, c);
90000000000005e0:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
90000000000005e4:	0067818d 	bstrpick.w	$r13,$r12,0x7,0x0
90000000000005e8:	143fc00c 	lu12i.w	$r12,130560(0x1fe00)
90000000000005ec:	0387818c 	ori	$r12,$r12,0x1e0
90000000000005f0:	0320018c 	lu52i.d	$r12,$r12,-2048(0x800)
90000000000005f4:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
90000000000005f8:	293f5ecd 	st.b	$r13,$r22,-41(0xfd7)
    *((volatile uint8_t*) port) = data;
90000000000005fc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000000600:	2a3f5ecd 	ld.bu	$r13,$r22,-41(0xfd7)
9000000000000604:	2900018d 	st.b	$r13,$r12,0
}
9000000000000608:	03400000 	andi	$r0,$r0,0x0
900000000000060c:	28c0e076 	ld.d	$r22,$r3,56(0x38)
9000000000000610:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000000614:	4c000020 	jirl	$r0,$r1,0

9000000000000618 <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
9000000000000618:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000061c:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000000620:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000000624:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000000628:	0015008c 	move	$r12,$r4
900000000000062c:	0040818c 	slli.w	$r12,$r12,0x0
9000000000000630:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    if (c == '\n') {
9000000000000634:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000000638:	0015018d 	move	$r13,$r12
900000000000063c:	0280280c 	addi.w	$r12,$r0,10(0xa)
9000000000000640:	5c0019ac 	bne	$r13,$r12,24(0x18) # 9000000000000658 <serial_putc+0x40>
        serial_putc_sub('\r');
9000000000000644:	02803404 	addi.w	$r4,$r0,13(0xd)
9000000000000648:	57ff57ff 	bl	-172(0xfffff54) # 900000000000059c <serial_putc_sub>
        serial_putc_sub('\n');
900000000000064c:	02802804 	addi.w	$r4,$r0,10(0xa)
9000000000000650:	57ff4fff 	bl	-180(0xfffff4c) # 900000000000059c <serial_putc_sub>
    }else {
        serial_putc_sub(c);
    }
}
9000000000000654:	50001000 	b	16(0x10) # 9000000000000664 <serial_putc+0x4c>
        serial_putc_sub(c);
9000000000000658:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000065c:	00150184 	move	$r4,$r12
9000000000000660:	57ff3fff 	bl	-196(0xfffff3c) # 900000000000059c <serial_putc_sub>
}
9000000000000664:	03400000 	andi	$r0,$r0,0x0
9000000000000668:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000000066c:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000000670:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000000674:	4c000020 	jirl	$r0,$r1,0

9000000000000678 <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
9000000000000678:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000000067c:	29c0e076 	st.d	$r22,$r3,56(0x38)
9000000000000680:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000000684:	143fc00c 	lu12i.w	$r12,130560(0x1fe00)
9000000000000688:	0387958c 	ori	$r12,$r12,0x1e5
900000000000068c:	0320018c 	lu52i.d	$r12,$r12,-2048(0x800)
9000000000000690:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    uint8_t data = *((const volatile uint8_t*) port);
9000000000000694:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000000698:	2a00018c 	ld.bu	$r12,$r12,0
900000000000069c:	293f7ecc 	st.b	$r12,$r22,-33(0xfdf)
    return data;
90000000000006a0:	2a3f7ecc 	ld.bu	$r12,$r22,-33(0xfdf)
    int c;
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
90000000000006a4:	0340058c 	andi	$r12,$r12,0x1
90000000000006a8:	44000d80 	bnez	$r12,12(0xc) # 90000000000006b4 <serial_proc_data+0x3c>
        return -1;
90000000000006ac:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
90000000000006b0:	50002c00 	b	44(0x2c) # 90000000000006dc <serial_proc_data+0x64>
90000000000006b4:	143fc00c 	lu12i.w	$r12,130560(0x1fe00)
90000000000006b8:	0387818c 	ori	$r12,$r12,0x1e0
90000000000006bc:	0320018c 	lu52i.d	$r12,$r12,-2048(0x800)
90000000000006c0:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    uint8_t data = *((const volatile uint8_t*) port);
90000000000006c4:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
90000000000006c8:	2a00018c 	ld.bu	$r12,$r12,0
90000000000006cc:	293f3ecc 	st.b	$r12,$r22,-49(0xfcf)
    return data;
90000000000006d0:	2a3f3ecc 	ld.bu	$r12,$r22,-49(0xfcf)
    }
    c = inb(COM1 + COM_RX);
90000000000006d4:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    return c;
90000000000006d8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
90000000000006dc:	00150184 	move	$r4,$r12
90000000000006e0:	28c0e076 	ld.d	$r22,$r3,56(0x38)
90000000000006e4:	02c10063 	addi.d	$r3,$r3,64(0x40)
90000000000006e8:	4c000020 	jirl	$r0,$r1,0

90000000000006ec <serial_int_handler>:


void serial_int_handler(void *opaque)
{
90000000000006ec:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
90000000000006f0:	29c0e061 	st.d	$r1,$r3,56(0x38)
90000000000006f4:	29c0c076 	st.d	$r22,$r3,48(0x30)
90000000000006f8:	02c10076 	addi.d	$r22,$r3,64(0x40)
90000000000006fc:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
9000000000000700:	143fc00c 	lu12i.w	$r12,130560(0x1fe00)
9000000000000704:	0387898c 	ori	$r12,$r12,0x1e2
9000000000000708:	0320018c 	lu52i.d	$r12,$r12,-2048(0x800)
900000000000070c:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    uint8_t data = *((const volatile uint8_t*) port);
9000000000000710:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000000714:	2a00018c 	ld.bu	$r12,$r12,0
9000000000000718:	293f7ecc 	st.b	$r12,$r22,-33(0xfdf)
    return data;
900000000000071c:	2a3f7ecc 	ld.bu	$r12,$r22,-33(0xfdf)
    unsigned char id = inb(COM1+COM_IIR);
9000000000000720:	293fbecc 	st.b	$r12,$r22,-17(0xfef)
    if(id & 0x01)
9000000000000724:	2a3fbecc 	ld.bu	$r12,$r22,-17(0xfef)
9000000000000728:	0340058c 	andi	$r12,$r12,0x1
900000000000072c:	44002580 	bnez	$r12,36(0x24) # 9000000000000750 <serial_int_handler+0x64>
        return ;
    int c = cons_getc();
9000000000000730:	5401c000 	bl	448(0x1c0) # 90000000000008f0 <cons_getc>
9000000000000734:	0015008c 	move	$r12,$r4
9000000000000738:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
    // LAB1 EXERCISE4: YOUR CODE
    kprintf("got input %c\n",c);
#endif
#ifdef LAB8_EX2
    extern void dev_stdin_write(char c);
    dev_stdin_write(c);
900000000000073c:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
9000000000000740:	00005d8c 	ext.w.b	$r12,$r12
9000000000000744:	00150184 	move	$r4,$r12
9000000000000748:	55ce4400 	bl	118340(0x1ce44) # 900000000001d58c <dev_stdin_write>
900000000000074c:	50000800 	b	8(0x8) # 9000000000000754 <serial_int_handler+0x68>
        return ;
9000000000000750:	03400000 	andi	$r0,$r0,0x0
#endif
}
9000000000000754:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000000000758:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000000075c:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000000760:	4c000020 	jirl	$r0,$r1,0

9000000000000764 <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
9000000000000764:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000000768:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000000076c:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000000770:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000000774:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    int c;
    while ((c = (*proc)()) != -1) {
9000000000000778:	50006c00 	b	108(0x6c) # 90000000000007e4 <cons_intr+0x80>
        if (c != 0) {
900000000000077c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000000780:	40006580 	beqz	$r12,100(0x64) # 90000000000007e4 <cons_intr+0x80>
            cons.buf[cons.wpos ++] = c;
9000000000000784:	1c00442c 	pcaddu12i	$r12,545(0x221)
9000000000000788:	02c2918c 	addi.d	$r12,$r12,164(0xa4)
900000000000078c:	2888118c 	ld.w	$r12,$r12,516(0x204)
9000000000000790:	0280058d 	addi.w	$r13,$r12,1(0x1)
9000000000000794:	001501ae 	move	$r14,$r13
9000000000000798:	1c00442d 	pcaddu12i	$r13,545(0x221)
900000000000079c:	02c241ad 	addi.d	$r13,$r13,144(0x90)
90000000000007a0:	298811ae 	st.w	$r14,$r13,516(0x204)
90000000000007a4:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
90000000000007a8:	006781ad 	bstrpick.w	$r13,$r13,0x7,0x0
90000000000007ac:	1c00442e 	pcaddu12i	$r14,545(0x221)
90000000000007b0:	02c1f1ce 	addi.d	$r14,$r14,124(0x7c)
90000000000007b4:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
90000000000007b8:	0010b1cc 	add.d	$r12,$r14,$r12
90000000000007bc:	2900018d 	st.b	$r13,$r12,0
            if (cons.wpos == CONSBUFSIZE) {
90000000000007c0:	1c00442c 	pcaddu12i	$r12,545(0x221)
90000000000007c4:	02c1a18c 	addi.d	$r12,$r12,104(0x68)
90000000000007c8:	2888118c 	ld.w	$r12,$r12,516(0x204)
90000000000007cc:	0015018d 	move	$r13,$r12
90000000000007d0:	0288000c 	addi.w	$r12,$r0,512(0x200)
90000000000007d4:	5c0011ac 	bne	$r13,$r12,16(0x10) # 90000000000007e4 <cons_intr+0x80>
                cons.wpos = 0;
90000000000007d8:	1c00442c 	pcaddu12i	$r12,545(0x221)
90000000000007dc:	02c1418c 	addi.d	$r12,$r12,80(0x50)
90000000000007e0:	29881180 	st.w	$r0,$r12,516(0x204)
    while ((c = (*proc)()) != -1) {
90000000000007e4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000007e8:	4c000181 	jirl	$r1,$r12,0
90000000000007ec:	0015008c 	move	$r12,$r4
90000000000007f0:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
90000000000007f4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000007f8:	0015018d 	move	$r13,$r12
90000000000007fc:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
9000000000000800:	5fff7dac 	bne	$r13,$r12,-132(0x3ff7c) # 900000000000077c <cons_intr+0x18>
            }
        }
    }
}
9000000000000804:	03400000 	andi	$r0,$r0,0x0
9000000000000808:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000000080c:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000000810:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000000814:	4c000020 	jirl	$r0,$r1,0

9000000000000818 <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
9000000000000818:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000000081c:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000000000820:	29c00076 	st.d	$r22,$r3,0
9000000000000824:	02c04076 	addi.d	$r22,$r3,16(0x10)
    if (serial_exists) {
9000000000000828:	1c00442c 	pcaddu12i	$r12,545(0x221)
900000000000082c:	02ffe18c 	addi.d	$r12,$r12,-8(0xff8)
9000000000000830:	2880018c 	ld.w	$r12,$r12,0
9000000000000834:	40001180 	beqz	$r12,16(0x10) # 9000000000000844 <serial_intr+0x2c>
        cons_intr(serial_proc_data);
9000000000000838:	1c000004 	pcaddu12i	$r4,0
900000000000083c:	02f90084 	addi.d	$r4,$r4,-448(0xe40)
9000000000000840:	57ff27ff 	bl	-220(0xfffff24) # 9000000000000764 <cons_intr>
    }
}
9000000000000844:	03400000 	andi	$r0,$r0,0x0
9000000000000848:	28c02061 	ld.d	$r1,$r3,8(0x8)
900000000000084c:	28c00076 	ld.d	$r22,$r3,0
9000000000000850:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000000000854:	4c000020 	jirl	$r0,$r1,0

9000000000000858 <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
9000000000000858:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000000085c:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000000000860:	29c00076 	st.d	$r22,$r3,0
9000000000000864:	02c04076 	addi.d	$r22,$r3,16(0x10)
    serial_init();
9000000000000868:	57fc0bff 	bl	-1016(0xffffc08) # 9000000000000470 <serial_init>

    //cons.rpos = cons.wpos = 0;
    if (!serial_exists) {
900000000000086c:	1c00442c 	pcaddu12i	$r12,545(0x221)
9000000000000870:	02fed18c 	addi.d	$r12,$r12,-76(0xfb4)
9000000000000874:	2880018c 	ld.w	$r12,$r12,0
9000000000000878:	44001180 	bnez	$r12,16(0x10) # 9000000000000888 <cons_init+0x30>
        kprintf("serial port does not exist!!\n");
900000000000087c:	1c0003c4 	pcaddu12i	$r4,30(0x1e)
9000000000000880:	02e37084 	addi.d	$r4,$r4,-1828(0x8dc)
9000000000000884:	54359800 	bl	13720(0x3598) # 9000000000003e1c <kprintf>
    }
}
9000000000000888:	03400000 	andi	$r0,$r0,0x0
900000000000088c:	28c02061 	ld.d	$r1,$r3,8(0x8)
9000000000000890:	28c00076 	ld.d	$r22,$r3,0
9000000000000894:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000000000898:	4c000020 	jirl	$r0,$r1,0

900000000000089c <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
900000000000089c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000000008a0:	29c0a061 	st.d	$r1,$r3,40(0x28)
90000000000008a4:	29c08076 	st.d	$r22,$r3,32(0x20)
90000000000008a8:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000000008ac:	0015008c 	move	$r12,$r4
90000000000008b0:	0040818c 	slli.w	$r12,$r12,0x0
90000000000008b4:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
    long intr_flag;
    local_intr_save(intr_flag);
90000000000008b8:	57fb43ff 	bl	-1216(0xffffb40) # 90000000000003f8 <__intr_save>
90000000000008bc:	0015008c 	move	$r12,$r4
90000000000008c0:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    {
        serial_putc(c);
90000000000008c4:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
90000000000008c8:	00150184 	move	$r4,$r12
90000000000008cc:	57fd4fff 	bl	-692(0xffffd4c) # 9000000000000618 <serial_putc>
    }
    local_intr_restore(intr_flag);
90000000000008d0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000008d4:	00150184 	move	$r4,$r12
90000000000008d8:	57fb53ff 	bl	-1200(0xffffb50) # 9000000000000428 <__intr_restore>
}
90000000000008dc:	03400000 	andi	$r0,$r0,0x0
90000000000008e0:	28c0a061 	ld.d	$r1,$r3,40(0x28)
90000000000008e4:	28c08076 	ld.d	$r22,$r3,32(0x20)
90000000000008e8:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000000008ec:	4c000020 	jirl	$r0,$r1,0

90000000000008f0 <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
90000000000008f0:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000000008f4:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000000008f8:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000000008fc:	02c08076 	addi.d	$r22,$r3,32(0x20)
    int c = 0;
9000000000000900:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
    long intr_flag;
    local_intr_save(intr_flag);
9000000000000904:	57faf7ff 	bl	-1292(0xffffaf4) # 90000000000003f8 <__intr_save>
9000000000000908:	0015008c 	move	$r12,$r4
900000000000090c:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
9000000000000910:	57ff0bff 	bl	-248(0xfffff08) # 9000000000000818 <serial_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
9000000000000914:	1c00442c 	pcaddu12i	$r12,545(0x221)
9000000000000918:	02fc518c 	addi.d	$r12,$r12,-236(0xf14)
900000000000091c:	2888018d 	ld.w	$r13,$r12,512(0x200)
9000000000000920:	1c00442c 	pcaddu12i	$r12,545(0x221)
9000000000000924:	02fc218c 	addi.d	$r12,$r12,-248(0xf08)
9000000000000928:	2888118c 	ld.w	$r12,$r12,516(0x204)
900000000000092c:	580061ac 	beq	$r13,$r12,96(0x60) # 900000000000098c <cons_getc+0x9c>
            c = cons.buf[cons.rpos ++];
9000000000000930:	1c00442c 	pcaddu12i	$r12,545(0x221)
9000000000000934:	02fbe18c 	addi.d	$r12,$r12,-264(0xef8)
9000000000000938:	2888018c 	ld.w	$r12,$r12,512(0x200)
900000000000093c:	0280058d 	addi.w	$r13,$r12,1(0x1)
9000000000000940:	001501ae 	move	$r14,$r13
9000000000000944:	1c00442d 	pcaddu12i	$r13,545(0x221)
9000000000000948:	02fb91ad 	addi.d	$r13,$r13,-284(0xee4)
900000000000094c:	298801ae 	st.w	$r14,$r13,512(0x200)
9000000000000950:	1c00442d 	pcaddu12i	$r13,545(0x221)
9000000000000954:	02fb61ad 	addi.d	$r13,$r13,-296(0xed8)
9000000000000958:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
900000000000095c:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000000960:	2a00018c 	ld.bu	$r12,$r12,0
9000000000000964:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
            if (cons.rpos == CONSBUFSIZE) {
9000000000000968:	1c00442c 	pcaddu12i	$r12,545(0x221)
900000000000096c:	02fb018c 	addi.d	$r12,$r12,-320(0xec0)
9000000000000970:	2888018c 	ld.w	$r12,$r12,512(0x200)
9000000000000974:	0015018d 	move	$r13,$r12
9000000000000978:	0288000c 	addi.w	$r12,$r0,512(0x200)
900000000000097c:	5c0011ac 	bne	$r13,$r12,16(0x10) # 900000000000098c <cons_getc+0x9c>
                cons.rpos = 0;
9000000000000980:	1c00442c 	pcaddu12i	$r12,545(0x221)
9000000000000984:	02faa18c 	addi.d	$r12,$r12,-344(0xea8)
9000000000000988:	29880180 	st.w	$r0,$r12,512(0x200)
            }
        }
    }
    local_intr_restore(intr_flag);
900000000000098c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000000990:	00150184 	move	$r4,$r12
9000000000000994:	57fa97ff 	bl	-1388(0xffffa94) # 9000000000000428 <__intr_restore>
    return c;
9000000000000998:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
900000000000099c:	00150184 	move	$r4,$r12
90000000000009a0:	28c06061 	ld.d	$r1,$r3,24(0x18)
90000000000009a4:	28c04076 	ld.d	$r22,$r3,16(0x10)
90000000000009a8:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000000009ac:	4c000020 	jirl	$r0,$r1,0

90000000000009b0 <fence_i>:
static void fence_i(void *va_start, int size) {
90000000000009b0:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000000009b4:	29c0a076 	st.d	$r22,$r3,40(0x28)
90000000000009b8:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000000009bc:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
90000000000009c0:	001500ac 	move	$r12,$r5
90000000000009c4:	0040818c 	slli.w	$r12,$r12,0x0
90000000000009c8:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
90000000000009cc:	38720000 	dbar	0x0
    void *va_end = va_start + size;
90000000000009d0:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
90000000000009d4:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
90000000000009d8:	0010b1ac 	add.d	$r12,$r13,$r12
90000000000009dc:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
90000000000009e0:	50002000 	b	32(0x20) # 9000000000000a00 <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
90000000000009e4:	06000189 	cacop	0x9,$r12,0
90000000000009e8:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
90000000000009ec:	06000188 	cacop	0x8,$r12,0
90000000000009f0:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
90000000000009f4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000009f8:	02c0418c 	addi.d	$r12,$r12,16(0x10)
90000000000009fc:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
9000000000000a00:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000000a04:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000000a08:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 90000000000009e4 <fence_i+0x34>
9000000000000a0c:	38728000 	ibar	0x0
}
9000000000000a10:	03400000 	andi	$r0,$r0,0x0
9000000000000a14:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000000a18:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000000a1c:	4c000020 	jirl	$r0,$r1,0

9000000000000a20 <ide_wait_ready>:

static struct ide_device ide_devices[MAX_IDE];


static int
ide_wait_ready(unsigned int iobase, bool check_error) {
9000000000000a20:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000000a24:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000000a28:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000000a2c:	0015008d 	move	$r13,$r4
9000000000000a30:	001500ac 	move	$r12,$r5
9000000000000a34:	004081ad 	slli.w	$r13,$r13,0x0
9000000000000a38:	29bfb2cd 	st.w	$r13,$r22,-20(0xfec)
9000000000000a3c:	0040818c 	slli.w	$r12,$r12,0x0
9000000000000a40:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
    return 0;
9000000000000a44:	0015000c 	move	$r12,$r0
}
9000000000000a48:	00150184 	move	$r4,$r12
9000000000000a4c:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000000a50:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000000a54:	4c000020 	jirl	$r0,$r1,0

9000000000000a58 <ide_init>:

void
ide_init(void) {
9000000000000a58:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000000a5c:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000000a60:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000000a64:	02c08076 	addi.d	$r22,$r3,32(0x20)
  int i;
  for(i=0;i<MAX_IDE;i++) ide_devices[i].valid = 0;
9000000000000a68:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
9000000000000a6c:	50002c00 	b	44(0x2c) # 9000000000000a98 <ide_init+0x40>
9000000000000a70:	1c00442d 	pcaddu12i	$r13,545(0x221)
9000000000000a74:	02ff01ad 	addi.d	$r13,$r13,-64(0xfc0)
9000000000000a78:	28bfb2ce 	ld.w	$r14,$r22,-20(0xfec)
9000000000000a7c:	0281600c 	addi.w	$r12,$r0,88(0x58)
9000000000000a80:	001db1cc 	mul.d	$r12,$r14,$r12
9000000000000a84:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000000a88:	29800180 	st.w	$r0,$r12,0
9000000000000a8c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000000a90:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000000a94:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000000a98:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000000a9c:	0015018d 	move	$r13,$r12
9000000000000aa0:	02800c0c 	addi.w	$r12,$r0,3(0x3)
9000000000000aa4:	67ffcd8d 	bge	$r12,$r13,-52(0x3ffcc) # 9000000000000a70 <ide_init+0x18>
  int devno = DISK0_DEV_NO;
9000000000000aa8:	0280080c 	addi.w	$r12,$r0,2(0x2)
9000000000000aac:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
  assert(devno<MAX_IDE);
9000000000000ab0:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
9000000000000ab4:	0015018d 	move	$r13,$r12
9000000000000ab8:	02800c0c 	addi.w	$r12,$r0,3(0x3)
9000000000000abc:	64001d8d 	bge	$r12,$r13,28(0x1c) # 9000000000000ad8 <ide_init+0x80>
9000000000000ac0:	1c0003a6 	pcaddu12i	$r6,29(0x1d)
9000000000000ac4:	02dae0c6 	addi.d	$r6,$r6,1720(0x6b8)
9000000000000ac8:	02808405 	addi.w	$r5,$r0,33(0x21)
9000000000000acc:	1c0003a4 	pcaddu12i	$r4,29(0x1d)
9000000000000ad0:	02db3084 	addi.d	$r4,$r4,1740(0x6cc)
9000000000000ad4:	54c1ac00 	bl	49580(0xc1ac) # 900000000000cc80 <__panic>
  ramdisk_init_struct(&ide_devices[devno]);
9000000000000ad8:	28bfa2cd 	ld.w	$r13,$r22,-24(0xfe8)
9000000000000adc:	0281600c 	addi.w	$r12,$r0,88(0x58)
9000000000000ae0:	001db1ad 	mul.d	$r13,$r13,$r12
9000000000000ae4:	1c00442c 	pcaddu12i	$r12,545(0x221)
9000000000000ae8:	02fd318c 	addi.d	$r12,$r12,-180(0xf4c)
9000000000000aec:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000000af0:	00150184 	move	$r4,$r12
9000000000000af4:	5407a800 	bl	1960(0x7a8) # 900000000000129c <ramdisk_init_struct>
  if(CHECK_CALL(devno, init))
9000000000000af8:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
9000000000000afc:	60009180 	blt	$r12,$r0,144(0x90) # 9000000000000b8c <ide_init+0x134>
9000000000000b00:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
9000000000000b04:	0015018d 	move	$r13,$r12
9000000000000b08:	02800c0c 	addi.w	$r12,$r0,3(0x3)
9000000000000b0c:	6000818d 	blt	$r12,$r13,128(0x80) # 9000000000000b8c <ide_init+0x134>
9000000000000b10:	1c00442d 	pcaddu12i	$r13,545(0x221)
9000000000000b14:	02fc81ad 	addi.d	$r13,$r13,-224(0xf20)
9000000000000b18:	28bfa2ce 	ld.w	$r14,$r22,-24(0xfe8)
9000000000000b1c:	0281600c 	addi.w	$r12,$r0,88(0x58)
9000000000000b20:	001db1cc 	mul.d	$r12,$r14,$r12
9000000000000b24:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000000b28:	2880018c 	ld.w	$r12,$r12,0
9000000000000b2c:	40006180 	beqz	$r12,96(0x60) # 9000000000000b8c <ide_init+0x134>
9000000000000b30:	1c00442d 	pcaddu12i	$r13,545(0x221)
9000000000000b34:	02fc01ad 	addi.d	$r13,$r13,-256(0xf00)
9000000000000b38:	28bfa2ce 	ld.w	$r14,$r22,-24(0xfe8)
9000000000000b3c:	0281600c 	addi.w	$r12,$r0,88(0x58)
9000000000000b40:	001db1cc 	mul.d	$r12,$r14,$r12
9000000000000b44:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000000b48:	28c1018c 	ld.d	$r12,$r12,64(0x40)
9000000000000b4c:	40004180 	beqz	$r12,64(0x40) # 9000000000000b8c <ide_init+0x134>
    ide_devices[devno].init(&ide_devices[devno]);
9000000000000b50:	1c00442d 	pcaddu12i	$r13,545(0x221)
9000000000000b54:	02fb81ad 	addi.d	$r13,$r13,-288(0xee0)
9000000000000b58:	28bfa2ce 	ld.w	$r14,$r22,-24(0xfe8)
9000000000000b5c:	0281600c 	addi.w	$r12,$r0,88(0x58)
9000000000000b60:	001db1cc 	mul.d	$r12,$r14,$r12
9000000000000b64:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000000b68:	28c1018c 	ld.d	$r12,$r12,64(0x40)
9000000000000b6c:	28bfa2ce 	ld.w	$r14,$r22,-24(0xfe8)
9000000000000b70:	0281600d 	addi.w	$r13,$r0,88(0x58)
9000000000000b74:	001db5ce 	mul.d	$r14,$r14,$r13
9000000000000b78:	1c00442d 	pcaddu12i	$r13,545(0x221)
9000000000000b7c:	02fae1ad 	addi.d	$r13,$r13,-328(0xeb8)
9000000000000b80:	0010b5cd 	add.d	$r13,$r14,$r13
9000000000000b84:	001501a4 	move	$r4,$r13
9000000000000b88:	4c000181 	jirl	$r1,$r12,0

}
9000000000000b8c:	03400000 	andi	$r0,$r0,0x0
9000000000000b90:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000000b94:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000000b98:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000000b9c:	4c000020 	jirl	$r0,$r1,0

9000000000000ba0 <ide_device_valid>:

bool
ide_device_valid(unsigned int ideno) {
9000000000000ba0:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000000ba4:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000000ba8:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000000bac:	0015008c 	move	$r12,$r4
9000000000000bb0:	0040818c 	slli.w	$r12,$r12,0x0
9000000000000bb4:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    return VALID_IDE(ideno);
9000000000000bb8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000000bbc:	0015018d 	move	$r13,$r12
9000000000000bc0:	02800c0c 	addi.w	$r12,$r0,3(0x3)
9000000000000bc4:	68002d8d 	bltu	$r12,$r13,44(0x2c) # 9000000000000bf0 <ide_device_valid+0x50>
9000000000000bc8:	1c00442d 	pcaddu12i	$r13,545(0x221)
9000000000000bcc:	02f9a1ad 	addi.d	$r13,$r13,-408(0xe68)
9000000000000bd0:	2abfb2ce 	ld.wu	$r14,$r22,-20(0xfec)
9000000000000bd4:	0281600c 	addi.w	$r12,$r0,88(0x58)
9000000000000bd8:	001db1cc 	mul.d	$r12,$r14,$r12
9000000000000bdc:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000000be0:	2880018c 	ld.w	$r12,$r12,0
9000000000000be4:	40000d80 	beqz	$r12,12(0xc) # 9000000000000bf0 <ide_device_valid+0x50>
9000000000000be8:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000000bec:	50000800 	b	8(0x8) # 9000000000000bf4 <ide_device_valid+0x54>
9000000000000bf0:	0015000c 	move	$r12,$r0
}
9000000000000bf4:	00150184 	move	$r4,$r12
9000000000000bf8:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000000bfc:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000000c00:	4c000020 	jirl	$r0,$r1,0

9000000000000c04 <ide_device_size>:

size_t
ide_device_size(unsigned int ideno) {
9000000000000c04:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000000c08:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000000c0c:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000000c10:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000000c14:	0015008c 	move	$r12,$r4
9000000000000c18:	0040818c 	slli.w	$r12,$r12,0x0
9000000000000c1c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    if (ide_device_valid(ideno)) {
9000000000000c20:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000000c24:	00150184 	move	$r4,$r12
9000000000000c28:	57ff7bff 	bl	-136(0xfffff78) # 9000000000000ba0 <ide_device_valid>
9000000000000c2c:	0015008c 	move	$r12,$r4
9000000000000c30:	40002980 	beqz	$r12,40(0x28) # 9000000000000c58 <ide_device_size+0x54>
        return ide_devices[ideno].size;
9000000000000c34:	1c00442d 	pcaddu12i	$r13,545(0x221)
9000000000000c38:	02f7f1ad 	addi.d	$r13,$r13,-516(0xdfc)
9000000000000c3c:	2abfb2ce 	ld.wu	$r14,$r22,-20(0xfec)
9000000000000c40:	0281600c 	addi.w	$r12,$r0,88(0x58)
9000000000000c44:	001db1cc 	mul.d	$r12,$r14,$r12
9000000000000c48:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000000c4c:	2880218c 	ld.w	$r12,$r12,8(0x8)
9000000000000c50:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
9000000000000c54:	50000800 	b	8(0x8) # 9000000000000c5c <ide_device_size+0x58>
    }
    return 0;
9000000000000c58:	0015000c 	move	$r12,$r0
}
9000000000000c5c:	00150184 	move	$r4,$r12
9000000000000c60:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000000c64:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000000c68:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000000c6c:	4c000020 	jirl	$r0,$r1,0

9000000000000c70 <ide_read_secs>:

int
ide_read_secs(unsigned int ideno, uint32_t secno, void *dst, size_t nsecs) {
9000000000000c70:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000000c74:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000000c78:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000000c7c:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000000c80:	0015008d 	move	$r13,$r4
9000000000000c84:	001500ac 	move	$r12,$r5
9000000000000c88:	29ff82c6 	st.d	$r6,$r22,-32(0xfe0)
9000000000000c8c:	29ff62c7 	st.d	$r7,$r22,-40(0xfd8)
9000000000000c90:	004081ad 	slli.w	$r13,$r13,0x0
9000000000000c94:	29bfb2cd 	st.w	$r13,$r22,-20(0xfec)
9000000000000c98:	0040818c 	slli.w	$r12,$r12,0x0
9000000000000c9c:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
  if(CHECK_CALL(ideno, read_secs))
9000000000000ca0:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000000ca4:	0015018d 	move	$r13,$r12
9000000000000ca8:	02800c0c 	addi.w	$r12,$r0,3(0x3)
9000000000000cac:	6800998d 	bltu	$r12,$r13,152(0x98) # 9000000000000d44 <ide_read_secs+0xd4>
9000000000000cb0:	1c00442d 	pcaddu12i	$r13,545(0x221)
9000000000000cb4:	02f601ad 	addi.d	$r13,$r13,-640(0xd80)
9000000000000cb8:	2abfb2ce 	ld.wu	$r14,$r22,-20(0xfec)
9000000000000cbc:	0281600c 	addi.w	$r12,$r0,88(0x58)
9000000000000cc0:	001db1cc 	mul.d	$r12,$r14,$r12
9000000000000cc4:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000000cc8:	2880018c 	ld.w	$r12,$r12,0
9000000000000ccc:	40007980 	beqz	$r12,120(0x78) # 9000000000000d44 <ide_read_secs+0xd4>
9000000000000cd0:	1c00442d 	pcaddu12i	$r13,545(0x221)
9000000000000cd4:	02f581ad 	addi.d	$r13,$r13,-672(0xd60)
9000000000000cd8:	2abfb2ce 	ld.wu	$r14,$r22,-20(0xfec)
9000000000000cdc:	0281600c 	addi.w	$r12,$r0,88(0x58)
9000000000000ce0:	001db1cc 	mul.d	$r12,$r14,$r12
9000000000000ce4:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000000ce8:	28c1218c 	ld.d	$r12,$r12,72(0x48)
9000000000000cec:	40005980 	beqz	$r12,88(0x58) # 9000000000000d44 <ide_read_secs+0xd4>
    return ide_devices[ideno].read_secs(&ide_devices[ideno], secno, dst, nsecs);
9000000000000cf0:	1c00442d 	pcaddu12i	$r13,545(0x221)
9000000000000cf4:	02f501ad 	addi.d	$r13,$r13,-704(0xd40)
9000000000000cf8:	2abfb2ce 	ld.wu	$r14,$r22,-20(0xfec)
9000000000000cfc:	0281600c 	addi.w	$r12,$r0,88(0x58)
9000000000000d00:	001db1cc 	mul.d	$r12,$r14,$r12
9000000000000d04:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000000d08:	28c1218c 	ld.d	$r12,$r12,72(0x48)
9000000000000d0c:	2abfb2ce 	ld.wu	$r14,$r22,-20(0xfec)
9000000000000d10:	0281600d 	addi.w	$r13,$r0,88(0x58)
9000000000000d14:	001db5ce 	mul.d	$r14,$r14,$r13
9000000000000d18:	1c00442d 	pcaddu12i	$r13,545(0x221)
9000000000000d1c:	02f461ad 	addi.d	$r13,$r13,-744(0xd18)
9000000000000d20:	0010b5cd 	add.d	$r13,$r14,$r13
9000000000000d24:	2abfa2ce 	ld.wu	$r14,$r22,-24(0xfe8)
9000000000000d28:	28ff62c7 	ld.d	$r7,$r22,-40(0xfd8)
9000000000000d2c:	28ff82c6 	ld.d	$r6,$r22,-32(0xfe0)
9000000000000d30:	001501c5 	move	$r5,$r14
9000000000000d34:	001501a4 	move	$r4,$r13
9000000000000d38:	4c000181 	jirl	$r1,$r12,0
9000000000000d3c:	0015008c 	move	$r12,$r4
9000000000000d40:	50000800 	b	8(0x8) # 9000000000000d48 <ide_read_secs+0xd8>
  return 0;
9000000000000d44:	0015000c 	move	$r12,$r0
}
9000000000000d48:	00150184 	move	$r4,$r12
9000000000000d4c:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000000d50:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000000d54:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000000d58:	4c000020 	jirl	$r0,$r1,0

9000000000000d5c <ide_write_secs>:

int
ide_write_secs(unsigned int ideno, uint32_t secno, const void *src, size_t nsecs) {
9000000000000d5c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000000d60:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000000d64:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000000d68:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000000d6c:	0015008d 	move	$r13,$r4
9000000000000d70:	001500ac 	move	$r12,$r5
9000000000000d74:	29ff82c6 	st.d	$r6,$r22,-32(0xfe0)
9000000000000d78:	29ff62c7 	st.d	$r7,$r22,-40(0xfd8)
9000000000000d7c:	004081ad 	slli.w	$r13,$r13,0x0
9000000000000d80:	29bfb2cd 	st.w	$r13,$r22,-20(0xfec)
9000000000000d84:	0040818c 	slli.w	$r12,$r12,0x0
9000000000000d88:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
  if(CHECK_CALL(ideno, write_secs))
9000000000000d8c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000000d90:	0015018d 	move	$r13,$r12
9000000000000d94:	02800c0c 	addi.w	$r12,$r0,3(0x3)
9000000000000d98:	6800998d 	bltu	$r12,$r13,152(0x98) # 9000000000000e30 <ide_write_secs+0xd4>
9000000000000d9c:	1c00442d 	pcaddu12i	$r13,545(0x221)
9000000000000da0:	02f251ad 	addi.d	$r13,$r13,-876(0xc94)
9000000000000da4:	2abfb2ce 	ld.wu	$r14,$r22,-20(0xfec)
9000000000000da8:	0281600c 	addi.w	$r12,$r0,88(0x58)
9000000000000dac:	001db1cc 	mul.d	$r12,$r14,$r12
9000000000000db0:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000000db4:	2880018c 	ld.w	$r12,$r12,0
9000000000000db8:	40007980 	beqz	$r12,120(0x78) # 9000000000000e30 <ide_write_secs+0xd4>
9000000000000dbc:	1c00442d 	pcaddu12i	$r13,545(0x221)
9000000000000dc0:	02f1d1ad 	addi.d	$r13,$r13,-908(0xc74)
9000000000000dc4:	2abfb2ce 	ld.wu	$r14,$r22,-20(0xfec)
9000000000000dc8:	0281600c 	addi.w	$r12,$r0,88(0x58)
9000000000000dcc:	001db1cc 	mul.d	$r12,$r14,$r12
9000000000000dd0:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000000dd4:	28c1418c 	ld.d	$r12,$r12,80(0x50)
9000000000000dd8:	40005980 	beqz	$r12,88(0x58) # 9000000000000e30 <ide_write_secs+0xd4>
    return ide_devices[ideno].write_secs(&ide_devices[ideno], secno, src, nsecs);
9000000000000ddc:	1c00442d 	pcaddu12i	$r13,545(0x221)
9000000000000de0:	02f151ad 	addi.d	$r13,$r13,-940(0xc54)
9000000000000de4:	2abfb2ce 	ld.wu	$r14,$r22,-20(0xfec)
9000000000000de8:	0281600c 	addi.w	$r12,$r0,88(0x58)
9000000000000dec:	001db1cc 	mul.d	$r12,$r14,$r12
9000000000000df0:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000000df4:	28c1418c 	ld.d	$r12,$r12,80(0x50)
9000000000000df8:	2abfb2ce 	ld.wu	$r14,$r22,-20(0xfec)
9000000000000dfc:	0281600d 	addi.w	$r13,$r0,88(0x58)
9000000000000e00:	001db5ce 	mul.d	$r14,$r14,$r13
9000000000000e04:	1c00442d 	pcaddu12i	$r13,545(0x221)
9000000000000e08:	02f0b1ad 	addi.d	$r13,$r13,-980(0xc2c)
9000000000000e0c:	0010b5cd 	add.d	$r13,$r14,$r13
9000000000000e10:	2abfa2ce 	ld.wu	$r14,$r22,-24(0xfe8)
9000000000000e14:	28ff62c7 	ld.d	$r7,$r22,-40(0xfd8)
9000000000000e18:	28ff82c6 	ld.d	$r6,$r22,-32(0xfe0)
9000000000000e1c:	001501c5 	move	$r5,$r14
9000000000000e20:	001501a4 	move	$r4,$r13
9000000000000e24:	4c000181 	jirl	$r1,$r12,0
9000000000000e28:	0015008c 	move	$r12,$r4
9000000000000e2c:	50000800 	b	8(0x8) # 9000000000000e34 <ide_write_secs+0xd8>
  return 0;
9000000000000e30:	0015000c 	move	$r12,$r0
}
9000000000000e34:	00150184 	move	$r4,$r12
9000000000000e38:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000000e3c:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000000e40:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000000e44:	4c000020 	jirl	$r0,$r1,0

9000000000000e48 <intr_enable>:
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
9000000000000e48:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000000000e4c:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000000000e50:	02c04076 	addi.d	$r22,$r3,16(0x10)
	__csrxchg(LISA_CSR_CRMD_IE, LISA_CSR_CRMD_IE, LISA_CSR_CRMD);
9000000000000e54:	0280100c 	addi.w	$r12,$r0,4(0x4)
9000000000000e58:	0280100d 	addi.w	$r13,$r0,4(0x4)
9000000000000e5c:	040001ac 	csrxchg	$r12,$r13,0x0
}
9000000000000e60:	03400000 	andi	$r0,$r0,0x0
9000000000000e64:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000000000e68:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000000000e6c:	4c000020 	jirl	$r0,$r1,0

9000000000000e70 <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
9000000000000e70:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000000000e74:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000000000e78:	02c04076 	addi.d	$r22,$r3,16(0x10)
	__csrxchg(0, LISA_CSR_CRMD_IE, LISA_CSR_CRMD);
9000000000000e7c:	0015000d 	move	$r13,$r0
9000000000000e80:	0280100c 	addi.w	$r12,$r0,4(0x4)
9000000000000e84:	0400018d 	csrxchg	$r13,$r12,0x0
}
9000000000000e88:	03400000 	andi	$r0,$r0,0x0
9000000000000e8c:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000000000e90:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000000000e94:	4c000020 	jirl	$r0,$r1,0

9000000000000e98 <clear_csr_excfg>:
	return res;						\
}

#define __BUILD_CSR_OP(name)	__BUILD_CSR_COMMON(csr_##name)

__BUILD_CSR_OP(excfg)
9000000000000e98:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000000e9c:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000000ea0:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000000ea4:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000000ea8:	0400100c 	csrrd	$r12,0x4
9000000000000eac:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
9000000000000eb0:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000000eb4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000000eb8:	0014300c 	nor	$r12,$r0,$r12
9000000000000ebc:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000000ec0:	0014b1ac 	and	$r12,$r13,$r12
9000000000000ec4:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000000ec8:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
9000000000000ecc:	0400102c 	csrwr	$r12,0x4
9000000000000ed0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000000ed4:	00150184 	move	$r4,$r12
9000000000000ed8:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000000edc:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000000ee0:	4c000020 	jirl	$r0,$r1,0

9000000000000ee4 <pic_enable>:

static bool did_init = 0;


void
pic_enable(unsigned int irq) {
9000000000000ee4:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000000ee8:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000000eec:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000000ef0:	0015008c 	move	$r12,$r4
9000000000000ef4:	0040818c 	slli.w	$r12,$r12,0x0
9000000000000ef8:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
    //assert(irq < 13);
    uint32_t sr = read_csr_excfg();
9000000000000efc:	0400100c 	csrrd	$r12,0x4
9000000000000f00:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    sr |= 1<<irq;
9000000000000f04:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000000f08:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000000f0c:	001731ac 	sll.w	$r12,$r13,$r12
9000000000000f10:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
9000000000000f14:	001531ac 	or	$r12,$r13,$r12
9000000000000f18:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    write_csr_excfg(sr);
9000000000000f1c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000000f20:	0400102c 	csrwr	$r12,0x4
}
9000000000000f24:	03400000 	andi	$r0,$r0,0x0
9000000000000f28:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000000f2c:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000000f30:	4c000020 	jirl	$r0,$r1,0

9000000000000f34 <pic_disable>:

void pic_disable(unsigned int irq){
9000000000000f34:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000000f38:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000000f3c:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000000f40:	0015008c 	move	$r12,$r4
9000000000000f44:	0040818c 	slli.w	$r12,$r12,0x0
9000000000000f48:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
    //assert(irq < 13);
    uint32_t sr = read_csr_excfg();
9000000000000f4c:	0400100c 	csrrd	$r12,0x4
9000000000000f50:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    sr &= ~(1<<irq);
9000000000000f54:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000000f58:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000000f5c:	001731ac 	sll.w	$r12,$r13,$r12
9000000000000f60:	0014300c 	nor	$r12,$r0,$r12
9000000000000f64:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
9000000000000f68:	0014b1ac 	and	$r12,$r13,$r12
9000000000000f6c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    write_csr_excfg(sr);
9000000000000f70:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000000f74:	0400102c 	csrwr	$r12,0x4
}
9000000000000f78:	03400000 	andi	$r0,$r0,0x0
9000000000000f7c:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000000f80:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000000f84:	4c000020 	jirl	$r0,$r1,0

9000000000000f88 <pic_init>:

void
pic_init(void) {
9000000000000f88:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000000000f8c:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000000000f90:	29c00076 	st.d	$r22,$r3,0
9000000000000f94:	02c04076 	addi.d	$r22,$r3,16(0x10)
    clear_csr_excfg(ECFG0_IM);
9000000000000f98:	14000e2c 	lu12i.w	$r12,113(0x71)
9000000000000f9c:	03bffd84 	ori	$r4,$r12,0xfff
9000000000000fa0:	57fefbff 	bl	-264(0xffffef8) # 9000000000000e98 <clear_csr_excfg>
    did_init = 1;
9000000000000fa4:	1c00442c 	pcaddu12i	$r12,545(0x221)
9000000000000fa8:	02efb18c 	addi.d	$r12,$r12,-1044(0xbec)
9000000000000fac:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000000fb0:	2980018d 	st.w	$r13,$r12,0
}
9000000000000fb4:	03400000 	andi	$r0,$r0,0x0
9000000000000fb8:	28c02061 	ld.d	$r1,$r3,8(0x8)
9000000000000fbc:	28c00076 	ld.d	$r22,$r3,0
9000000000000fc0:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000000000fc4:	4c000020 	jirl	$r0,$r1,0

9000000000000fc8 <fence_i>:
static void fence_i(void *va_start, int size) {
9000000000000fc8:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000000fcc:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000000fd0:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000000fd4:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000000fd8:	001500ac 	move	$r12,$r5
9000000000000fdc:	0040818c 	slli.w	$r12,$r12,0x0
9000000000000fe0:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
9000000000000fe4:	38720000 	dbar	0x0
    void *va_end = va_start + size;
9000000000000fe8:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000000fec:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000000ff0:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000000ff4:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
9000000000000ff8:	50002000 	b	32(0x20) # 9000000000001018 <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
9000000000000ffc:	06000189 	cacop	0x9,$r12,0
9000000000001000:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
9000000000001004:	06000188 	cacop	0x8,$r12,0
9000000000001008:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
900000000000100c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000001010:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000001014:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
9000000000001018:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000101c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000001020:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 9000000000000ffc <fence_i+0x34>
9000000000001024:	38728000 	ibar	0x0
}
9000000000001028:	03400000 	andi	$r0,$r0,0x0
900000000000102c:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000001030:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000001034:	4c000020 	jirl	$r0,$r1,0

9000000000001038 <check_initrd>:

#define MIN(x,y) (((x)<(y))?(x):(y))

//char initrd_begin[], initrd_end[];

bool check_initrd(){
9000000000001038:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000000103c:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000000001040:	29c00076 	st.d	$r22,$r3,0
9000000000001044:	02c04076 	addi.d	$r22,$r3,16(0x10)
#ifndef LAB8_EX2
  return 1;
#else
  if(_initrd_begin == _initrd_end){
9000000000001048:	1c00440d 	pcaddu12i	$r13,544(0x220)
900000000000104c:	28db81ad 	ld.d	$r13,$r13,1760(0x6e0)
9000000000001050:	1c00440c 	pcaddu12i	$r12,544(0x220)
9000000000001054:	28dd218c 	ld.d	$r12,$r12,1864(0x748)
9000000000001058:	5c0019ac 	bne	$r13,$r12,24(0x18) # 9000000000001070 <check_initrd+0x38>
    kprintf("Warning: No Initrd!\n");
900000000000105c:	1c0003a4 	pcaddu12i	$r4,29(0x1d)
9000000000001060:	02c55084 	addi.d	$r4,$r4,340(0x154)
9000000000001064:	542db800 	bl	11704(0x2db8) # 9000000000003e1c <kprintf>
    return 0;
9000000000001068:	0015000c 	move	$r12,$r0
900000000000106c:	50009c00 	b	156(0x9c) # 9000000000001108 <check_initrd+0xd0>
  }
  kprintf("Initrd: 0x%08x - 0x%08x, size: 0x%08x, magic: 0x%02x%02x%02x%02x\n", 
9000000000001070:	1c00440c 	pcaddu12i	$r12,544(0x220)
9000000000001074:	28dca18c 	ld.d	$r12,$r12,1832(0x728)
9000000000001078:	02fffd8e 	addi.d	$r14,$r12,-1(0xfff)
900000000000107c:	1c00440d 	pcaddu12i	$r13,544(0x220)
9000000000001080:	28dc71ad 	ld.d	$r13,$r13,1820(0x71c)
9000000000001084:	1c00440c 	pcaddu12i	$r12,544(0x220)
9000000000001088:	28da918c 	ld.d	$r12,$r12,1700(0x6a4)
900000000000108c:	0011b1ad 	sub.d	$r13,$r13,$r12
      _initrd_begin, _initrd_end-1, _initrd_end - _initrd_begin,
      *(uint8_t*)(_initrd_begin+3), *(uint8_t*)(_initrd_begin+2), 
9000000000001090:	1c00440c 	pcaddu12i	$r12,544(0x220)
9000000000001094:	28da618c 	ld.d	$r12,$r12,1688(0x698)
9000000000001098:	02c00d8c 	addi.d	$r12,$r12,3(0x3)
900000000000109c:	2a00018c 	ld.bu	$r12,$r12,0
  kprintf("Initrd: 0x%08x - 0x%08x, size: 0x%08x, magic: 0x%02x%02x%02x%02x\n", 
90000000000010a0:	0015018f 	move	$r15,$r12
      *(uint8_t*)(_initrd_begin+3), *(uint8_t*)(_initrd_begin+2), 
90000000000010a4:	1c00440c 	pcaddu12i	$r12,544(0x220)
90000000000010a8:	28da118c 	ld.d	$r12,$r12,1668(0x684)
90000000000010ac:	02c0098c 	addi.d	$r12,$r12,2(0x2)
90000000000010b0:	2a00018c 	ld.bu	$r12,$r12,0
  kprintf("Initrd: 0x%08x - 0x%08x, size: 0x%08x, magic: 0x%02x%02x%02x%02x\n", 
90000000000010b4:	00150190 	move	$r16,$r12
      *(uint8_t*)(_initrd_begin+1), *(uint8_t*)_initrd_begin);
90000000000010b8:	1c00440c 	pcaddu12i	$r12,544(0x220)
90000000000010bc:	28d9c18c 	ld.d	$r12,$r12,1648(0x670)
90000000000010c0:	02c0058c 	addi.d	$r12,$r12,1(0x1)
90000000000010c4:	2a00018c 	ld.bu	$r12,$r12,0
  kprintf("Initrd: 0x%08x - 0x%08x, size: 0x%08x, magic: 0x%02x%02x%02x%02x\n", 
90000000000010c8:	00150191 	move	$r17,$r12
      *(uint8_t*)(_initrd_begin+1), *(uint8_t*)_initrd_begin);
90000000000010cc:	1c00440c 	pcaddu12i	$r12,544(0x220)
90000000000010d0:	28d9718c 	ld.d	$r12,$r12,1628(0x65c)
90000000000010d4:	2a00018c 	ld.bu	$r12,$r12,0
  kprintf("Initrd: 0x%08x - 0x%08x, size: 0x%08x, magic: 0x%02x%02x%02x%02x\n", 
90000000000010d8:	0015018b 	move	$r11,$r12
90000000000010dc:	0015022a 	move	$r10,$r17
90000000000010e0:	00150209 	move	$r9,$r16
90000000000010e4:	001501e8 	move	$r8,$r15
90000000000010e8:	001501a7 	move	$r7,$r13
90000000000010ec:	001501c6 	move	$r6,$r14
90000000000010f0:	1c004405 	pcaddu12i	$r5,544(0x220)
90000000000010f4:	28d8e0a5 	ld.d	$r5,$r5,1592(0x638)
90000000000010f8:	1c0003a4 	pcaddu12i	$r4,29(0x1d)
90000000000010fc:	02c34084 	addi.d	$r4,$r4,208(0xd0)
9000000000001100:	542d1c00 	bl	11548(0x2d1c) # 9000000000003e1c <kprintf>
  return 1;
9000000000001104:	0280040c 	addi.w	$r12,$r0,1(0x1)
#endif
}
9000000000001108:	00150184 	move	$r4,$r12
900000000000110c:	28c02061 	ld.d	$r1,$r3,8(0x8)
9000000000001110:	28c00076 	ld.d	$r22,$r3,0
9000000000001114:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000000001118:	4c000020 	jirl	$r0,$r1,0

900000000000111c <ramdisk_read>:


static int ramdisk_read(struct ide_device* dev, size_t secno, void *dst, size_t nsecs)
{
900000000000111c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000001120:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000001124:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000001128:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000112c:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
9000000000001130:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
9000000000001134:	29ff62c6 	st.d	$r6,$r22,-40(0xfd8)
9000000000001138:	29ff42c7 	st.d	$r7,$r22,-48(0xfd0)
  nsecs = MIN(nsecs, dev->size-secno);
900000000000113c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000001140:	2880218c 	ld.w	$r12,$r12,8(0x8)
9000000000001144:	00df018d 	bstrpick.d	$r13,$r12,0x1f,0x0
9000000000001148:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000114c:	0011b1ac 	sub.d	$r12,$r13,$r12
9000000000001150:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000001154:	28ff42ce 	ld.d	$r14,$r22,-48(0xfd0)
9000000000001158:	0012b58d 	sltu	$r13,$r12,$r13
900000000000115c:	0013b5ce 	masknez	$r14,$r14,$r13
9000000000001160:	0013358c 	maskeqz	$r12,$r12,$r13
9000000000001164:	001531cc 	or	$r12,$r14,$r12
9000000000001168:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
  if(nsecs<0)
    return -1;
  memcpy(dst, (void*)(dev->iobase+secno*SECTSIZE), nsecs*SECTSIZE); 
900000000000116c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000001170:	28c0418d 	ld.d	$r13,$r12,16(0x10)
9000000000001174:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000001178:	0041258c 	slli.d	$r12,$r12,0x9
900000000000117c:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000001180:	0015018d 	move	$r13,$r12
9000000000001184:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000001188:	0041258c 	slli.d	$r12,$r12,0x9
900000000000118c:	00150186 	move	$r6,$r12
9000000000001190:	001501a5 	move	$r5,$r13
9000000000001194:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000001198:	5433ec00 	bl	13292(0x33ec) # 9000000000004584 <memcpy>
  return 0;
900000000000119c:	0015000c 	move	$r12,$r0
}
90000000000011a0:	00150184 	move	$r4,$r12
90000000000011a4:	28c0a061 	ld.d	$r1,$r3,40(0x28)
90000000000011a8:	28c08076 	ld.d	$r22,$r3,32(0x20)
90000000000011ac:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000000011b0:	4c000020 	jirl	$r0,$r1,0

90000000000011b4 <ramdisk_write>:

static int ramdisk_write(struct ide_device* dev, size_t secno,const  void *src, size_t nsecs)
{
90000000000011b4:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000000011b8:	29c0a061 	st.d	$r1,$r3,40(0x28)
90000000000011bc:	29c08076 	st.d	$r22,$r3,32(0x20)
90000000000011c0:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000000011c4:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
90000000000011c8:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
90000000000011cc:	29ff62c6 	st.d	$r6,$r22,-40(0xfd8)
90000000000011d0:	29ff42c7 	st.d	$r7,$r22,-48(0xfd0)
  //kprintf("%08x(%d) %08x(%d)\n", dev->size, dev->size, secno, secno);
  nsecs = MIN(nsecs, dev->size-secno);
90000000000011d4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000011d8:	2880218c 	ld.w	$r12,$r12,8(0x8)
90000000000011dc:	00df018d 	bstrpick.d	$r13,$r12,0x1f,0x0
90000000000011e0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000011e4:	0011b1ac 	sub.d	$r12,$r13,$r12
90000000000011e8:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
90000000000011ec:	28ff42ce 	ld.d	$r14,$r22,-48(0xfd0)
90000000000011f0:	0012b58d 	sltu	$r13,$r12,$r13
90000000000011f4:	0013b5ce 	masknez	$r14,$r14,$r13
90000000000011f8:	0013358c 	maskeqz	$r12,$r12,$r13
90000000000011fc:	001531cc 	or	$r12,$r14,$r12
9000000000001200:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
  if(nsecs<0)
    return -1;
  memcpy( (void*)(dev->iobase+secno*SECTSIZE),src, nsecs*SECTSIZE); 
9000000000001204:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000001208:	28c0418d 	ld.d	$r13,$r12,16(0x10)
900000000000120c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000001210:	0041258c 	slli.d	$r12,$r12,0x9
9000000000001214:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000001218:	0015018d 	move	$r13,$r12
900000000000121c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000001220:	0041258c 	slli.d	$r12,$r12,0x9
9000000000001224:	00150186 	move	$r6,$r12
9000000000001228:	28ff62c5 	ld.d	$r5,$r22,-40(0xfd8)
900000000000122c:	001501a4 	move	$r4,$r13
9000000000001230:	54335400 	bl	13140(0x3354) # 9000000000004584 <memcpy>
  return 0;
9000000000001234:	0015000c 	move	$r12,$r0
}
9000000000001238:	00150184 	move	$r4,$r12
900000000000123c:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000001240:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000001244:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000001248:	4c000020 	jirl	$r0,$r1,0

900000000000124c <ramdisk_init>:

static void ramdisk_init(struct ide_device* dev){
900000000000124c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000001250:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000001254:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000001258:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000000125c:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
  kprintf("ramdisk_init(): initrd found, magic: 0x%08x, 0x%08x secs\n", *(uint32_t*)(dev->iobase), dev->size);
9000000000001260:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000001264:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000001268:	2880018d 	ld.w	$r13,$r12,0
900000000000126c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000001270:	2880218c 	ld.w	$r12,$r12,8(0x8)
9000000000001274:	00150186 	move	$r6,$r12
9000000000001278:	001501a5 	move	$r5,$r13
900000000000127c:	1c0003a4 	pcaddu12i	$r4,29(0x1d)
9000000000001280:	02fe5084 	addi.d	$r4,$r4,-108(0xf94)
9000000000001284:	542b9800 	bl	11160(0x2b98) # 9000000000003e1c <kprintf>

}
9000000000001288:	03400000 	andi	$r0,$r0,0x0
900000000000128c:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000001290:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000001294:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000001298:	4c000020 	jirl	$r0,$r1,0

900000000000129c <ramdisk_init_struct>:


void ramdisk_init_struct(struct ide_device* dev)
{
900000000000129c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000000012a0:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000000012a4:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000000012a8:	02c08076 	addi.d	$r22,$r3,32(0x20)
90000000000012ac:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
  memset(dev, 0, sizeof(struct ide_device));
90000000000012b0:	02816006 	addi.w	$r6,$r0,88(0x58)
90000000000012b4:	00150005 	move	$r5,$r0
90000000000012b8:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
90000000000012bc:	54326400 	bl	12900(0x3264) # 9000000000004520 <memset>
  assert(INITRD_SIZE()%SECTSIZE == 0);
90000000000012c0:	1c00440d 	pcaddu12i	$r13,544(0x220)
90000000000012c4:	28d361ad 	ld.d	$r13,$r13,1240(0x4d8)
90000000000012c8:	1c00440c 	pcaddu12i	$r12,544(0x220)
90000000000012cc:	28d1818c 	ld.d	$r12,$r12,1120(0x460)
90000000000012d0:	0011b1ac 	sub.d	$r12,$r13,$r12
90000000000012d4:	0347fd8c 	andi	$r12,$r12,0x1ff
90000000000012d8:	40001d80 	beqz	$r12,28(0x1c) # 90000000000012f4 <ramdisk_init_struct+0x58>
90000000000012dc:	1c0003a6 	pcaddu12i	$r6,29(0x1d)
90000000000012e0:	02fdd0c6 	addi.d	$r6,$r6,-140(0xf74)
90000000000012e4:	02813005 	addi.w	$r5,$r0,76(0x4c)
90000000000012e8:	1c0003a4 	pcaddu12i	$r4,29(0x1d)
90000000000012ec:	02fe6084 	addi.d	$r4,$r4,-104(0xf98)
90000000000012f0:	54b99000 	bl	47504(0xb990) # 900000000000cc80 <__panic>
#ifdef LAB8_EX2
  if(CHECK_INITRD_EXIST()){
90000000000012f4:	1c00440d 	pcaddu12i	$r13,544(0x220)
90000000000012f8:	28d291ad 	ld.d	$r13,$r13,1188(0x4a4)
90000000000012fc:	1c00440c 	pcaddu12i	$r12,544(0x220)
9000000000001300:	28d0b18c 	ld.d	$r12,$r12,1068(0x42c)
9000000000001304:	5800b1ac 	beq	$r13,$r12,176(0xb0) # 90000000000013b4 <ramdisk_init_struct+0x118>
    dev->valid = 1;
9000000000001308:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000130c:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000001310:	2980018d 	st.w	$r13,$r12,0
    dev->sets = ~0;
9000000000001314:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000001318:	02bffc0d 	addi.w	$r13,$r0,-1(0xfff)
900000000000131c:	2980118d 	st.w	$r13,$r12,4(0x4)
    dev->size = INITRD_SIZE()/SECTSIZE;
9000000000001320:	1c00440d 	pcaddu12i	$r13,544(0x220)
9000000000001324:	28d1e1ad 	ld.d	$r13,$r13,1144(0x478)
9000000000001328:	1c00440c 	pcaddu12i	$r12,544(0x220)
900000000000132c:	28d0018c 	ld.d	$r12,$r12,1024(0x400)
9000000000001330:	0011b1ac 	sub.d	$r12,$r13,$r12
9000000000001334:	02c7fd8e 	addi.d	$r14,$r12,511(0x1ff)
9000000000001338:	0200018d 	slti	$r13,$r12,0
900000000000133c:	001335ce 	maskeqz	$r14,$r14,$r13
9000000000001340:	0013b58c 	masknez	$r12,$r12,$r13
9000000000001344:	001531cc 	or	$r12,$r14,$r12
9000000000001348:	0049258c 	srai.d	$r12,$r12,0x9
900000000000134c:	0040818c 	slli.w	$r12,$r12,0x0
9000000000001350:	0015018d 	move	$r13,$r12
9000000000001354:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000001358:	2980218d 	st.w	$r13,$r12,8(0x8)
    dev->iobase = (uintptr_t)_initrd_begin;
900000000000135c:	1c00440d 	pcaddu12i	$r13,544(0x220)
9000000000001360:	28cf31ad 	ld.d	$r13,$r13,972(0x3cc)
9000000000001364:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000001368:	29c0418d 	st.d	$r13,$r12,16(0x10)
    strcpy(dev->model, "KERN_INITRD");
900000000000136c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000001370:	02c0818c 	addi.d	$r12,$r12,32(0x20)
9000000000001374:	1c0003a5 	pcaddu12i	$r5,29(0x1d)
9000000000001378:	02fc90a5 	addi.d	$r5,$r5,-220(0xf24)
900000000000137c:	00150184 	move	$r4,$r12
9000000000001380:	542ed400 	bl	11988(0x2ed4) # 9000000000004254 <strcpy>
    dev->init = ramdisk_init;
9000000000001384:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000001388:	1c00000d 	pcaddu12i	$r13,0
900000000000138c:	02fb11ad 	addi.d	$r13,$r13,-316(0xec4)
9000000000001390:	29c1018d 	st.d	$r13,$r12,64(0x40)
    dev->read_secs = ramdisk_read;
9000000000001394:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000001398:	1c00000d 	pcaddu12i	$r13,0
900000000000139c:	02f611ad 	addi.d	$r13,$r13,-636(0xd84)
90000000000013a0:	29c1218d 	st.d	$r13,$r12,72(0x48)
    dev->write_secs = ramdisk_write;
90000000000013a4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000013a8:	1c00000d 	pcaddu12i	$r13,0
90000000000013ac:	02f831ad 	addi.d	$r13,$r13,-500(0xe0c)
90000000000013b0:	29c1418d 	st.d	$r13,$r12,80(0x50)
  }
#endif
}
90000000000013b4:	03400000 	andi	$r0,$r0,0x0
90000000000013b8:	28c06061 	ld.d	$r1,$r3,24(0x18)
90000000000013bc:	28c04076 	ld.d	$r22,$r3,16(0x10)
90000000000013c0:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000000013c4:	4c000020 	jirl	$r0,$r1,0

90000000000013c8 <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
90000000000013c8:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000000013cc:	29c0a076 	st.d	$r22,$r3,40(0x28)
90000000000013d0:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000000013d4:	0015008d 	move	$r13,$r4
90000000000013d8:	001500ac 	move	$r12,$r5
90000000000013dc:	004081ad 	slli.w	$r13,$r13,0x0
90000000000013e0:	29bf72cd 	st.w	$r13,$r22,-36(0xfdc)
90000000000013e4:	0040818c 	slli.w	$r12,$r12,0x0
90000000000013e8:	29bf62cc 	st.w	$r12,$r22,-40(0xfd8)
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
90000000000013ec:	28bf72cd 	ld.w	$r13,$r22,-36(0xfdc)
90000000000013f0:	153c6e0c 	lu12i.w	$r12,-400528(0x9e370)
90000000000013f4:	0380058c 	ori	$r12,$r12,0x1
90000000000013f8:	001c31ac 	mul.w	$r12,$r13,$r12
90000000000013fc:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    return (hash >> (32 - bits));
9000000000001400:	0280800d 	addi.w	$r13,$r0,32(0x20)
9000000000001404:	28bf62cc 	ld.w	$r12,$r22,-40(0xfd8)
9000000000001408:	001131ac 	sub.w	$r12,$r13,$r12
900000000000140c:	0040818d 	slli.w	$r13,$r12,0x0
9000000000001410:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000001414:	0017b58c 	srl.w	$r12,$r12,$r13
}
9000000000001418:	00150184 	move	$r4,$r12
900000000000141c:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000001420:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000001424:	4c000020 	jirl	$r0,$r1,0

9000000000001428 <__mulu10>:
{
9000000000001428:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000142c:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000001430:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000001434:	0015008c 	move	$r12,$r4
9000000000001438:	0040818c 	slli.w	$r12,$r12,0x0
900000000000143c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    return (n<<3)+(n<<1);
9000000000001440:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000001444:	00408d8c 	slli.w	$r12,$r12,0x3
9000000000001448:	0015018d 	move	$r13,$r12
900000000000144c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000001450:	0040858c 	slli.w	$r12,$r12,0x1
9000000000001454:	001031ac 	add.w	$r12,$r13,$r12
}
9000000000001458:	00150184 	move	$r4,$r12
900000000000145c:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000001460:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000001464:	4c000020 	jirl	$r0,$r1,0

9000000000001468 <__divu10>:
static inline unsigned int __divu10(unsigned int n) {
9000000000001468:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000146c:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000001470:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000001474:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000001478:	0015008c 	move	$r12,$r4
900000000000147c:	0040818c 	slli.w	$r12,$r12,0x0
9000000000001480:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
    q = (n >> 1) + (n >> 2);
9000000000001484:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000001488:	0044858c 	srli.w	$r12,$r12,0x1
900000000000148c:	0015018d 	move	$r13,$r12
9000000000001490:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000001494:	0044898c 	srli.w	$r12,$r12,0x2
9000000000001498:	001031ac 	add.w	$r12,$r13,$r12
900000000000149c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    q = q + (q >> 4);
90000000000014a0:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000014a4:	0044918c 	srli.w	$r12,$r12,0x4
90000000000014a8:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
90000000000014ac:	001031ac 	add.w	$r12,$r13,$r12
90000000000014b0:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    q = q + (q >> 8);
90000000000014b4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000014b8:	0044a18c 	srli.w	$r12,$r12,0x8
90000000000014bc:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
90000000000014c0:	001031ac 	add.w	$r12,$r13,$r12
90000000000014c4:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    q = q + (q >> 16);
90000000000014c8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000014cc:	0044c18c 	srli.w	$r12,$r12,0x10
90000000000014d0:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
90000000000014d4:	001031ac 	add.w	$r12,$r13,$r12
90000000000014d8:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    q = q >> 3;
90000000000014dc:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000014e0:	00448d8c 	srli.w	$r12,$r12,0x3
90000000000014e4:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    r = n - __mulu10(q);
90000000000014e8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000014ec:	00150184 	move	$r4,$r12
90000000000014f0:	57ff3bff 	bl	-200(0xfffff38) # 9000000000001428 <__mulu10>
90000000000014f4:	0015008c 	move	$r12,$r4
90000000000014f8:	28bf72cd 	ld.w	$r13,$r22,-36(0xfdc)
90000000000014fc:	001131ac 	sub.w	$r12,$r13,$r12
9000000000001500:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
    return q + ((r + 6) >> 4);
9000000000001504:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
9000000000001508:	0280198c 	addi.w	$r12,$r12,6(0x6)
900000000000150c:	0044918c 	srli.w	$r12,$r12,0x4
9000000000001510:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
9000000000001514:	001031ac 	add.w	$r12,$r13,$r12
}
9000000000001518:	00150184 	move	$r4,$r12
900000000000151c:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000001520:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000001524:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000001528:	4c000020 	jirl	$r0,$r1,0

900000000000152c <fence_i>:
static void fence_i(void *va_start, int size) {
900000000000152c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000001530:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000001534:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000001538:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000000153c:	001500ac 	move	$r12,$r5
9000000000001540:	0040818c 	slli.w	$r12,$r12,0x0
9000000000001544:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
9000000000001548:	38720000 	dbar	0x0
    void *va_end = va_start + size;
900000000000154c:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000001550:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000001554:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000001558:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
900000000000155c:	50002000 	b	32(0x20) # 900000000000157c <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
9000000000001560:	06000189 	cacop	0x9,$r12,0
9000000000001564:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
9000000000001568:	06000188 	cacop	0x8,$r12,0
900000000000156c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
9000000000001570:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000001574:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000001578:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
900000000000157c:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000001580:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000001584:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 9000000000001560 <fence_i+0x34>
9000000000001588:	38728000 	ibar	0x0
}
900000000000158c:	03400000 	andi	$r0,$r0,0x0
9000000000001590:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000001594:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000001598:	4c000020 	jirl	$r0,$r1,0

900000000000159c <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
900000000000159c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000000015a0:	29c06076 	st.d	$r22,$r3,24(0x18)
90000000000015a4:	02c08076 	addi.d	$r22,$r3,32(0x20)
90000000000015a8:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
90000000000015ac:	001500ac 	move	$r12,$r5
90000000000015b0:	0040818c 	slli.w	$r12,$r12,0x0
90000000000015b4:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
    if (lflag >= 2) {
90000000000015b8:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
90000000000015bc:	0015018d 	move	$r13,$r12
90000000000015c0:	0280040c 	addi.w	$r12,$r0,1(0x1)
90000000000015c4:	6400218d 	bge	$r12,$r13,32(0x20) # 90000000000015e4 <getuint+0x48>
        return va_arg(*ap, unsigned long long);
90000000000015c8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000015cc:	28c0018c 	ld.d	$r12,$r12,0
90000000000015d0:	02c0218e 	addi.d	$r14,$r12,8(0x8)
90000000000015d4:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
90000000000015d8:	29c001ae 	st.d	$r14,$r13,0
90000000000015dc:	28c0018c 	ld.d	$r12,$r12,0
90000000000015e0:	50004400 	b	68(0x44) # 9000000000001624 <getuint+0x88>
    }
    else if (lflag) {
90000000000015e4:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
90000000000015e8:	40002180 	beqz	$r12,32(0x20) # 9000000000001608 <getuint+0x6c>
        return va_arg(*ap, unsigned long);
90000000000015ec:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000015f0:	28c0018c 	ld.d	$r12,$r12,0
90000000000015f4:	02c0218e 	addi.d	$r14,$r12,8(0x8)
90000000000015f8:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
90000000000015fc:	29c001ae 	st.d	$r14,$r13,0
9000000000001600:	28c0018c 	ld.d	$r12,$r12,0
9000000000001604:	50002000 	b	32(0x20) # 9000000000001624 <getuint+0x88>
    }
    else {
        return va_arg(*ap, unsigned int);
9000000000001608:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000160c:	28c0018c 	ld.d	$r12,$r12,0
9000000000001610:	02c0218e 	addi.d	$r14,$r12,8(0x8)
9000000000001614:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000001618:	29c001ae 	st.d	$r14,$r13,0
900000000000161c:	2880018c 	ld.w	$r12,$r12,0
9000000000001620:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
    }
}
9000000000001624:	00150184 	move	$r4,$r12
9000000000001628:	28c06076 	ld.d	$r22,$r3,24(0x18)
900000000000162c:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000001630:	4c000020 	jirl	$r0,$r1,0

9000000000001634 <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
9000000000001634:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000001638:	29c06076 	st.d	$r22,$r3,24(0x18)
900000000000163c:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000001640:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
9000000000001644:	001500ac 	move	$r12,$r5
9000000000001648:	0040818c 	slli.w	$r12,$r12,0x0
900000000000164c:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
    if (lflag >= 2) {
9000000000001650:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000001654:	0015018d 	move	$r13,$r12
9000000000001658:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000000165c:	6400218d 	bge	$r12,$r13,32(0x20) # 900000000000167c <getint+0x48>
        return va_arg(*ap, long long);
9000000000001660:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000001664:	28c0018c 	ld.d	$r12,$r12,0
9000000000001668:	02c0218e 	addi.d	$r14,$r12,8(0x8)
900000000000166c:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000001670:	29c001ae 	st.d	$r14,$r13,0
9000000000001674:	28c0018c 	ld.d	$r12,$r12,0
9000000000001678:	50004000 	b	64(0x40) # 90000000000016b8 <getint+0x84>
    }
    else if (lflag) {
900000000000167c:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000001680:	40002180 	beqz	$r12,32(0x20) # 90000000000016a0 <getint+0x6c>
        return va_arg(*ap, long);
9000000000001684:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000001688:	28c0018c 	ld.d	$r12,$r12,0
900000000000168c:	02c0218e 	addi.d	$r14,$r12,8(0x8)
9000000000001690:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000001694:	29c001ae 	st.d	$r14,$r13,0
9000000000001698:	28c0018c 	ld.d	$r12,$r12,0
900000000000169c:	50001c00 	b	28(0x1c) # 90000000000016b8 <getint+0x84>
    }
    else {
        return va_arg(*ap, int);
90000000000016a0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000016a4:	28c0018c 	ld.d	$r12,$r12,0
90000000000016a8:	02c0218e 	addi.d	$r14,$r12,8(0x8)
90000000000016ac:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
90000000000016b0:	29c001ae 	st.d	$r14,$r13,0
90000000000016b4:	2880018c 	ld.w	$r12,$r12,0
    }
}
90000000000016b8:	00150184 	move	$r4,$r12
90000000000016bc:	28c06076 	ld.d	$r22,$r3,24(0x18)
90000000000016c0:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000000016c4:	4c000020 	jirl	$r0,$r1,0

90000000000016c8 <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*, int), int fd, void *putdat,
        unsigned int num, unsigned int base, int width, int padc) {
90000000000016c8:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
90000000000016cc:	29c12061 	st.d	$r1,$r3,72(0x48)
90000000000016d0:	29c10076 	st.d	$r22,$r3,64(0x40)
90000000000016d4:	02c14076 	addi.d	$r22,$r3,80(0x50)
90000000000016d8:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
90000000000016dc:	001500b0 	move	$r16,$r5
90000000000016e0:	29ff22c6 	st.d	$r6,$r22,-56(0xfc8)
90000000000016e4:	001500ef 	move	$r15,$r7
90000000000016e8:	0015010e 	move	$r14,$r8
90000000000016ec:	0015012d 	move	$r13,$r9
90000000000016f0:	0015014c 	move	$r12,$r10
90000000000016f4:	00408210 	slli.w	$r16,$r16,0x0
90000000000016f8:	29bf52d0 	st.w	$r16,$r22,-44(0xfd4)
90000000000016fc:	004081ef 	slli.w	$r15,$r15,0x0
9000000000001700:	29bf42cf 	st.w	$r15,$r22,-48(0xfd0)
9000000000001704:	004081ce 	slli.w	$r14,$r14,0x0
9000000000001708:	29bf12ce 	st.w	$r14,$r22,-60(0xfc4)
900000000000170c:	004081ad 	slli.w	$r13,$r13,0x0
9000000000001710:	29bf02cd 	st.w	$r13,$r22,-64(0xfc0)
9000000000001714:	0040818c 	slli.w	$r12,$r12,0x0
9000000000001718:	29bef2cc 	st.w	$r12,$r22,-68(0xfbc)
    unsigned int result = num;
900000000000171c:	28bf42cc 	ld.w	$r12,$r22,-48(0xfd0)
9000000000001720:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    unsigned int mod = 0;
9000000000001724:	29bfa2c0 	st.w	$r0,$r22,-24(0xfe8)
    if(base == 10){
9000000000001728:	28bf12cc 	ld.w	$r12,$r22,-60(0xfc4)
900000000000172c:	0015018d 	move	$r13,$r12
9000000000001730:	0280280c 	addi.w	$r12,$r0,10(0xa)
9000000000001734:	5c0041ac 	bne	$r13,$r12,64(0x40) # 9000000000001774 <printnum+0xac>
      unsigned int t = __divu10(result);
9000000000001738:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000173c:	00150184 	move	$r4,$r12
9000000000001740:	57fd2bff 	bl	-728(0xffffd28) # 9000000000001468 <__divu10>
9000000000001744:	0015008c 	move	$r12,$r4
9000000000001748:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
      mod = result - __mulu10(t);
900000000000174c:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000001750:	00150184 	move	$r4,$r12
9000000000001754:	57fcd7ff 	bl	-812(0xffffcd4) # 9000000000001428 <__mulu10>
9000000000001758:	0015008c 	move	$r12,$r4
900000000000175c:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
9000000000001760:	001131ac 	sub.w	$r12,$r13,$r12
9000000000001764:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
      result = t;
9000000000001768:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000000176c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000001770:	50004800 	b	72(0x48) # 90000000000017b8 <printnum+0xf0>
    }else if(base == 8){
9000000000001774:	28bf12cc 	ld.w	$r12,$r22,-60(0xfc4)
9000000000001778:	0015018d 	move	$r13,$r12
900000000000177c:	0280200c 	addi.w	$r12,$r0,8(0x8)
9000000000001780:	5c0021ac 	bne	$r13,$r12,32(0x20) # 90000000000017a0 <printnum+0xd8>
      mod = result & 0x7;
9000000000001784:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000001788:	03401d8c 	andi	$r12,$r12,0x7
900000000000178c:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
      result = result >> 3;
9000000000001790:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000001794:	00448d8c 	srli.w	$r12,$r12,0x3
9000000000001798:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000000179c:	50001c00 	b	28(0x1c) # 90000000000017b8 <printnum+0xf0>
    }else{
      mod = result & 0xF;
90000000000017a0:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000017a4:	03403d8c 	andi	$r12,$r12,0xf
90000000000017a8:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
      result = result >> 4;
90000000000017ac:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000017b0:	0044918c 	srli.w	$r12,$r12,0x4
90000000000017b4:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    }

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
90000000000017b8:	28bf42cd 	ld.w	$r13,$r22,-48(0xfd0)
90000000000017bc:	28bf12cc 	ld.w	$r12,$r22,-60(0xfc4)
90000000000017c0:	680061ac 	bltu	$r13,$r12,96(0x60) # 9000000000001820 <printnum+0x158>
        printnum(putch, fd, putdat, result, base, width - 1, padc);
90000000000017c4:	28bf02cc 	ld.w	$r12,$r22,-64(0xfc0)
90000000000017c8:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
90000000000017cc:	0015018f 	move	$r15,$r12
90000000000017d0:	28bef2d0 	ld.w	$r16,$r22,-68(0xfbc)
90000000000017d4:	28bf12ce 	ld.w	$r14,$r22,-60(0xfc4)
90000000000017d8:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
90000000000017dc:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
90000000000017e0:	0015020a 	move	$r10,$r16
90000000000017e4:	001501e9 	move	$r9,$r15
90000000000017e8:	001501c8 	move	$r8,$r14
90000000000017ec:	001501a7 	move	$r7,$r13
90000000000017f0:	28ff22c6 	ld.d	$r6,$r22,-56(0xfc8)
90000000000017f4:	00150185 	move	$r5,$r12
90000000000017f8:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
90000000000017fc:	57fecfff 	bl	-308(0xffffecc) # 90000000000016c8 <printnum>
9000000000001800:	50003400 	b	52(0x34) # 9000000000001834 <printnum+0x16c>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat, fd);
9000000000001804:	28bf52ce 	ld.w	$r14,$r22,-44(0xfd4)
9000000000001808:	28bef2cd 	ld.w	$r13,$r22,-68(0xfbc)
900000000000180c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000001810:	001501c6 	move	$r6,$r14
9000000000001814:	28ff22c5 	ld.d	$r5,$r22,-56(0xfc8)
9000000000001818:	001501a4 	move	$r4,$r13
900000000000181c:	4c000181 	jirl	$r1,$r12,0
        while (-- width > 0)
9000000000001820:	28bf02cc 	ld.w	$r12,$r22,-64(0xfc0)
9000000000001824:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
9000000000001828:	29bf02cc 	st.w	$r12,$r22,-64(0xfc0)
900000000000182c:	28bf02cc 	ld.w	$r12,$r22,-64(0xfc0)
9000000000001830:	63ffd40c 	blt	$r0,$r12,-44(0x3ffd4) # 9000000000001804 <printnum+0x13c>
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat, fd);
9000000000001834:	1c0003ad 	pcaddu12i	$r13,29(0x1d)
9000000000001838:	02f451ad 	addi.d	$r13,$r13,-748(0xd14)
900000000000183c:	2abfa2cc 	ld.wu	$r12,$r22,-24(0xfe8)
9000000000001840:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000001844:	2800018c 	ld.b	$r12,$r12,0
9000000000001848:	0015018d 	move	$r13,$r12
900000000000184c:	28bf52ce 	ld.w	$r14,$r22,-44(0xfd4)
9000000000001850:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000001854:	001501c6 	move	$r6,$r14
9000000000001858:	28ff22c5 	ld.d	$r5,$r22,-56(0xfc8)
900000000000185c:	001501a4 	move	$r4,$r13
9000000000001860:	4c000181 	jirl	$r1,$r12,0
}
9000000000001864:	03400000 	andi	$r0,$r0,0x0
9000000000001868:	28c12061 	ld.d	$r1,$r3,72(0x48)
900000000000186c:	28c10076 	ld.d	$r22,$r3,64(0x40)
9000000000001870:	02c14063 	addi.d	$r3,$r3,80(0x50)
9000000000001874:	4c000020 	jirl	$r0,$r1,0

9000000000001878 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*, int), int fd, void *putdat, const char *fmt, va_list ap) {
9000000000001878:	02fe4063 	addi.d	$r3,$r3,-112(0xf90)
900000000000187c:	29c1a061 	st.d	$r1,$r3,104(0x68)
9000000000001880:	29c18076 	st.d	$r22,$r3,96(0x60)
9000000000001884:	29c16077 	st.d	$r23,$r3,88(0x58)
9000000000001888:	29c14078 	st.d	$r24,$r3,80(0x50)
900000000000188c:	02c1c076 	addi.d	$r22,$r3,112(0x70)
9000000000001890:	29fee2c4 	st.d	$r4,$r22,-72(0xfb8)
9000000000001894:	001500ac 	move	$r12,$r5
9000000000001898:	29fea2c6 	st.d	$r6,$r22,-88(0xfa8)
900000000000189c:	29fe82c7 	st.d	$r7,$r22,-96(0xfa0)
90000000000018a0:	29fe62c8 	st.d	$r8,$r22,-104(0xf98)
90000000000018a4:	0040818c 	slli.w	$r12,$r12,0x0
90000000000018a8:	29bed2cc 	st.w	$r12,$r22,-76(0xfb4)
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
90000000000018ac:	50002000 	b	32(0x20) # 90000000000018cc <vprintfmt+0x54>
            if (ch == '\0') {
90000000000018b0:	4004f2e0 	beqz	$r23,1264(0x4f0) # 9000000000001da0 <vprintfmt+0x528>
                return;
            }
            putch(ch, putdat, fd);
90000000000018b4:	28bed2cd 	ld.w	$r13,$r22,-76(0xfb4)
90000000000018b8:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
90000000000018bc:	001501a6 	move	$r6,$r13
90000000000018c0:	28fea2c5 	ld.d	$r5,$r22,-88(0xfa8)
90000000000018c4:	001502e4 	move	$r4,$r23
90000000000018c8:	4c000181 	jirl	$r1,$r12,0
        while ((ch = *(unsigned char *)fmt ++) != '%') {
90000000000018cc:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
90000000000018d0:	02c0058d 	addi.d	$r13,$r12,1(0x1)
90000000000018d4:	29fe82cd 	st.d	$r13,$r22,-96(0xfa0)
90000000000018d8:	2a00018c 	ld.bu	$r12,$r12,0
90000000000018dc:	00150197 	move	$r23,$r12
90000000000018e0:	001502ed 	move	$r13,$r23
90000000000018e4:	0280940c 	addi.w	$r12,$r0,37(0x25)
90000000000018e8:	5fffc9ac 	bne	$r13,$r12,-56(0x3ffc8) # 90000000000018b0 <vprintfmt+0x38>
        }

        // Process a %-escape sequence
        char padc = ' ';
90000000000018ec:	0280800c 	addi.w	$r12,$r0,32(0x20)
90000000000018f0:	293f0ecc 	st.b	$r12,$r22,-61(0xfc3)
        width = precision = -1;
90000000000018f4:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
90000000000018f8:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
90000000000018fc:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
9000000000001900:	29bf42cc 	st.w	$r12,$r22,-48(0xfd0)
        lflag = altflag = 0;
9000000000001904:	29bf12c0 	st.w	$r0,$r22,-60(0xfc4)
9000000000001908:	28bf12cc 	ld.w	$r12,$r22,-60(0xfc4)
900000000000190c:	29bf22cc 	st.w	$r12,$r22,-56(0xfc8)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
9000000000001910:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
9000000000001914:	02c0058d 	addi.d	$r13,$r12,1(0x1)
9000000000001918:	29fe82cd 	st.d	$r13,$r22,-96(0xfa0)
900000000000191c:	2a00018c 	ld.bu	$r12,$r12,0
9000000000001920:	00150197 	move	$r23,$r12
9000000000001924:	02bf76ee 	addi.w	$r14,$r23,-35(0xfdd)
9000000000001928:	001501cd 	move	$r13,$r14
900000000000192c:	0281540c 	addi.w	$r12,$r0,85(0x55)
9000000000001930:	68041d8d 	bltu	$r12,$r13,1052(0x41c) # 9000000000001d4c <vprintfmt+0x4d4>
9000000000001934:	00df01cc 	bstrpick.d	$r12,$r14,0x1f,0x0
9000000000001938:	00410d8d 	slli.d	$r13,$r12,0x3
900000000000193c:	1c0003ac 	pcaddu12i	$r12,29(0x1d)
9000000000001940:	02f1118c 	addi.d	$r12,$r12,-956(0xc44)
9000000000001944:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000001948:	28c0018c 	ld.d	$r12,$r12,0
900000000000194c:	4c000180 	jirl	$r0,$r12,0

        // flag to pad on the right
        case '-':
            padc = '-';
9000000000001950:	0280b40c 	addi.w	$r12,$r0,45(0x2d)
9000000000001954:	293f0ecc 	st.b	$r12,$r22,-61(0xfc3)
            goto reswitch;
9000000000001958:	53ffbbff 	b	-72(0xfffffb8) # 9000000000001910 <vprintfmt+0x98>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
900000000000195c:	0280c00c 	addi.w	$r12,$r0,48(0x30)
9000000000001960:	293f0ecc 	st.b	$r12,$r22,-61(0xfc3)
            goto reswitch;
9000000000001964:	53ffafff 	b	-84(0xfffffac) # 9000000000001910 <vprintfmt+0x98>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
9000000000001968:	29bf32c0 	st.w	$r0,$r22,-52(0xfcc)
                precision = precision * 10 + ch - '0';
900000000000196c:	28bf32cd 	ld.w	$r13,$r22,-52(0xfcc)
9000000000001970:	0280280c 	addi.w	$r12,$r0,10(0xa)
9000000000001974:	001c31ac 	mul.w	$r12,$r13,$r12
9000000000001978:	001032ec 	add.w	$r12,$r23,$r12
900000000000197c:	02bf418c 	addi.w	$r12,$r12,-48(0xfd0)
9000000000001980:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
                ch = *fmt;
9000000000001984:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
9000000000001988:	2800018c 	ld.b	$r12,$r12,0
900000000000198c:	00150197 	move	$r23,$r12
                if (ch < '0' || ch > '9') {
9000000000001990:	001502ed 	move	$r13,$r23
9000000000001994:	0280bc0c 	addi.w	$r12,$r0,47(0x2f)
9000000000001998:	6400558d 	bge	$r12,$r13,84(0x54) # 90000000000019ec <vprintfmt+0x174>
900000000000199c:	001502ed 	move	$r13,$r23
90000000000019a0:	0280e40c 	addi.w	$r12,$r0,57(0x39)
90000000000019a4:	6000498d 	blt	$r12,$r13,72(0x48) # 90000000000019ec <vprintfmt+0x174>
            for (precision = 0; ; ++ fmt) {
90000000000019a8:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
90000000000019ac:	02c0058c 	addi.d	$r12,$r12,1(0x1)
90000000000019b0:	29fe82cc 	st.d	$r12,$r22,-96(0xfa0)
                precision = precision * 10 + ch - '0';
90000000000019b4:	53ffbbff 	b	-72(0xfffffb8) # 900000000000196c <vprintfmt+0xf4>
                }
            }
            goto process_precision;

        case '*':
            precision = va_arg(ap, int);
90000000000019b8:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
90000000000019bc:	02c0218d 	addi.d	$r13,$r12,8(0x8)
90000000000019c0:	29fe62cd 	st.d	$r13,$r22,-104(0xf98)
90000000000019c4:	2880018c 	ld.w	$r12,$r12,0
90000000000019c8:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
            goto process_precision;
90000000000019cc:	50002400 	b	36(0x24) # 90000000000019f0 <vprintfmt+0x178>

        case '.':
            if (width < 0)
90000000000019d0:	28bf42cc 	ld.w	$r12,$r22,-48(0xfd0)
90000000000019d4:	67ff3d80 	bge	$r12,$r0,-196(0x3ff3c) # 9000000000001910 <vprintfmt+0x98>
                width = 0;
90000000000019d8:	29bf42c0 	st.w	$r0,$r22,-48(0xfd0)
            goto reswitch;
90000000000019dc:	53ff37ff 	b	-204(0xfffff34) # 9000000000001910 <vprintfmt+0x98>

        case '#':
            altflag = 1;
90000000000019e0:	0280040c 	addi.w	$r12,$r0,1(0x1)
90000000000019e4:	29bf12cc 	st.w	$r12,$r22,-60(0xfc4)
            goto reswitch;
90000000000019e8:	53ff2bff 	b	-216(0xfffff28) # 9000000000001910 <vprintfmt+0x98>
            goto process_precision;
90000000000019ec:	03400000 	andi	$r0,$r0,0x0

        process_precision:
            if (width < 0)
90000000000019f0:	28bf42cc 	ld.w	$r12,$r22,-48(0xfd0)
90000000000019f4:	67ff1d80 	bge	$r12,$r0,-228(0x3ff1c) # 9000000000001910 <vprintfmt+0x98>
                width = precision, precision = -1;
90000000000019f8:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
90000000000019fc:	29bf42cc 	st.w	$r12,$r22,-48(0xfd0)
9000000000001a00:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
9000000000001a04:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
            goto reswitch;
9000000000001a08:	53ff0bff 	b	-248(0xfffff08) # 9000000000001910 <vprintfmt+0x98>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
9000000000001a0c:	28bf22cc 	ld.w	$r12,$r22,-56(0xfc8)
9000000000001a10:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000001a14:	29bf22cc 	st.w	$r12,$r22,-56(0xfc8)
            goto reswitch;
9000000000001a18:	53fefbff 	b	-264(0xffffef8) # 9000000000001910 <vprintfmt+0x98>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat, fd);
9000000000001a1c:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
9000000000001a20:	02c0218d 	addi.d	$r13,$r12,8(0x8)
9000000000001a24:	29fe62cd 	st.d	$r13,$r22,-104(0xf98)
9000000000001a28:	2880018d 	ld.w	$r13,$r12,0
9000000000001a2c:	28bed2ce 	ld.w	$r14,$r22,-76(0xfb4)
9000000000001a30:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000001a34:	001501c6 	move	$r6,$r14
9000000000001a38:	28fea2c5 	ld.d	$r5,$r22,-88(0xfa8)
9000000000001a3c:	001501a4 	move	$r4,$r13
9000000000001a40:	4c000181 	jirl	$r1,$r12,0
            break;
9000000000001a44:	50035800 	b	856(0x358) # 9000000000001d9c <vprintfmt+0x524>

        // error message
        case 'e':
            err = va_arg(ap, int);
9000000000001a48:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
9000000000001a4c:	02c0218d 	addi.d	$r13,$r12,8(0x8)
9000000000001a50:	29fe62cd 	st.d	$r13,$r22,-104(0xf98)
9000000000001a54:	28800181 	ld.w	$r1,$r12,0
            if (err < 0) {
9000000000001a58:	0015002c 	move	$r12,$r1
9000000000001a5c:	64000d80 	bge	$r12,$r0,12(0xc) # 9000000000001a68 <vprintfmt+0x1f0>
                err = -err;
9000000000001a60:	0011040c 	sub.w	$r12,$r0,$r1
9000000000001a64:	00150181 	move	$r1,$r12
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
9000000000001a68:	0015002d 	move	$r13,$r1
9000000000001a6c:	0280600c 	addi.w	$r12,$r0,24(0x18)
9000000000001a70:	60001d8d 	blt	$r12,$r13,28(0x1c) # 9000000000001a8c <vprintfmt+0x214>
9000000000001a74:	1c0003ad 	pcaddu12i	$r13,29(0x1d)
9000000000001a78:	02e831ad 	addi.d	$r13,$r13,-1524(0xa0c)
9000000000001a7c:	00410c2c 	slli.d	$r12,$r1,0x3
9000000000001a80:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000001a84:	28c00198 	ld.d	$r24,$r12,0
9000000000001a88:	44002f00 	bnez	$r24,44(0x2c) # 9000000000001ab4 <vprintfmt+0x23c>
                printfmt(putch, fd, putdat, "error %d", err);
9000000000001a8c:	28bed2cc 	ld.w	$r12,$r22,-76(0xfb4)
9000000000001a90:	00150028 	move	$r8,$r1
9000000000001a94:	1c0003a7 	pcaddu12i	$r7,29(0x1d)
9000000000001a98:	02eb30e7 	addi.d	$r7,$r7,-1332(0xacc)
9000000000001a9c:	28fea2c6 	ld.d	$r6,$r22,-88(0xfa8)
9000000000001aa0:	00150185 	move	$r5,$r12
9000000000001aa4:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
9000000000001aa8:	54031400 	bl	788(0x314) # 9000000000001dbc <printfmt>
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
9000000000001aac:	03400000 	andi	$r0,$r0,0x0
            }
            else {
                printfmt(putch, fd, putdat, "%s", p);
            }
            break;
9000000000001ab0:	5002ec00 	b	748(0x2ec) # 9000000000001d9c <vprintfmt+0x524>
                printfmt(putch, fd, putdat, "%s", p);
9000000000001ab4:	28bed2cc 	ld.w	$r12,$r22,-76(0xfb4)
9000000000001ab8:	00150308 	move	$r8,$r24
9000000000001abc:	1c0003a7 	pcaddu12i	$r7,29(0x1d)
9000000000001ac0:	02ead0e7 	addi.d	$r7,$r7,-1356(0xab4)
9000000000001ac4:	28fea2c6 	ld.d	$r6,$r22,-88(0xfa8)
9000000000001ac8:	00150185 	move	$r5,$r12
9000000000001acc:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
9000000000001ad0:	5402ec00 	bl	748(0x2ec) # 9000000000001dbc <printfmt>
            break;
9000000000001ad4:	5002c800 	b	712(0x2c8) # 9000000000001d9c <vprintfmt+0x524>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
9000000000001ad8:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
9000000000001adc:	02c0218d 	addi.d	$r13,$r12,8(0x8)
9000000000001ae0:	29fe62cd 	st.d	$r13,$r22,-104(0xf98)
9000000000001ae4:	28c00198 	ld.d	$r24,$r12,0
9000000000001ae8:	44000f00 	bnez	$r24,12(0xc) # 9000000000001af4 <vprintfmt+0x27c>
                p = "(null)";
9000000000001aec:	1c0003b8 	pcaddu12i	$r24,29(0x1d)
9000000000001af0:	02ea3318 	addi.d	$r24,$r24,-1396(0xa8c)
            }
            if (width > 0 && padc != '-') {
9000000000001af4:	28bf42cc 	ld.w	$r12,$r22,-48(0xfd0)
9000000000001af8:	6400d40c 	bge	$r0,$r12,212(0xd4) # 9000000000001bcc <vprintfmt+0x354>
9000000000001afc:	283f0ecc 	ld.b	$r12,$r22,-61(0xfc3)
9000000000001b00:	0015018d 	move	$r13,$r12
9000000000001b04:	0280b40c 	addi.w	$r12,$r0,45(0x2d)
9000000000001b08:	5800c5ac 	beq	$r13,$r12,196(0xc4) # 9000000000001bcc <vprintfmt+0x354>
                for (width -= strnlen(p, precision); width > 0; width --) {
9000000000001b0c:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
9000000000001b10:	00150185 	move	$r5,$r12
9000000000001b14:	00150304 	move	$r4,$r24
9000000000001b18:	5426e000 	bl	9952(0x26e0) # 90000000000041f8 <strnlen>
9000000000001b1c:	0015008c 	move	$r12,$r4
9000000000001b20:	28bf42cd 	ld.w	$r13,$r22,-48(0xfd0)
9000000000001b24:	0040818c 	slli.w	$r12,$r12,0x0
9000000000001b28:	001131ac 	sub.w	$r12,$r13,$r12
9000000000001b2c:	29bf42cc 	st.w	$r12,$r22,-48(0xfd0)
9000000000001b30:	50003000 	b	48(0x30) # 9000000000001b60 <vprintfmt+0x2e8>
                    putch(padc, putdat, fd);
9000000000001b34:	283f0ecc 	ld.b	$r12,$r22,-61(0xfc3)
9000000000001b38:	0015018d 	move	$r13,$r12
9000000000001b3c:	28bed2ce 	ld.w	$r14,$r22,-76(0xfb4)
9000000000001b40:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000001b44:	001501c6 	move	$r6,$r14
9000000000001b48:	28fea2c5 	ld.d	$r5,$r22,-88(0xfa8)
9000000000001b4c:	001501a4 	move	$r4,$r13
9000000000001b50:	4c000181 	jirl	$r1,$r12,0
                for (width -= strnlen(p, precision); width > 0; width --) {
9000000000001b54:	28bf42cc 	ld.w	$r12,$r22,-48(0xfd0)
9000000000001b58:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
9000000000001b5c:	29bf42cc 	st.w	$r12,$r22,-48(0xfd0)
9000000000001b60:	28bf42cc 	ld.w	$r12,$r22,-48(0xfd0)
9000000000001b64:	63ffd00c 	blt	$r0,$r12,-48(0x3ffd0) # 9000000000001b34 <vprintfmt+0x2bc>
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
9000000000001b68:	50006400 	b	100(0x64) # 9000000000001bcc <vprintfmt+0x354>
                if (altflag && (ch < ' ' || ch > '~')) {
9000000000001b6c:	28bf12cc 	ld.w	$r12,$r22,-60(0xfc4)
9000000000001b70:	40003980 	beqz	$r12,56(0x38) # 9000000000001ba8 <vprintfmt+0x330>
9000000000001b74:	001502ed 	move	$r13,$r23
9000000000001b78:	02807c0c 	addi.w	$r12,$r0,31(0x1f)
9000000000001b7c:	6400118d 	bge	$r12,$r13,16(0x10) # 9000000000001b8c <vprintfmt+0x314>
9000000000001b80:	001502ed 	move	$r13,$r23
9000000000001b84:	0281f80c 	addi.w	$r12,$r0,126(0x7e)
9000000000001b88:	6400218d 	bge	$r12,$r13,32(0x20) # 9000000000001ba8 <vprintfmt+0x330>
                    putch('?', putdat, fd);
9000000000001b8c:	28bed2cd 	ld.w	$r13,$r22,-76(0xfb4)
9000000000001b90:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000001b94:	001501a6 	move	$r6,$r13
9000000000001b98:	28fea2c5 	ld.d	$r5,$r22,-88(0xfa8)
9000000000001b9c:	0280fc04 	addi.w	$r4,$r0,63(0x3f)
9000000000001ba0:	4c000181 	jirl	$r1,$r12,0
9000000000001ba4:	50001c00 	b	28(0x1c) # 9000000000001bc0 <vprintfmt+0x348>
                }
                else {
                    putch(ch, putdat, fd);
9000000000001ba8:	28bed2cd 	ld.w	$r13,$r22,-76(0xfb4)
9000000000001bac:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000001bb0:	001501a6 	move	$r6,$r13
9000000000001bb4:	28fea2c5 	ld.d	$r5,$r22,-88(0xfa8)
9000000000001bb8:	001502e4 	move	$r4,$r23
9000000000001bbc:	4c000181 	jirl	$r1,$r12,0
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
9000000000001bc0:	28bf42cc 	ld.w	$r12,$r22,-48(0xfd0)
9000000000001bc4:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
9000000000001bc8:	29bf42cc 	st.w	$r12,$r22,-48(0xfd0)
9000000000001bcc:	0015030c 	move	$r12,$r24
9000000000001bd0:	02c00598 	addi.d	$r24,$r12,1(0x1)
9000000000001bd4:	2800018c 	ld.b	$r12,$r12,0
9000000000001bd8:	00150197 	move	$r23,$r12
9000000000001bdc:	40004ae0 	beqz	$r23,72(0x48) # 9000000000001c24 <vprintfmt+0x3ac>
9000000000001be0:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
9000000000001be4:	63ff8980 	blt	$r12,$r0,-120(0x3ff88) # 9000000000001b6c <vprintfmt+0x2f4>
9000000000001be8:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
9000000000001bec:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
9000000000001bf0:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
9000000000001bf4:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
9000000000001bf8:	67ff7580 	bge	$r12,$r0,-140(0x3ff74) # 9000000000001b6c <vprintfmt+0x2f4>
                }
            }
            for (; width > 0; width --) {
9000000000001bfc:	50002800 	b	40(0x28) # 9000000000001c24 <vprintfmt+0x3ac>
                putch(' ', putdat, fd);
9000000000001c00:	28bed2cd 	ld.w	$r13,$r22,-76(0xfb4)
9000000000001c04:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000001c08:	001501a6 	move	$r6,$r13
9000000000001c0c:	28fea2c5 	ld.d	$r5,$r22,-88(0xfa8)
9000000000001c10:	02808004 	addi.w	$r4,$r0,32(0x20)
9000000000001c14:	4c000181 	jirl	$r1,$r12,0
            for (; width > 0; width --) {
9000000000001c18:	28bf42cc 	ld.w	$r12,$r22,-48(0xfd0)
9000000000001c1c:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
9000000000001c20:	29bf42cc 	st.w	$r12,$r22,-48(0xfd0)
9000000000001c24:	28bf42cc 	ld.w	$r12,$r22,-48(0xfd0)
9000000000001c28:	63ffd80c 	blt	$r0,$r12,-40(0x3ffd8) # 9000000000001c00 <vprintfmt+0x388>
            }
            break;
9000000000001c2c:	50017000 	b	368(0x170) # 9000000000001d9c <vprintfmt+0x524>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
9000000000001c30:	28bf22cc 	ld.w	$r12,$r22,-56(0xfc8)
9000000000001c34:	02fe62cd 	addi.d	$r13,$r22,-104(0xf98)
9000000000001c38:	00150185 	move	$r5,$r12
9000000000001c3c:	001501a4 	move	$r4,$r13
9000000000001c40:	57f9f7ff 	bl	-1548(0xffff9f4) # 9000000000001634 <getint>
9000000000001c44:	0015008c 	move	$r12,$r4
9000000000001c48:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
            if ((long long)num < 0) {
9000000000001c4c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000001c50:	64002980 	bge	$r12,$r0,40(0x28) # 9000000000001c78 <vprintfmt+0x400>
                putch('-', putdat, fd);
9000000000001c54:	28bed2cd 	ld.w	$r13,$r22,-76(0xfb4)
9000000000001c58:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000001c5c:	001501a6 	move	$r6,$r13
9000000000001c60:	28fea2c5 	ld.d	$r5,$r22,-88(0xfa8)
9000000000001c64:	0280b404 	addi.w	$r4,$r0,45(0x2d)
9000000000001c68:	4c000181 	jirl	$r1,$r12,0
                num = -(long long)num;
9000000000001c6c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000001c70:	0011b00c 	sub.d	$r12,$r0,$r12
9000000000001c74:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
            }
            base = 10;
9000000000001c78:	0280280c 	addi.w	$r12,$r0,10(0xa)
9000000000001c7c:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
            goto number;
9000000000001c80:	50007400 	b	116(0x74) # 9000000000001cf4 <vprintfmt+0x47c>
        // pointer
        case 'p':
            putch('0', putdat, fd);
9000000000001c84:	28bed2cd 	ld.w	$r13,$r22,-76(0xfb4)
9000000000001c88:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000001c8c:	001501a6 	move	$r6,$r13
9000000000001c90:	28fea2c5 	ld.d	$r5,$r22,-88(0xfa8)
9000000000001c94:	0280c004 	addi.w	$r4,$r0,48(0x30)
9000000000001c98:	4c000181 	jirl	$r1,$r12,0
            putch('x', putdat, fd);
9000000000001c9c:	28bed2cd 	ld.w	$r13,$r22,-76(0xfb4)
9000000000001ca0:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000001ca4:	001501a6 	move	$r6,$r13
9000000000001ca8:	28fea2c5 	ld.d	$r5,$r22,-88(0xfa8)
9000000000001cac:	0281e004 	addi.w	$r4,$r0,120(0x78)
9000000000001cb0:	4c000181 	jirl	$r1,$r12,0
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
9000000000001cb4:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
9000000000001cb8:	02c0218d 	addi.d	$r13,$r12,8(0x8)
9000000000001cbc:	29fe62cd 	st.d	$r13,$r22,-104(0xf98)
9000000000001cc0:	28c0018c 	ld.d	$r12,$r12,0
9000000000001cc4:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
            base = 16;
9000000000001cc8:	0280400c 	addi.w	$r12,$r0,16(0x10)
9000000000001ccc:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
            goto number;
9000000000001cd0:	50002400 	b	36(0x24) # 9000000000001cf4 <vprintfmt+0x47c>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
9000000000001cd4:	28bf22cc 	ld.w	$r12,$r22,-56(0xfc8)
9000000000001cd8:	02fe62cd 	addi.d	$r13,$r22,-104(0xf98)
9000000000001cdc:	00150185 	move	$r5,$r12
9000000000001ce0:	001501a4 	move	$r4,$r13
9000000000001ce4:	57f8bbff 	bl	-1864(0xffff8b8) # 900000000000159c <getuint>
9000000000001ce8:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
            base = 16;
9000000000001cec:	0280400c 	addi.w	$r12,$r0,16(0x10)
9000000000001cf0:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
        number:
            printnum(putch, fd, putdat, num, base, width, padc);
9000000000001cf4:	28bf62cd 	ld.w	$r13,$r22,-40(0xfd8)
9000000000001cf8:	28bf52ce 	ld.w	$r14,$r22,-44(0xfd4)
9000000000001cfc:	283f0ecc 	ld.b	$r12,$r22,-61(0xfc3)
9000000000001d00:	00150190 	move	$r16,$r12
9000000000001d04:	28bf42cf 	ld.w	$r15,$r22,-48(0xfd0)
9000000000001d08:	28bed2cc 	ld.w	$r12,$r22,-76(0xfb4)
9000000000001d0c:	0015020a 	move	$r10,$r16
9000000000001d10:	001501e9 	move	$r9,$r15
9000000000001d14:	001501c8 	move	$r8,$r14
9000000000001d18:	001501a7 	move	$r7,$r13
9000000000001d1c:	28fea2c6 	ld.d	$r6,$r22,-88(0xfa8)
9000000000001d20:	00150185 	move	$r5,$r12
9000000000001d24:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
9000000000001d28:	57f9a3ff 	bl	-1632(0xffff9a0) # 90000000000016c8 <printnum>
            break;
9000000000001d2c:	50007000 	b	112(0x70) # 9000000000001d9c <vprintfmt+0x524>

        // escaped '%' character
        case '%':
            putch(ch, putdat, fd);
9000000000001d30:	28bed2cd 	ld.w	$r13,$r22,-76(0xfb4)
9000000000001d34:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000001d38:	001501a6 	move	$r6,$r13
9000000000001d3c:	28fea2c5 	ld.d	$r5,$r22,-88(0xfa8)
9000000000001d40:	001502e4 	move	$r4,$r23
9000000000001d44:	4c000181 	jirl	$r1,$r12,0
            break;
9000000000001d48:	50005400 	b	84(0x54) # 9000000000001d9c <vprintfmt+0x524>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat, fd);
9000000000001d4c:	28bed2cd 	ld.w	$r13,$r22,-76(0xfb4)
9000000000001d50:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000001d54:	001501a6 	move	$r6,$r13
9000000000001d58:	28fea2c5 	ld.d	$r5,$r22,-88(0xfa8)
9000000000001d5c:	02809404 	addi.w	$r4,$r0,37(0x25)
9000000000001d60:	4c000181 	jirl	$r1,$r12,0
            for (fmt --; fmt[-1] != '%'; fmt --)
9000000000001d64:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
9000000000001d68:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
9000000000001d6c:	29fe82cc 	st.d	$r12,$r22,-96(0xfa0)
9000000000001d70:	50001000 	b	16(0x10) # 9000000000001d80 <vprintfmt+0x508>
9000000000001d74:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
9000000000001d78:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
9000000000001d7c:	29fe82cc 	st.d	$r12,$r22,-96(0xfa0)
9000000000001d80:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
9000000000001d84:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
9000000000001d88:	2800018c 	ld.b	$r12,$r12,0
9000000000001d8c:	0015018d 	move	$r13,$r12
9000000000001d90:	0280940c 	addi.w	$r12,$r0,37(0x25)
9000000000001d94:	5fffe1ac 	bne	$r13,$r12,-32(0x3ffe0) # 9000000000001d74 <vprintfmt+0x4fc>
                /* do nothing */;
            break;
9000000000001d98:	03400000 	andi	$r0,$r0,0x0
    while (1) {
9000000000001d9c:	53fb13ff 	b	-1264(0xffffb10) # 90000000000018ac <vprintfmt+0x34>
                return;
9000000000001da0:	03400000 	andi	$r0,$r0,0x0
        }
    }
}
9000000000001da4:	28c1a061 	ld.d	$r1,$r3,104(0x68)
9000000000001da8:	28c18076 	ld.d	$r22,$r3,96(0x60)
9000000000001dac:	28c16077 	ld.d	$r23,$r3,88(0x58)
9000000000001db0:	28c14078 	ld.d	$r24,$r3,80(0x50)
9000000000001db4:	02c1c063 	addi.d	$r3,$r3,112(0x70)
9000000000001db8:	4c000020 	jirl	$r0,$r1,0

9000000000001dbc <printfmt>:
 * @fd:         file descriptor
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*, int), int fd, void *putdat, const char *fmt, ...) {
9000000000001dbc:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
9000000000001dc0:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000001dc4:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000001dc8:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000001dcc:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000001dd0:	001500ac 	move	$r12,$r5
9000000000001dd4:	29ff22c6 	st.d	$r6,$r22,-56(0xfc8)
9000000000001dd8:	29ff02c7 	st.d	$r7,$r22,-64(0xfc0)
9000000000001ddc:	29c002c8 	st.d	$r8,$r22,0
9000000000001de0:	29c022c9 	st.d	$r9,$r22,8(0x8)
9000000000001de4:	29c042ca 	st.d	$r10,$r22,16(0x10)
9000000000001de8:	29c062cb 	st.d	$r11,$r22,24(0x18)
9000000000001dec:	0040818c 	slli.w	$r12,$r12,0x0
9000000000001df0:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
    va_list ap;

    va_start(ap, fmt);
9000000000001df4:	02c082cc 	addi.d	$r12,$r22,32(0x20)
9000000000001df8:	02ff818c 	addi.d	$r12,$r12,-32(0xfe0)
9000000000001dfc:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    vprintfmt(putch, fd, putdat, fmt, ap);
9000000000001e00:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000001e04:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000001e08:	001501a8 	move	$r8,$r13
9000000000001e0c:	28ff02c7 	ld.d	$r7,$r22,-64(0xfc0)
9000000000001e10:	28ff22c6 	ld.d	$r6,$r22,-56(0xfc8)
9000000000001e14:	00150185 	move	$r5,$r12
9000000000001e18:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000001e1c:	57fa5fff 	bl	-1444(0xffffa5c) # 9000000000001878 <vprintfmt>
    va_end(ap);
}
9000000000001e20:	03400000 	andi	$r0,$r0,0x0
9000000000001e24:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000000001e28:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000000001e2c:	02c18063 	addi.d	$r3,$r3,96(0x60)
9000000000001e30:	4c000020 	jirl	$r0,$r1,0

9000000000001e34 <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
9000000000001e34:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000001e38:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000001e3c:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000001e40:	0015008c 	move	$r12,$r4
9000000000001e44:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
9000000000001e48:	0040818c 	slli.w	$r12,$r12,0x0
9000000000001e4c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    b->cnt ++;
9000000000001e50:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000001e54:	2880418c 	ld.w	$r12,$r12,16(0x10)
9000000000001e58:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000001e5c:	0015018d 	move	$r13,$r12
9000000000001e60:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000001e64:	2980418d 	st.w	$r13,$r12,16(0x10)
    if (b->buf < b->ebuf) {
9000000000001e68:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000001e6c:	28c0018d 	ld.d	$r13,$r12,0
9000000000001e70:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000001e74:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000001e78:	6c0025ac 	bgeu	$r13,$r12,36(0x24) # 9000000000001e9c <sprintputch+0x68>
        *b->buf ++ = ch;
9000000000001e7c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000001e80:	28c0018c 	ld.d	$r12,$r12,0
9000000000001e84:	02c0058e 	addi.d	$r14,$r12,1(0x1)
9000000000001e88:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000001e8c:	29c001ae 	st.d	$r14,$r13,0
9000000000001e90:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
9000000000001e94:	00005dad 	ext.w.b	$r13,$r13
9000000000001e98:	2900018d 	st.b	$r13,$r12,0
    }
}
9000000000001e9c:	03400000 	andi	$r0,$r0,0x0
9000000000001ea0:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000001ea4:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000001ea8:	4c000020 	jirl	$r0,$r1,0

9000000000001eac <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
9000000000001eac:	02fe4063 	addi.d	$r3,$r3,-112(0xf90)
9000000000001eb0:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000001eb4:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000001eb8:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000001ebc:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000001ec0:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
9000000000001ec4:	29ff22c6 	st.d	$r6,$r22,-56(0xfc8)
9000000000001ec8:	29c022c7 	st.d	$r7,$r22,8(0x8)
9000000000001ecc:	29c042c8 	st.d	$r8,$r22,16(0x10)
9000000000001ed0:	29c062c9 	st.d	$r9,$r22,24(0x18)
9000000000001ed4:	29c082ca 	st.d	$r10,$r22,32(0x20)
9000000000001ed8:	29c0a2cb 	st.d	$r11,$r22,40(0x28)
    va_list ap;
    int cnt;
    va_start(ap, fmt);
9000000000001edc:	02c0c2cc 	addi.d	$r12,$r22,48(0x30)
9000000000001ee0:	02ff618c 	addi.d	$r12,$r12,-40(0xfd8)
9000000000001ee4:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    cnt = vsnprintf(str, size, fmt, ap);
9000000000001ee8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000001eec:	00150187 	move	$r7,$r12
9000000000001ef0:	28ff22c6 	ld.d	$r6,$r22,-56(0xfc8)
9000000000001ef4:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
9000000000001ef8:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000001efc:	54002400 	bl	36(0x24) # 9000000000001f20 <vsnprintf>
9000000000001f00:	0015008c 	move	$r12,$r4
9000000000001f04:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    va_end(ap);
    return cnt;
9000000000001f08:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
9000000000001f0c:	00150184 	move	$r4,$r12
9000000000001f10:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000000001f14:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000000001f18:	02c1c063 	addi.d	$r3,$r3,112(0x70)
9000000000001f1c:	4c000020 	jirl	$r0,$r1,0

9000000000001f20 <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
9000000000001f20:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
9000000000001f24:	29c12061 	st.d	$r1,$r3,72(0x48)
9000000000001f28:	29c10076 	st.d	$r22,$r3,64(0x40)
9000000000001f2c:	02c14076 	addi.d	$r22,$r3,80(0x50)
9000000000001f30:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
9000000000001f34:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
9000000000001f38:	29fee2c6 	st.d	$r6,$r22,-72(0xfb8)
9000000000001f3c:	29fec2c7 	st.d	$r7,$r22,-80(0xfb0)
    struct sprintbuf b = {str, str + size - 1, 0};
9000000000001f40:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000001f44:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
9000000000001f48:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000001f4c:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
9000000000001f50:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
9000000000001f54:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000001f58:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000001f5c:	29bfa2c0 	st.w	$r0,$r22,-24(0xfe8)
    if (str == NULL || b.buf > b.ebuf) {
9000000000001f60:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000001f64:	40001180 	beqz	$r12,16(0x10) # 9000000000001f74 <vsnprintf+0x54>
9000000000001f68:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000001f6c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000001f70:	6c000d8d 	bgeu	$r12,$r13,12(0xc) # 9000000000001f7c <vsnprintf+0x5c>
        return -E_INVAL;
9000000000001f74:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
9000000000001f78:	50003400 	b	52(0x34) # 9000000000001fac <vsnprintf+0x8c>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, NO_FD, &b, fmt, ap);
9000000000001f7c:	02ff62cc 	addi.d	$r12,$r22,-40(0xfd8)
9000000000001f80:	28fec2c8 	ld.d	$r8,$r22,-80(0xfb0)
9000000000001f84:	28fee2c7 	ld.d	$r7,$r22,-72(0xfb8)
9000000000001f88:	00150186 	move	$r6,$r12
9000000000001f8c:	15fffecc 	lu12i.w	$r12,-10(0xffff6)
9000000000001f90:	03ab6585 	ori	$r5,$r12,0xad9
9000000000001f94:	1c000004 	pcaddu12i	$r4,0
9000000000001f98:	02fa8084 	addi.d	$r4,$r4,-352(0xea0)
9000000000001f9c:	57f8dfff 	bl	-1828(0xffff8dc) # 9000000000001878 <vprintfmt>
    // null terminate the buffer
    *b.buf = '\0';
9000000000001fa0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000001fa4:	29000180 	st.b	$r0,$r12,0
    return b.cnt;
9000000000001fa8:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
}
9000000000001fac:	00150184 	move	$r4,$r12
9000000000001fb0:	28c12061 	ld.d	$r1,$r3,72(0x48)
9000000000001fb4:	28c10076 	ld.d	$r22,$r3,64(0x40)
9000000000001fb8:	02c14063 	addi.d	$r3,$r3,80(0x50)
9000000000001fbc:	4c000020 	jirl	$r0,$r1,0

9000000000001fc0 <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
9000000000001fc0:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000001fc4:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000001fc8:	02c08076 	addi.d	$r22,$r3,32(0x20)
    next = (next * 0xDEECE66D + 0xB) & ((1 << 17) - 1);
9000000000001fcc:	1c00044c 	pcaddu12i	$r12,34(0x22)
9000000000001fd0:	02c1118c 	addi.d	$r12,$r12,68(0x44)
9000000000001fd4:	28c0018d 	ld.d	$r13,$r12,0
9000000000001fd8:	15bdd9cc 	lu12i.w	$r12,-135474(0xdeece)
9000000000001fdc:	0399b58c 	ori	$r12,$r12,0x66d
9000000000001fe0:	1600000c 	lu32i.d	$r12,0
9000000000001fe4:	001db1ac 	mul.d	$r12,$r13,$r12
9000000000001fe8:	02c02d8d 	addi.d	$r13,$r12,11(0xb)
9000000000001fec:	140003ec 	lu12i.w	$r12,31(0x1f)
9000000000001ff0:	03bffd8c 	ori	$r12,$r12,0xfff
9000000000001ff4:	0014b1ad 	and	$r13,$r13,$r12
9000000000001ff8:	1c00044c 	pcaddu12i	$r12,34(0x22)
9000000000001ffc:	02c0618c 	addi.d	$r12,$r12,24(0x18)
9000000000002000:	29c0018d 	st.d	$r13,$r12,0
    unsigned long long result = (next >> 12);
9000000000002004:	1c00044c 	pcaddu12i	$r12,34(0x22)
9000000000002008:	02c0318c 	addi.d	$r12,$r12,12(0xc)
900000000000200c:	28c0018c 	ld.d	$r12,$r12,0
9000000000002010:	0045318c 	srli.d	$r12,$r12,0xc
9000000000002014:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    return result & RAND_MAX;
9000000000002018:	28bfa2cd 	ld.w	$r13,$r22,-24(0xfe8)
900000000000201c:	140001ec 	lu12i.w	$r12,15(0xf)
9000000000002020:	03bffd8c 	ori	$r12,$r12,0xfff
9000000000002024:	0014b1ac 	and	$r12,$r13,$r12
}
9000000000002028:	00150184 	move	$r4,$r12
900000000000202c:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000002030:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000002034:	4c000020 	jirl	$r0,$r1,0

9000000000002038 <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
9000000000002038:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000203c:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000002040:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000002044:	0015008c 	move	$r12,$r4
9000000000002048:	0040818c 	slli.w	$r12,$r12,0x0
900000000000204c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    next = seed;
9000000000002050:	2abfb2cd 	ld.wu	$r13,$r22,-20(0xfec)
9000000000002054:	1c00044c 	pcaddu12i	$r12,34(0x22)
9000000000002058:	02fef18c 	addi.d	$r12,$r12,-68(0xfbc)
900000000000205c:	29c0018d 	st.d	$r13,$r12,0
}
9000000000002060:	03400000 	andi	$r0,$r0,0x0
9000000000002064:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000002068:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000000206c:	4c000020 	jirl	$r0,$r1,0

9000000000002070 <rb_node_create>:
#include <rb_tree.h>
#include <assert.h>

/* rb_node_create - create a new rb_node */
static inline rb_node *
rb_node_create(void) {
9000000000002070:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000000002074:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000000002078:	29c00076 	st.d	$r22,$r3,0
900000000000207c:	02c04076 	addi.d	$r22,$r3,16(0x10)
    return kmalloc(sizeof(rb_node));
9000000000002080:	02808004 	addi.w	$r4,$r0,32(0x20)
9000000000002084:	5455b400 	bl	21940(0x55b4) # 9000000000007638 <kmalloc>
9000000000002088:	0015008c 	move	$r12,$r4
}
900000000000208c:	00150184 	move	$r4,$r12
9000000000002090:	28c02061 	ld.d	$r1,$r3,8(0x8)
9000000000002094:	28c00076 	ld.d	$r22,$r3,0
9000000000002098:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000000209c:	4c000020 	jirl	$r0,$r1,0

90000000000020a0 <rb_tree_empty>:

/* rb_tree_empty - tests if tree is empty */
static inline bool
rb_tree_empty(rb_tree *tree) {
90000000000020a0:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000000020a4:	29c0a076 	st.d	$r22,$r3,40(0x28)
90000000000020a8:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000000020ac:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    rb_node *nil = tree->nil, *root = tree->root;
90000000000020b0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000020b4:	28c0218c 	ld.d	$r12,$r12,8(0x8)
90000000000020b8:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
90000000000020bc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000020c0:	28c0418c 	ld.d	$r12,$r12,16(0x10)
90000000000020c4:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    return root->left == nil;
90000000000020c8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000020cc:	28c0418d 	ld.d	$r13,$r12,16(0x10)
90000000000020d0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000020d4:	0015b1ac 	xor	$r12,$r13,$r12
90000000000020d8:	0240058c 	sltui	$r12,$r12,1(0x1)
90000000000020dc:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
}
90000000000020e0:	00150184 	move	$r4,$r12
90000000000020e4:	28c0a076 	ld.d	$r22,$r3,40(0x28)
90000000000020e8:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000000020ec:	4c000020 	jirl	$r0,$r1,0

90000000000020f0 <rb_tree_create>:
 * Note that, root->left should always point to the node that is the root
 * of the tree. And nil points to a 'NULL' node which should always be
 * black and may have arbitrary children and parent node.
 * */
rb_tree *
rb_tree_create(int (*compare)(rb_node *node1, rb_node *node2)) {
90000000000020f0:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
90000000000020f4:	29c0e061 	st.d	$r1,$r3,56(0x38)
90000000000020f8:	29c0c076 	st.d	$r22,$r3,48(0x30)
90000000000020fc:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000002100:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
    assert(compare != NULL);
9000000000002104:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000002108:	44001d80 	bnez	$r12,28(0x1c) # 9000000000002124 <rb_tree_create+0x34>
900000000000210c:	1c000386 	pcaddu12i	$r6,28(0x1c)
9000000000002110:	02dc90c6 	addi.d	$r6,$r6,1828(0x724)
9000000000002114:	02807805 	addi.w	$r5,$r0,30(0x1e)
9000000000002118:	1c000384 	pcaddu12i	$r4,28(0x1c)
900000000000211c:	02dd0084 	addi.d	$r4,$r4,1856(0x740)
9000000000002120:	54ab6000 	bl	43872(0xab60) # 900000000000cc80 <__panic>

    rb_tree *tree;
    rb_node *nil, *root;

    if ((tree = kmalloc(sizeof(rb_tree))) == NULL) {
9000000000002124:	02806004 	addi.w	$r4,$r0,24(0x18)
9000000000002128:	54551000 	bl	21776(0x5510) # 9000000000007638 <kmalloc>
900000000000212c:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
9000000000002130:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002134:	4000d980 	beqz	$r12,216(0xd8) # 900000000000220c <rb_tree_create+0x11c>
        goto bad_tree;
    }

    tree->compare = compare;
9000000000002138:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000213c:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
9000000000002140:	29c0018d 	st.d	$r13,$r12,0

    if ((nil = rb_node_create()) == NULL) {
9000000000002144:	57ff2fff 	bl	-212(0xfffff2c) # 9000000000002070 <rb_node_create>
9000000000002148:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)
900000000000214c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002150:	4000ad80 	beqz	$r12,172(0xac) # 90000000000021fc <rb_tree_create+0x10c>
        goto bad_node_cleanup_tree;
    }

    nil->parent = nil->left = nil->right = nil;
9000000000002154:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002158:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
900000000000215c:	29c0618d 	st.d	$r13,$r12,24(0x18)
9000000000002160:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002164:	28c0618d 	ld.d	$r13,$r12,24(0x18)
9000000000002168:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000216c:	29c0418d 	st.d	$r13,$r12,16(0x10)
9000000000002170:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002174:	28c0418d 	ld.d	$r13,$r12,16(0x10)
9000000000002178:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000217c:	29c0218d 	st.d	$r13,$r12,8(0x8)
    nil->red = 0;
9000000000002180:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002184:	29800180 	st.w	$r0,$r12,0
    tree->nil = nil;
9000000000002188:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000218c:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000002190:	29c0218d 	st.d	$r13,$r12,8(0x8)

    if ((root = rb_node_create()) == NULL) {
9000000000002194:	57fedfff 	bl	-292(0xffffedc) # 9000000000002070 <rb_node_create>
9000000000002198:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000000219c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000021a0:	40004d80 	beqz	$r12,76(0x4c) # 90000000000021ec <rb_tree_create+0xfc>
        goto bad_node_cleanup_nil;
    }

    root->parent = root->left = root->right = nil;
90000000000021a4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000021a8:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
90000000000021ac:	29c0618d 	st.d	$r13,$r12,24(0x18)
90000000000021b0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000021b4:	28c0618d 	ld.d	$r13,$r12,24(0x18)
90000000000021b8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000021bc:	29c0418d 	st.d	$r13,$r12,16(0x10)
90000000000021c0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000021c4:	28c0418d 	ld.d	$r13,$r12,16(0x10)
90000000000021c8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000021cc:	29c0218d 	st.d	$r13,$r12,8(0x8)
    root->red = 0;
90000000000021d0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000021d4:	29800180 	st.w	$r0,$r12,0
    tree->root = root;
90000000000021d8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000021dc:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
90000000000021e0:	29c0418d 	st.d	$r13,$r12,16(0x10)
    return tree;
90000000000021e4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000021e8:	50002c00 	b	44(0x2c) # 9000000000002214 <rb_tree_create+0x124>
        goto bad_node_cleanup_nil;
90000000000021ec:	03400000 	andi	$r0,$r0,0x0

bad_node_cleanup_nil:
    kfree(nil);
90000000000021f0:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
90000000000021f4:	54592000 	bl	22816(0x5920) # 9000000000007b14 <kfree>
90000000000021f8:	50000800 	b	8(0x8) # 9000000000002200 <rb_tree_create+0x110>
        goto bad_node_cleanup_tree;
90000000000021fc:	03400000 	andi	$r0,$r0,0x0
bad_node_cleanup_tree:
    kfree(tree);
9000000000002200:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000002204:	54591000 	bl	22800(0x5910) # 9000000000007b14 <kfree>
9000000000002208:	50000800 	b	8(0x8) # 9000000000002210 <rb_tree_create+0x120>
        goto bad_tree;
900000000000220c:	03400000 	andi	$r0,$r0,0x0
bad_tree:
    return NULL;
9000000000002210:	0015000c 	move	$r12,$r0
}
9000000000002214:	00150184 	move	$r4,$r12
9000000000002218:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000000221c:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000000002220:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000002224:	4c000020 	jirl	$r0,$r1,0

9000000000002228 <rb_left_rotate>:
    y->_left = x;                                               \
    x->parent = y;                                              \
    assert(!(nil->red));                                        \
}

FUNC_ROTATE(rb_left_rotate, left, right);
9000000000002228:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000222c:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000002230:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000002234:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000002238:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000000223c:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
9000000000002240:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000002244:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002248:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000000224c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000002250:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000002254:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000002258:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000225c:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000002260:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000002264:	58001dac 	beq	$r13,$r12,28(0x1c) # 9000000000002280 <rb_left_rotate+0x58>
9000000000002268:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000000226c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002270:	580011ac 	beq	$r13,$r12,16(0x10) # 9000000000002280 <rb_left_rotate+0x58>
9000000000002274:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000002278:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000227c:	5c001dac 	bne	$r13,$r12,28(0x1c) # 9000000000002298 <rb_left_rotate+0x70>
9000000000002280:	1c000386 	pcaddu12i	$r6,28(0x1c)
9000000000002284:	02d7c0c6 	addi.d	$r6,$r6,1520(0x5f0)
9000000000002288:	02818c05 	addi.w	$r5,$r0,99(0x63)
900000000000228c:	1c000384 	pcaddu12i	$r4,28(0x1c)
9000000000002290:	02d73084 	addi.d	$r4,$r4,1484(0x5cc)
9000000000002294:	54a9ec00 	bl	43500(0xa9ec) # 900000000000cc80 <__panic>
9000000000002298:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000229c:	28c0418d 	ld.d	$r13,$r12,16(0x10)
90000000000022a0:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
90000000000022a4:	29c0618d 	st.d	$r13,$r12,24(0x18)
90000000000022a8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000022ac:	28c0418c 	ld.d	$r12,$r12,16(0x10)
90000000000022b0:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
90000000000022b4:	580015ac 	beq	$r13,$r12,20(0x14) # 90000000000022c8 <rb_left_rotate+0xa0>
90000000000022b8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000022bc:	28c0418c 	ld.d	$r12,$r12,16(0x10)
90000000000022c0:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
90000000000022c4:	29c0218d 	st.d	$r13,$r12,8(0x8)
90000000000022c8:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
90000000000022cc:	28c0218d 	ld.d	$r13,$r12,8(0x8)
90000000000022d0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000022d4:	29c0218d 	st.d	$r13,$r12,8(0x8)
90000000000022d8:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
90000000000022dc:	28c0218c 	ld.d	$r12,$r12,8(0x8)
90000000000022e0:	28c0418c 	ld.d	$r12,$r12,16(0x10)
90000000000022e4:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
90000000000022e8:	5c0019ac 	bne	$r13,$r12,24(0x18) # 9000000000002300 <rb_left_rotate+0xd8>
90000000000022ec:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
90000000000022f0:	28c0218c 	ld.d	$r12,$r12,8(0x8)
90000000000022f4:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
90000000000022f8:	29c0418d 	st.d	$r13,$r12,16(0x10)
90000000000022fc:	50001400 	b	20(0x14) # 9000000000002310 <rb_left_rotate+0xe8>
9000000000002300:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000002304:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002308:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
900000000000230c:	29c0618d 	st.d	$r13,$r12,24(0x18)
9000000000002310:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002314:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000002318:	29c0418d 	st.d	$r13,$r12,16(0x10)
900000000000231c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000002320:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000002324:	29c0218d 	st.d	$r13,$r12,8(0x8)
9000000000002328:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000232c:	2880018c 	ld.w	$r12,$r12,0
9000000000002330:	40001d80 	beqz	$r12,28(0x1c) # 900000000000234c <rb_left_rotate+0x124>
9000000000002334:	1c000386 	pcaddu12i	$r6,28(0x1c)
9000000000002338:	02d5f0c6 	addi.d	$r6,$r6,1404(0x57c)
900000000000233c:	02818c05 	addi.w	$r5,$r0,99(0x63)
9000000000002340:	1c000384 	pcaddu12i	$r4,28(0x1c)
9000000000002344:	02d46084 	addi.d	$r4,$r4,1304(0x518)
9000000000002348:	54a93800 	bl	43320(0xa938) # 900000000000cc80 <__panic>
900000000000234c:	03400000 	andi	$r0,$r0,0x0
9000000000002350:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000002354:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000002358:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000235c:	4c000020 	jirl	$r0,$r1,0

9000000000002360 <rb_right_rotate>:
FUNC_ROTATE(rb_right_rotate, right, left);
9000000000002360:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000002364:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000002368:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000000236c:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000002370:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000002374:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
9000000000002378:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000237c:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002380:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000002384:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000002388:	28c0418c 	ld.d	$r12,$r12,16(0x10)
900000000000238c:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000002390:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000002394:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000002398:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000000239c:	58001dac 	beq	$r13,$r12,28(0x1c) # 90000000000023b8 <rb_right_rotate+0x58>
90000000000023a0:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
90000000000023a4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000023a8:	580011ac 	beq	$r13,$r12,16(0x10) # 90000000000023b8 <rb_right_rotate+0x58>
90000000000023ac:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
90000000000023b0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000023b4:	5c001dac 	bne	$r13,$r12,28(0x1c) # 90000000000023d0 <rb_right_rotate+0x70>
90000000000023b8:	1c000386 	pcaddu12i	$r6,28(0x1c)
90000000000023bc:	02d2e0c6 	addi.d	$r6,$r6,1208(0x4b8)
90000000000023c0:	02819005 	addi.w	$r5,$r0,100(0x64)
90000000000023c4:	1c000384 	pcaddu12i	$r4,28(0x1c)
90000000000023c8:	02d25084 	addi.d	$r4,$r4,1172(0x494)
90000000000023cc:	54a8b400 	bl	43188(0xa8b4) # 900000000000cc80 <__panic>
90000000000023d0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000023d4:	28c0618d 	ld.d	$r13,$r12,24(0x18)
90000000000023d8:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
90000000000023dc:	29c0418d 	st.d	$r13,$r12,16(0x10)
90000000000023e0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000023e4:	28c0618c 	ld.d	$r12,$r12,24(0x18)
90000000000023e8:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
90000000000023ec:	580015ac 	beq	$r13,$r12,20(0x14) # 9000000000002400 <rb_right_rotate+0xa0>
90000000000023f0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000023f4:	28c0618c 	ld.d	$r12,$r12,24(0x18)
90000000000023f8:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
90000000000023fc:	29c0218d 	st.d	$r13,$r12,8(0x8)
9000000000002400:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000002404:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000002408:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000240c:	29c0218d 	st.d	$r13,$r12,8(0x8)
9000000000002410:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000002414:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002418:	28c0618c 	ld.d	$r12,$r12,24(0x18)
900000000000241c:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000002420:	5c0019ac 	bne	$r13,$r12,24(0x18) # 9000000000002438 <rb_right_rotate+0xd8>
9000000000002424:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000002428:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000000242c:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000002430:	29c0618d 	st.d	$r13,$r12,24(0x18)
9000000000002434:	50001400 	b	20(0x14) # 9000000000002448 <rb_right_rotate+0xe8>
9000000000002438:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000243c:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002440:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000002444:	29c0418d 	st.d	$r13,$r12,16(0x10)
9000000000002448:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000244c:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000002450:	29c0618d 	st.d	$r13,$r12,24(0x18)
9000000000002454:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000002458:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
900000000000245c:	29c0218d 	st.d	$r13,$r12,8(0x8)
9000000000002460:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002464:	2880018c 	ld.w	$r12,$r12,0
9000000000002468:	40001d80 	beqz	$r12,28(0x1c) # 9000000000002484 <rb_right_rotate+0x124>
900000000000246c:	1c000386 	pcaddu12i	$r6,28(0x1c)
9000000000002470:	02d110c6 	addi.d	$r6,$r6,1092(0x444)
9000000000002474:	02819005 	addi.w	$r5,$r0,100(0x64)
9000000000002478:	1c000384 	pcaddu12i	$r4,28(0x1c)
900000000000247c:	02cf8084 	addi.d	$r4,$r4,992(0x3e0)
9000000000002480:	54a80000 	bl	43008(0xa800) # 900000000000cc80 <__panic>
9000000000002484:	03400000 	andi	$r0,$r0,0x0
9000000000002488:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000000248c:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000002490:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000002494:	4c000020 	jirl	$r0,$r1,0

9000000000002498 <rb_insert_binary>:
 * rb_insert_binary - insert @node to red-black @tree as if it were
 * a regular binary tree. This function is only intended to be called
 * by function rb_insert.
 * */
static inline void
rb_insert_binary(rb_tree *tree, rb_node *node) {
9000000000002498:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
900000000000249c:	29c12061 	st.d	$r1,$r3,72(0x48)
90000000000024a0:	29c10076 	st.d	$r22,$r3,64(0x40)
90000000000024a4:	02c14076 	addi.d	$r22,$r3,80(0x50)
90000000000024a8:	29fee2c4 	st.d	$r4,$r22,-72(0xfb8)
90000000000024ac:	29fec2c5 	st.d	$r5,$r22,-80(0xfb0)
    rb_node *x, *y, *z = node, *nil = tree->nil, *root = tree->root;
90000000000024b0:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
90000000000024b4:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
90000000000024b8:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
90000000000024bc:	28c0218c 	ld.d	$r12,$r12,8(0x8)
90000000000024c0:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
90000000000024c4:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
90000000000024c8:	28c0418c 	ld.d	$r12,$r12,16(0x10)
90000000000024cc:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)

    z->left = z->right = nil;
90000000000024d0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000024d4:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
90000000000024d8:	29c0618d 	st.d	$r13,$r12,24(0x18)
90000000000024dc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000024e0:	28c0618d 	ld.d	$r13,$r12,24(0x18)
90000000000024e4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000024e8:	29c0418d 	st.d	$r13,$r12,16(0x10)
    y = root, x = y->left;
90000000000024ec:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000024f0:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
90000000000024f4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000024f8:	28c0418c 	ld.d	$r12,$r12,16(0x10)
90000000000024fc:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (x != nil) {
9000000000002500:	50004000 	b	64(0x40) # 9000000000002540 <rb_insert_binary+0xa8>
        y = x;
9000000000002504:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002508:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
        x = (COMPARE(tree, x, node) > 0) ? x->left : x->right;
900000000000250c:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000002510:	28c0018c 	ld.d	$r12,$r12,0
9000000000002514:	28fec2c5 	ld.d	$r5,$r22,-80(0xfb0)
9000000000002518:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000251c:	4c000181 	jirl	$r1,$r12,0
9000000000002520:	0015008c 	move	$r12,$r4
9000000000002524:	6400100c 	bge	$r0,$r12,16(0x10) # 9000000000002534 <rb_insert_binary+0x9c>
9000000000002528:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000252c:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000002530:	50000c00 	b	12(0xc) # 900000000000253c <rb_insert_binary+0xa4>
9000000000002534:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002538:	28c0618c 	ld.d	$r12,$r12,24(0x18)
900000000000253c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (x != nil) {
9000000000002540:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000002544:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000002548:	5fffbdac 	bne	$r13,$r12,-68(0x3ffbc) # 9000000000002504 <rb_insert_binary+0x6c>
    }
    z->parent = y;
900000000000254c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000002550:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000002554:	29c0218d 	st.d	$r13,$r12,8(0x8)
    if (y == root || COMPARE(tree, y, z) > 0) {
9000000000002558:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
900000000000255c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000002560:	580021ac 	beq	$r13,$r12,32(0x20) # 9000000000002580 <rb_insert_binary+0xe8>
9000000000002564:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000002568:	28c0018c 	ld.d	$r12,$r12,0
900000000000256c:	28ff62c5 	ld.d	$r5,$r22,-40(0xfd8)
9000000000002570:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000002574:	4c000181 	jirl	$r1,$r12,0
9000000000002578:	0015008c 	move	$r12,$r4
900000000000257c:	6400140c 	bge	$r0,$r12,20(0x14) # 9000000000002590 <rb_insert_binary+0xf8>
        y->left = z;
9000000000002580:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002584:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000002588:	29c0418d 	st.d	$r13,$r12,16(0x10)
900000000000258c:	50001000 	b	16(0x10) # 900000000000259c <rb_insert_binary+0x104>
    }
    else {
        y->right = z;
9000000000002590:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002594:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000002598:	29c0618d 	st.d	$r13,$r12,24(0x18)
    }
}
900000000000259c:	03400000 	andi	$r0,$r0,0x0
90000000000025a0:	28c12061 	ld.d	$r1,$r3,72(0x48)
90000000000025a4:	28c10076 	ld.d	$r22,$r3,64(0x40)
90000000000025a8:	02c14063 	addi.d	$r3,$r3,80(0x50)
90000000000025ac:	4c000020 	jirl	$r0,$r1,0

90000000000025b0 <rb_insert>:

/* rb_insert - insert a node to red-black tree */
void
rb_insert(rb_tree *tree, rb_node *node) {
90000000000025b0:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000000025b4:	29c0a061 	st.d	$r1,$r3,40(0x28)
90000000000025b8:	29c08076 	st.d	$r22,$r3,32(0x20)
90000000000025bc:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000000025c0:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
90000000000025c4:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
    rb_insert_binary(tree, node);
90000000000025c8:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
90000000000025cc:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
90000000000025d0:	57fecbff 	bl	-312(0xffffec8) # 9000000000002498 <rb_insert_binary>
    node->red = 1;
90000000000025d4:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
90000000000025d8:	0280040d 	addi.w	$r13,$r0,1(0x1)
90000000000025dc:	2980018d 	st.w	$r13,$r12,0

    rb_node *x = node, *y;
90000000000025e0:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
90000000000025e4:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
            x->parent->parent->red = 1;                         \
            rb_##_right##_rotate(tree, x->parent->parent);      \
        }                                                       \
    } while (0)

    while (x->parent->red) {
90000000000025e8:	5001a400 	b	420(0x1a4) # 900000000000278c <rb_insert+0x1dc>
        if (x->parent == x->parent->parent->left) {
90000000000025ec:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000025f0:	28c0218d 	ld.d	$r13,$r12,8(0x8)
90000000000025f4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000025f8:	28c0218c 	ld.d	$r12,$r12,8(0x8)
90000000000025fc:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002600:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000002604:	5c00c9ac 	bne	$r13,$r12,200(0xc8) # 90000000000026cc <rb_insert+0x11c>
            RB_INSERT_SUB(left, right);
9000000000002608:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000260c:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002610:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002614:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000002618:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
900000000000261c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002620:	2880018c 	ld.w	$r12,$r12,0
9000000000002624:	40004180 	beqz	$r12,64(0x40) # 9000000000002664 <rb_insert+0xb4>
9000000000002628:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000262c:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002630:	29800180 	st.w	$r0,$r12,0
9000000000002634:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002638:	29800180 	st.w	$r0,$r12,0
900000000000263c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002640:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002644:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002648:	0280040d 	addi.w	$r13,$r0,1(0x1)
900000000000264c:	2980018d 	st.w	$r13,$r12,0
9000000000002650:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002654:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002658:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000000265c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000002660:	50012c00 	b	300(0x12c) # 900000000000278c <rb_insert+0x1dc>
9000000000002664:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002668:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000000266c:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000002670:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000002674:	5c001dac 	bne	$r13,$r12,28(0x1c) # 9000000000002690 <rb_insert+0xe0>
9000000000002678:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000267c:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002680:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000002684:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
9000000000002688:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000000268c:	57fb9fff 	bl	-1124(0xffffb9c) # 9000000000002228 <rb_left_rotate>
9000000000002690:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002694:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002698:	29800180 	st.w	$r0,$r12,0
900000000000269c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000026a0:	28c0218c 	ld.d	$r12,$r12,8(0x8)
90000000000026a4:	28c0218c 	ld.d	$r12,$r12,8(0x8)
90000000000026a8:	0280040d 	addi.w	$r13,$r0,1(0x1)
90000000000026ac:	2980018d 	st.w	$r13,$r12,0
90000000000026b0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000026b4:	28c0218c 	ld.d	$r12,$r12,8(0x8)
90000000000026b8:	28c0218c 	ld.d	$r12,$r12,8(0x8)
90000000000026bc:	00150185 	move	$r5,$r12
90000000000026c0:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
90000000000026c4:	57fc9fff 	bl	-868(0xffffc9c) # 9000000000002360 <rb_right_rotate>
90000000000026c8:	5000c400 	b	196(0xc4) # 900000000000278c <rb_insert+0x1dc>
        }
        else {
            RB_INSERT_SUB(right, left);
90000000000026cc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000026d0:	28c0218c 	ld.d	$r12,$r12,8(0x8)
90000000000026d4:	28c0218c 	ld.d	$r12,$r12,8(0x8)
90000000000026d8:	28c0418c 	ld.d	$r12,$r12,16(0x10)
90000000000026dc:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
90000000000026e0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000026e4:	2880018c 	ld.w	$r12,$r12,0
90000000000026e8:	40004180 	beqz	$r12,64(0x40) # 9000000000002728 <rb_insert+0x178>
90000000000026ec:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000026f0:	28c0218c 	ld.d	$r12,$r12,8(0x8)
90000000000026f4:	29800180 	st.w	$r0,$r12,0
90000000000026f8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000026fc:	29800180 	st.w	$r0,$r12,0
9000000000002700:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002704:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002708:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000000270c:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000002710:	2980018d 	st.w	$r13,$r12,0
9000000000002714:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002718:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000000271c:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002720:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000002724:	50006800 	b	104(0x68) # 900000000000278c <rb_insert+0x1dc>
9000000000002728:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000272c:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002730:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000002734:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000002738:	5c001dac 	bne	$r13,$r12,28(0x1c) # 9000000000002754 <rb_insert+0x1a4>
900000000000273c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002740:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002744:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000002748:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
900000000000274c:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000002750:	57fc13ff 	bl	-1008(0xffffc10) # 9000000000002360 <rb_right_rotate>
9000000000002754:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002758:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000000275c:	29800180 	st.w	$r0,$r12,0
9000000000002760:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002764:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002768:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000000276c:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000002770:	2980018d 	st.w	$r13,$r12,0
9000000000002774:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002778:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000000277c:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002780:	00150185 	move	$r5,$r12
9000000000002784:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000002788:	57faa3ff 	bl	-1376(0xffffaa0) # 9000000000002228 <rb_left_rotate>
    while (x->parent->red) {
900000000000278c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002790:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002794:	2880018c 	ld.w	$r12,$r12,0
9000000000002798:	47fe559f 	bnez	$r12,-428(0x7ffe54) # 90000000000025ec <rb_insert+0x3c>
        }
    }
    tree->root->left->red = 0;
900000000000279c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000027a0:	28c0418c 	ld.d	$r12,$r12,16(0x10)
90000000000027a4:	28c0418c 	ld.d	$r12,$r12,16(0x10)
90000000000027a8:	29800180 	st.w	$r0,$r12,0
    assert(!(tree->nil->red) && !(tree->root->red));
90000000000027ac:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000027b0:	28c0218c 	ld.d	$r12,$r12,8(0x8)
90000000000027b4:	2880018c 	ld.w	$r12,$r12,0
90000000000027b8:	44001580 	bnez	$r12,20(0x14) # 90000000000027cc <rb_insert+0x21c>
90000000000027bc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000027c0:	28c0418c 	ld.d	$r12,$r12,16(0x10)
90000000000027c4:	2880018c 	ld.w	$r12,$r12,0
90000000000027c8:	40001d80 	beqz	$r12,28(0x1c) # 90000000000027e4 <rb_insert+0x234>
90000000000027cc:	1c000386 	pcaddu12i	$r6,28(0x1c)
90000000000027d0:	02c410c6 	addi.d	$r6,$r6,260(0x104)
90000000000027d4:	0282a005 	addi.w	$r5,$r0,168(0xa8)
90000000000027d8:	1c000384 	pcaddu12i	$r4,28(0x1c)
90000000000027dc:	02c20084 	addi.d	$r4,$r4,128(0x80)
90000000000027e0:	54a4a000 	bl	42144(0xa4a0) # 900000000000cc80 <__panic>

#undef RB_INSERT_SUB
}
90000000000027e4:	03400000 	andi	$r0,$r0,0x0
90000000000027e8:	28c0a061 	ld.d	$r1,$r3,40(0x28)
90000000000027ec:	28c08076 	ld.d	$r22,$r3,32(0x20)
90000000000027f0:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000000027f4:	4c000020 	jirl	$r0,$r1,0

90000000000027f8 <rb_tree_successor>:
 * rb_tree_successor - returns the successor of @node, or nil
 * if no successor exists. Make sure that @node must belong to @tree,
 * and this function should only be called by rb_node_prev.
 * */
static inline rb_node *
rb_tree_successor(rb_tree *tree, rb_node *node) {
90000000000027f8:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
90000000000027fc:	29c0e076 	st.d	$r22,$r3,56(0x38)
9000000000002800:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000002804:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
9000000000002808:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
    rb_node *x = node, *y, *nil = tree->nil;
900000000000280c:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000002810:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000002814:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000002818:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000000281c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)

    if ((y = x->right) != nil) {
9000000000002820:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002824:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000002828:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
900000000000282c:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000002830:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000002834:	58002dac 	beq	$r13,$r12,44(0x2c) # 9000000000002860 <rb_tree_successor+0x68>
        while (y->left != nil) {
9000000000002838:	50001000 	b	16(0x10) # 9000000000002848 <rb_tree_successor+0x50>
            y = y->left;
900000000000283c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002840:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000002844:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
        while (y->left != nil) {
9000000000002848:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000284c:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000002850:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000002854:	5fffe9ac 	bne	$r13,$r12,-24(0x3ffe8) # 900000000000283c <rb_tree_successor+0x44>
        }
        return y;
9000000000002858:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000285c:	50005400 	b	84(0x54) # 90000000000028b0 <rb_tree_successor+0xb8>
    }
    else {
        y = x->parent;
9000000000002860:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002864:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002868:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
        while (x == y->right) {
900000000000286c:	50001800 	b	24(0x18) # 9000000000002884 <rb_tree_successor+0x8c>
            x = y, y = y->parent;
9000000000002870:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002874:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000002878:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000287c:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002880:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
        while (x == y->right) {
9000000000002884:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002888:	28c0618c 	ld.d	$r12,$r12,24(0x18)
900000000000288c:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000002890:	5bffe1ac 	beq	$r13,$r12,-32(0x3ffe0) # 9000000000002870 <rb_tree_successor+0x78>
        }
        if (y == tree->root) {
9000000000002894:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000002898:	28c0418c 	ld.d	$r12,$r12,16(0x10)
900000000000289c:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
90000000000028a0:	5c000dac 	bne	$r13,$r12,12(0xc) # 90000000000028ac <rb_tree_successor+0xb4>
            return nil;
90000000000028a4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000028a8:	50000800 	b	8(0x8) # 90000000000028b0 <rb_tree_successor+0xb8>
        }
        return y;
90000000000028ac:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
    }
}
90000000000028b0:	00150184 	move	$r4,$r12
90000000000028b4:	28c0e076 	ld.d	$r22,$r3,56(0x38)
90000000000028b8:	02c10063 	addi.d	$r3,$r3,64(0x40)
90000000000028bc:	4c000020 	jirl	$r0,$r1,0

90000000000028c0 <rb_tree_predecessor>:
/* *
 * rb_tree_predecessor - returns the predecessor of @node, or nil
 * if no predecessor exists, likes rb_tree_successor.
 * */
static inline rb_node *
rb_tree_predecessor(rb_tree *tree, rb_node *node) {
90000000000028c0:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
90000000000028c4:	29c0e076 	st.d	$r22,$r3,56(0x38)
90000000000028c8:	02c10076 	addi.d	$r22,$r3,64(0x40)
90000000000028cc:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
90000000000028d0:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
    rb_node *x = node, *y, *nil = tree->nil;
90000000000028d4:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
90000000000028d8:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
90000000000028dc:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000028e0:	28c0218c 	ld.d	$r12,$r12,8(0x8)
90000000000028e4:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)

    if ((y = x->left) != nil) {
90000000000028e8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000028ec:	28c0418c 	ld.d	$r12,$r12,16(0x10)
90000000000028f0:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
90000000000028f4:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
90000000000028f8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000028fc:	58002dac 	beq	$r13,$r12,44(0x2c) # 9000000000002928 <rb_tree_predecessor+0x68>
        while (y->right != nil) {
9000000000002900:	50001000 	b	16(0x10) # 9000000000002910 <rb_tree_predecessor+0x50>
            y = y->right;
9000000000002904:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002908:	28c0618c 	ld.d	$r12,$r12,24(0x18)
900000000000290c:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
        while (y->right != nil) {
9000000000002910:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002914:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000002918:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000291c:	5fffe9ac 	bne	$r13,$r12,-24(0x3ffe8) # 9000000000002904 <rb_tree_predecessor+0x44>
        }
        return y;
9000000000002920:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002924:	50005400 	b	84(0x54) # 9000000000002978 <rb_tree_predecessor+0xb8>
    }
    else {
        y = x->parent;
9000000000002928:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000292c:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002930:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
        while (x == y->left) {
9000000000002934:	50003000 	b	48(0x30) # 9000000000002964 <rb_tree_predecessor+0xa4>
            if (y == tree->root) {
9000000000002938:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000293c:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000002940:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000002944:	5c000dac 	bne	$r13,$r12,12(0xc) # 9000000000002950 <rb_tree_predecessor+0x90>
                return nil;
9000000000002948:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000294c:	50002c00 	b	44(0x2c) # 9000000000002978 <rb_tree_predecessor+0xb8>
            }
            x = y, y = y->parent;
9000000000002950:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002954:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000002958:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000295c:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002960:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
        while (x == y->left) {
9000000000002964:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002968:	28c0418c 	ld.d	$r12,$r12,16(0x10)
900000000000296c:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000002970:	5bffc9ac 	beq	$r13,$r12,-56(0x3ffc8) # 9000000000002938 <rb_tree_predecessor+0x78>
        }
        return y;
9000000000002974:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
    }
}
9000000000002978:	00150184 	move	$r4,$r12
900000000000297c:	28c0e076 	ld.d	$r22,$r3,56(0x38)
9000000000002980:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000002984:	4c000020 	jirl	$r0,$r1,0

9000000000002988 <rb_search>:
 * rb_search - returns a node with value 'equal' to @key (according to
 * function @compare). If there're multiple nodes with value 'equal' to @key,
 * the functions returns the one highest in the tree.
 * */
rb_node *
rb_search(rb_tree *tree, int (*compare)(rb_node *node, void *key), void *key) {
9000000000002988:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
900000000000298c:	29c12061 	st.d	$r1,$r3,72(0x48)
9000000000002990:	29c10076 	st.d	$r22,$r3,64(0x40)
9000000000002994:	02c14076 	addi.d	$r22,$r3,80(0x50)
9000000000002998:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
900000000000299c:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
90000000000029a0:	29fee2c6 	st.d	$r6,$r22,-72(0xfb8)
    rb_node *nil = tree->nil, *node = tree->root->left;
90000000000029a4:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000029a8:	28c0218c 	ld.d	$r12,$r12,8(0x8)
90000000000029ac:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
90000000000029b0:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000029b4:	28c0418c 	ld.d	$r12,$r12,16(0x10)
90000000000029b8:	28c0418c 	ld.d	$r12,$r12,16(0x10)
90000000000029bc:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    int r;
    while (node != nil && (r = compare(node, key)) != 0) {
90000000000029c0:	50002400 	b	36(0x24) # 90000000000029e4 <rb_search+0x5c>
        node = (r > 0) ? node->left : node->right;
90000000000029c4:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
90000000000029c8:	6400100c 	bge	$r0,$r12,16(0x10) # 90000000000029d8 <rb_search+0x50>
90000000000029cc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000029d0:	28c0418c 	ld.d	$r12,$r12,16(0x10)
90000000000029d4:	50000c00 	b	12(0xc) # 90000000000029e0 <rb_search+0x58>
90000000000029d8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000029dc:	28c0618c 	ld.d	$r12,$r12,24(0x18)
90000000000029e0:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (node != nil && (r = compare(node, key)) != 0) {
90000000000029e4:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
90000000000029e8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000029ec:	580025ac 	beq	$r13,$r12,36(0x24) # 9000000000002a10 <rb_search+0x88>
90000000000029f0:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
90000000000029f4:	28fee2c5 	ld.d	$r5,$r22,-72(0xfb8)
90000000000029f8:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
90000000000029fc:	4c000181 	jirl	$r1,$r12,0
9000000000002a00:	0015008c 	move	$r12,$r4
9000000000002a04:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
9000000000002a08:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000002a0c:	47ffb99f 	bnez	$r12,-72(0x7fffb8) # 90000000000029c4 <rb_search+0x3c>
    }
    return (node != nil) ? node : NULL;
9000000000002a10:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000002a14:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002a18:	58000dac 	beq	$r13,$r12,12(0xc) # 9000000000002a24 <rb_search+0x9c>
9000000000002a1c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002a20:	50000800 	b	8(0x8) # 9000000000002a28 <rb_search+0xa0>
9000000000002a24:	0015000c 	move	$r12,$r0
}
9000000000002a28:	00150184 	move	$r4,$r12
9000000000002a2c:	28c12061 	ld.d	$r1,$r3,72(0x48)
9000000000002a30:	28c10076 	ld.d	$r22,$r3,64(0x40)
9000000000002a34:	02c14063 	addi.d	$r3,$r3,80(0x50)
9000000000002a38:	4c000020 	jirl	$r0,$r1,0

9000000000002a3c <rb_delete_fixup>:
/* *
 * rb_delete_fixup - performs rotations and changes colors to restore
 * red-black properties after a node is deleted.
 * */
static void
rb_delete_fixup(rb_tree *tree, rb_node *node) {
9000000000002a3c:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000002a40:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000002a44:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000002a48:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000002a4c:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
9000000000002a50:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
    rb_node *x = node, *w, *root = tree->root->left;
9000000000002a54:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000002a58:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000002a5c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000002a60:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000002a64:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000002a68:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
            rb_##_left##_rotate(tree, x->parent);               \
            x = root;                                           \
        }                                                       \
    } while (0)

    while (x != root && !x->red) {
9000000000002a6c:	50025c00 	b	604(0x25c) # 9000000000002cc8 <rb_delete_fixup+0x28c>
        if (x == x->parent->left) {
9000000000002a70:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002a74:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002a78:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000002a7c:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000002a80:	5c0129ac 	bne	$r13,$r12,296(0x128) # 9000000000002ba8 <rb_delete_fixup+0x16c>
            RB_DELETE_FIXUP_SUB(left, right);
9000000000002a84:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002a88:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002a8c:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000002a90:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000002a94:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002a98:	2880018c 	ld.w	$r12,$r12,0
9000000000002a9c:	40004180 	beqz	$r12,64(0x40) # 9000000000002adc <rb_delete_fixup+0xa0>
9000000000002aa0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002aa4:	29800180 	st.w	$r0,$r12,0
9000000000002aa8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002aac:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002ab0:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000002ab4:	2980018d 	st.w	$r13,$r12,0
9000000000002ab8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002abc:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002ac0:	00150185 	move	$r5,$r12
9000000000002ac4:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000002ac8:	57f763ff 	bl	-2208(0xffff760) # 9000000000002228 <rb_left_rotate>
9000000000002acc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002ad0:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002ad4:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000002ad8:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000002adc:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002ae0:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000002ae4:	2880018c 	ld.w	$r12,$r12,0
9000000000002ae8:	44003180 	bnez	$r12,48(0x30) # 9000000000002b18 <rb_delete_fixup+0xdc>
9000000000002aec:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002af0:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000002af4:	2880018c 	ld.w	$r12,$r12,0
9000000000002af8:	44002180 	bnez	$r12,32(0x20) # 9000000000002b18 <rb_delete_fixup+0xdc>
9000000000002afc:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002b00:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000002b04:	2980018d 	st.w	$r13,$r12,0
9000000000002b08:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002b0c:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002b10:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000002b14:	5001b400 	b	436(0x1b4) # 9000000000002cc8 <rb_delete_fixup+0x28c>
9000000000002b18:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002b1c:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000002b20:	2880018c 	ld.w	$r12,$r12,0
9000000000002b24:	44003980 	bnez	$r12,56(0x38) # 9000000000002b5c <rb_delete_fixup+0x120>
9000000000002b28:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002b2c:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000002b30:	29800180 	st.w	$r0,$r12,0
9000000000002b34:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002b38:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000002b3c:	2980018d 	st.w	$r13,$r12,0
9000000000002b40:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
9000000000002b44:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000002b48:	57f81bff 	bl	-2024(0xffff818) # 9000000000002360 <rb_right_rotate>
9000000000002b4c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002b50:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002b54:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000002b58:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000002b5c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002b60:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002b64:	2880018d 	ld.w	$r13,$r12,0
9000000000002b68:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002b6c:	2980018d 	st.w	$r13,$r12,0
9000000000002b70:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002b74:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002b78:	29800180 	st.w	$r0,$r12,0
9000000000002b7c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002b80:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000002b84:	29800180 	st.w	$r0,$r12,0
9000000000002b88:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002b8c:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002b90:	00150185 	move	$r5,$r12
9000000000002b94:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000002b98:	57f693ff 	bl	-2416(0xffff690) # 9000000000002228 <rb_left_rotate>
9000000000002b9c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000002ba0:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000002ba4:	50012400 	b	292(0x124) # 9000000000002cc8 <rb_delete_fixup+0x28c>
        }
        else {
            RB_DELETE_FIXUP_SUB(right, left);
9000000000002ba8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002bac:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002bb0:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000002bb4:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000002bb8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002bbc:	2880018c 	ld.w	$r12,$r12,0
9000000000002bc0:	40004180 	beqz	$r12,64(0x40) # 9000000000002c00 <rb_delete_fixup+0x1c4>
9000000000002bc4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002bc8:	29800180 	st.w	$r0,$r12,0
9000000000002bcc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002bd0:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002bd4:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000002bd8:	2980018d 	st.w	$r13,$r12,0
9000000000002bdc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002be0:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002be4:	00150185 	move	$r5,$r12
9000000000002be8:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000002bec:	57f777ff 	bl	-2188(0xffff774) # 9000000000002360 <rb_right_rotate>
9000000000002bf0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002bf4:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002bf8:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000002bfc:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000002c00:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002c04:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000002c08:	2880018c 	ld.w	$r12,$r12,0
9000000000002c0c:	44003180 	bnez	$r12,48(0x30) # 9000000000002c3c <rb_delete_fixup+0x200>
9000000000002c10:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002c14:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000002c18:	2880018c 	ld.w	$r12,$r12,0
9000000000002c1c:	44002180 	bnez	$r12,32(0x20) # 9000000000002c3c <rb_delete_fixup+0x200>
9000000000002c20:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002c24:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000002c28:	2980018d 	st.w	$r13,$r12,0
9000000000002c2c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002c30:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002c34:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000002c38:	50009000 	b	144(0x90) # 9000000000002cc8 <rb_delete_fixup+0x28c>
9000000000002c3c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002c40:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000002c44:	2880018c 	ld.w	$r12,$r12,0
9000000000002c48:	44003980 	bnez	$r12,56(0x38) # 9000000000002c80 <rb_delete_fixup+0x244>
9000000000002c4c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002c50:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000002c54:	29800180 	st.w	$r0,$r12,0
9000000000002c58:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002c5c:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000002c60:	2980018d 	st.w	$r13,$r12,0
9000000000002c64:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
9000000000002c68:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000002c6c:	57f5bfff 	bl	-2628(0xffff5bc) # 9000000000002228 <rb_left_rotate>
9000000000002c70:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002c74:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002c78:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000002c7c:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000002c80:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002c84:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002c88:	2880018d 	ld.w	$r13,$r12,0
9000000000002c8c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002c90:	2980018d 	st.w	$r13,$r12,0
9000000000002c94:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002c98:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002c9c:	29800180 	st.w	$r0,$r12,0
9000000000002ca0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002ca4:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000002ca8:	29800180 	st.w	$r0,$r12,0
9000000000002cac:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002cb0:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002cb4:	00150185 	move	$r5,$r12
9000000000002cb8:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000002cbc:	57f6a7ff 	bl	-2396(0xffff6a4) # 9000000000002360 <rb_right_rotate>
9000000000002cc0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000002cc4:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (x != root && !x->red) {
9000000000002cc8:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000002ccc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000002cd0:	580011ac 	beq	$r13,$r12,16(0x10) # 9000000000002ce0 <rb_delete_fixup+0x2a4>
9000000000002cd4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002cd8:	2880018c 	ld.w	$r12,$r12,0
9000000000002cdc:	43fd959f 	beqz	$r12,-620(0x7ffd94) # 9000000000002a70 <rb_delete_fixup+0x34>
        }
    }
    x->red = 0;
9000000000002ce0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002ce4:	29800180 	st.w	$r0,$r12,0

#undef RB_DELETE_FIXUP_SUB
}
9000000000002ce8:	03400000 	andi	$r0,$r0,0x0
9000000000002cec:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000000002cf0:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000000002cf4:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000002cf8:	4c000020 	jirl	$r0,$r1,0

9000000000002cfc <rb_delete>:
/* *
 * rb_delete - deletes @node from @tree, and calls rb_delete_fixup to
 * restore red-black properties.
 * */
void
rb_delete(rb_tree *tree, rb_node *node) {
9000000000002cfc:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
9000000000002d00:	29c12061 	st.d	$r1,$r3,72(0x48)
9000000000002d04:	29c10076 	st.d	$r22,$r3,64(0x40)
9000000000002d08:	02c14076 	addi.d	$r22,$r3,80(0x50)
9000000000002d0c:	29fee2c4 	st.d	$r4,$r22,-72(0xfb8)
9000000000002d10:	29fec2c5 	st.d	$r5,$r22,-80(0xfb0)
    rb_node *x, *y, *z = node;
9000000000002d14:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
9000000000002d18:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    rb_node *nil = tree->nil, *root = tree->root;
9000000000002d1c:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000002d20:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002d24:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000002d28:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000002d2c:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000002d30:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)

    y = (z->left == nil || z->right == nil) ? z : rb_tree_successor(tree, z);
9000000000002d34:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002d38:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000002d3c:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000002d40:	580029ac 	beq	$r13,$r12,40(0x28) # 9000000000002d68 <rb_delete+0x6c>
9000000000002d44:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002d48:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000002d4c:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000002d50:	580019ac 	beq	$r13,$r12,24(0x18) # 9000000000002d68 <rb_delete+0x6c>
9000000000002d54:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
9000000000002d58:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
9000000000002d5c:	57fa9fff 	bl	-1380(0xffffa9c) # 90000000000027f8 <rb_tree_successor>
9000000000002d60:	0015008c 	move	$r12,$r4
9000000000002d64:	50000800 	b	8(0x8) # 9000000000002d6c <rb_delete+0x70>
9000000000002d68:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002d6c:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    x = (y->left != nil) ? y->left : y->right;
9000000000002d70:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000002d74:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000002d78:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000002d7c:	580011ac 	beq	$r13,$r12,16(0x10) # 9000000000002d8c <rb_delete+0x90>
9000000000002d80:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000002d84:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000002d88:	50000c00 	b	12(0xc) # 9000000000002d94 <rb_delete+0x98>
9000000000002d8c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000002d90:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000002d94:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)

    assert(y != root && y != nil);
9000000000002d98:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000002d9c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000002da0:	580011ac 	beq	$r13,$r12,16(0x10) # 9000000000002db0 <rb_delete+0xb4>
9000000000002da4:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000002da8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000002dac:	5c001dac 	bne	$r13,$r12,28(0x1c) # 9000000000002dc8 <rb_delete+0xcc>
9000000000002db0:	1c000386 	pcaddu12i	$r6,28(0x1c)
9000000000002db4:	02ed80c6 	addi.d	$r6,$r6,-1184(0xb60)
9000000000002db8:	0284b805 	addi.w	$r5,$r0,302(0x12e)
9000000000002dbc:	1c000384 	pcaddu12i	$r4,28(0x1c)
9000000000002dc0:	02ea7084 	addi.d	$r4,$r4,-1380(0xa9c)
9000000000002dc4:	549ebc00 	bl	40636(0x9ebc) # 900000000000cc80 <__panic>

    x->parent = y->parent;
9000000000002dc8:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000002dcc:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000002dd0:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000002dd4:	29c0218d 	st.d	$r13,$r12,8(0x8)
    if (y == y->parent->left) {
9000000000002dd8:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000002ddc:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002de0:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000002de4:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000002de8:	5c0019ac 	bne	$r13,$r12,24(0x18) # 9000000000002e00 <rb_delete+0x104>
        y->parent->left = x;
9000000000002dec:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000002df0:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002df4:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
9000000000002df8:	29c0418d 	st.d	$r13,$r12,16(0x10)
9000000000002dfc:	50001400 	b	20(0x14) # 9000000000002e10 <rb_delete+0x114>
    }
    else {
        y->parent->right = x;
9000000000002e00:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000002e04:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002e08:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
9000000000002e0c:	29c0618d 	st.d	$r13,$r12,24(0x18)
    }

    bool need_fixup = !(y->red);
9000000000002e10:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000002e14:	2880018c 	ld.w	$r12,$r12,0
9000000000002e18:	0240058c 	sltui	$r12,$r12,1(0x1)
9000000000002e1c:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
9000000000002e20:	29bf12cc 	st.w	$r12,$r22,-60(0xfc4)

    if (y != z) {
9000000000002e24:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000002e28:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002e2c:	580085ac 	beq	$r13,$r12,132(0x84) # 9000000000002eb0 <rb_delete+0x1b4>
        if (z == z->parent->left) {
9000000000002e30:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002e34:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002e38:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000002e3c:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000002e40:	5c0019ac 	bne	$r13,$r12,24(0x18) # 9000000000002e58 <rb_delete+0x15c>
            z->parent->left = y;
9000000000002e44:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002e48:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002e4c:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000002e50:	29c0418d 	st.d	$r13,$r12,16(0x10)
9000000000002e54:	50001400 	b	20(0x14) # 9000000000002e68 <rb_delete+0x16c>
        }
        else {
            z->parent->right = y;
9000000000002e58:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002e5c:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002e60:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000002e64:	29c0618d 	st.d	$r13,$r12,24(0x18)
        }
        z->left->parent = z->right->parent = y;
9000000000002e68:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002e6c:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000002e70:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000002e74:	29c0218d 	st.d	$r13,$r12,8(0x8)
9000000000002e78:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000002e7c:	28c041ad 	ld.d	$r13,$r13,16(0x10)
9000000000002e80:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002e84:	29c021ac 	st.d	$r12,$r13,8(0x8)
        *y = *z;
9000000000002e88:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000002e8c:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000002e90:	28c001b0 	ld.d	$r16,$r13,0
9000000000002e94:	28c021af 	ld.d	$r15,$r13,8(0x8)
9000000000002e98:	28c041ae 	ld.d	$r14,$r13,16(0x10)
9000000000002e9c:	28c061ad 	ld.d	$r13,$r13,24(0x18)
9000000000002ea0:	29c00190 	st.d	$r16,$r12,0
9000000000002ea4:	29c0218f 	st.d	$r15,$r12,8(0x8)
9000000000002ea8:	29c0418e 	st.d	$r14,$r12,16(0x10)
9000000000002eac:	29c0618d 	st.d	$r13,$r12,24(0x18)
    }
    if (need_fixup) {
9000000000002eb0:	28bf12cc 	ld.w	$r12,$r22,-60(0xfc4)
9000000000002eb4:	40001180 	beqz	$r12,16(0x10) # 9000000000002ec4 <rb_delete+0x1c8>
        rb_delete_fixup(tree, x);
9000000000002eb8:	28ff22c5 	ld.d	$r5,$r22,-56(0xfc8)
9000000000002ebc:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
9000000000002ec0:	57fb7fff 	bl	-1156(0xffffb7c) # 9000000000002a3c <rb_delete_fixup>
    }
}
9000000000002ec4:	03400000 	andi	$r0,$r0,0x0
9000000000002ec8:	28c12061 	ld.d	$r1,$r3,72(0x48)
9000000000002ecc:	28c10076 	ld.d	$r22,$r3,64(0x40)
9000000000002ed0:	02c14063 	addi.d	$r3,$r3,80(0x50)
9000000000002ed4:	4c000020 	jirl	$r0,$r1,0

9000000000002ed8 <rb_tree_destroy>:

/* rb_tree_destroy - destroy a tree and free memory */
void
rb_tree_destroy(rb_tree *tree) {
9000000000002ed8:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000002edc:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000002ee0:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000002ee4:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000002ee8:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    kfree(tree->root);
9000000000002eec:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002ef0:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000002ef4:	00150184 	move	$r4,$r12
9000000000002ef8:	544c1c00 	bl	19484(0x4c1c) # 9000000000007b14 <kfree>
    kfree(tree->nil);
9000000000002efc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002f00:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002f04:	00150184 	move	$r4,$r12
9000000000002f08:	544c0c00 	bl	19468(0x4c0c) # 9000000000007b14 <kfree>
    kfree(tree);
9000000000002f0c:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000002f10:	544c0400 	bl	19460(0x4c04) # 9000000000007b14 <kfree>
}
9000000000002f14:	03400000 	andi	$r0,$r0,0x0
9000000000002f18:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000002f1c:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000002f20:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000002f24:	4c000020 	jirl	$r0,$r1,0

9000000000002f28 <rb_node_prev>:
/* *
 * rb_node_prev - returns the predecessor node of @node in @tree,
 * or 'NULL' if no predecessor exists.
 * */
rb_node *
rb_node_prev(rb_tree *tree, rb_node *node) {
9000000000002f28:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000002f2c:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000002f30:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000002f34:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000002f38:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000002f3c:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
    rb_node *prev = rb_tree_predecessor(tree, node);
9000000000002f40:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
9000000000002f44:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000002f48:	57f97bff 	bl	-1672(0xffff978) # 90000000000028c0 <rb_tree_predecessor>
9000000000002f4c:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    return (prev != tree->nil) ? prev : NULL;
9000000000002f50:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000002f54:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002f58:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000002f5c:	58000dac 	beq	$r13,$r12,12(0xc) # 9000000000002f68 <rb_node_prev+0x40>
9000000000002f60:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002f64:	50000800 	b	8(0x8) # 9000000000002f6c <rb_node_prev+0x44>
9000000000002f68:	0015000c 	move	$r12,$r0
}
9000000000002f6c:	00150184 	move	$r4,$r12
9000000000002f70:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000002f74:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000002f78:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000002f7c:	4c000020 	jirl	$r0,$r1,0

9000000000002f80 <rb_node_next>:
/* *
 * rb_node_next - returns the successor node of @node in @tree,
 * or 'NULL' if no successor exists.
 * */
rb_node *
rb_node_next(rb_tree *tree, rb_node *node) {
9000000000002f80:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000002f84:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000002f88:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000002f8c:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000002f90:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000002f94:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
    rb_node *next = rb_tree_successor(tree, node);
9000000000002f98:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
9000000000002f9c:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000002fa0:	57f85bff 	bl	-1960(0xffff858) # 90000000000027f8 <rb_tree_successor>
9000000000002fa4:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    return (next != tree->nil) ? next : NULL;
9000000000002fa8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000002fac:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000002fb0:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000002fb4:	58000dac 	beq	$r13,$r12,12(0xc) # 9000000000002fc0 <rb_node_next+0x40>
9000000000002fb8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000002fbc:	50000800 	b	8(0x8) # 9000000000002fc4 <rb_node_next+0x44>
9000000000002fc0:	0015000c 	move	$r12,$r0
}
9000000000002fc4:	00150184 	move	$r4,$r12
9000000000002fc8:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000002fcc:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000002fd0:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000002fd4:	4c000020 	jirl	$r0,$r1,0

9000000000002fd8 <rb_node_root>:

/* rb_node_root - returns the root node of a @tree, or 'NULL' if tree is empty */
rb_node *
rb_node_root(rb_tree *tree) {
9000000000002fd8:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000002fdc:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000002fe0:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000002fe4:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    rb_node *node = tree->root->left;
9000000000002fe8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000002fec:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000002ff0:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000002ff4:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    return (node != tree->nil) ? node : NULL;
9000000000002ff8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000002ffc:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000003000:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000003004:	58000dac 	beq	$r13,$r12,12(0xc) # 9000000000003010 <rb_node_root+0x38>
9000000000003008:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000300c:	50000800 	b	8(0x8) # 9000000000003014 <rb_node_root+0x3c>
9000000000003010:	0015000c 	move	$r12,$r0
}
9000000000003014:	00150184 	move	$r4,$r12
9000000000003018:	28c0a076 	ld.d	$r22,$r3,40(0x28)
900000000000301c:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000003020:	4c000020 	jirl	$r0,$r1,0

9000000000003024 <rb_node_left>:

/* rb_node_left - gets the left child of @node, or 'NULL' if no such node */
rb_node *
rb_node_left(rb_tree *tree, rb_node *node) {
9000000000003024:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000003028:	29c0a076 	st.d	$r22,$r3,40(0x28)
900000000000302c:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000003030:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000003034:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
    rb_node *left = node->left;
9000000000003038:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000303c:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000003040:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    return (left != tree->nil) ? left : NULL;
9000000000003044:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000003048:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000000304c:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000003050:	58000dac 	beq	$r13,$r12,12(0xc) # 900000000000305c <rb_node_left+0x38>
9000000000003054:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000003058:	50000800 	b	8(0x8) # 9000000000003060 <rb_node_left+0x3c>
900000000000305c:	0015000c 	move	$r12,$r0
}
9000000000003060:	00150184 	move	$r4,$r12
9000000000003064:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000003068:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000306c:	4c000020 	jirl	$r0,$r1,0

9000000000003070 <rb_node_right>:

/* rb_node_right - gets the right child of @node, or 'NULL' if no such node */
rb_node *
rb_node_right(rb_tree *tree, rb_node *node) {
9000000000003070:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000003074:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000003078:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000307c:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000003080:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
    rb_node *right = node->right;
9000000000003084:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000003088:	28c0618c 	ld.d	$r12,$r12,24(0x18)
900000000000308c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    return (right != tree->nil) ? right : NULL;
9000000000003090:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000003094:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000003098:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000309c:	58000dac 	beq	$r13,$r12,12(0xc) # 90000000000030a8 <rb_node_right+0x38>
90000000000030a0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000030a4:	50000800 	b	8(0x8) # 90000000000030ac <rb_node_right+0x3c>
90000000000030a8:	0015000c 	move	$r12,$r0
}
90000000000030ac:	00150184 	move	$r4,$r12
90000000000030b0:	28c0a076 	ld.d	$r22,$r3,40(0x28)
90000000000030b4:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000000030b8:	4c000020 	jirl	$r0,$r1,0

90000000000030bc <check_tree>:

int
check_tree(rb_tree *tree, rb_node *node) {
90000000000030bc:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
90000000000030c0:	29c0e061 	st.d	$r1,$r3,56(0x38)
90000000000030c4:	29c0c076 	st.d	$r22,$r3,48(0x30)
90000000000030c8:	02c10076 	addi.d	$r22,$r3,64(0x40)
90000000000030cc:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
90000000000030d0:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
    rb_node *nil = tree->nil;
90000000000030d4:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000030d8:	28c0218c 	ld.d	$r12,$r12,8(0x8)
90000000000030dc:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    if (node == nil) {
90000000000030e0:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
90000000000030e4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000030e8:	5c0031ac 	bne	$r13,$r12,48(0x30) # 9000000000003118 <check_tree+0x5c>
        assert(!node->red);
90000000000030ec:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
90000000000030f0:	2880018c 	ld.w	$r12,$r12,0
90000000000030f4:	40001d80 	beqz	$r12,28(0x1c) # 9000000000003110 <check_tree+0x54>
90000000000030f8:	1c000386 	pcaddu12i	$r6,28(0x1c)
90000000000030fc:	02e100c6 	addi.d	$r6,$r6,-1984(0x840)
9000000000003100:	0285f805 	addi.w	$r5,$r0,382(0x17e)
9000000000003104:	1c000364 	pcaddu12i	$r4,27(0x1b)
9000000000003108:	02dd5084 	addi.d	$r4,$r4,1876(0x754)
900000000000310c:	549b7400 	bl	39796(0x9b74) # 900000000000cc80 <__panic>
        return 1;
9000000000003110:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000003114:	5001b800 	b	440(0x1b8) # 90000000000032cc <check_tree+0x210>
    }
    if (node->left != nil) {
9000000000003118:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000311c:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000003120:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000003124:	58006dac 	beq	$r13,$r12,108(0x6c) # 9000000000003190 <check_tree+0xd4>
        assert(COMPARE(tree, node, node->left) >= 0);
9000000000003128:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000312c:	28c0018c 	ld.d	$r12,$r12,0
9000000000003130:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
9000000000003134:	28c041ad 	ld.d	$r13,$r13,16(0x10)
9000000000003138:	001501a5 	move	$r5,$r13
900000000000313c:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
9000000000003140:	4c000181 	jirl	$r1,$r12,0
9000000000003144:	0015008c 	move	$r12,$r4
9000000000003148:	64001d80 	bge	$r12,$r0,28(0x1c) # 9000000000003164 <check_tree+0xa8>
900000000000314c:	1c000386 	pcaddu12i	$r6,28(0x1c)
9000000000003150:	02e030c6 	addi.d	$r6,$r6,-2036(0x80c)
9000000000003154:	02860805 	addi.w	$r5,$r0,386(0x182)
9000000000003158:	1c000364 	pcaddu12i	$r4,27(0x1b)
900000000000315c:	02dc0084 	addi.d	$r4,$r4,1792(0x700)
9000000000003160:	549b2000 	bl	39712(0x9b20) # 900000000000cc80 <__panic>
        assert(node->left->parent == node);
9000000000003164:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000003168:	28c0418c 	ld.d	$r12,$r12,16(0x10)
900000000000316c:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000003170:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
9000000000003174:	58001dac 	beq	$r13,$r12,28(0x1c) # 9000000000003190 <check_tree+0xd4>
9000000000003178:	1c000386 	pcaddu12i	$r6,28(0x1c)
900000000000317c:	02e060c6 	addi.d	$r6,$r6,-2024(0x818)
9000000000003180:	02860c05 	addi.w	$r5,$r0,387(0x183)
9000000000003184:	1c000364 	pcaddu12i	$r4,27(0x1b)
9000000000003188:	02db5084 	addi.d	$r4,$r4,1748(0x6d4)
900000000000318c:	549af400 	bl	39668(0x9af4) # 900000000000cc80 <__panic>
    }
    if (node->right != nil) {
9000000000003190:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000003194:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000003198:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
900000000000319c:	58006dac 	beq	$r13,$r12,108(0x6c) # 9000000000003208 <check_tree+0x14c>
        assert(COMPARE(tree, node, node->right) <= 0);
90000000000031a0:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000031a4:	28c0018c 	ld.d	$r12,$r12,0
90000000000031a8:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
90000000000031ac:	28c061ad 	ld.d	$r13,$r13,24(0x18)
90000000000031b0:	001501a5 	move	$r5,$r13
90000000000031b4:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
90000000000031b8:	4c000181 	jirl	$r1,$r12,0
90000000000031bc:	0015008c 	move	$r12,$r4
90000000000031c0:	64001c0c 	bge	$r0,$r12,28(0x1c) # 90000000000031dc <check_tree+0x120>
90000000000031c4:	1c000366 	pcaddu12i	$r6,27(0x1b)
90000000000031c8:	02dff0c6 	addi.d	$r6,$r6,2044(0x7fc)
90000000000031cc:	02861805 	addi.w	$r5,$r0,390(0x186)
90000000000031d0:	1c000364 	pcaddu12i	$r4,27(0x1b)
90000000000031d4:	02da2084 	addi.d	$r4,$r4,1672(0x688)
90000000000031d8:	549aa800 	bl	39592(0x9aa8) # 900000000000cc80 <__panic>
        assert(node->right->parent == node);
90000000000031dc:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
90000000000031e0:	28c0618c 	ld.d	$r12,$r12,24(0x18)
90000000000031e4:	28c0218c 	ld.d	$r12,$r12,8(0x8)
90000000000031e8:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
90000000000031ec:	58001dac 	beq	$r13,$r12,28(0x1c) # 9000000000003208 <check_tree+0x14c>
90000000000031f0:	1c000386 	pcaddu12i	$r6,28(0x1c)
90000000000031f4:	02e020c6 	addi.d	$r6,$r6,-2040(0x808)
90000000000031f8:	02861c05 	addi.w	$r5,$r0,391(0x187)
90000000000031fc:	1c000364 	pcaddu12i	$r4,27(0x1b)
9000000000003200:	02d97084 	addi.d	$r4,$r4,1628(0x65c)
9000000000003204:	549a7c00 	bl	39548(0x9a7c) # 900000000000cc80 <__panic>
    }
    if (node->red) {
9000000000003208:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000320c:	2880018c 	ld.w	$r12,$r12,0
9000000000003210:	40003d80 	beqz	$r12,60(0x3c) # 900000000000324c <check_tree+0x190>
        assert(!node->left->red && !node->right->red);
9000000000003214:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000003218:	28c0418c 	ld.d	$r12,$r12,16(0x10)
900000000000321c:	2880018c 	ld.w	$r12,$r12,0
9000000000003220:	44001580 	bnez	$r12,20(0x14) # 9000000000003234 <check_tree+0x178>
9000000000003224:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000003228:	28c0618c 	ld.d	$r12,$r12,24(0x18)
900000000000322c:	2880018c 	ld.w	$r12,$r12,0
9000000000003230:	40001d80 	beqz	$r12,28(0x1c) # 900000000000324c <check_tree+0x190>
9000000000003234:	1c000366 	pcaddu12i	$r6,27(0x1b)
9000000000003238:	02dfd0c6 	addi.d	$r6,$r6,2036(0x7f4)
900000000000323c:	02862805 	addi.w	$r5,$r0,394(0x18a)
9000000000003240:	1c000364 	pcaddu12i	$r4,27(0x1b)
9000000000003244:	02d86084 	addi.d	$r4,$r4,1560(0x618)
9000000000003248:	549a3800 	bl	39480(0x9a38) # 900000000000cc80 <__panic>
    }
    int hb_left = check_tree(tree, node->left);
900000000000324c:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000003250:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000003254:	00150185 	move	$r5,$r12
9000000000003258:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
900000000000325c:	57fe63ff 	bl	-416(0xffffe60) # 90000000000030bc <check_tree>
9000000000003260:	0015008c 	move	$r12,$r4
9000000000003264:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
    int hb_right = check_tree(tree, node->right);
9000000000003268:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000326c:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000003270:	00150185 	move	$r5,$r12
9000000000003274:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000003278:	57fe47ff 	bl	-444(0xffffe44) # 90000000000030bc <check_tree>
900000000000327c:	0015008c 	move	$r12,$r4
9000000000003280:	29bf62cc 	st.w	$r12,$r22,-40(0xfd8)
    assert(hb_left == hb_right);
9000000000003284:	28bf72cd 	ld.w	$r13,$r22,-36(0xfdc)
9000000000003288:	28bf62cc 	ld.w	$r12,$r22,-40(0xfd8)
900000000000328c:	58001dac 	beq	$r13,$r12,28(0x1c) # 90000000000032a8 <check_tree+0x1ec>
9000000000003290:	1c000366 	pcaddu12i	$r6,27(0x1b)
9000000000003294:	02df40c6 	addi.d	$r6,$r6,2000(0x7d0)
9000000000003298:	02863805 	addi.w	$r5,$r0,398(0x18e)
900000000000329c:	1c000364 	pcaddu12i	$r4,27(0x1b)
90000000000032a0:	02d6f084 	addi.d	$r4,$r4,1468(0x5bc)
90000000000032a4:	5499dc00 	bl	39388(0x99dc) # 900000000000cc80 <__panic>
    int hb = hb_left;
90000000000032a8:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
90000000000032ac:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    if (!node->red) {
90000000000032b0:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
90000000000032b4:	2880018c 	ld.w	$r12,$r12,0
90000000000032b8:	44001180 	bnez	$r12,16(0x10) # 90000000000032c8 <check_tree+0x20c>
        hb ++;
90000000000032bc:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000032c0:	0280058c 	addi.w	$r12,$r12,1(0x1)
90000000000032c4:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    }
    return hb;
90000000000032c8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
90000000000032cc:	00150184 	move	$r4,$r12
90000000000032d0:	28c0e061 	ld.d	$r1,$r3,56(0x38)
90000000000032d4:	28c0c076 	ld.d	$r22,$r3,48(0x30)
90000000000032d8:	02c10063 	addi.d	$r3,$r3,64(0x40)
90000000000032dc:	4c000020 	jirl	$r0,$r1,0

90000000000032e0 <check_safe_kmalloc>:

static void *
check_safe_kmalloc(size_t size) {
90000000000032e0:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000000032e4:	29c0a061 	st.d	$r1,$r3,40(0x28)
90000000000032e8:	29c08076 	st.d	$r22,$r3,32(0x20)
90000000000032ec:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000000032f0:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    void *ret = kmalloc(size);
90000000000032f4:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
90000000000032f8:	54434000 	bl	17216(0x4340) # 9000000000007638 <kmalloc>
90000000000032fc:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    assert(ret != NULL);
9000000000003300:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000003304:	44001d80 	bnez	$r12,28(0x1c) # 9000000000003320 <check_safe_kmalloc+0x40>
9000000000003308:	1c000366 	pcaddu12i	$r6,27(0x1b)
900000000000330c:	02de00c6 	addi.d	$r6,$r6,1920(0x780)
9000000000003310:	02866405 	addi.w	$r5,$r0,409(0x199)
9000000000003314:	1c000364 	pcaddu12i	$r4,27(0x1b)
9000000000003318:	02d51084 	addi.d	$r4,$r4,1348(0x544)
900000000000331c:	54996400 	bl	39268(0x9964) # 900000000000cc80 <__panic>
    return ret;
9000000000003320:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
}
9000000000003324:	00150184 	move	$r4,$r12
9000000000003328:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000000332c:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000003330:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000003334:	4c000020 	jirl	$r0,$r1,0

9000000000003338 <check_compare1>:

#define rbn2data(node)              \
    (to_struct(node, struct check_data, rb_link))

static inline int
check_compare1(rb_node *node1, rb_node *node2) {
9000000000003338:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000333c:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000003340:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000003344:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
9000000000003348:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
    return rbn2data(node1)->data - rbn2data(node2)->data;
900000000000334c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000003350:	02ffe18c 	addi.d	$r12,$r12,-8(0xff8)
9000000000003354:	28c0018d 	ld.d	$r13,$r12,0
9000000000003358:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000335c:	02ffe18c 	addi.d	$r12,$r12,-8(0xff8)
9000000000003360:	28c0018c 	ld.d	$r12,$r12,0
9000000000003364:	0011b1ac 	sub.d	$r12,$r13,$r12
9000000000003368:	0040818c 	slli.w	$r12,$r12,0x0
}
900000000000336c:	00150184 	move	$r4,$r12
9000000000003370:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000003374:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000003378:	4c000020 	jirl	$r0,$r1,0

900000000000337c <check_compare2>:

static inline int
check_compare2(rb_node *node, void *key) {
900000000000337c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000003380:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000003384:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000003388:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000000338c:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
    return rbn2data(node)->data - (long)key;
9000000000003390:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000003394:	02ffe18c 	addi.d	$r12,$r12,-8(0xff8)
9000000000003398:	28c0018d 	ld.d	$r13,$r12,0
900000000000339c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000033a0:	0011b1ac 	sub.d	$r12,$r13,$r12
90000000000033a4:	0040818c 	slli.w	$r12,$r12,0x0
}
90000000000033a8:	00150184 	move	$r4,$r12
90000000000033ac:	28c06076 	ld.d	$r22,$r3,24(0x18)
90000000000033b0:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000000033b4:	4c000020 	jirl	$r0,$r1,0

90000000000033b8 <check_rb_tree>:

void
check_rb_tree(void) {
90000000000033b8:	02fe0063 	addi.d	$r3,$r3,-128(0xf80)
90000000000033bc:	29c1e061 	st.d	$r1,$r3,120(0x78)
90000000000033c0:	29c1c076 	st.d	$r22,$r3,112(0x70)
90000000000033c4:	29c1a077 	st.d	$r23,$r3,104(0x68)
90000000000033c8:	02c20076 	addi.d	$r22,$r3,128(0x80)
    rb_tree *tree = rb_tree_create(check_compare1);
90000000000033cc:	1c000004 	pcaddu12i	$r4,0
90000000000033d0:	02fdb084 	addi.d	$r4,$r4,-148(0xf6c)
90000000000033d4:	57ed1fff 	bl	-4836(0xfffed1c) # 90000000000020f0 <rb_tree_create>
90000000000033d8:	29ff02c4 	st.d	$r4,$r22,-64(0xfc0)
    assert(tree != NULL);
90000000000033dc:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
90000000000033e0:	44001d80 	bnez	$r12,28(0x1c) # 90000000000033fc <check_rb_tree+0x44>
90000000000033e4:	1c000366 	pcaddu12i	$r6,27(0x1b)
90000000000033e8:	02db10c6 	addi.d	$r6,$r6,1732(0x6c4)
90000000000033ec:	0286c805 	addi.w	$r5,$r0,434(0x1b2)
90000000000033f0:	1c000364 	pcaddu12i	$r4,27(0x1b)
90000000000033f4:	02d1a084 	addi.d	$r4,$r4,1128(0x468)
90000000000033f8:	54988800 	bl	39048(0x9888) # 900000000000cc80 <__panic>

    rb_node *nil = tree->nil, *root = tree->root;
90000000000033fc:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000003400:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000003404:	29fee2cc 	st.d	$r12,$r22,-72(0xfb8)
9000000000003408:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000340c:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000003410:	29fec2cc 	st.d	$r12,$r22,-80(0xfb0)
    assert(!nil->red && root->left == nil);
9000000000003414:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000003418:	2880018c 	ld.w	$r12,$r12,0
900000000000341c:	44001580 	bnez	$r12,20(0x14) # 9000000000003430 <check_rb_tree+0x78>
9000000000003420:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
9000000000003424:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000003428:	28fee2cd 	ld.d	$r13,$r22,-72(0xfb8)
900000000000342c:	58001dac 	beq	$r13,$r12,28(0x1c) # 9000000000003448 <check_rb_tree+0x90>
9000000000003430:	1c000366 	pcaddu12i	$r6,27(0x1b)
9000000000003434:	02da60c6 	addi.d	$r6,$r6,1688(0x698)
9000000000003438:	0286d405 	addi.w	$r5,$r0,437(0x1b5)
900000000000343c:	1c000364 	pcaddu12i	$r4,27(0x1b)
9000000000003440:	02d07084 	addi.d	$r4,$r4,1052(0x41c)
9000000000003444:	54983c00 	bl	38972(0x983c) # 900000000000cc80 <__panic>

    int total = 16;
9000000000003448:	0280400c 	addi.w	$r12,$r0,16(0x10)
900000000000344c:	29beb2cc 	st.w	$r12,$r22,-84(0xfac)
    struct check_data **all = check_safe_kmalloc(sizeof(struct check_data *) * total);
9000000000003450:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
9000000000003454:	00410d8c 	slli.d	$r12,$r12,0x3
9000000000003458:	00150184 	move	$r4,$r12
900000000000345c:	57fe87ff 	bl	-380(0xffffe84) # 90000000000032e0 <check_safe_kmalloc>
9000000000003460:	29fe82c4 	st.d	$r4,$r22,-96(0xfa0)

    long i;
    for (i = 0; i < total; i ++) {
9000000000003464:	29ff62c0 	st.d	$r0,$r22,-40(0xfd8)
9000000000003468:	50004c00 	b	76(0x4c) # 90000000000034b4 <check_rb_tree+0xfc>
        all[i] = check_safe_kmalloc(sizeof(struct check_data));
900000000000346c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000003470:	00410d8c 	slli.d	$r12,$r12,0x3
9000000000003474:	28fe82cd 	ld.d	$r13,$r22,-96(0xfa0)
9000000000003478:	0010b1b7 	add.d	$r23,$r13,$r12
900000000000347c:	0280a004 	addi.w	$r4,$r0,40(0x28)
9000000000003480:	57fe63ff 	bl	-416(0xffffe60) # 90000000000032e0 <check_safe_kmalloc>
9000000000003484:	0015008c 	move	$r12,$r4
9000000000003488:	29c002ec 	st.d	$r12,$r23,0
        all[i]->data = i;
900000000000348c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000003490:	00410d8c 	slli.d	$r12,$r12,0x3
9000000000003494:	28fe82cd 	ld.d	$r13,$r22,-96(0xfa0)
9000000000003498:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000349c:	28c0018c 	ld.d	$r12,$r12,0
90000000000034a0:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
90000000000034a4:	29c0018d 	st.d	$r13,$r12,0
    for (i = 0; i < total; i ++) {
90000000000034a8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000034ac:	02c0058c 	addi.d	$r12,$r12,1(0x1)
90000000000034b0:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
90000000000034b4:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
90000000000034b8:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
90000000000034bc:	63ffb1ac 	blt	$r13,$r12,-80(0x3ffb0) # 900000000000346c <check_rb_tree+0xb4>
    }

    int *mark = check_safe_kmalloc(sizeof(int) * total);
90000000000034c0:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
90000000000034c4:	0041098c 	slli.d	$r12,$r12,0x2
90000000000034c8:	00150184 	move	$r4,$r12
90000000000034cc:	57fe17ff 	bl	-492(0xffffe14) # 90000000000032e0 <check_safe_kmalloc>
90000000000034d0:	29fe62c4 	st.d	$r4,$r22,-104(0xf98)
    memset(mark, 0, sizeof(int) * total);
90000000000034d4:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
90000000000034d8:	0041098c 	slli.d	$r12,$r12,0x2
90000000000034dc:	00150186 	move	$r6,$r12
90000000000034e0:	00150005 	move	$r5,$r0
90000000000034e4:	28fe62c4 	ld.d	$r4,$r22,-104(0xf98)
90000000000034e8:	54103800 	bl	4152(0x1038) # 9000000000004520 <memset>

    for (i = 0; i < total; i ++) {
90000000000034ec:	29ff62c0 	st.d	$r0,$r22,-40(0xfd8)
90000000000034f0:	50003c00 	b	60(0x3c) # 900000000000352c <check_rb_tree+0x174>
        mark[all[i]->data] = 1;
90000000000034f4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000034f8:	00410d8c 	slli.d	$r12,$r12,0x3
90000000000034fc:	28fe82cd 	ld.d	$r13,$r22,-96(0xfa0)
9000000000003500:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000003504:	28c0018c 	ld.d	$r12,$r12,0
9000000000003508:	28c0018c 	ld.d	$r12,$r12,0
900000000000350c:	0041098c 	slli.d	$r12,$r12,0x2
9000000000003510:	28fe62cd 	ld.d	$r13,$r22,-104(0xf98)
9000000000003514:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000003518:	0280040d 	addi.w	$r13,$r0,1(0x1)
900000000000351c:	2980018d 	st.w	$r13,$r12,0
    for (i = 0; i < total; i ++) {
9000000000003520:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000003524:	02c0058c 	addi.d	$r12,$r12,1(0x1)
9000000000003528:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
900000000000352c:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
9000000000003530:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000003534:	63ffc1ac 	blt	$r13,$r12,-64(0x3ffc0) # 90000000000034f4 <check_rb_tree+0x13c>
    }
    for (i = 0; i < total; i ++) {
9000000000003538:	29ff62c0 	st.d	$r0,$r22,-40(0xfd8)
900000000000353c:	50004800 	b	72(0x48) # 9000000000003584 <check_rb_tree+0x1cc>
        assert(mark[i] == 1);
9000000000003540:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000003544:	0041098c 	slli.d	$r12,$r12,0x2
9000000000003548:	28fe62cd 	ld.d	$r13,$r22,-104(0xf98)
900000000000354c:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000003550:	2880018c 	ld.w	$r12,$r12,0
9000000000003554:	0015018d 	move	$r13,$r12
9000000000003558:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000000355c:	58001dac 	beq	$r13,$r12,28(0x1c) # 9000000000003578 <check_rb_tree+0x1c0>
9000000000003560:	1c000366 	pcaddu12i	$r6,27(0x1b)
9000000000003564:	02d680c6 	addi.d	$r6,$r6,1440(0x5a0)
9000000000003568:	02871c05 	addi.w	$r5,$r0,455(0x1c7)
900000000000356c:	1c000364 	pcaddu12i	$r4,27(0x1b)
9000000000003570:	02cbb084 	addi.d	$r4,$r4,748(0x2ec)
9000000000003574:	54970c00 	bl	38668(0x970c) # 900000000000cc80 <__panic>
    for (i = 0; i < total; i ++) {
9000000000003578:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000357c:	02c0058c 	addi.d	$r12,$r12,1(0x1)
9000000000003580:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
9000000000003584:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
9000000000003588:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000358c:	63ffb5ac 	blt	$r13,$r12,-76(0x3ffb4) # 9000000000003540 <check_rb_tree+0x188>
    }

    for (i = 0; i < total; i ++) {
9000000000003590:	29ff62c0 	st.d	$r0,$r22,-40(0xfd8)
9000000000003594:	5000b400 	b	180(0xb4) # 9000000000003648 <check_rb_tree+0x290>
        //int j = (rand() % (total - i)) + i;
        int j = i + (total - i*i);
9000000000003598:	28beb2cd 	ld.w	$r13,$r22,-84(0xfac)
900000000000359c:	28ff62ce 	ld.d	$r14,$r22,-40(0xfd8)
90000000000035a0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000035a4:	001db1cc 	mul.d	$r12,$r14,$r12
90000000000035a8:	0011b1ad 	sub.d	$r13,$r13,$r12
90000000000035ac:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000035b0:	0010b1ac 	add.d	$r12,$r13,$r12
90000000000035b4:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
        if(j < i) j = i;
90000000000035b8:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
90000000000035bc:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
90000000000035c0:	64000d8d 	bge	$r12,$r13,12(0xc) # 90000000000035cc <check_rb_tree+0x214>
90000000000035c4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000035c8:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
        if(j >= total) j = total -1;
90000000000035cc:	28bf52cd 	ld.w	$r13,$r22,-44(0xfd4)
90000000000035d0:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
90000000000035d4:	600011ac 	blt	$r13,$r12,16(0x10) # 90000000000035e4 <check_rb_tree+0x22c>
90000000000035d8:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
90000000000035dc:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
90000000000035e0:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
        struct check_data *z = all[i];
90000000000035e4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000035e8:	00410d8c 	slli.d	$r12,$r12,0x3
90000000000035ec:	28fe82cd 	ld.d	$r13,$r22,-96(0xfa0)
90000000000035f0:	0010b1ac 	add.d	$r12,$r13,$r12
90000000000035f4:	28c0018c 	ld.d	$r12,$r12,0
90000000000035f8:	29fe42cc 	st.d	$r12,$r22,-112(0xf90)
        all[i] = all[j];
90000000000035fc:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000003600:	00410d8c 	slli.d	$r12,$r12,0x3
9000000000003604:	28fe82cd 	ld.d	$r13,$r22,-96(0xfa0)
9000000000003608:	0010b1ad 	add.d	$r13,$r13,$r12
900000000000360c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000003610:	00410d8c 	slli.d	$r12,$r12,0x3
9000000000003614:	28fe82ce 	ld.d	$r14,$r22,-96(0xfa0)
9000000000003618:	0010b1cc 	add.d	$r12,$r14,$r12
900000000000361c:	28c001ad 	ld.d	$r13,$r13,0
9000000000003620:	29c0018d 	st.d	$r13,$r12,0
        all[j] = z;
9000000000003624:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000003628:	00410d8c 	slli.d	$r12,$r12,0x3
900000000000362c:	28fe82cd 	ld.d	$r13,$r22,-96(0xfa0)
9000000000003630:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000003634:	28fe42cd 	ld.d	$r13,$r22,-112(0xf90)
9000000000003638:	29c0018d 	st.d	$r13,$r12,0
    for (i = 0; i < total; i ++) {
900000000000363c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000003640:	02c0058c 	addi.d	$r12,$r12,1(0x1)
9000000000003644:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
9000000000003648:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
900000000000364c:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000003650:	63ff49ac 	blt	$r13,$r12,-184(0x3ff48) # 9000000000003598 <check_rb_tree+0x1e0>
    }

    memset(mark, 0, sizeof(int) * total);
9000000000003654:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
9000000000003658:	0041098c 	slli.d	$r12,$r12,0x2
900000000000365c:	00150186 	move	$r6,$r12
9000000000003660:	00150005 	move	$r5,$r0
9000000000003664:	28fe62c4 	ld.d	$r4,$r22,-104(0xf98)
9000000000003668:	540eb800 	bl	3768(0xeb8) # 9000000000004520 <memset>
    for (i = 0; i < total; i ++) {
900000000000366c:	29ff62c0 	st.d	$r0,$r22,-40(0xfd8)
9000000000003670:	50003c00 	b	60(0x3c) # 90000000000036ac <check_rb_tree+0x2f4>
        mark[all[i]->data] = 1;
9000000000003674:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000003678:	00410d8c 	slli.d	$r12,$r12,0x3
900000000000367c:	28fe82cd 	ld.d	$r13,$r22,-96(0xfa0)
9000000000003680:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000003684:	28c0018c 	ld.d	$r12,$r12,0
9000000000003688:	28c0018c 	ld.d	$r12,$r12,0
900000000000368c:	0041098c 	slli.d	$r12,$r12,0x2
9000000000003690:	28fe62cd 	ld.d	$r13,$r22,-104(0xf98)
9000000000003694:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000003698:	0280040d 	addi.w	$r13,$r0,1(0x1)
900000000000369c:	2980018d 	st.w	$r13,$r12,0
    for (i = 0; i < total; i ++) {
90000000000036a0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000036a4:	02c0058c 	addi.d	$r12,$r12,1(0x1)
90000000000036a8:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
90000000000036ac:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
90000000000036b0:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
90000000000036b4:	63ffc1ac 	blt	$r13,$r12,-64(0x3ffc0) # 9000000000003674 <check_rb_tree+0x2bc>
    }
    for (i = 0; i < total; i ++) {
90000000000036b8:	29ff62c0 	st.d	$r0,$r22,-40(0xfd8)
90000000000036bc:	50004800 	b	72(0x48) # 9000000000003704 <check_rb_tree+0x34c>
        assert(mark[i] == 1);
90000000000036c0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000036c4:	0041098c 	slli.d	$r12,$r12,0x2
90000000000036c8:	28fe62cd 	ld.d	$r13,$r22,-104(0xf98)
90000000000036cc:	0010b1ac 	add.d	$r12,$r13,$r12
90000000000036d0:	2880018c 	ld.w	$r12,$r12,0
90000000000036d4:	0015018d 	move	$r13,$r12
90000000000036d8:	0280040c 	addi.w	$r12,$r0,1(0x1)
90000000000036dc:	58001dac 	beq	$r13,$r12,28(0x1c) # 90000000000036f8 <check_rb_tree+0x340>
90000000000036e0:	1c000366 	pcaddu12i	$r6,27(0x1b)
90000000000036e4:	02d080c6 	addi.d	$r6,$r6,1056(0x420)
90000000000036e8:	02876405 	addi.w	$r5,$r0,473(0x1d9)
90000000000036ec:	1c000364 	pcaddu12i	$r4,27(0x1b)
90000000000036f0:	02c5b084 	addi.d	$r4,$r4,364(0x16c)
90000000000036f4:	54958c00 	bl	38284(0x958c) # 900000000000cc80 <__panic>
    for (i = 0; i < total; i ++) {
90000000000036f8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000036fc:	02c0058c 	addi.d	$r12,$r12,1(0x1)
9000000000003700:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
9000000000003704:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
9000000000003708:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000370c:	63ffb5ac 	blt	$r13,$r12,-76(0x3ffb4) # 90000000000036c0 <check_rb_tree+0x308>
    }

    for (i = 0; i < total; i ++) {
9000000000003710:	29ff62c0 	st.d	$r0,$r22,-40(0xfd8)
9000000000003714:	50004800 	b	72(0x48) # 900000000000375c <check_rb_tree+0x3a4>
        rb_insert(tree, &(all[i]->rb_link));
9000000000003718:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000371c:	00410d8c 	slli.d	$r12,$r12,0x3
9000000000003720:	28fe82cd 	ld.d	$r13,$r22,-96(0xfa0)
9000000000003724:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000003728:	28c0018c 	ld.d	$r12,$r12,0
900000000000372c:	02c0218c 	addi.d	$r12,$r12,8(0x8)
9000000000003730:	00150185 	move	$r5,$r12
9000000000003734:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
9000000000003738:	57ee7bff 	bl	-4488(0xfffee78) # 90000000000025b0 <rb_insert>
        check_tree(tree, root->left);
900000000000373c:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
9000000000003740:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000003744:	00150185 	move	$r5,$r12
9000000000003748:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
900000000000374c:	57f973ff 	bl	-1680(0xffff970) # 90000000000030bc <check_tree>
    for (i = 0; i < total; i ++) {
9000000000003750:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000003754:	02c0058c 	addi.d	$r12,$r12,1(0x1)
9000000000003758:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
900000000000375c:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
9000000000003760:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000003764:	63ffb5ac 	blt	$r13,$r12,-76(0x3ffb4) # 9000000000003718 <check_rb_tree+0x360>
    }

    rb_node *node;
    for (i = 0; i < total; i ++) {
9000000000003768:	29ff62c0 	st.d	$r0,$r22,-40(0xfd8)
900000000000376c:	50008000 	b	128(0x80) # 90000000000037ec <check_rb_tree+0x434>
        node = rb_search(tree, check_compare2, (void *)(all[i]->data));
9000000000003770:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000003774:	00410d8c 	slli.d	$r12,$r12,0x3
9000000000003778:	28fe82cd 	ld.d	$r13,$r22,-96(0xfa0)
900000000000377c:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000003780:	28c0018c 	ld.d	$r12,$r12,0
9000000000003784:	28c0018c 	ld.d	$r12,$r12,0
9000000000003788:	00150186 	move	$r6,$r12
900000000000378c:	1c000005 	pcaddu12i	$r5,0
9000000000003790:	02efc0a5 	addi.d	$r5,$r5,-1040(0xbf0)
9000000000003794:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
9000000000003798:	57f1f3ff 	bl	-3600(0xffff1f0) # 9000000000002988 <rb_search>
900000000000379c:	29fe22c4 	st.d	$r4,$r22,-120(0xf88)
        assert(node != NULL && node == &(all[i]->rb_link));
90000000000037a0:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
90000000000037a4:	40002580 	beqz	$r12,36(0x24) # 90000000000037c8 <check_rb_tree+0x410>
90000000000037a8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000037ac:	00410d8c 	slli.d	$r12,$r12,0x3
90000000000037b0:	28fe82cd 	ld.d	$r13,$r22,-96(0xfa0)
90000000000037b4:	0010b1ac 	add.d	$r12,$r13,$r12
90000000000037b8:	28c0018c 	ld.d	$r12,$r12,0
90000000000037bc:	02c0218c 	addi.d	$r12,$r12,8(0x8)
90000000000037c0:	28fe22cd 	ld.d	$r13,$r22,-120(0xf88)
90000000000037c4:	58001dac 	beq	$r13,$r12,28(0x1c) # 90000000000037e0 <check_rb_tree+0x428>
90000000000037c8:	1c000366 	pcaddu12i	$r6,27(0x1b)
90000000000037cc:	02cd60c6 	addi.d	$r6,$r6,856(0x358)
90000000000037d0:	02879005 	addi.w	$r5,$r0,484(0x1e4)
90000000000037d4:	1c000364 	pcaddu12i	$r4,27(0x1b)
90000000000037d8:	02c21084 	addi.d	$r4,$r4,132(0x84)
90000000000037dc:	5494a400 	bl	38052(0x94a4) # 900000000000cc80 <__panic>
    for (i = 0; i < total; i ++) {
90000000000037e0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000037e4:	02c0058c 	addi.d	$r12,$r12,1(0x1)
90000000000037e8:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
90000000000037ec:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
90000000000037f0:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
90000000000037f4:	63ff7dac 	blt	$r13,$r12,-132(0x3ff7c) # 9000000000003770 <check_rb_tree+0x3b8>
    }

    for (i = 0; i < total; i ++) {
90000000000037f8:	29ff62c0 	st.d	$r0,$r22,-40(0xfd8)
90000000000037fc:	50008000 	b	128(0x80) # 900000000000387c <check_rb_tree+0x4c4>
        node = rb_search(tree, check_compare2, (void *)i);
9000000000003800:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000003804:	00150186 	move	$r6,$r12
9000000000003808:	1c000005 	pcaddu12i	$r5,0
900000000000380c:	02edd0a5 	addi.d	$r5,$r5,-1164(0xb74)
9000000000003810:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
9000000000003814:	57f177ff 	bl	-3724(0xffff174) # 9000000000002988 <rb_search>
9000000000003818:	29fe22c4 	st.d	$r4,$r22,-120(0xf88)
        assert(node != NULL && rbn2data(node)->data == i);
900000000000381c:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
9000000000003820:	40001980 	beqz	$r12,24(0x18) # 9000000000003838 <check_rb_tree+0x480>
9000000000003824:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
9000000000003828:	02ffe18c 	addi.d	$r12,$r12,-8(0xff8)
900000000000382c:	28c0018c 	ld.d	$r12,$r12,0
9000000000003830:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000003834:	58001dac 	beq	$r13,$r12,28(0x1c) # 9000000000003850 <check_rb_tree+0x498>
9000000000003838:	1c000366 	pcaddu12i	$r6,27(0x1b)
900000000000383c:	02cca0c6 	addi.d	$r6,$r6,808(0x328)
9000000000003840:	0287a405 	addi.w	$r5,$r0,489(0x1e9)
9000000000003844:	1c000364 	pcaddu12i	$r4,27(0x1b)
9000000000003848:	02c05084 	addi.d	$r4,$r4,20(0x14)
900000000000384c:	54943400 	bl	37940(0x9434) # 900000000000cc80 <__panic>
        rb_delete(tree, node);
9000000000003850:	28fe22c5 	ld.d	$r5,$r22,-120(0xf88)
9000000000003854:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
9000000000003858:	57f4a7ff 	bl	-2908(0xffff4a4) # 9000000000002cfc <rb_delete>
        check_tree(tree, root->left);
900000000000385c:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
9000000000003860:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000003864:	00150185 	move	$r5,$r12
9000000000003868:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
900000000000386c:	57f853ff 	bl	-1968(0xffff850) # 90000000000030bc <check_tree>
    for (i = 0; i < total; i ++) {
9000000000003870:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000003874:	02c0058c 	addi.d	$r12,$r12,1(0x1)
9000000000003878:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
900000000000387c:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
9000000000003880:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000003884:	63ff7dac 	blt	$r13,$r12,-132(0x3ff7c) # 9000000000003800 <check_rb_tree+0x448>
    }

    assert(!nil->red && root->left == nil);
9000000000003888:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000388c:	2880018c 	ld.w	$r12,$r12,0
9000000000003890:	44001580 	bnez	$r12,20(0x14) # 90000000000038a4 <check_rb_tree+0x4ec>
9000000000003894:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
9000000000003898:	28c0418c 	ld.d	$r12,$r12,16(0x10)
900000000000389c:	28fee2cd 	ld.d	$r13,$r22,-72(0xfb8)
90000000000038a0:	58001dac 	beq	$r13,$r12,28(0x1c) # 90000000000038bc <check_rb_tree+0x504>
90000000000038a4:	1c000366 	pcaddu12i	$r6,27(0x1b)
90000000000038a8:	02c890c6 	addi.d	$r6,$r6,548(0x224)
90000000000038ac:	0287b805 	addi.w	$r5,$r0,494(0x1ee)
90000000000038b0:	1c000364 	pcaddu12i	$r4,27(0x1b)
90000000000038b4:	02fea084 	addi.d	$r4,$r4,-88(0xfa8)
90000000000038b8:	5493c800 	bl	37832(0x93c8) # 900000000000cc80 <__panic>

    long max = 32;
90000000000038bc:	0280800c 	addi.w	$r12,$r0,32(0x20)
90000000000038c0:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
    if (max > total) {
90000000000038c4:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
90000000000038c8:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
90000000000038cc:	64000d8d 	bge	$r12,$r13,12(0xc) # 90000000000038d8 <check_rb_tree+0x520>
        max = total;
90000000000038d0:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
90000000000038d4:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
    }

    for (i = 0; i < max; i ++) {
90000000000038d8:	29ff62c0 	st.d	$r0,$r22,-40(0xfd8)
90000000000038dc:	50006400 	b	100(0x64) # 9000000000003940 <check_rb_tree+0x588>
        all[i]->data = max;
90000000000038e0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000038e4:	00410d8c 	slli.d	$r12,$r12,0x3
90000000000038e8:	28fe82cd 	ld.d	$r13,$r22,-96(0xfa0)
90000000000038ec:	0010b1ac 	add.d	$r12,$r13,$r12
90000000000038f0:	28c0018c 	ld.d	$r12,$r12,0
90000000000038f4:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
90000000000038f8:	29c0018d 	st.d	$r13,$r12,0
        rb_insert(tree, &(all[i]->rb_link));
90000000000038fc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000003900:	00410d8c 	slli.d	$r12,$r12,0x3
9000000000003904:	28fe82cd 	ld.d	$r13,$r22,-96(0xfa0)
9000000000003908:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000390c:	28c0018c 	ld.d	$r12,$r12,0
9000000000003910:	02c0218c 	addi.d	$r12,$r12,8(0x8)
9000000000003914:	00150185 	move	$r5,$r12
9000000000003918:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
900000000000391c:	57ec97ff 	bl	-4972(0xfffec94) # 90000000000025b0 <rb_insert>
        check_tree(tree, root->left);
9000000000003920:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
9000000000003924:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000003928:	00150185 	move	$r5,$r12
900000000000392c:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
9000000000003930:	57f78fff 	bl	-2164(0xffff78c) # 90000000000030bc <check_tree>
    for (i = 0; i < max; i ++) {
9000000000003934:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000003938:	02c0058c 	addi.d	$r12,$r12,1(0x1)
900000000000393c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
9000000000003940:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000003944:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000003948:	63ff99ac 	blt	$r13,$r12,-104(0x3ff98) # 90000000000038e0 <check_rb_tree+0x528>
    }

    for (i = 0; i < max; i ++) {
900000000000394c:	29ff62c0 	st.d	$r0,$r22,-40(0xfd8)
9000000000003950:	50008000 	b	128(0x80) # 90000000000039d0 <check_rb_tree+0x618>
        node = rb_search(tree, check_compare2, (void *)max);
9000000000003954:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000003958:	00150186 	move	$r6,$r12
900000000000395c:	1c000005 	pcaddu12i	$r5,0
9000000000003960:	02e880a5 	addi.d	$r5,$r5,-1504(0xa20)
9000000000003964:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
9000000000003968:	57f023ff 	bl	-4064(0xffff020) # 9000000000002988 <rb_search>
900000000000396c:	29fe22c4 	st.d	$r4,$r22,-120(0xf88)
        assert(node != NULL && rbn2data(node)->data == max);
9000000000003970:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
9000000000003974:	40001980 	beqz	$r12,24(0x18) # 900000000000398c <check_rb_tree+0x5d4>
9000000000003978:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
900000000000397c:	02ffe18c 	addi.d	$r12,$r12,-8(0xff8)
9000000000003980:	28c0018c 	ld.d	$r12,$r12,0
9000000000003984:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
9000000000003988:	58001dac 	beq	$r13,$r12,28(0x1c) # 90000000000039a4 <check_rb_tree+0x5ec>
900000000000398c:	1c000366 	pcaddu12i	$r6,27(0x1b)
9000000000003990:	02c850c6 	addi.d	$r6,$r6,532(0x214)
9000000000003994:	0287f405 	addi.w	$r5,$r0,509(0x1fd)
9000000000003998:	1c000364 	pcaddu12i	$r4,27(0x1b)
900000000000399c:	02fb0084 	addi.d	$r4,$r4,-320(0xec0)
90000000000039a0:	5492e000 	bl	37600(0x92e0) # 900000000000cc80 <__panic>
        rb_delete(tree, node);
90000000000039a4:	28fe22c5 	ld.d	$r5,$r22,-120(0xf88)
90000000000039a8:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
90000000000039ac:	57f353ff 	bl	-3248(0xffff350) # 9000000000002cfc <rb_delete>
        check_tree(tree, root->left);
90000000000039b0:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
90000000000039b4:	28c0418c 	ld.d	$r12,$r12,16(0x10)
90000000000039b8:	00150185 	move	$r5,$r12
90000000000039bc:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
90000000000039c0:	57f6ffff 	bl	-2308(0xffff6fc) # 90000000000030bc <check_tree>
    for (i = 0; i < max; i ++) {
90000000000039c4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000039c8:	02c0058c 	addi.d	$r12,$r12,1(0x1)
90000000000039cc:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
90000000000039d0:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
90000000000039d4:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000039d8:	63ff7dac 	blt	$r13,$r12,-132(0x3ff7c) # 9000000000003954 <check_rb_tree+0x59c>
    }

    assert(rb_tree_empty(tree));
90000000000039dc:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
90000000000039e0:	57e6c3ff 	bl	-6464(0xfffe6c0) # 90000000000020a0 <rb_tree_empty>
90000000000039e4:	0015008c 	move	$r12,$r4
90000000000039e8:	44001d80 	bnez	$r12,28(0x1c) # 9000000000003a04 <check_rb_tree+0x64c>
90000000000039ec:	1c000366 	pcaddu12i	$r6,27(0x1b)
90000000000039f0:	02c7d0c6 	addi.d	$r6,$r6,500(0x1f4)
90000000000039f4:	02880805 	addi.w	$r5,$r0,514(0x202)
90000000000039f8:	1c000364 	pcaddu12i	$r4,27(0x1b)
90000000000039fc:	02f98084 	addi.d	$r4,$r4,-416(0xe60)
9000000000003a00:	54928000 	bl	37504(0x9280) # 900000000000cc80 <__panic>

    for (i = 0; i < total; i ++) {
9000000000003a04:	29ff62c0 	st.d	$r0,$r22,-40(0xfd8)
9000000000003a08:	50004800 	b	72(0x48) # 9000000000003a50 <check_rb_tree+0x698>
        rb_insert(tree, &(all[i]->rb_link));
9000000000003a0c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000003a10:	00410d8c 	slli.d	$r12,$r12,0x3
9000000000003a14:	28fe82cd 	ld.d	$r13,$r22,-96(0xfa0)
9000000000003a18:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000003a1c:	28c0018c 	ld.d	$r12,$r12,0
9000000000003a20:	02c0218c 	addi.d	$r12,$r12,8(0x8)
9000000000003a24:	00150185 	move	$r5,$r12
9000000000003a28:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
9000000000003a2c:	57eb87ff 	bl	-5244(0xfffeb84) # 90000000000025b0 <rb_insert>
        check_tree(tree, root->left);
9000000000003a30:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
9000000000003a34:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000003a38:	00150185 	move	$r5,$r12
9000000000003a3c:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
9000000000003a40:	57f67fff 	bl	-2436(0xffff67c) # 90000000000030bc <check_tree>
    for (i = 0; i < total; i ++) {
9000000000003a44:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000003a48:	02c0058c 	addi.d	$r12,$r12,1(0x1)
9000000000003a4c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
9000000000003a50:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
9000000000003a54:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000003a58:	63ffb5ac 	blt	$r13,$r12,-76(0x3ffb4) # 9000000000003a0c <check_rb_tree+0x654>
    }

    rb_tree_destroy(tree);
9000000000003a5c:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
9000000000003a60:	57f47bff 	bl	-2952(0xffff478) # 9000000000002ed8 <rb_tree_destroy>

    for (i = 0; i < total; i ++) {
9000000000003a64:	29ff62c0 	st.d	$r0,$r22,-40(0xfd8)
9000000000003a68:	50002c00 	b	44(0x2c) # 9000000000003a94 <check_rb_tree+0x6dc>
        kfree(all[i]);
9000000000003a6c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000003a70:	00410d8c 	slli.d	$r12,$r12,0x3
9000000000003a74:	28fe82cd 	ld.d	$r13,$r22,-96(0xfa0)
9000000000003a78:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000003a7c:	28c0018c 	ld.d	$r12,$r12,0
9000000000003a80:	00150184 	move	$r4,$r12
9000000000003a84:	54409000 	bl	16528(0x4090) # 9000000000007b14 <kfree>
    for (i = 0; i < total; i ++) {
9000000000003a88:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000003a8c:	02c0058c 	addi.d	$r12,$r12,1(0x1)
9000000000003a90:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
9000000000003a94:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
9000000000003a98:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000003a9c:	63ffd1ac 	blt	$r13,$r12,-48(0x3ffd0) # 9000000000003a6c <check_rb_tree+0x6b4>
    }

    kfree(mark);
9000000000003aa0:	28fe62c4 	ld.d	$r4,$r22,-104(0xf98)
9000000000003aa4:	54407000 	bl	16496(0x4070) # 9000000000007b14 <kfree>
    kfree(all);
9000000000003aa8:	28fe82c4 	ld.d	$r4,$r22,-96(0xfa0)
9000000000003aac:	54406800 	bl	16488(0x4068) # 9000000000007b14 <kfree>
}
9000000000003ab0:	03400000 	andi	$r0,$r0,0x0
9000000000003ab4:	28c1e061 	ld.d	$r1,$r3,120(0x78)
9000000000003ab8:	28c1c076 	ld.d	$r22,$r3,112(0x70)
9000000000003abc:	28c1a077 	ld.d	$r23,$r3,104(0x68)
9000000000003ac0:	02c20063 	addi.d	$r3,$r3,128(0x80)
9000000000003ac4:	4c000020 	jirl	$r0,$r1,0

9000000000003ac8 <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
9000000000003ac8:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000003acc:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000003ad0:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000003ad4:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000003ad8:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    if (prompt != NULL) {
9000000000003adc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000003ae0:	40000d80 	beqz	$r12,12(0xc) # 9000000000003aec <readline+0x24>
        kprintf(prompt);
9000000000003ae4:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000003ae8:	54033400 	bl	820(0x334) # 9000000000003e1c <kprintf>
    }
    int i = 0, c;
9000000000003aec:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
    while (1) {
        c = getchar();
9000000000003af0:	54060c00 	bl	1548(0x60c) # 90000000000040fc <getchar>
9000000000003af4:	0015008c 	move	$r12,$r4
9000000000003af8:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
        if (c < 0) {
9000000000003afc:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
9000000000003b00:	64000d80 	bge	$r12,$r0,12(0xc) # 9000000000003b0c <readline+0x44>
            return NULL;
9000000000003b04:	0015000c 	move	$r12,$r0
9000000000003b08:	5000dc00 	b	220(0xdc) # 9000000000003be4 <readline+0x11c>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
9000000000003b0c:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
9000000000003b10:	0015018d 	move	$r13,$r12
9000000000003b14:	02807c0c 	addi.w	$r12,$r0,31(0x1f)
9000000000003b18:	6400498d 	bge	$r12,$r13,72(0x48) # 9000000000003b60 <readline+0x98>
9000000000003b1c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000003b20:	0015018d 	move	$r13,$r12
9000000000003b24:	028ff80c 	addi.w	$r12,$r0,1022(0x3fe)
9000000000003b28:	6000398d 	blt	$r12,$r13,56(0x38) # 9000000000003b60 <readline+0x98>
            kputchar(c);
9000000000003b2c:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
9000000000003b30:	00150184 	move	$r4,$r12
9000000000003b34:	54051800 	bl	1304(0x518) # 900000000000404c <kputchar>
            buf[i ++] = c;
9000000000003b38:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000003b3c:	0280058d 	addi.w	$r13,$r12,1(0x1)
9000000000003b40:	29bfb2cd 	st.w	$r13,$r22,-20(0xfec)
9000000000003b44:	28bfa2cd 	ld.w	$r13,$r22,-24(0xfe8)
9000000000003b48:	00005dad 	ext.w.b	$r13,$r13
9000000000003b4c:	1c0043ce 	pcaddu12i	$r14,542(0x21e)
9000000000003b50:	02c131ce 	addi.d	$r14,$r14,76(0x4c)
9000000000003b54:	0010b1cc 	add.d	$r12,$r14,$r12
9000000000003b58:	2900018d 	st.b	$r13,$r12,0
9000000000003b5c:	50008400 	b	132(0x84) # 9000000000003be0 <readline+0x118>
        }
        else if (c == '\b' && i > 0) {
9000000000003b60:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
9000000000003b64:	0015018d 	move	$r13,$r12
9000000000003b68:	0280200c 	addi.w	$r12,$r0,8(0x8)
9000000000003b6c:	5c0029ac 	bne	$r13,$r12,40(0x28) # 9000000000003b94 <readline+0xcc>
9000000000003b70:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000003b74:	6400200c 	bge	$r0,$r12,32(0x20) # 9000000000003b94 <readline+0xcc>
            kputchar(c);
9000000000003b78:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
9000000000003b7c:	00150184 	move	$r4,$r12
9000000000003b80:	5404cc00 	bl	1228(0x4cc) # 900000000000404c <kputchar>
            i --;
9000000000003b84:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000003b88:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
9000000000003b8c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000003b90:	50005000 	b	80(0x50) # 9000000000003be0 <readline+0x118>
        }
        else if (c == '\n' || c == '\r') {
9000000000003b94:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
9000000000003b98:	0015018d 	move	$r13,$r12
9000000000003b9c:	0280280c 	addi.w	$r12,$r0,10(0xa)
9000000000003ba0:	580015ac 	beq	$r13,$r12,20(0x14) # 9000000000003bb4 <readline+0xec>
9000000000003ba4:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
9000000000003ba8:	0015018d 	move	$r13,$r12
9000000000003bac:	0280340c 	addi.w	$r12,$r0,13(0xd)
9000000000003bb0:	5fff41ac 	bne	$r13,$r12,-192(0x3ff40) # 9000000000003af0 <readline+0x28>
            kputchar(c);
9000000000003bb4:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
9000000000003bb8:	00150184 	move	$r4,$r12
9000000000003bbc:	54049000 	bl	1168(0x490) # 900000000000404c <kputchar>
            buf[i] = '\0';
9000000000003bc0:	1c0043cd 	pcaddu12i	$r13,542(0x21e)
9000000000003bc4:	02ff61ad 	addi.d	$r13,$r13,-40(0xfd8)
9000000000003bc8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000003bcc:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000003bd0:	29000180 	st.b	$r0,$r12,0
            return buf;
9000000000003bd4:	1c0043cc 	pcaddu12i	$r12,542(0x21e)
9000000000003bd8:	02ff118c 	addi.d	$r12,$r12,-60(0xfc4)
9000000000003bdc:	50000800 	b	8(0x8) # 9000000000003be4 <readline+0x11c>
        c = getchar();
9000000000003be0:	53ff13ff 	b	-240(0xfffff10) # 9000000000003af0 <readline+0x28>
        }
    }
}
9000000000003be4:	00150184 	move	$r4,$r12
9000000000003be8:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000003bec:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000003bf0:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000003bf4:	4c000020 	jirl	$r0,$r1,0

9000000000003bf8 <__mulu10>:
{
9000000000003bf8:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000003bfc:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000003c00:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000003c04:	0015008c 	move	$r12,$r4
9000000000003c08:	0040818c 	slli.w	$r12,$r12,0x0
9000000000003c0c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    return (n<<3)+(n<<1);
9000000000003c10:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000003c14:	00408d8c 	slli.w	$r12,$r12,0x3
9000000000003c18:	0015018d 	move	$r13,$r12
9000000000003c1c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000003c20:	0040858c 	slli.w	$r12,$r12,0x1
9000000000003c24:	001031ac 	add.w	$r12,$r13,$r12
}
9000000000003c28:	00150184 	move	$r4,$r12
9000000000003c2c:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000003c30:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000003c34:	4c000020 	jirl	$r0,$r1,0

9000000000003c38 <__divu10>:
static inline unsigned int __divu10(unsigned int n) {
9000000000003c38:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000003c3c:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000003c40:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000003c44:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000003c48:	0015008c 	move	$r12,$r4
9000000000003c4c:	0040818c 	slli.w	$r12,$r12,0x0
9000000000003c50:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
    q = (n >> 1) + (n >> 2);
9000000000003c54:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000003c58:	0044858c 	srli.w	$r12,$r12,0x1
9000000000003c5c:	0015018d 	move	$r13,$r12
9000000000003c60:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000003c64:	0044898c 	srli.w	$r12,$r12,0x2
9000000000003c68:	001031ac 	add.w	$r12,$r13,$r12
9000000000003c6c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    q = q + (q >> 4);
9000000000003c70:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000003c74:	0044918c 	srli.w	$r12,$r12,0x4
9000000000003c78:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
9000000000003c7c:	001031ac 	add.w	$r12,$r13,$r12
9000000000003c80:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    q = q + (q >> 8);
9000000000003c84:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000003c88:	0044a18c 	srli.w	$r12,$r12,0x8
9000000000003c8c:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
9000000000003c90:	001031ac 	add.w	$r12,$r13,$r12
9000000000003c94:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    q = q + (q >> 16);
9000000000003c98:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000003c9c:	0044c18c 	srli.w	$r12,$r12,0x10
9000000000003ca0:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
9000000000003ca4:	001031ac 	add.w	$r12,$r13,$r12
9000000000003ca8:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    q = q >> 3;
9000000000003cac:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000003cb0:	00448d8c 	srli.w	$r12,$r12,0x3
9000000000003cb4:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    r = n - __mulu10(q);
9000000000003cb8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000003cbc:	00150184 	move	$r4,$r12
9000000000003cc0:	57ff3bff 	bl	-200(0xfffff38) # 9000000000003bf8 <__mulu10>
9000000000003cc4:	0015008c 	move	$r12,$r4
9000000000003cc8:	28bf72cd 	ld.w	$r13,$r22,-36(0xfdc)
9000000000003ccc:	001131ac 	sub.w	$r12,$r13,$r12
9000000000003cd0:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
    return q + ((r + 6) >> 4);
9000000000003cd4:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
9000000000003cd8:	0280198c 	addi.w	$r12,$r12,6(0x6)
9000000000003cdc:	0044918c 	srli.w	$r12,$r12,0x4
9000000000003ce0:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
9000000000003ce4:	001031ac 	add.w	$r12,$r13,$r12
}
9000000000003ce8:	00150184 	move	$r4,$r12
9000000000003cec:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000003cf0:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000003cf4:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000003cf8:	4c000020 	jirl	$r0,$r1,0

9000000000003cfc <fence_i>:
static void fence_i(void *va_start, int size) {
9000000000003cfc:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000003d00:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000003d04:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000003d08:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000003d0c:	001500ac 	move	$r12,$r5
9000000000003d10:	0040818c 	slli.w	$r12,$r12,0x0
9000000000003d14:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
9000000000003d18:	38720000 	dbar	0x0
    void *va_end = va_start + size;
9000000000003d1c:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000003d20:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000003d24:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000003d28:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
9000000000003d2c:	50002000 	b	32(0x20) # 9000000000003d4c <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
9000000000003d30:	06000189 	cacop	0x9,$r12,0
9000000000003d34:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
9000000000003d38:	06000188 	cacop	0x8,$r12,0
9000000000003d3c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
9000000000003d40:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000003d44:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000003d48:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
9000000000003d4c:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000003d50:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000003d54:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 9000000000003d30 <fence_i+0x34>
9000000000003d58:	38728000 	ibar	0x0
}
9000000000003d5c:	03400000 	andi	$r0,$r0,0x0
9000000000003d60:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000003d64:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000003d68:	4c000020 	jirl	$r0,$r1,0

9000000000003d6c <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
9000000000003d6c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000003d70:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000003d74:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000003d78:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000003d7c:	0015008c 	move	$r12,$r4
9000000000003d80:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
9000000000003d84:	0040818c 	slli.w	$r12,$r12,0x0
9000000000003d88:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    cons_putc(c);
9000000000003d8c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000003d90:	00150184 	move	$r4,$r12
9000000000003d94:	57cb0bff 	bl	-13560(0xfffcb08) # 900000000000089c <cons_putc>
    (*cnt) ++;
9000000000003d98:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000003d9c:	2880018c 	ld.w	$r12,$r12,0
9000000000003da0:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000003da4:	0015018d 	move	$r13,$r12
9000000000003da8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000003dac:	2980018d 	st.w	$r13,$r12,0
}
9000000000003db0:	03400000 	andi	$r0,$r0,0x0
9000000000003db4:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000003db8:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000003dbc:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000003dc0:	4c000020 	jirl	$r0,$r1,0

9000000000003dc4 <vkprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want kprintf() instead.
 * */
int
vkprintf(const char *fmt, va_list ap) {
9000000000003dc4:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000003dc8:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000003dcc:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000003dd0:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000003dd4:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000003dd8:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
    int cnt = 0;
9000000000003ddc:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
    vprintfmt((void*)cputch, NO_FD, &cnt, fmt, ap);
9000000000003de0:	02ffb2cc 	addi.d	$r12,$r22,-20(0xfec)
9000000000003de4:	28ff42c8 	ld.d	$r8,$r22,-48(0xfd0)
9000000000003de8:	28ff62c7 	ld.d	$r7,$r22,-40(0xfd8)
9000000000003dec:	00150186 	move	$r6,$r12
9000000000003df0:	15fffecc 	lu12i.w	$r12,-10(0xffff6)
9000000000003df4:	03ab6585 	ori	$r5,$r12,0xad9
9000000000003df8:	1c000004 	pcaddu12i	$r4,0
9000000000003dfc:	02fdd084 	addi.d	$r4,$r4,-140(0xf74)
9000000000003e00:	57da7bff 	bl	-9608(0xfffda78) # 9000000000001878 <vprintfmt>
    return cnt;
9000000000003e04:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
9000000000003e08:	00150184 	move	$r4,$r12
9000000000003e0c:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000003e10:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000003e14:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000003e18:	4c000020 	jirl	$r0,$r1,0

9000000000003e1c <kprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
kprintf(const char *fmt, ...) {
9000000000003e1c:	02fe4063 	addi.d	$r3,$r3,-112(0xf90)
9000000000003e20:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000003e24:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000003e28:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000003e2c:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000003e30:	29c022c5 	st.d	$r5,$r22,8(0x8)
9000000000003e34:	29c042c6 	st.d	$r6,$r22,16(0x10)
9000000000003e38:	29c062c7 	st.d	$r7,$r22,24(0x18)
9000000000003e3c:	29c082c8 	st.d	$r8,$r22,32(0x20)
9000000000003e40:	29c0a2c9 	st.d	$r9,$r22,40(0x28)
9000000000003e44:	29c0c2ca 	st.d	$r10,$r22,48(0x30)
9000000000003e48:	29c0e2cb 	st.d	$r11,$r22,56(0x38)
    va_list ap;
    int cnt;
    va_start(ap, fmt);
9000000000003e4c:	02c102cc 	addi.d	$r12,$r22,64(0x40)
9000000000003e50:	02ff218c 	addi.d	$r12,$r12,-56(0xfc8)
9000000000003e54:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    cnt = vkprintf(fmt, ap);
9000000000003e58:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000003e5c:	00150185 	move	$r5,$r12
9000000000003e60:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000003e64:	57ff63ff 	bl	-160(0xfffff60) # 9000000000003dc4 <vkprintf>
9000000000003e68:	0015008c 	move	$r12,$r4
9000000000003e6c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    va_end(ap);
    return cnt;
9000000000003e70:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
9000000000003e74:	00150184 	move	$r4,$r12
9000000000003e78:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000003e7c:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000003e80:	02c1c063 	addi.d	$r3,$r3,112(0x70)
9000000000003e84:	4c000020 	jirl	$r0,$r1,0

9000000000003e88 <printhex>:


static const char* hexdigits = "0123456789ABCDEF";
void printhex(unsigned long long x){
9000000000003e88:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000003e8c:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000003e90:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000003e94:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000003e98:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
  char tmp[17];
  int i=0;
9000000000003e9c:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
  tmp[16] = 0;
9000000000003ea0:	293fa2c0 	st.b	$r0,$r22,-24(0xfe8)
  for(i=15;i>=0;i--){
9000000000003ea4:	02803c0c 	addi.w	$r12,$r0,15(0xf)
9000000000003ea8:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000003eac:	50004800 	b	72(0x48) # 9000000000003ef4 <printhex+0x6c>
    tmp[i] = hexdigits[x & 0xf];
9000000000003eb0:	1c00040c 	pcaddu12i	$r12,32(0x20)
9000000000003eb4:	02c5a18c 	addi.d	$r12,$r12,360(0x168)
9000000000003eb8:	28c0018d 	ld.d	$r13,$r12,0
9000000000003ebc:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000003ec0:	03403d8c 	andi	$r12,$r12,0xf
9000000000003ec4:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000003ec8:	2800018c 	ld.b	$r12,$r12,0
9000000000003ecc:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
9000000000003ed0:	02ffc2ce 	addi.d	$r14,$r22,-16(0xff0)
9000000000003ed4:	0010b5cd 	add.d	$r13,$r14,$r13
9000000000003ed8:	293fa1ac 	st.b	$r12,$r13,-24(0xfe8)
    x = x >> 4;
9000000000003edc:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000003ee0:	0045118c 	srli.d	$r12,$r12,0x4
9000000000003ee4:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
  for(i=15;i>=0;i--){
9000000000003ee8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000003eec:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
9000000000003ef0:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000003ef4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000003ef8:	67ffb980 	bge	$r12,$r0,-72(0x3ffb8) # 9000000000003eb0 <printhex+0x28>
  }
  kprintf(tmp);
9000000000003efc:	02ff62cc 	addi.d	$r12,$r22,-40(0xfd8)
9000000000003f00:	00150184 	move	$r4,$r12
9000000000003f04:	57ff1bff 	bl	-232(0xfffff18) # 9000000000003e1c <kprintf>
}
9000000000003f08:	03400000 	andi	$r0,$r0,0x0
9000000000003f0c:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000000003f10:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000000003f14:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000003f18:	4c000020 	jirl	$r0,$r1,0

9000000000003f1c <printbase10>:



void printbase10(int x){
9000000000003f1c:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
9000000000003f20:	29c12061 	st.d	$r1,$r3,72(0x48)
9000000000003f24:	29c10076 	st.d	$r22,$r3,64(0x40)
9000000000003f28:	29c0e077 	st.d	$r23,$r3,56(0x38)
9000000000003f2c:	02c14076 	addi.d	$r22,$r3,80(0x50)
9000000000003f30:	0015008c 	move	$r12,$r4
9000000000003f34:	0040818c 	slli.w	$r12,$r12,0x0
9000000000003f38:	29bef2cc 	st.w	$r12,$r22,-68(0xfbc)
  unsigned int t;
  int i = 0;
9000000000003f3c:	29bf72c0 	st.w	$r0,$r22,-36(0xfdc)
  char buf[16];
  if(x<0)
9000000000003f40:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
9000000000003f44:	64000d80 	bge	$r12,$r0,12(0xc) # 9000000000003f50 <printbase10+0x34>
    kputchar('-');
9000000000003f48:	0280b404 	addi.w	$r4,$r0,45(0x2d)
9000000000003f4c:	54010000 	bl	256(0x100) # 900000000000404c <kputchar>
  x = (x<0)?-x:x;
9000000000003f50:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
9000000000003f54:	0048fd8c 	srai.w	$r12,$r12,0x1f
9000000000003f58:	28bef2cd 	ld.w	$r13,$r22,-68(0xfbc)
9000000000003f5c:	0015b1ad 	xor	$r13,$r13,$r12
9000000000003f60:	001131ac 	sub.w	$r12,$r13,$r12
9000000000003f64:	29bef2cc 	st.w	$r12,$r22,-68(0xfbc)
  while(x >= 10){
9000000000003f68:	50006800 	b	104(0x68) # 9000000000003fd0 <printbase10+0xb4>
    t = __divu10(x); 
9000000000003f6c:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
9000000000003f70:	00150184 	move	$r4,$r12
9000000000003f74:	57fcc7ff 	bl	-828(0xffffcc4) # 9000000000003c38 <__divu10>
9000000000003f78:	0015008c 	move	$r12,$r4
9000000000003f7c:	29bf62cc 	st.w	$r12,$r22,-40(0xfd8)
    buf[i++] = ('0'+(x-__mulu10(t)));
9000000000003f80:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
9000000000003f84:	00678197 	bstrpick.w	$r23,$r12,0x7,0x0
9000000000003f88:	28bf62cc 	ld.w	$r12,$r22,-40(0xfd8)
9000000000003f8c:	00150184 	move	$r4,$r12
9000000000003f90:	57fc6bff 	bl	-920(0xffffc68) # 9000000000003bf8 <__mulu10>
9000000000003f94:	0015008c 	move	$r12,$r4
9000000000003f98:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
9000000000003f9c:	001132ec 	sub.w	$r12,$r23,$r12
9000000000003fa0:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
9000000000003fa4:	0280c18c 	addi.w	$r12,$r12,48(0x30)
9000000000003fa8:	0067818e 	bstrpick.w	$r14,$r12,0x7,0x0
9000000000003fac:	28bf72cd 	ld.w	$r13,$r22,-36(0xfdc)
9000000000003fb0:	028005ac 	addi.w	$r12,$r13,1(0x1)
9000000000003fb4:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
9000000000003fb8:	00005dcc 	ext.w.b	$r12,$r14
9000000000003fbc:	02ff82ce 	addi.d	$r14,$r22,-32(0xfe0)
9000000000003fc0:	0010b5cd 	add.d	$r13,$r14,$r13
9000000000003fc4:	293fa1ac 	st.b	$r12,$r13,-24(0xfe8)
    x = t;
9000000000003fc8:	28bf62cc 	ld.w	$r12,$r22,-40(0xfd8)
9000000000003fcc:	29bef2cc 	st.w	$r12,$r22,-68(0xfbc)
  while(x >= 10){
9000000000003fd0:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
9000000000003fd4:	0015018d 	move	$r13,$r12
9000000000003fd8:	0280240c 	addi.w	$r12,$r0,9(0x9)
9000000000003fdc:	63ff918d 	blt	$r12,$r13,-112(0x3ff90) # 9000000000003f6c <printbase10+0x50>
  }
  buf[i] = ('0'+x);
9000000000003fe0:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
9000000000003fe4:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
9000000000003fe8:	0280c18c 	addi.w	$r12,$r12,48(0x30)
9000000000003fec:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
9000000000003ff0:	00005d8c 	ext.w.b	$r12,$r12
9000000000003ff4:	28bf72cd 	ld.w	$r13,$r22,-36(0xfdc)
9000000000003ff8:	02ff82ce 	addi.d	$r14,$r22,-32(0xfe0)
9000000000003ffc:	0010b5cd 	add.d	$r13,$r14,$r13
9000000000004000:	293fa1ac 	st.b	$r12,$r13,-24(0xfe8)
  for(;i>=0;i--){
9000000000004004:	50002800 	b	40(0x28) # 900000000000402c <printbase10+0x110>
    kputchar(buf[i]);
9000000000004008:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
900000000000400c:	02ff82cd 	addi.d	$r13,$r22,-32(0xfe0)
9000000000004010:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000004014:	283fa18c 	ld.b	$r12,$r12,-24(0xfe8)
9000000000004018:	00150184 	move	$r4,$r12
900000000000401c:	54003000 	bl	48(0x30) # 900000000000404c <kputchar>
  for(;i>=0;i--){
9000000000004020:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000004024:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
9000000000004028:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
900000000000402c:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000004030:	67ffd980 	bge	$r12,$r0,-40(0x3ffd8) # 9000000000004008 <printbase10+0xec>
  }
}
9000000000004034:	03400000 	andi	$r0,$r0,0x0
9000000000004038:	28c12061 	ld.d	$r1,$r3,72(0x48)
900000000000403c:	28c10076 	ld.d	$r22,$r3,64(0x40)
9000000000004040:	28c0e077 	ld.d	$r23,$r3,56(0x38)
9000000000004044:	02c14063 	addi.d	$r3,$r3,80(0x50)
9000000000004048:	4c000020 	jirl	$r0,$r1,0

900000000000404c <kputchar>:

/* kputchar - writes a single character to stdout */
void
kputchar(int c) {
900000000000404c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000004050:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000004054:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000004058:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000000405c:	0015008c 	move	$r12,$r4
9000000000004060:	0040818c 	slli.w	$r12,$r12,0x0
9000000000004064:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
  cons_putc(c);
9000000000004068:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000406c:	00150184 	move	$r4,$r12
9000000000004070:	57c82fff 	bl	-14292(0xfffc82c) # 900000000000089c <cons_putc>
}
9000000000004074:	03400000 	andi	$r0,$r0,0x0
9000000000004078:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000000407c:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000004080:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000004084:	4c000020 	jirl	$r0,$r1,0

9000000000004088 <kputs>:
/* *
 * kputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
kputs(const char *str) {
9000000000004088:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000408c:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000004090:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000004094:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000004098:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    int cnt = 0;
900000000000409c:	29bfa2c0 	st.w	$r0,$r22,-24(0xfe8)
    char c;
    while ((c = *str ++) != '\0') {
90000000000040a0:	50001800 	b	24(0x18) # 90000000000040b8 <kputs+0x30>
        cputch(c, &cnt);
90000000000040a4:	283fbecc 	ld.b	$r12,$r22,-17(0xfef)
90000000000040a8:	02ffa2cd 	addi.d	$r13,$r22,-24(0xfe8)
90000000000040ac:	001501a5 	move	$r5,$r13
90000000000040b0:	00150184 	move	$r4,$r12
90000000000040b4:	57fcbbff 	bl	-840(0xffffcb8) # 9000000000003d6c <cputch>
    while ((c = *str ++) != '\0') {
90000000000040b8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000040bc:	02c0058d 	addi.d	$r13,$r12,1(0x1)
90000000000040c0:	29ff62cd 	st.d	$r13,$r22,-40(0xfd8)
90000000000040c4:	2a00018c 	ld.bu	$r12,$r12,0
90000000000040c8:	293fbecc 	st.b	$r12,$r22,-17(0xfef)
90000000000040cc:	283fbecc 	ld.b	$r12,$r22,-17(0xfef)
90000000000040d0:	47ffd59f 	bnez	$r12,-44(0x7fffd4) # 90000000000040a4 <kputs+0x1c>
    }
    cputch('\n', &cnt);
90000000000040d4:	02ffa2cc 	addi.d	$r12,$r22,-24(0xfe8)
90000000000040d8:	00150185 	move	$r5,$r12
90000000000040dc:	02802804 	addi.w	$r4,$r0,10(0xa)
90000000000040e0:	57fc8fff 	bl	-884(0xffffc8c) # 9000000000003d6c <cputch>
    return cnt;
90000000000040e4:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
}
90000000000040e8:	00150184 	move	$r4,$r12
90000000000040ec:	28c0a061 	ld.d	$r1,$r3,40(0x28)
90000000000040f0:	28c08076 	ld.d	$r22,$r3,32(0x20)
90000000000040f4:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000000040f8:	4c000020 	jirl	$r0,$r1,0

90000000000040fc <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
90000000000040fc:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000004100:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000004104:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000004108:	02c08076 	addi.d	$r22,$r3,32(0x20)
    int c;
    while ((c = cons_getc()) == 0)
900000000000410c:	03400000 	andi	$r0,$r0,0x0
9000000000004110:	57c7e3ff 	bl	-14368(0xfffc7e0) # 90000000000008f0 <cons_getc>
9000000000004114:	0015008c 	move	$r12,$r4
9000000000004118:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000000411c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000004120:	43fff19f 	beqz	$r12,-16(0x7ffff0) # 9000000000004110 <getchar+0x14>
        /* do nothing */;
    return c;
9000000000004124:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
9000000000004128:	00150184 	move	$r4,$r12
900000000000412c:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000004130:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000004134:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000004138:	4c000020 	jirl	$r0,$r1,0

900000000000413c <fence_i>:
static void fence_i(void *va_start, int size) {
900000000000413c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000004140:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000004144:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000004148:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000000414c:	001500ac 	move	$r12,$r5
9000000000004150:	0040818c 	slli.w	$r12,$r12,0x0
9000000000004154:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
9000000000004158:	38720000 	dbar	0x0
    void *va_end = va_start + size;
900000000000415c:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000004160:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000004164:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000004168:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
900000000000416c:	50002000 	b	32(0x20) # 900000000000418c <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
9000000000004170:	06000189 	cacop	0x9,$r12,0
9000000000004174:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
9000000000004178:	06000188 	cacop	0x8,$r12,0
900000000000417c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
9000000000004180:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000004184:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000004188:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
900000000000418c:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000004190:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004194:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 9000000000004170 <fence_i+0x34>
9000000000004198:	38728000 	ibar	0x0
}
900000000000419c:	03400000 	andi	$r0,$r0,0x0
90000000000041a0:	28c0a076 	ld.d	$r22,$r3,40(0x28)
90000000000041a4:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000000041a8:	4c000020 	jirl	$r0,$r1,0

90000000000041ac <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
90000000000041ac:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000000041b0:	29c0a076 	st.d	$r22,$r3,40(0x28)
90000000000041b4:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000000041b8:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    size_t cnt = 0;
90000000000041bc:	29ffa2c0 	st.d	$r0,$r22,-24(0xfe8)
    while (*s ++ != '\0') {
90000000000041c0:	50001000 	b	16(0x10) # 90000000000041d0 <strlen+0x24>
        cnt ++;
90000000000041c4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000041c8:	02c0058c 	addi.d	$r12,$r12,1(0x1)
90000000000041cc:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (*s ++ != '\0') {
90000000000041d0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000041d4:	02c0058d 	addi.d	$r13,$r12,1(0x1)
90000000000041d8:	29ff62cd 	st.d	$r13,$r22,-40(0xfd8)
90000000000041dc:	2800018c 	ld.b	$r12,$r12,0
90000000000041e0:	47ffe59f 	bnez	$r12,-28(0x7fffe4) # 90000000000041c4 <strlen+0x18>
    }
    return cnt;
90000000000041e4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
}
90000000000041e8:	00150184 	move	$r4,$r12
90000000000041ec:	28c0a076 	ld.d	$r22,$r3,40(0x28)
90000000000041f0:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000000041f4:	4c000020 	jirl	$r0,$r1,0

90000000000041f8 <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
90000000000041f8:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000000041fc:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000004200:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000004204:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000004208:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
    size_t cnt = 0;
900000000000420c:	29ffa2c0 	st.d	$r0,$r22,-24(0xfe8)
    while (cnt < len && *s ++ != '\0') {
9000000000004210:	50001000 	b	16(0x10) # 9000000000004220 <strnlen+0x28>
        cnt ++;
9000000000004214:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004218:	02c0058c 	addi.d	$r12,$r12,1(0x1)
900000000000421c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (cnt < len && *s ++ != '\0') {
9000000000004220:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000004224:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000004228:	6c0019ac 	bgeu	$r13,$r12,24(0x18) # 9000000000004240 <strnlen+0x48>
900000000000422c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000004230:	02c0058d 	addi.d	$r13,$r12,1(0x1)
9000000000004234:	29ff62cd 	st.d	$r13,$r22,-40(0xfd8)
9000000000004238:	2800018c 	ld.b	$r12,$r12,0
900000000000423c:	47ffd99f 	bnez	$r12,-40(0x7fffd8) # 9000000000004214 <strnlen+0x1c>
    }
    return cnt;
9000000000004240:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
}
9000000000004244:	00150184 	move	$r4,$r12
9000000000004248:	28c0a076 	ld.d	$r22,$r3,40(0x28)
900000000000424c:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000004250:	4c000020 	jirl	$r0,$r1,0

9000000000004254 <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
9000000000004254:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000004258:	29c0a076 	st.d	$r22,$r3,40(0x28)
900000000000425c:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000004260:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000004264:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
#ifdef __HAVE_ARCH_MEM_OPTS
    return __strcpy(dst, src);
#else
    char *p = dst;
9000000000004268:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000426c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while ((*p ++ = *src ++) != '\0')
9000000000004270:	03400000 	andi	$r0,$r0,0x0
9000000000004274:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000004278:	02c005ac 	addi.d	$r12,$r13,1(0x1)
900000000000427c:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
9000000000004280:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004284:	02c0058e 	addi.d	$r14,$r12,1(0x1)
9000000000004288:	29ffa2ce 	st.d	$r14,$r22,-24(0xfe8)
900000000000428c:	280001ad 	ld.b	$r13,$r13,0
9000000000004290:	2900018d 	st.b	$r13,$r12,0
9000000000004294:	2800018c 	ld.b	$r12,$r12,0
9000000000004298:	47ffdd9f 	bnez	$r12,-36(0x7fffdc) # 9000000000004274 <strcpy+0x20>
        /* nothing */;
    return dst;
900000000000429c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
#endif /* __HAVE_ARCH_MEM_OPTS */
}
90000000000042a0:	00150184 	move	$r4,$r12
90000000000042a4:	28c0a076 	ld.d	$r22,$r3,40(0x28)
90000000000042a8:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000000042ac:	4c000020 	jirl	$r0,$r1,0

90000000000042b0 <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
90000000000042b0:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
90000000000042b4:	29c0e076 	st.d	$r22,$r3,56(0x38)
90000000000042b8:	02c10076 	addi.d	$r22,$r3,64(0x40)
90000000000042bc:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
90000000000042c0:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
90000000000042c4:	29ff22c6 	st.d	$r6,$r22,-56(0xfc8)
    char *p = dst;
90000000000042c8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000042cc:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (len > 0) {
90000000000042d0:	50004400 	b	68(0x44) # 9000000000004314 <strncpy+0x64>
        if ((*p = *src) != '\0') {
90000000000042d4:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
90000000000042d8:	2800018d 	ld.b	$r13,$r12,0
90000000000042dc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000042e0:	2900018d 	st.b	$r13,$r12,0
90000000000042e4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000042e8:	2800018c 	ld.b	$r12,$r12,0
90000000000042ec:	40001180 	beqz	$r12,16(0x10) # 90000000000042fc <strncpy+0x4c>
            src ++;
90000000000042f0:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
90000000000042f4:	02c0058c 	addi.d	$r12,$r12,1(0x1)
90000000000042f8:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
        }
        p ++, len --;
90000000000042fc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004300:	02c0058c 	addi.d	$r12,$r12,1(0x1)
9000000000004304:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000004308:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000430c:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
9000000000004310:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
    while (len > 0) {
9000000000004314:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000004318:	47ffbd9f 	bnez	$r12,-68(0x7fffbc) # 90000000000042d4 <strncpy+0x24>
    }
    return dst;
900000000000431c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
}
9000000000004320:	00150184 	move	$r4,$r12
9000000000004324:	28c0e076 	ld.d	$r22,$r3,56(0x38)
9000000000004328:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000000432c:	4c000020 	jirl	$r0,$r1,0

9000000000004330 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
9000000000004330:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000004334:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000004338:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000000433c:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
9000000000004340:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
#ifdef __HAVE_ARCH_MEM_OPTS
    return __strcmp(s1, s2);
#else
    while (*s1 != '\0' && *s1 == *s2) {
9000000000004344:	50001c00 	b	28(0x1c) # 9000000000004360 <strcmp+0x30>
        s1 ++, s2 ++;
9000000000004348:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000434c:	02c0058c 	addi.d	$r12,$r12,1(0x1)
9000000000004350:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000004354:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000004358:	02c0058c 	addi.d	$r12,$r12,1(0x1)
900000000000435c:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    while (*s1 != '\0' && *s1 == *s2) {
9000000000004360:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004364:	2800018c 	ld.b	$r12,$r12,0
9000000000004368:	40001980 	beqz	$r12,24(0x18) # 9000000000004380 <strcmp+0x50>
900000000000436c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004370:	2800018d 	ld.b	$r13,$r12,0
9000000000004374:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000004378:	2800018c 	ld.b	$r12,$r12,0
900000000000437c:	5bffcdac 	beq	$r13,$r12,-52(0x3ffcc) # 9000000000004348 <strcmp+0x18>
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
9000000000004380:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004384:	2800018c 	ld.b	$r12,$r12,0
9000000000004388:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
900000000000438c:	0015018d 	move	$r13,$r12
9000000000004390:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000004394:	2800018c 	ld.b	$r12,$r12,0
9000000000004398:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
900000000000439c:	001131ac 	sub.w	$r12,$r13,$r12
#endif /* __HAVE_ARCH_MEM_OPTS */
}
90000000000043a0:	00150184 	move	$r4,$r12
90000000000043a4:	28c06076 	ld.d	$r22,$r3,24(0x18)
90000000000043a8:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000000043ac:	4c000020 	jirl	$r0,$r1,0

90000000000043b0 <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
90000000000043b0:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000000043b4:	29c0a076 	st.d	$r22,$r3,40(0x28)
90000000000043b8:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000000043bc:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
90000000000043c0:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
90000000000043c4:	29ff62c6 	st.d	$r6,$r22,-40(0xfd8)
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
90000000000043c8:	50002800 	b	40(0x28) # 90000000000043f0 <strncmp+0x40>
        n --, s1 ++, s2 ++;
90000000000043cc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000043d0:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
90000000000043d4:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
90000000000043d8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000043dc:	02c0058c 	addi.d	$r12,$r12,1(0x1)
90000000000043e0:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
90000000000043e4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000043e8:	02c0058c 	addi.d	$r12,$r12,1(0x1)
90000000000043ec:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
90000000000043f0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000043f4:	40002580 	beqz	$r12,36(0x24) # 9000000000004418 <strncmp+0x68>
90000000000043f8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000043fc:	2800018c 	ld.b	$r12,$r12,0
9000000000004400:	40001980 	beqz	$r12,24(0x18) # 9000000000004418 <strncmp+0x68>
9000000000004404:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004408:	2800018d 	ld.b	$r13,$r12,0
900000000000440c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000004410:	2800018c 	ld.b	$r12,$r12,0
9000000000004414:	5bffb9ac 	beq	$r13,$r12,-72(0x3ffb8) # 90000000000043cc <strncmp+0x1c>
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
9000000000004418:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000441c:	40002980 	beqz	$r12,40(0x28) # 9000000000004444 <strncmp+0x94>
9000000000004420:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004424:	2800018c 	ld.b	$r12,$r12,0
9000000000004428:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
900000000000442c:	0015018d 	move	$r13,$r12
9000000000004430:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000004434:	2800018c 	ld.b	$r12,$r12,0
9000000000004438:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
900000000000443c:	001131ac 	sub.w	$r12,$r13,$r12
9000000000004440:	50000800 	b	8(0x8) # 9000000000004448 <strncmp+0x98>
9000000000004444:	0015000c 	move	$r12,$r0
}
9000000000004448:	00150184 	move	$r4,$r12
900000000000444c:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000004450:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000004454:	4c000020 	jirl	$r0,$r1,0

9000000000004458 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
9000000000004458:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000445c:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000004460:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000004464:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
9000000000004468:	001500ac 	move	$r12,$r5
900000000000446c:	0040818c 	slli.w	$r12,$r12,0x0
9000000000004470:	293f9ecc 	st.b	$r12,$r22,-25(0xfe7)
    while (*s != '\0') {
9000000000004474:	50002800 	b	40(0x28) # 900000000000449c <strchr+0x44>
        if (*s == c) {
9000000000004478:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000447c:	2800018c 	ld.b	$r12,$r12,0
9000000000004480:	283f9ecd 	ld.b	$r13,$r22,-25(0xfe7)
9000000000004484:	5c000dac 	bne	$r13,$r12,12(0xc) # 9000000000004490 <strchr+0x38>
            return (char *)s;
9000000000004488:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000448c:	50002000 	b	32(0x20) # 90000000000044ac <strchr+0x54>
        }
        s ++;
9000000000004490:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004494:	02c0058c 	addi.d	$r12,$r12,1(0x1)
9000000000004498:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (*s != '\0') {
900000000000449c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000044a0:	2800018c 	ld.b	$r12,$r12,0
90000000000044a4:	47ffd59f 	bnez	$r12,-44(0x7fffd4) # 9000000000004478 <strchr+0x20>
    }
    return NULL;
90000000000044a8:	0015000c 	move	$r12,$r0
}
90000000000044ac:	00150184 	move	$r4,$r12
90000000000044b0:	28c06076 	ld.d	$r22,$r3,24(0x18)
90000000000044b4:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000000044b8:	4c000020 	jirl	$r0,$r1,0

90000000000044bc <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
90000000000044bc:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000000044c0:	29c06076 	st.d	$r22,$r3,24(0x18)
90000000000044c4:	02c08076 	addi.d	$r22,$r3,32(0x20)
90000000000044c8:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
90000000000044cc:	001500ac 	move	$r12,$r5
90000000000044d0:	0040818c 	slli.w	$r12,$r12,0x0
90000000000044d4:	293f9ecc 	st.b	$r12,$r22,-25(0xfe7)
    while (*s != '\0') {
90000000000044d8:	50002000 	b	32(0x20) # 90000000000044f8 <strfind+0x3c>
        if (*s == c) {
90000000000044dc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000044e0:	2800018c 	ld.b	$r12,$r12,0
90000000000044e4:	283f9ecd 	ld.b	$r13,$r22,-25(0xfe7)
90000000000044e8:	580021ac 	beq	$r13,$r12,32(0x20) # 9000000000004508 <strfind+0x4c>
            break;
        }
        s ++;
90000000000044ec:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000044f0:	02c0058c 	addi.d	$r12,$r12,1(0x1)
90000000000044f4:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (*s != '\0') {
90000000000044f8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000044fc:	2800018c 	ld.b	$r12,$r12,0
9000000000004500:	47ffdd9f 	bnez	$r12,-36(0x7fffdc) # 90000000000044dc <strfind+0x20>
9000000000004504:	50000800 	b	8(0x8) # 900000000000450c <strfind+0x50>
            break;
9000000000004508:	03400000 	andi	$r0,$r0,0x0
    }
    return (char *)s;
900000000000450c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
}
9000000000004510:	00150184 	move	$r4,$r12
9000000000004514:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000004518:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000000451c:	4c000020 	jirl	$r0,$r1,0

9000000000004520 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
9000000000004520:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000004524:	29c0e076 	st.d	$r22,$r3,56(0x38)
9000000000004528:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000000452c:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000004530:	001500ac 	move	$r12,$r5
9000000000004534:	29ff22c6 	st.d	$r6,$r22,-56(0xfc8)
9000000000004538:	0040818c 	slli.w	$r12,$r12,0x0
900000000000453c:	293f5ecc 	st.b	$r12,$r22,-41(0xfd7)
#ifdef __HAVE_ARCH_MEM_OPTS
    return __memset(s, c, n);
#else
    char *p = s;
9000000000004540:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000004544:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (n -- > 0) {
9000000000004548:	50001800 	b	24(0x18) # 9000000000004560 <memset+0x40>
        *p ++ = c;
900000000000454c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004550:	02c0058d 	addi.d	$r13,$r12,1(0x1)
9000000000004554:	29ffa2cd 	st.d	$r13,$r22,-24(0xfe8)
9000000000004558:	2a3f5ecd 	ld.bu	$r13,$r22,-41(0xfd7)
900000000000455c:	2900018d 	st.b	$r13,$r12,0
    while (n -- > 0) {
9000000000004560:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000004564:	02fffd8d 	addi.d	$r13,$r12,-1(0xfff)
9000000000004568:	29ff22cd 	st.d	$r13,$r22,-56(0xfc8)
900000000000456c:	47ffe19f 	bnez	$r12,-32(0x7fffe0) # 900000000000454c <memset+0x2c>
    }
    return s;
9000000000004570:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
#endif /* __HAVE_ARCH_MEM_OPTS */
}
9000000000004574:	00150184 	move	$r4,$r12
9000000000004578:	28c0e076 	ld.d	$r22,$r3,56(0x38)
900000000000457c:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000004580:	4c000020 	jirl	$r0,$r1,0

9000000000004584 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
9000000000004584:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000004588:	29c0e076 	st.d	$r22,$r3,56(0x38)
900000000000458c:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000004590:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000004594:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
9000000000004598:	29ff22c6 	st.d	$r6,$r22,-56(0xfc8)
#ifdef __HAVE_ARCH_MEM_OPTS
    return __memcpy(dst, src, n);
#else
    const char *s = src;
900000000000459c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
90000000000045a0:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    char *d = dst;
90000000000045a4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000045a8:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    while (n -- > 0) {
90000000000045ac:	50002400 	b	36(0x24) # 90000000000045d0 <memcpy+0x4c>
        *d ++ = *s ++;
90000000000045b0:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
90000000000045b4:	02c005ac 	addi.d	$r12,$r13,1(0x1)
90000000000045b8:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
90000000000045bc:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000045c0:	02c0058e 	addi.d	$r14,$r12,1(0x1)
90000000000045c4:	29ff82ce 	st.d	$r14,$r22,-32(0xfe0)
90000000000045c8:	280001ad 	ld.b	$r13,$r13,0
90000000000045cc:	2900018d 	st.b	$r13,$r12,0
    while (n -- > 0) {
90000000000045d0:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000045d4:	02fffd8d 	addi.d	$r13,$r12,-1(0xfff)
90000000000045d8:	29ff22cd 	st.d	$r13,$r22,-56(0xfc8)
90000000000045dc:	47ffd59f 	bnez	$r12,-44(0x7fffd4) # 90000000000045b0 <memcpy+0x2c>
    }
    return dst;
90000000000045e0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
#endif /* __HAVE_ARCH_MEM_OPTS */
}
90000000000045e4:	00150184 	move	$r4,$r12
90000000000045e8:	28c0e076 	ld.d	$r22,$r3,56(0x38)
90000000000045ec:	02c10063 	addi.d	$r3,$r3,64(0x40)
90000000000045f0:	4c000020 	jirl	$r0,$r1,0

90000000000045f4 <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
90000000000045f4:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
90000000000045f8:	29c0e076 	st.d	$r22,$r3,56(0x38)
90000000000045fc:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000004600:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000004604:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
9000000000004608:	29ff22c6 	st.d	$r6,$r22,-56(0xfc8)
#ifdef __HAVE_ARCH_MEM_OPTS
    return __memmove(dst, src, n);
#else
    const char *s = src;
900000000000460c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000004610:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    char *d = dst;
9000000000004614:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000004618:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    if (s < d && s + n > d) {
900000000000461c:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000004620:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000004624:	6c0099ac 	bgeu	$r13,$r12,152(0x98) # 90000000000046bc <memmove+0xc8>
9000000000004628:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000462c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000004630:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000004634:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000004638:	6c0085ac 	bgeu	$r13,$r12,132(0x84) # 90000000000046bc <memmove+0xc8>
        s += n, d += n;
900000000000463c:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000004640:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000004644:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000004648:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000000464c:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000004650:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000004654:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000004658:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
        while (n -- > 0) {
900000000000465c:	50002c00 	b	44(0x2c) # 9000000000004688 <memmove+0x94>
            *-- d = *-- s;
9000000000004660:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004664:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
9000000000004668:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000000466c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000004670:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
9000000000004674:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000004678:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000467c:	2800018d 	ld.b	$r13,$r12,0
9000000000004680:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000004684:	2900018d 	st.b	$r13,$r12,0
        while (n -- > 0) {
9000000000004688:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000468c:	02fffd8d 	addi.d	$r13,$r12,-1(0xfff)
9000000000004690:	29ff22cd 	st.d	$r13,$r22,-56(0xfc8)
9000000000004694:	47ffcd9f 	bnez	$r12,-52(0x7fffcc) # 9000000000004660 <memmove+0x6c>
    if (s < d && s + n > d) {
9000000000004698:	50003400 	b	52(0x34) # 90000000000046cc <memmove+0xd8>
        }
    } else {
        while (n -- > 0) {
            *d ++ = *s ++;
900000000000469c:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
90000000000046a0:	02c005ac 	addi.d	$r12,$r13,1(0x1)
90000000000046a4:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
90000000000046a8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000046ac:	02c0058e 	addi.d	$r14,$r12,1(0x1)
90000000000046b0:	29ff82ce 	st.d	$r14,$r22,-32(0xfe0)
90000000000046b4:	280001ad 	ld.b	$r13,$r13,0
90000000000046b8:	2900018d 	st.b	$r13,$r12,0
        while (n -- > 0) {
90000000000046bc:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000046c0:	02fffd8d 	addi.d	$r13,$r12,-1(0xfff)
90000000000046c4:	29ff22cd 	st.d	$r13,$r22,-56(0xfc8)
90000000000046c8:	47ffd59f 	bnez	$r12,-44(0x7fffd4) # 900000000000469c <memmove+0xa8>
        }
    }
    return dst;
90000000000046cc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
#endif /* __HAVE_ARCH_MEM_OPTS */
}
90000000000046d0:	00150184 	move	$r4,$r12
90000000000046d4:	28c0e076 	ld.d	$r22,$r3,56(0x38)
90000000000046d8:	02c10063 	addi.d	$r3,$r3,64(0x40)
90000000000046dc:	4c000020 	jirl	$r0,$r1,0

90000000000046e0 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
90000000000046e0:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
90000000000046e4:	29c0e076 	st.d	$r22,$r3,56(0x38)
90000000000046e8:	02c10076 	addi.d	$r22,$r3,64(0x40)
90000000000046ec:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
90000000000046f0:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
90000000000046f4:	29ff22c6 	st.d	$r6,$r22,-56(0xfc8)
    const char *s1 = (const char *)v1;
90000000000046f8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000046fc:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    const char *s2 = (const char *)v2;
9000000000004700:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000004704:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    while (n -- > 0) {
9000000000004708:	50005400 	b	84(0x54) # 900000000000475c <memcmp+0x7c>
        if (*s1 != *s2) {
900000000000470c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004710:	2800018d 	ld.b	$r13,$r12,0
9000000000004714:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000004718:	2800018c 	ld.b	$r12,$r12,0
900000000000471c:	580029ac 	beq	$r13,$r12,40(0x28) # 9000000000004744 <memcmp+0x64>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
9000000000004720:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004724:	2800018c 	ld.b	$r12,$r12,0
9000000000004728:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
900000000000472c:	0015018d 	move	$r13,$r12
9000000000004730:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000004734:	2800018c 	ld.b	$r12,$r12,0
9000000000004738:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
900000000000473c:	001131ac 	sub.w	$r12,$r13,$r12
9000000000004740:	50003000 	b	48(0x30) # 9000000000004770 <memcmp+0x90>
        }
        s1 ++, s2 ++;
9000000000004744:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004748:	02c0058c 	addi.d	$r12,$r12,1(0x1)
900000000000474c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000004750:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000004754:	02c0058c 	addi.d	$r12,$r12,1(0x1)
9000000000004758:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    while (n -- > 0) {
900000000000475c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000004760:	02fffd8d 	addi.d	$r13,$r12,-1(0xfff)
9000000000004764:	29ff22cd 	st.d	$r13,$r22,-56(0xfc8)
9000000000004768:	47ffa59f 	bnez	$r12,-92(0x7fffa4) # 900000000000470c <memcmp+0x2c>
    }
    return 0;
900000000000476c:	0015000c 	move	$r12,$r0
}
9000000000004770:	00150184 	move	$r4,$r12
9000000000004774:	28c0e076 	ld.d	$r22,$r3,56(0x38)
9000000000004778:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000000477c:	4c000020 	jirl	$r0,$r1,0

9000000000004780 <strdup>:

char *
strdup(const char *src) {
9000000000004780:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000004784:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000004788:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000000478c:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000004790:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    char *dst;
    size_t len = strlen(src);
9000000000004794:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000004798:	57fa17ff 	bl	-1516(0xffffa14) # 90000000000041ac <strlen>
900000000000479c:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    if ((dst = kmalloc(len + 1)) != NULL) {
90000000000047a0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000047a4:	02c0058c 	addi.d	$r12,$r12,1(0x1)
90000000000047a8:	00150184 	move	$r4,$r12
90000000000047ac:	542e8c00 	bl	11916(0x2e8c) # 9000000000007638 <kmalloc>
90000000000047b0:	0015008c 	move	$r12,$r4
90000000000047b4:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
90000000000047b8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000047bc:	40002580 	beqz	$r12,36(0x24) # 90000000000047e0 <strdup+0x60>
        memcpy(dst, src, len);
90000000000047c0:	28ffa2c6 	ld.d	$r6,$r22,-24(0xfe8)
90000000000047c4:	28ff62c5 	ld.d	$r5,$r22,-40(0xfd8)
90000000000047c8:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
90000000000047cc:	57fdbbff 	bl	-584(0xffffdb8) # 9000000000004584 <memcpy>
        dst[len] = '\0';
90000000000047d0:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
90000000000047d4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000047d8:	0010b1ac 	add.d	$r12,$r13,$r12
90000000000047dc:	29000180 	st.b	$r0,$r12,0
    }
    return dst;
90000000000047e0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
}
90000000000047e4:	00150184 	move	$r4,$r12
90000000000047e8:	28c0a061 	ld.d	$r1,$r3,40(0x28)
90000000000047ec:	28c08076 	ld.d	$r22,$r3,32(0x20)
90000000000047f0:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000000047f4:	4c000020 	jirl	$r0,$r1,0

90000000000047f8 <stradd>:

char *
stradd(const char *src1, const char *src2) {
90000000000047f8:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
90000000000047fc:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000004800:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000004804:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000004808:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
900000000000480c:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
    char *ret, *dst;
    size_t len1 = strlen(src1), len2 = strlen(src2);
9000000000004810:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000004814:	57f99bff 	bl	-1640(0xffff998) # 90000000000041ac <strlen>
9000000000004818:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000000481c:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
9000000000004820:	57f98fff 	bl	-1652(0xffff98c) # 90000000000041ac <strlen>
9000000000004824:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)
    if ((ret = dst = kmalloc(len1 + len2 + 1)) != NULL) {
9000000000004828:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000482c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000004830:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000004834:	02c0058c 	addi.d	$r12,$r12,1(0x1)
9000000000004838:	00150184 	move	$r4,$r12
900000000000483c:	542dfc00 	bl	11772(0x2dfc) # 9000000000007638 <kmalloc>
9000000000004840:	0015008c 	move	$r12,$r4
9000000000004844:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
9000000000004848:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000484c:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
9000000000004850:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000004854:	40004d80 	beqz	$r12,76(0x4c) # 90000000000048a0 <stradd+0xa8>
        memcpy(dst, src1, len1), dst += len1;
9000000000004858:	28ffa2c6 	ld.d	$r6,$r22,-24(0xfe8)
900000000000485c:	28ff22c5 	ld.d	$r5,$r22,-56(0xfc8)
9000000000004860:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000004864:	57fd23ff 	bl	-736(0xffffd20) # 9000000000004584 <memcpy>
9000000000004868:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000486c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004870:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000004874:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        memcpy(dst, src2, len2), dst += len2;
9000000000004878:	28ff82c6 	ld.d	$r6,$r22,-32(0xfe0)
900000000000487c:	28ff02c5 	ld.d	$r5,$r22,-64(0xfc0)
9000000000004880:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000004884:	57fd03ff 	bl	-768(0xffffd00) # 9000000000004584 <memcpy>
9000000000004888:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000488c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000004890:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000004894:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        *dst = '\0';
9000000000004898:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000489c:	29000180 	st.b	$r0,$r12,0
    }
    return ret;
90000000000048a0:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
90000000000048a4:	00150184 	move	$r4,$r12
90000000000048a8:	28c0e061 	ld.d	$r1,$r3,56(0x38)
90000000000048ac:	28c0c076 	ld.d	$r22,$r3,48(0x30)
90000000000048b0:	02c10063 	addi.d	$r3,$r3,64(0x40)
90000000000048b4:	4c000020 	jirl	$r0,$r1,0

90000000000048b8 <fence_i>:
static void fence_i(void *va_start, int size) {
90000000000048b8:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000000048bc:	29c0a076 	st.d	$r22,$r3,40(0x28)
90000000000048c0:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000000048c4:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
90000000000048c8:	001500ac 	move	$r12,$r5
90000000000048cc:	0040818c 	slli.w	$r12,$r12,0x0
90000000000048d0:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
90000000000048d4:	38720000 	dbar	0x0
    void *va_end = va_start + size;
90000000000048d8:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
90000000000048dc:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
90000000000048e0:	0010b1ac 	add.d	$r12,$r13,$r12
90000000000048e4:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
90000000000048e8:	50002000 	b	32(0x20) # 9000000000004908 <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
90000000000048ec:	06000189 	cacop	0x9,$r12,0
90000000000048f0:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
90000000000048f4:	06000188 	cacop	0x8,$r12,0
90000000000048f8:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
90000000000048fc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000004900:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000004904:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
9000000000004908:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000490c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004910:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 90000000000048ec <fence_i+0x34>
9000000000004914:	38728000 	ibar	0x0
}
9000000000004918:	03400000 	andi	$r0,$r0,0x0
900000000000491c:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000004920:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000004924:	4c000020 	jirl	$r0,$r1,0

9000000000004928 <ptep_invalid>:
	*ptep = 0;
}

static inline int
ptep_invalid (pte_t *ptep) 
{
9000000000004928:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000492c:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000004930:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000004934:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
	return (*ptep == 0);
9000000000004938:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000493c:	28c0018c 	ld.d	$r12,$r12,0
9000000000004940:	0240058c 	sltui	$r12,$r12,1(0x1)
9000000000004944:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
}
9000000000004948:	00150184 	move	$r4,$r12
900000000000494c:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000004950:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000004954:	4c000020 	jirl	$r0,$r1,0

9000000000004958 <ptep_present>:

static inline int
ptep_present (pte_t *ptep) 
{
9000000000004958:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000495c:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000004960:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000004964:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
	return (*ptep & PTE_P);
9000000000004968:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000496c:	28c0018c 	ld.d	$r12,$r12,0
9000000000004970:	0040818c 	slli.w	$r12,$r12,0x0
9000000000004974:	0340058c 	andi	$r12,$r12,0x1
}
9000000000004978:	00150184 	move	$r4,$r12
900000000000497c:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000004980:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000004984:	4c000020 	jirl	$r0,$r1,0

9000000000004988 <ptep_u_read>:
	return (*ptep & PTE_W);
}

static inline int
ptep_u_read (pte_t *ptep) 
{
9000000000004988:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000498c:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000004990:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000004994:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
	return (*ptep & PTE_U);
9000000000004998:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000499c:	28c0018c 	ld.d	$r12,$r12,0
90000000000049a0:	0040818c 	slli.w	$r12,$r12,0x0
90000000000049a4:	0340118c 	andi	$r12,$r12,0x4
}
90000000000049a8:	00150184 	move	$r4,$r12
90000000000049ac:	28c06076 	ld.d	$r22,$r3,24(0x18)
90000000000049b0:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000000049b4:	4c000020 	jirl	$r0,$r1,0

90000000000049b8 <ptep_u_write>:

static inline int
ptep_u_write (pte_t *ptep) 
{
90000000000049b8:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000000049bc:	29c06076 	st.d	$r22,$r3,24(0x18)
90000000000049c0:	02c08076 	addi.d	$r22,$r3,32(0x20)
90000000000049c4:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
	return ((*ptep & PTE_U) && (*ptep & PTE_W));
90000000000049c8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000049cc:	28c0018c 	ld.d	$r12,$r12,0
90000000000049d0:	0340118c 	andi	$r12,$r12,0x4
90000000000049d4:	40001d80 	beqz	$r12,28(0x1c) # 90000000000049f0 <ptep_u_write+0x38>
90000000000049d8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000049dc:	28c0018c 	ld.d	$r12,$r12,0
90000000000049e0:	0340098c 	andi	$r12,$r12,0x2
90000000000049e4:	40000d80 	beqz	$r12,12(0xc) # 90000000000049f0 <ptep_u_write+0x38>
90000000000049e8:	0280040c 	addi.w	$r12,$r0,1(0x1)
90000000000049ec:	50000800 	b	8(0x8) # 90000000000049f4 <ptep_u_write+0x3c>
90000000000049f0:	0015000c 	move	$r12,$r0
}
90000000000049f4:	00150184 	move	$r4,$r12
90000000000049f8:	28c06076 	ld.d	$r22,$r3,24(0x18)
90000000000049fc:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000004a00:	4c000020 	jirl	$r0,$r1,0

9000000000004a04 <b>:
#define PPLV 3

#define  CAUSEB_EXCCODE		16
#define  CAUSEF_EXCCODE		(_ULCAST_(63)  <<  CAUSEB_EXCCODE)
#define GET_CAUSE_EXCODE(x)   ( ((x) & CAUSEF_EXCCODE) >> CAUSEB_EXCCODE)
void b(){return;};
9000000000004a04:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000000004a08:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000000004a0c:	02c04076 	addi.d	$r22,$r3,16(0x10)
9000000000004a10:	03400000 	andi	$r0,$r0,0x0
9000000000004a14:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000000004a18:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000000004a1c:	4c000020 	jirl	$r0,$r1,0

9000000000004a20 <local_flush_icache_range>:
static void local_flush_icache_range(unsigned long start, unsigned long end)
{
9000000000004a20:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000004a24:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000004a28:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000004a2c:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
9000000000004a30:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
	asm volatile ("\tibar 0\n"::);
9000000000004a34:	38728000 	ibar	0x0
}
9000000000004a38:	03400000 	andi	$r0,$r0,0x0
9000000000004a3c:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000004a40:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000004a44:	4c000020 	jirl	$r0,$r1,0

9000000000004a48 <print_context>:

void
print_context(struct context *con){
9000000000004a48:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000004a4c:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000004a50:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000004a54:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000004a58:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
      printhex(con->sf_s0);kputchar('\n');
9000000000004a5c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004a60:	28c0018c 	ld.d	$r12,$r12,0
9000000000004a64:	00150184 	move	$r4,$r12
9000000000004a68:	57f423ff 	bl	-3040(0xffff420) # 9000000000003e88 <printhex>
9000000000004a6c:	02802804 	addi.w	$r4,$r0,10(0xa)
9000000000004a70:	57f5dfff 	bl	-2596(0xffff5dc) # 900000000000404c <kputchar>
      printhex(con->sf_s1);kputchar('\n');
9000000000004a74:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004a78:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000004a7c:	00150184 	move	$r4,$r12
9000000000004a80:	57f40bff 	bl	-3064(0xffff408) # 9000000000003e88 <printhex>
9000000000004a84:	02802804 	addi.w	$r4,$r0,10(0xa)
9000000000004a88:	57f5c7ff 	bl	-2620(0xffff5c4) # 900000000000404c <kputchar>
      printhex(con->sf_s2);kputchar('\n');
9000000000004a8c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004a90:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000004a94:	00150184 	move	$r4,$r12
9000000000004a98:	57f3f3ff 	bl	-3088(0xffff3f0) # 9000000000003e88 <printhex>
9000000000004a9c:	02802804 	addi.w	$r4,$r0,10(0xa)
9000000000004aa0:	57f5afff 	bl	-2644(0xffff5ac) # 900000000000404c <kputchar>
      printhex(con->sf_s3);kputchar('\n');
9000000000004aa4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004aa8:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000004aac:	00150184 	move	$r4,$r12
9000000000004ab0:	57f3dbff 	bl	-3112(0xffff3d8) # 9000000000003e88 <printhex>
9000000000004ab4:	02802804 	addi.w	$r4,$r0,10(0xa)
9000000000004ab8:	57f597ff 	bl	-2668(0xffff594) # 900000000000404c <kputchar>
      printhex(con->sf_s4);kputchar('\n');
9000000000004abc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004ac0:	28c0818c 	ld.d	$r12,$r12,32(0x20)
9000000000004ac4:	00150184 	move	$r4,$r12
9000000000004ac8:	57f3c3ff 	bl	-3136(0xffff3c0) # 9000000000003e88 <printhex>
9000000000004acc:	02802804 	addi.w	$r4,$r0,10(0xa)
9000000000004ad0:	57f57fff 	bl	-2692(0xffff57c) # 900000000000404c <kputchar>
      printhex(con->sf_s5);kputchar('\n');
9000000000004ad4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004ad8:	28c0a18c 	ld.d	$r12,$r12,40(0x28)
9000000000004adc:	00150184 	move	$r4,$r12
9000000000004ae0:	57f3abff 	bl	-3160(0xffff3a8) # 9000000000003e88 <printhex>
9000000000004ae4:	02802804 	addi.w	$r4,$r0,10(0xa)
9000000000004ae8:	57f567ff 	bl	-2716(0xffff564) # 900000000000404c <kputchar>
      printhex(con->sf_s6);kputchar('\n');
9000000000004aec:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004af0:	28c0c18c 	ld.d	$r12,$r12,48(0x30)
9000000000004af4:	00150184 	move	$r4,$r12
9000000000004af8:	57f393ff 	bl	-3184(0xffff390) # 9000000000003e88 <printhex>
9000000000004afc:	02802804 	addi.w	$r4,$r0,10(0xa)
9000000000004b00:	57f54fff 	bl	-2740(0xffff54c) # 900000000000404c <kputchar>
      printhex(con->sf_s7);kputchar('\n');
9000000000004b04:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004b08:	28c0e18c 	ld.d	$r12,$r12,56(0x38)
9000000000004b0c:	00150184 	move	$r4,$r12
9000000000004b10:	57f37bff 	bl	-3208(0xffff378) # 9000000000003e88 <printhex>
9000000000004b14:	02802804 	addi.w	$r4,$r0,10(0xa)
9000000000004b18:	57f537ff 	bl	-2764(0xffff534) # 900000000000404c <kputchar>
      printhex(con->sf_s8);kputchar('\n');
9000000000004b1c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004b20:	28c1018c 	ld.d	$r12,$r12,64(0x40)
9000000000004b24:	00150184 	move	$r4,$r12
9000000000004b28:	57f363ff 	bl	-3232(0xffff360) # 9000000000003e88 <printhex>
9000000000004b2c:	02802804 	addi.w	$r4,$r0,10(0xa)
9000000000004b30:	57f51fff 	bl	-2788(0xffff51c) # 900000000000404c <kputchar>
      printhex(con->sf_tp);kputchar('\n');
9000000000004b34:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004b38:	28c1218c 	ld.d	$r12,$r12,72(0x48)
9000000000004b3c:	00150184 	move	$r4,$r12
9000000000004b40:	57f34bff 	bl	-3256(0xffff348) # 9000000000003e88 <printhex>
9000000000004b44:	02802804 	addi.w	$r4,$r0,10(0xa)
9000000000004b48:	57f507ff 	bl	-2812(0xffff504) # 900000000000404c <kputchar>
      printhex(con->sf_ra);kputchar('\n');
9000000000004b4c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004b50:	28c1418c 	ld.d	$r12,$r12,80(0x50)
9000000000004b54:	00150184 	move	$r4,$r12
9000000000004b58:	57f333ff 	bl	-3280(0xffff330) # 9000000000003e88 <printhex>
9000000000004b5c:	02802804 	addi.w	$r4,$r0,10(0xa)
9000000000004b60:	57f4efff 	bl	-2836(0xffff4ec) # 900000000000404c <kputchar>
      printhex(con->sf_fp);kputchar('\n');
9000000000004b64:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004b68:	28c1618c 	ld.d	$r12,$r12,88(0x58)
9000000000004b6c:	00150184 	move	$r4,$r12
9000000000004b70:	57f31bff 	bl	-3304(0xffff318) # 9000000000003e88 <printhex>
9000000000004b74:	02802804 	addi.w	$r4,$r0,10(0xa)
9000000000004b78:	57f4d7ff 	bl	-2860(0xffff4d4) # 900000000000404c <kputchar>
      printhex(con->sf_sp);kputchar('\n');
9000000000004b7c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004b80:	28c1818c 	ld.d	$r12,$r12,96(0x60)
9000000000004b84:	00150184 	move	$r4,$r12
9000000000004b88:	57f303ff 	bl	-3328(0xffff300) # 9000000000003e88 <printhex>
9000000000004b8c:	02802804 	addi.w	$r4,$r0,10(0xa)
9000000000004b90:	57f4bfff 	bl	-2884(0xffff4bc) # 900000000000404c <kputchar>
}
9000000000004b94:	03400000 	andi	$r0,$r0,0x0
9000000000004b98:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000004b9c:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000004ba0:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000004ba4:	4c000020 	jirl	$r0,$r1,0

9000000000004ba8 <trap_in_kernel>:

bool
trap_in_kernel(struct trapframe *tf) {
9000000000004ba8:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000004bac:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000004bb0:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000004bb4:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
  return !(tf->tf_prmd & PPLV);
9000000000004bb8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004bbc:	2880318c 	ld.w	$r12,$r12,12(0xc)
9000000000004bc0:	03400d8c 	andi	$r12,$r12,0x3
9000000000004bc4:	0240058c 	sltui	$r12,$r12,1(0x1)
9000000000004bc8:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
}
9000000000004bcc:	00150184 	move	$r4,$r12
9000000000004bd0:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000004bd4:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000004bd8:	4c000020 	jirl	$r0,$r1,0

9000000000004bdc <print_regs>:

void print_regs(struct pushregs *regs)
{
9000000000004bdc:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000004be0:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000004be4:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000004be8:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000004bec:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
  int i;
  for (i = 0; i < 30; i++) {
9000000000004bf0:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
9000000000004bf4:	50005c00 	b	92(0x5c) # 9000000000004c50 <print_regs+0x74>
    kprintf(" $");
9000000000004bf8:	1c000344 	pcaddu12i	$r4,26(0x1a)
9000000000004bfc:	02c0a084 	addi.d	$r4,$r4,40(0x28)
9000000000004c00:	57f21fff 	bl	-3556(0xffff21c) # 9000000000003e1c <kprintf>
    printbase10(i+2);
9000000000004c04:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000004c08:	0280098c 	addi.w	$r12,$r12,2(0x2)
9000000000004c0c:	00150184 	move	$r4,$r12
9000000000004c10:	57f30fff 	bl	-3316(0xffff30c) # 9000000000003f1c <printbase10>
    kprintf("\t: ");
9000000000004c14:	1c000344 	pcaddu12i	$r4,26(0x1a)
9000000000004c18:	02c05084 	addi.d	$r4,$r4,20(0x14)
9000000000004c1c:	57f203ff 	bl	-3584(0xffff200) # 9000000000003e1c <kprintf>
    printhex(regs->reg_r[i]);
9000000000004c20:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000004c24:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000004c28:	00410d8c 	slli.d	$r12,$r12,0x3
9000000000004c2c:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000004c30:	28c0018c 	ld.d	$r12,$r12,0
9000000000004c34:	00150184 	move	$r4,$r12
9000000000004c38:	57f253ff 	bl	-3504(0xffff250) # 9000000000003e88 <printhex>
    kputchar('\n');
9000000000004c3c:	02802804 	addi.w	$r4,$r0,10(0xa)
9000000000004c40:	57f40fff 	bl	-3060(0xffff40c) # 900000000000404c <kputchar>
  for (i = 0; i < 30; i++) {
9000000000004c44:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000004c48:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000004c4c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000004c50:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000004c54:	0015018d 	move	$r13,$r12
9000000000004c58:	0280740c 	addi.w	$r12,$r0,29(0x1d)
9000000000004c5c:	67ff9d8d 	bge	$r12,$r13,-100(0x3ff9c) # 9000000000004bf8 <print_regs+0x1c>
  }
}
9000000000004c60:	03400000 	andi	$r0,$r0,0x0
9000000000004c64:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000004c68:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000004c6c:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000004c70:	4c000020 	jirl	$r0,$r1,0

9000000000004c74 <print_trapframe>:

void
print_trapframe(struct trapframe *tf) {
9000000000004c74:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000004c78:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000004c7c:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000004c80:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000004c84:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    PRINT_HEX("trapframe at ", tf);
9000000000004c88:	1c000344 	pcaddu12i	$r4,26(0x1a)
9000000000004c8c:	02fea084 	addi.d	$r4,$r4,-88(0xfa8)
9000000000004c90:	57f18fff 	bl	-3700(0xffff18c) # 9000000000003e1c <kprintf>
9000000000004c94:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004c98:	00150184 	move	$r4,$r12
9000000000004c9c:	57f1efff 	bl	-3604(0xffff1ec) # 9000000000003e88 <printhex>
9000000000004ca0:	1c000344 	pcaddu12i	$r4,26(0x1a)
9000000000004ca4:	02fe8084 	addi.d	$r4,$r4,-96(0xfa0)
9000000000004ca8:	57f177ff 	bl	-3724(0xffff174) # 9000000000003e1c <kprintf>
    print_regs(&tf->tf_regs);
9000000000004cac:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004cb0:	02c0618c 	addi.d	$r12,$r12,24(0x18)
9000000000004cb4:	00150184 	move	$r4,$r12
9000000000004cb8:	57ff27ff 	bl	-220(0xfffff24) # 9000000000004bdc <print_regs>
    PRINT_HEX(" $ra\t: ", tf->tf_ra);
9000000000004cbc:	1c000344 	pcaddu12i	$r4,26(0x1a)
9000000000004cc0:	02fe3084 	addi.d	$r4,$r4,-116(0xf8c)
9000000000004cc4:	57f15bff 	bl	-3752(0xffff158) # 9000000000003e1c <kprintf>
9000000000004cc8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004ccc:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000004cd0:	00150184 	move	$r4,$r12
9000000000004cd4:	57f1b7ff 	bl	-3660(0xffff1b4) # 9000000000003e88 <printhex>
9000000000004cd8:	1c000344 	pcaddu12i	$r4,26(0x1a)
9000000000004cdc:	02fda084 	addi.d	$r4,$r4,-152(0xf68)
9000000000004ce0:	57f13fff 	bl	-3780(0xffff13c) # 9000000000003e1c <kprintf>
    PRINT_HEX(" BadVA\t: ", tf->tf_badv);
9000000000004ce4:	1c000344 	pcaddu12i	$r4,26(0x1a)
9000000000004ce8:	02fdb084 	addi.d	$r4,$r4,-148(0xf6c)
9000000000004cec:	57f133ff 	bl	-3792(0xffff130) # 9000000000003e1c <kprintf>
9000000000004cf0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004cf4:	28c0018c 	ld.d	$r12,$r12,0
9000000000004cf8:	00150184 	move	$r4,$r12
9000000000004cfc:	57f18fff 	bl	-3700(0xffff18c) # 9000000000003e88 <printhex>
9000000000004d00:	1c000344 	pcaddu12i	$r4,26(0x1a)
9000000000004d04:	02fd0084 	addi.d	$r4,$r4,-192(0xf40)
9000000000004d08:	57f117ff 	bl	-3820(0xffff114) # 9000000000003e1c <kprintf>
    PRINT_HEX(" Estat\t: ", tf->tf_estat);
9000000000004d0c:	1c000344 	pcaddu12i	$r4,26(0x1a)
9000000000004d10:	02fd5084 	addi.d	$r4,$r4,-172(0xf54)
9000000000004d14:	57f10bff 	bl	-3832(0xffff108) # 9000000000003e1c <kprintf>
9000000000004d18:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004d1c:	2880218c 	ld.w	$r12,$r12,8(0x8)
9000000000004d20:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
9000000000004d24:	00150184 	move	$r4,$r12
9000000000004d28:	57f163ff 	bl	-3744(0xffff160) # 9000000000003e88 <printhex>
9000000000004d2c:	1c000344 	pcaddu12i	$r4,26(0x1a)
9000000000004d30:	02fc5084 	addi.d	$r4,$r4,-236(0xf14)
9000000000004d34:	57f0ebff 	bl	-3864(0xffff0e8) # 9000000000003e1c <kprintf>
    PRINT_HEX(" PRMD\t: ", tf->tf_prmd);
9000000000004d38:	1c000344 	pcaddu12i	$r4,26(0x1a)
9000000000004d3c:	02fce084 	addi.d	$r4,$r4,-200(0xf38)
9000000000004d40:	57f0dfff 	bl	-3876(0xffff0dc) # 9000000000003e1c <kprintf>
9000000000004d44:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004d48:	2880318c 	ld.w	$r12,$r12,12(0xc)
9000000000004d4c:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
9000000000004d50:	00150184 	move	$r4,$r12
9000000000004d54:	57f137ff 	bl	-3788(0xffff134) # 9000000000003e88 <printhex>
9000000000004d58:	1c000344 	pcaddu12i	$r4,26(0x1a)
9000000000004d5c:	02fba084 	addi.d	$r4,$r4,-280(0xee8)
9000000000004d60:	57f0bfff 	bl	-3908(0xffff0bc) # 9000000000003e1c <kprintf>
    PRINT_HEX(" EPC\t: ", tf->tf_era);
9000000000004d64:	1c000344 	pcaddu12i	$r4,26(0x1a)
9000000000004d68:	02fc7084 	addi.d	$r4,$r4,-228(0xf1c)
9000000000004d6c:	57f0b3ff 	bl	-3920(0xffff0b0) # 9000000000003e1c <kprintf>
9000000000004d70:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000004d74:	28c4218c 	ld.d	$r12,$r12,264(0x108)
9000000000004d78:	00150184 	move	$r4,$r12
9000000000004d7c:	57f10fff 	bl	-3828(0xffff10c) # 9000000000003e88 <printhex>
9000000000004d80:	1c000344 	pcaddu12i	$r4,26(0x1a)
9000000000004d84:	02fb0084 	addi.d	$r4,$r4,-320(0xec0)
9000000000004d88:	57f097ff 	bl	-3948(0xffff094) # 9000000000003e1c <kprintf>
    if (!trap_in_kernel(tf)) {
9000000000004d8c:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000004d90:	57fe1bff 	bl	-488(0xffffe18) # 9000000000004ba8 <trap_in_kernel>
9000000000004d94:	0015008c 	move	$r12,$r4
9000000000004d98:	44001580 	bnez	$r12,20(0x14) # 9000000000004dac <print_trapframe+0x138>
      kprintf("Trap in usermode: ");
9000000000004d9c:	1c000344 	pcaddu12i	$r4,26(0x1a)
9000000000004da0:	02fbb084 	addi.d	$r4,$r4,-276(0xeec)
9000000000004da4:	57f07bff 	bl	-3976(0xffff078) # 9000000000003e1c <kprintf>
9000000000004da8:	50001000 	b	16(0x10) # 9000000000004db8 <print_trapframe+0x144>
    }else{
      kprintf("Trap in kernel: ");
9000000000004dac:	1c000344 	pcaddu12i	$r4,26(0x1a)
9000000000004db0:	02fbd084 	addi.d	$r4,$r4,-268(0xef4)
9000000000004db4:	57f06bff 	bl	-3992(0xffff068) # 9000000000003e1c <kprintf>
    }
    //kprintf(trapname(GET_CAUSE_EXCODE(tf->tf_estat)));
    kputchar('\n');
9000000000004db8:	02802804 	addi.w	$r4,$r0,10(0xa)
9000000000004dbc:	57f293ff 	bl	-3440(0xffff290) # 900000000000404c <kputchar>
}
9000000000004dc0:	03400000 	andi	$r0,$r0,0x0
9000000000004dc4:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000004dc8:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000004dcc:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000004dd0:	4c000020 	jirl	$r0,$r1,0

9000000000004dd4 <interrupt_handler>:

static void interrupt_handler(struct trapframe *tf)
{
9000000000004dd4:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000004dd8:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000004ddc:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000004de0:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000004de4:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
  extern clock_int_handler(void*);
  extern serial_int_handler(void*);
  int i;
  for(i=0;i<13;i++){
9000000000004de8:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
9000000000004dec:	50009000 	b	144(0x90) # 9000000000004e7c <interrupt_handler+0xa8>
    if(tf->tf_estat & (1<<i)){
9000000000004df0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000004df4:	2880218d 	ld.w	$r13,$r12,8(0x8)
9000000000004df8:	0280040e 	addi.w	$r14,$r0,1(0x1)
9000000000004dfc:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000004e00:	001731cc 	sll.w	$r12,$r14,$r12
9000000000004e04:	0014b1ac 	and	$r12,$r13,$r12
9000000000004e08:	40006580 	beqz	$r12,100(0x64) # 9000000000004e6c <interrupt_handler+0x98>
      switch(i){
9000000000004e0c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000004e10:	0015018d 	move	$r13,$r12
9000000000004e14:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000004e18:	580029ac 	beq	$r13,$r12,40(0x28) # 9000000000004e40 <interrupt_handler+0x6c>
9000000000004e1c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000004e20:	0015018d 	move	$r13,$r12
9000000000004e24:	02802c0c 	addi.w	$r12,$r0,11(0xb)
9000000000004e28:	5c0025ac 	bne	$r13,$r12,36(0x24) # 9000000000004e4c <interrupt_handler+0x78>
        case TIMER0_IRQ:
          serial_int_handler(NULL);
9000000000004e2c:	00150004 	move	$r4,$r0
9000000000004e30:	57b8bfff 	bl	-18244(0xfffb8bc) # 90000000000006ec <serial_int_handler>
          clock_int_handler(NULL);
9000000000004e34:	00150004 	move	$r4,$r0
9000000000004e38:	57b467ff 	bl	-19356(0xfffb464) # 900000000000029c <clock_int_handler>
          break;
9000000000004e3c:	50003400 	b	52(0x34) # 9000000000004e70 <interrupt_handler+0x9c>
        case COM1_IRQ:
          serial_int_handler(NULL);
9000000000004e40:	00150004 	move	$r4,$r0
9000000000004e44:	57b8abff 	bl	-18264(0xfffb8a8) # 90000000000006ec <serial_int_handler>
          break;
9000000000004e48:	50002800 	b	40(0x28) # 9000000000004e70 <interrupt_handler+0x9c>
        default:
          print_trapframe(tf);
9000000000004e4c:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000004e50:	57fe27ff 	bl	-476(0xffffe24) # 9000000000004c74 <print_trapframe>
          panic("Unknown interrupt!");
9000000000004e54:	1c000346 	pcaddu12i	$r6,26(0x1a)
9000000000004e58:	02f990c6 	addi.d	$r6,$r6,-412(0xe64)
9000000000004e5c:	02818405 	addi.w	$r5,$r0,97(0x61)
9000000000004e60:	1c000344 	pcaddu12i	$r4,26(0x1a)
9000000000004e64:	02f9c084 	addi.d	$r4,$r4,-400(0xe70)
9000000000004e68:	547e1800 	bl	32280(0x7e18) # 900000000000cc80 <__panic>
      }
    }
9000000000004e6c:	03400000 	andi	$r0,$r0,0x0
  for(i=0;i<13;i++){
9000000000004e70:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000004e74:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000004e78:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000004e7c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000004e80:	0015018d 	move	$r13,$r12
9000000000004e84:	0280300c 	addi.w	$r12,$r0,12(0xc)
9000000000004e88:	67ff698d 	bge	$r12,$r13,-152(0x3ff68) # 9000000000004df0 <interrupt_handler+0x1c>
  }
}
9000000000004e8c:	03400000 	andi	$r0,$r0,0x0
9000000000004e90:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000004e94:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000004e98:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000004e9c:	4c000020 	jirl	$r0,$r1,0

9000000000004ea0 <get_error_code>:

extern pde_t *current_pgdir;

static inline int get_error_code(int write, pte_t *pte)
{
9000000000004ea0:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000004ea4:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000004ea8:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000004eac:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000004eb0:	0015008c 	move	$r12,$r4
9000000000004eb4:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
9000000000004eb8:	0040818c 	slli.w	$r12,$r12,0x0
9000000000004ebc:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
  int r = 0;
9000000000004ec0:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
  if(pte!=NULL && ptep_present(pte))
9000000000004ec4:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000004ec8:	40002180 	beqz	$r12,32(0x20) # 9000000000004ee8 <get_error_code+0x48>
9000000000004ecc:	28ff42c4 	ld.d	$r4,$r22,-48(0xfd0)
9000000000004ed0:	57fa8bff 	bl	-1400(0xffffa88) # 9000000000004958 <ptep_present>
9000000000004ed4:	0015008c 	move	$r12,$r4
9000000000004ed8:	40001180 	beqz	$r12,16(0x10) # 9000000000004ee8 <get_error_code+0x48>
    r |= 0x01;
9000000000004edc:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000004ee0:	0380058c 	ori	$r12,$r12,0x1
9000000000004ee4:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
  if(write)
9000000000004ee8:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000004eec:	40001180 	beqz	$r12,16(0x10) # 9000000000004efc <get_error_code+0x5c>
    r |= 0x02;
9000000000004ef0:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000004ef4:	0380098c 	ori	$r12,$r12,0x2
9000000000004ef8:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
  return r;
9000000000004efc:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
9000000000004f00:	00150184 	move	$r4,$r12
9000000000004f04:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000004f08:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000004f0c:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000004f10:	4c000020 	jirl	$r0,$r1,0

9000000000004f14 <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf, uint64_t addr, uint32_t error_code) {
9000000000004f14:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000004f18:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000004f1c:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000004f20:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000004f24:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000004f28:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
9000000000004f2c:	001500cc 	move	$r12,$r6
9000000000004f30:	0040818c 	slli.w	$r12,$r12,0x0
9000000000004f34:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
  extern struct mm_struct *check_mm_struct;
  if(check_mm_struct !=NULL) { //used for test check_swap
    //print_pgfault(tf);
  }
  struct mm_struct *mm;
  if (check_mm_struct != NULL) {
9000000000004f38:	1c0043ac 	pcaddu12i	$r12,541(0x21d)
9000000000004f3c:	28e3218c 	ld.d	$r12,$r12,-1848(0x8c8)
9000000000004f40:	28c0018c 	ld.d	$r12,$r12,0
9000000000004f44:	40004d80 	beqz	$r12,76(0x4c) # 9000000000004f90 <pgfault_handler+0x7c>
    assert(current == idleproc);
9000000000004f48:	1c0043ac 	pcaddu12i	$r12,541(0x21d)
9000000000004f4c:	28e0e18c 	ld.d	$r12,$r12,-1992(0x838)
9000000000004f50:	28c0018d 	ld.d	$r13,$r12,0
9000000000004f54:	1c00438c 	pcaddu12i	$r12,540(0x21c)
9000000000004f58:	28de718c 	ld.d	$r12,$r12,1948(0x79c)
9000000000004f5c:	28c0018c 	ld.d	$r12,$r12,0
9000000000004f60:	58001dac 	beq	$r13,$r12,28(0x1c) # 9000000000004f7c <pgfault_handler+0x68>
9000000000004f64:	1c000346 	pcaddu12i	$r6,26(0x1a)
9000000000004f68:	02f610c6 	addi.d	$r6,$r6,-636(0xd84)
9000000000004f6c:	0281ec05 	addi.w	$r5,$r0,123(0x7b)
9000000000004f70:	1c000344 	pcaddu12i	$r4,26(0x1a)
9000000000004f74:	02f58084 	addi.d	$r4,$r4,-672(0xd60)
9000000000004f78:	547d0800 	bl	32008(0x7d08) # 900000000000cc80 <__panic>
    mm = check_mm_struct;
9000000000004f7c:	1c0043ac 	pcaddu12i	$r12,541(0x21d)
9000000000004f80:	28e2118c 	ld.d	$r12,$r12,-1916(0x884)
9000000000004f84:	28c0018c 	ld.d	$r12,$r12,0
9000000000004f88:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000004f8c:	50004800 	b	72(0x48) # 9000000000004fd4 <pgfault_handler+0xc0>
  }
  else {
    if (current == NULL) {
9000000000004f90:	1c00438c 	pcaddu12i	$r12,540(0x21c)
9000000000004f94:	28dfc18c 	ld.d	$r12,$r12,2032(0x7f0)
9000000000004f98:	28c0018c 	ld.d	$r12,$r12,0
9000000000004f9c:	44002580 	bnez	$r12,36(0x24) # 9000000000004fc0 <pgfault_handler+0xac>
      print_trapframe(tf);
9000000000004fa0:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000004fa4:	57fcd3ff 	bl	-816(0xffffcd0) # 9000000000004c74 <print_trapframe>
      //print_pgfault(tf);
      panic("unhandled page fault.\n");
9000000000004fa8:	1c000346 	pcaddu12i	$r6,26(0x1a)
9000000000004fac:	02f5a0c6 	addi.d	$r6,$r6,-664(0xd68)
9000000000004fb0:	02820805 	addi.w	$r5,$r0,130(0x82)
9000000000004fb4:	1c000344 	pcaddu12i	$r4,26(0x1a)
9000000000004fb8:	02f47084 	addi.d	$r4,$r4,-740(0xd1c)
9000000000004fbc:	547cc400 	bl	31940(0x7cc4) # 900000000000cc80 <__panic>
    }
    mm = current->mm;
9000000000004fc0:	1c00438c 	pcaddu12i	$r12,540(0x21c)
9000000000004fc4:	28df018c 	ld.d	$r12,$r12,1984(0x7c0)
9000000000004fc8:	28c0018c 	ld.d	$r12,$r12,0
9000000000004fcc:	28c0a18c 	ld.d	$r12,$r12,40(0x28)
9000000000004fd0:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
  }
  return do_pgfault(mm, error_code, addr);
9000000000004fd4:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
9000000000004fd8:	28ff42c6 	ld.d	$r6,$r22,-48(0xfd0)
9000000000004fdc:	00150185 	move	$r5,$r12
9000000000004fe0:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000004fe4:	5472d400 	bl	29396(0x72d4) # 900000000000c2b8 <do_pgfault>
9000000000004fe8:	0015008c 	move	$r12,$r4
}
9000000000004fec:	00150184 	move	$r4,$r12
9000000000004ff0:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000000004ff4:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000000004ff8:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000004ffc:	4c000020 	jirl	$r0,$r1,0

9000000000005000 <handle_tlbmiss>:

/* use software emulated X86 pgfault */
static void handle_tlbmiss(struct trapframe* tf, int write)
{
9000000000005000:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000005004:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000005008:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000000500c:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000005010:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
9000000000005014:	001500ac 	move	$r12,$r5
9000000000005018:	0040818c 	slli.w	$r12,$r12,0x0
900000000000501c:	29bf12cc 	st.w	$r12,$r22,-60(0xfc4)

  static int entercnt = 0;
  entercnt ++;
9000000000005020:	1c0043ac 	pcaddu12i	$r12,541(0x21d)
9000000000005024:	02fde18c 	addi.d	$r12,$r12,-136(0xf78)
9000000000005028:	2880018c 	ld.w	$r12,$r12,0
900000000000502c:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000005030:	0015018d 	move	$r13,$r12
9000000000005034:	1c0043ac 	pcaddu12i	$r12,541(0x21d)
9000000000005038:	02fd918c 	addi.d	$r12,$r12,-156(0xf64)
900000000000503c:	2980018d 	st.w	$r13,$r12,0
  //kprintf("## enter handle_tlbmiss %d times badv=%x\n", entercnt, tf->tf_badv);
  int in_kernel = trap_in_kernel(tf);
9000000000005040:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000005044:	57fb67ff 	bl	-1180(0xffffb64) # 9000000000004ba8 <trap_in_kernel>
9000000000005048:	0015008c 	move	$r12,$r4
900000000000504c:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
  uint64_t badaddr = tf->tf_badv;
9000000000005050:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000005054:	28c0018c 	ld.d	$r12,$r12,0
9000000000005058:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
  int ret = 0;
900000000000505c:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
  pte_t *pte = get_pte(current_pgdir, tf->tf_badv, 0);
9000000000005060:	1c00438c 	pcaddu12i	$r12,540(0x21c)
9000000000005064:	28dde18c 	ld.d	$r12,$r12,1912(0x778)
9000000000005068:	28c0018d 	ld.d	$r13,$r12,0
900000000000506c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000005070:	28c0018c 	ld.d	$r12,$r12,0
9000000000005074:	00150006 	move	$r6,$r0
9000000000005078:	00150185 	move	$r5,$r12
900000000000507c:	001501a4 	move	$r4,$r13
9000000000005080:	5448f400 	bl	18676(0x48f4) # 9000000000009974 <get_pte>
9000000000005084:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
  //printhex(*pte);
  //kprintf("\n");
  if(pte==NULL || ptep_invalid(pte)){   //PTE miss, pgfault
9000000000005088:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000508c:	40001580 	beqz	$r12,20(0x14) # 90000000000050a0 <handle_tlbmiss+0xa0>
9000000000005090:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000005094:	57f897ff 	bl	-1900(0xffff894) # 9000000000004928 <ptep_invalid>
9000000000005098:	0015008c 	move	$r12,$r4
900000000000509c:	40003580 	beqz	$r12,52(0x34) # 90000000000050d0 <handle_tlbmiss+0xd0>
    //tlb will not be refill in do_pgfault,
    //so a vmm pgfault will trigger 2 exception
    //permission check in tlb miss
    //kprintf("pgfault\n");
    ret = pgfault_handler(tf, badaddr, get_error_code(write, pte));
90000000000050a0:	28bf12cc 	ld.w	$r12,$r22,-60(0xfc4)
90000000000050a4:	28ff62c5 	ld.d	$r5,$r22,-40(0xfd8)
90000000000050a8:	00150184 	move	$r4,$r12
90000000000050ac:	57fdf7ff 	bl	-524(0xffffdf4) # 9000000000004ea0 <get_error_code>
90000000000050b0:	0015008c 	move	$r12,$r4
90000000000050b4:	00150186 	move	$r6,$r12
90000000000050b8:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
90000000000050bc:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
90000000000050c0:	57fe57ff 	bl	-428(0xffffe54) # 9000000000004f14 <pgfault_handler>
90000000000050c4:	0015008c 	move	$r12,$r4
90000000000050c8:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
90000000000050cc:	50007c00 	b	124(0x7c) # 9000000000005148 <handle_tlbmiss+0x148>
  }else{ //tlb miss only, reload it
    /* refill two slot */
    /* check permission */
    if(in_kernel){
90000000000050d0:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
90000000000050d4:	40001580 	beqz	$r12,20(0x14) # 90000000000050e8 <handle_tlbmiss+0xe8>
      tlb_refill(badaddr, pte); 
90000000000050d8:	28ff62c5 	ld.d	$r5,$r22,-40(0xfd8)
90000000000050dc:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
90000000000050e0:	543bbc00 	bl	15292(0x3bbc) # 9000000000008c9c <tlb_refill>
      return;
90000000000050e4:	5000a400 	b	164(0xa4) # 9000000000005188 <handle_tlbmiss+0x188>
    }else{
      if (write != 2) {
90000000000050e8:	28bf12cc 	ld.w	$r12,$r22,-60(0xfc4)
90000000000050ec:	0015018d 	move	$r13,$r12
90000000000050f0:	0280080c 	addi.w	$r12,$r0,2(0x2)
90000000000050f4:	580045ac 	beq	$r13,$r12,68(0x44) # 9000000000005138 <handle_tlbmiss+0x138>
        if(!ptep_u_read(pte)){
90000000000050f8:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
90000000000050fc:	57f88fff 	bl	-1908(0xffff88c) # 9000000000004988 <ptep_u_read>
9000000000005100:	0015008c 	move	$r12,$r4
9000000000005104:	44001180 	bnez	$r12,16(0x10) # 9000000000005114 <handle_tlbmiss+0x114>
          ret = -1;
9000000000005108:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
900000000000510c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
          goto exit;
9000000000005110:	50003800 	b	56(0x38) # 9000000000005148 <handle_tlbmiss+0x148>
        }
        if(write && !ptep_u_write(pte)){
9000000000005114:	28bf12cc 	ld.w	$r12,$r22,-60(0xfc4)
9000000000005118:	40002180 	beqz	$r12,32(0x20) # 9000000000005138 <handle_tlbmiss+0x138>
900000000000511c:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000005120:	57f89bff 	bl	-1896(0xffff898) # 90000000000049b8 <ptep_u_write>
9000000000005124:	0015008c 	move	$r12,$r4
9000000000005128:	44001180 	bnez	$r12,16(0x10) # 9000000000005138 <handle_tlbmiss+0x138>
          ret = -2;
900000000000512c:	02bff80c 	addi.w	$r12,$r0,-2(0xffe)
9000000000005130:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
          goto exit;
9000000000005134:	50001400 	b	20(0x14) # 9000000000005148 <handle_tlbmiss+0x148>
        }
      }
      //kprintf("tlbrfill");
      tlb_refill(badaddr, pte);
9000000000005138:	28ff62c5 	ld.d	$r5,$r22,-40(0xfd8)
900000000000513c:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000005140:	543b5c00 	bl	15196(0x3b5c) # 9000000000008c9c <tlb_refill>
      return ;
9000000000005144:	50004400 	b	68(0x44) # 9000000000005188 <handle_tlbmiss+0x188>
    }
  }

exit:
  if(ret){
9000000000005148:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000514c:	40003980 	beqz	$r12,56(0x38) # 9000000000005184 <handle_tlbmiss+0x184>
    print_trapframe(tf);
9000000000005150:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000005154:	57fb23ff 	bl	-1248(0xffffb20) # 9000000000004c74 <print_trapframe>
    if(in_kernel){
9000000000005158:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000000515c:	40001d80 	beqz	$r12,28(0x1c) # 9000000000005178 <handle_tlbmiss+0x178>
      panic("unhandled pgfault");
9000000000005160:	1c000346 	pcaddu12i	$r6,26(0x1a)
9000000000005164:	02ef20c6 	addi.d	$r6,$r6,-1080(0xbc8)
9000000000005168:	0282dc05 	addi.w	$r5,$r0,183(0xb7)
900000000000516c:	1c000344 	pcaddu12i	$r4,26(0x1a)
9000000000005170:	02ed9084 	addi.d	$r4,$r4,-1180(0xb64)
9000000000005174:	547b0c00 	bl	31500(0x7b0c) # 900000000000cc80 <__panic>
    }else{
       do_exit(-E_KILLED); 
9000000000005178:	02bfdc04 	addi.w	$r4,$r0,-9(0xff7)
900000000000517c:	54ac1c00 	bl	44060(0xac1c) # 900000000000fd98 <do_exit>
    }
  }
   return ;
9000000000005180:	03400000 	andi	$r0,$r0,0x0
9000000000005184:	03400000 	andi	$r0,$r0,0x0
}
9000000000005188:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000000518c:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000000005190:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000005194:	4c000020 	jirl	$r0,$r1,0

9000000000005198 <trap_dispatch>:

static void
trap_dispatch(struct trapframe *tf) {
9000000000005198:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000519c:	29c0a061 	st.d	$r1,$r3,40(0x28)
90000000000051a0:	29c08076 	st.d	$r22,$r3,32(0x20)
90000000000051a4:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000000051a8:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
  int code = GET_CAUSE_EXCODE(tf->tf_estat);
90000000000051ac:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000051b0:	2880218c 	ld.w	$r12,$r12,8(0x8)
90000000000051b4:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
90000000000051b8:	0045418c 	srli.d	$r12,$r12,0x10
90000000000051bc:	0040818c 	slli.w	$r12,$r12,0x0
90000000000051c0:	0340fd8c 	andi	$r12,$r12,0x3f
90000000000051c4:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
  switch(code){
90000000000051c8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000051cc:	0015018d 	move	$r13,$r12
90000000000051d0:	0280fc0c 	addi.w	$r12,$r0,63(0x3f)
90000000000051d4:	68013d8d 	bltu	$r12,$r13,316(0x13c) # 9000000000005310 <trap_dispatch+0x178>
90000000000051d8:	2abfb2cc 	ld.wu	$r12,$r22,-20(0xfec)
90000000000051dc:	00410d8d 	slli.d	$r13,$r12,0x3
90000000000051e0:	1c00034c 	pcaddu12i	$r12,26(0x1a)
90000000000051e4:	02efa18c 	addi.d	$r12,$r12,-1048(0xbe8)
90000000000051e8:	0010b1ac 	add.d	$r12,$r13,$r12
90000000000051ec:	28c0018c 	ld.d	$r12,$r12,0
90000000000051f0:	4c000180 	jirl	$r0,$r12,0
    case EX_IRQ:
      interrupt_handler(tf);
90000000000051f4:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
90000000000051f8:	57fbdfff 	bl	-1060(0xffffbdc) # 9000000000004dd4 <interrupt_handler>
      break;
90000000000051fc:	50014800 	b	328(0x148) # 9000000000005344 <trap_dispatch+0x1ac>
    case EX_TLBL:
      handle_tlbmiss(tf, 0);
9000000000005200:	00150005 	move	$r5,$r0
9000000000005204:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000005208:	57fdfbff 	bl	-520(0xffffdf8) # 9000000000005000 <handle_tlbmiss>
      break;
900000000000520c:	50013800 	b	312(0x138) # 9000000000005344 <trap_dispatch+0x1ac>
    case EX_TLBS:
      handle_tlbmiss(tf, 1);
9000000000005210:	02800405 	addi.w	$r5,$r0,1(0x1)
9000000000005214:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000005218:	57fdebff 	bl	-536(0xffffde8) # 9000000000005000 <handle_tlbmiss>
      break;
900000000000521c:	50012800 	b	296(0x128) # 9000000000005344 <trap_dispatch+0x1ac>
    case EX_TLBR:
      handle_tlbmiss(tf, 2);
9000000000005220:	02800805 	addi.w	$r5,$r0,2(0x2)
9000000000005224:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000005228:	57fddbff 	bl	-552(0xffffdd8) # 9000000000005000 <handle_tlbmiss>
      break;
900000000000522c:	50011800 	b	280(0x118) # 9000000000005344 <trap_dispatch+0x1ac>
    case EX_TLBI:
      handle_tlbmiss(tf, 0);
9000000000005230:	00150005 	move	$r5,$r0
9000000000005234:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000005238:	57fdcbff 	bl	-568(0xffffdc8) # 9000000000005000 <handle_tlbmiss>
      break;
900000000000523c:	50010800 	b	264(0x108) # 9000000000005344 <trap_dispatch+0x1ac>
    case EX_RI:
      if(trap_in_kernel(tf)) {
9000000000005240:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000005244:	57f967ff 	bl	-1692(0xffff964) # 9000000000004ba8 <trap_in_kernel>
9000000000005248:	0015008c 	move	$r12,$r4
900000000000524c:	40001d80 	beqz	$r12,28(0x1c) # 9000000000005268 <trap_dispatch+0xd0>
        panic("hey man! Do NOT use that insn!");
9000000000005250:	1c000346 	pcaddu12i	$r6,26(0x1a)
9000000000005254:	02ebc0c6 	addi.d	$r6,$r6,-1296(0xaf0)
9000000000005258:	02835005 	addi.w	$r5,$r0,212(0xd4)
900000000000525c:	1c000344 	pcaddu12i	$r4,26(0x1a)
9000000000005260:	02e9d084 	addi.d	$r4,$r4,-1420(0xa74)
9000000000005264:	547a1c00 	bl	31260(0x7a1c) # 900000000000cc80 <__panic>
      }
      do_exit(-E_KILLED); 
9000000000005268:	02bfdc04 	addi.w	$r4,$r0,-9(0xff7)
900000000000526c:	54ab2c00 	bl	43820(0xab2c) # 900000000000fd98 <do_exit>
      break;
9000000000005270:	5000d400 	b	212(0xd4) # 9000000000005344 <trap_dispatch+0x1ac>
    case EX_IPE:
      print_trapframe(tf);
9000000000005274:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000005278:	57f9ffff 	bl	-1540(0xffff9fc) # 9000000000004c74 <print_trapframe>
      if(trap_in_kernel(tf)) {
900000000000527c:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000005280:	57f92bff 	bl	-1752(0xffff928) # 9000000000004ba8 <trap_in_kernel>
9000000000005284:	0015008c 	move	$r12,$r4
9000000000005288:	40001d80 	beqz	$r12,28(0x1c) # 90000000000052a4 <trap_dispatch+0x10c>
        panic("CpU exception should not occur in kernel mode!");
900000000000528c:	1c000346 	pcaddu12i	$r6,26(0x1a)
9000000000005290:	02eb50c6 	addi.d	$r6,$r6,-1324(0xad4)
9000000000005294:	02836c05 	addi.w	$r5,$r0,219(0xdb)
9000000000005298:	1c000344 	pcaddu12i	$r4,26(0x1a)
900000000000529c:	02e8e084 	addi.d	$r4,$r4,-1480(0xa38)
90000000000052a0:	5479e000 	bl	31200(0x79e0) # 900000000000cc80 <__panic>
      }
      do_exit(-E_KILLED); 
90000000000052a4:	02bfdc04 	addi.w	$r4,$r0,-9(0xff7)
90000000000052a8:	54aaf000 	bl	43760(0xaaf0) # 900000000000fd98 <do_exit>
      break;
90000000000052ac:	50009800 	b	152(0x98) # 9000000000005344 <trap_dispatch+0x1ac>
    case EX_SYS:
      tf->tf_era += 4;
90000000000052b0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000052b4:	28c4218c 	ld.d	$r12,$r12,264(0x108)
90000000000052b8:	02c0118d 	addi.d	$r13,$r12,4(0x4)
90000000000052bc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000052c0:	29c4218d 	st.d	$r13,$r12,264(0x108)
      syscall();; 
90000000000052c4:	54dc9000 	bl	56464(0xdc90) # 9000000000012f54 <syscall>
      break;
90000000000052c8:	50007c00 	b	124(0x7c) # 9000000000005344 <trap_dispatch+0x1ac>
    case EX_ADE:
      if(trap_in_kernel(tf)){
90000000000052cc:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
90000000000052d0:	57f8dbff 	bl	-1832(0xffff8d8) # 9000000000004ba8 <trap_in_kernel>
90000000000052d4:	0015008c 	move	$r12,$r4
90000000000052d8:	40002580 	beqz	$r12,36(0x24) # 90000000000052fc <trap_dispatch+0x164>
        print_trapframe(tf);
90000000000052dc:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
90000000000052e0:	57f997ff 	bl	-1644(0xffff994) # 9000000000004c74 <print_trapframe>
        panic("Alignment Error");
90000000000052e4:	1c000346 	pcaddu12i	$r6,26(0x1a)
90000000000052e8:	02eab0c6 	addi.d	$r6,$r6,-1364(0xaac)
90000000000052ec:	02839805 	addi.w	$r5,$r0,230(0xe6)
90000000000052f0:	1c000344 	pcaddu12i	$r4,26(0x1a)
90000000000052f4:	02e78084 	addi.d	$r4,$r4,-1568(0x9e0)
90000000000052f8:	54798800 	bl	31112(0x7988) # 900000000000cc80 <__panic>
      }else{
        print_trapframe(tf);
90000000000052fc:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000005300:	57f977ff 	bl	-1676(0xffff974) # 9000000000004c74 <print_trapframe>
        do_exit(-E_KILLED);  
9000000000005304:	02bfdc04 	addi.w	$r4,$r0,-9(0xff7)
9000000000005308:	54aa9000 	bl	43664(0xaa90) # 900000000000fd98 <do_exit>
      }
      break;
900000000000530c:	50003800 	b	56(0x38) # 9000000000005344 <trap_dispatch+0x1ac>
    default:
      print_trapframe(tf);
9000000000005310:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000005314:	57f963ff 	bl	-1696(0xffff960) # 9000000000004c74 <print_trapframe>
      kprintf("Ecode = %x\n",code);
9000000000005318:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000531c:	00150185 	move	$r5,$r12
9000000000005320:	1c000344 	pcaddu12i	$r4,26(0x1a)
9000000000005324:	02ea0084 	addi.d	$r4,$r4,-1408(0xa80)
9000000000005328:	57eaf7ff 	bl	-5388(0xfffeaf4) # 9000000000003e1c <kprintf>
      panic("Unhandled Exception");
900000000000532c:	1c000346 	pcaddu12i	$r6,26(0x1a)
9000000000005330:	02ea10c6 	addi.d	$r6,$r6,-1404(0xa84)
9000000000005334:	0283bc05 	addi.w	$r5,$r0,239(0xef)
9000000000005338:	1c000344 	pcaddu12i	$r4,26(0x1a)
900000000000533c:	02e66084 	addi.d	$r4,$r4,-1640(0x998)
9000000000005340:	54794000 	bl	31040(0x7940) # 900000000000cc80 <__panic>
  }
}
9000000000005344:	03400000 	andi	$r0,$r0,0x0
9000000000005348:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000000534c:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000005350:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000005354:	4c000020 	jirl	$r0,$r1,0

9000000000005358 <loongarch_trap>:

void
loongarch_trap(struct trapframe *tf) {
9000000000005358:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000000535c:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000005360:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000005364:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000005368:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
  struct trapframe *tf2 = tf;
900000000000536c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000005370:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
  // dispatch based on what type of trap occurred
  // used for previous projects
  static int ti=0;
  if (current == NULL) {
9000000000005374:	1c00438c 	pcaddu12i	$r12,540(0x21c)
9000000000005378:	28d0318c 	ld.d	$r12,$r12,1036(0x40c)
900000000000537c:	28c0018c 	ld.d	$r12,$r12,0
9000000000005380:	44001180 	bnez	$r12,16(0x10) # 9000000000005390 <loongarch_trap+0x38>
    trap_dispatch(tf);
9000000000005384:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000005388:	57fe13ff 	bl	-496(0xffffe10) # 9000000000005198 <trap_dispatch>
      if (current->need_resched) {
         schedule();
      }
    }
  }
900000000000538c:	50009800 	b	152(0x98) # 9000000000005424 <loongarch_trap+0xcc>
    struct trapframe *otf = current->tf;
9000000000005390:	1c00438c 	pcaddu12i	$r12,540(0x21c)
9000000000005394:	28cfc18c 	ld.d	$r12,$r12,1008(0x3f0)
9000000000005398:	28c0018c 	ld.d	$r12,$r12,0
900000000000539c:	28c2618c 	ld.d	$r12,$r12,152(0x98)
90000000000053a0:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    current->tf = tf;
90000000000053a4:	1c00438c 	pcaddu12i	$r12,540(0x21c)
90000000000053a8:	28cf718c 	ld.d	$r12,$r12,988(0x3dc)
90000000000053ac:	28c0018c 	ld.d	$r12,$r12,0
90000000000053b0:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
90000000000053b4:	29c2618d 	st.d	$r13,$r12,152(0x98)
    bool in_kernel = trap_in_kernel(tf);
90000000000053b8:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
90000000000053bc:	57f7efff 	bl	-2068(0xffff7ec) # 9000000000004ba8 <trap_in_kernel>
90000000000053c0:	0015008c 	move	$r12,$r4
90000000000053c4:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
    trap_dispatch(tf);
90000000000053c8:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
90000000000053cc:	57fdcfff 	bl	-564(0xffffdcc) # 9000000000005198 <trap_dispatch>
    current->tf = otf;
90000000000053d0:	1c00438c 	pcaddu12i	$r12,540(0x21c)
90000000000053d4:	28cec18c 	ld.d	$r12,$r12,944(0x3b0)
90000000000053d8:	28c0018c 	ld.d	$r12,$r12,0
90000000000053dc:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
90000000000053e0:	29c2618d 	st.d	$r13,$r12,152(0x98)
    if (!in_kernel) {
90000000000053e4:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
90000000000053e8:	44003d80 	bnez	$r12,60(0x3c) # 9000000000005424 <loongarch_trap+0xcc>
      if (current->flags & PF_EXITING) {
90000000000053ec:	1c00438c 	pcaddu12i	$r12,540(0x21c)
90000000000053f0:	28ce518c 	ld.d	$r12,$r12,916(0x394)
90000000000053f4:	28c0018c 	ld.d	$r12,$r12,0
90000000000053f8:	2882a18c 	ld.w	$r12,$r12,168(0xa8)
90000000000053fc:	0340058c 	andi	$r12,$r12,0x1
9000000000005400:	40000d80 	beqz	$r12,12(0xc) # 900000000000540c <loongarch_trap+0xb4>
         do_exit(-E_KILLED); 
9000000000005404:	02bfdc04 	addi.w	$r4,$r0,-9(0xff7)
9000000000005408:	54a99000 	bl	43408(0xa990) # 900000000000fd98 <do_exit>
      if (current->need_resched) {
900000000000540c:	1c00438c 	pcaddu12i	$r12,540(0x21c)
9000000000005410:	28cdd18c 	ld.d	$r12,$r12,884(0x374)
9000000000005414:	28c0018c 	ld.d	$r12,$r12,0
9000000000005418:	2880618c 	ld.w	$r12,$r12,24(0x18)
900000000000541c:	40000980 	beqz	$r12,8(0x8) # 9000000000005424 <loongarch_trap+0xcc>
         schedule();
9000000000005420:	54ced000 	bl	52944(0xced0) # 90000000000122f0 <schedule>
9000000000005424:	03400000 	andi	$r0,$r0,0x0
9000000000005428:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000000542c:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000000005430:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000005434:	4c000020 	jirl	$r0,$r1,0

9000000000005438 <fence_i>:
static void fence_i(void *va_start, int size) {
9000000000005438:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000543c:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000005440:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000005444:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000005448:	001500ac 	move	$r12,$r5
900000000000544c:	0040818c 	slli.w	$r12,$r12,0x0
9000000000005450:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
9000000000005454:	38720000 	dbar	0x0
    void *va_end = va_start + size;
9000000000005458:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
900000000000545c:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000005460:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000005464:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
9000000000005468:	50002000 	b	32(0x20) # 9000000000005488 <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
900000000000546c:	06000189 	cacop	0x9,$r12,0
9000000000005470:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
9000000000005474:	06000188 	cacop	0x8,$r12,0
9000000000005478:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
900000000000547c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000005480:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000005484:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
9000000000005488:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000548c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000005490:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 900000000000546c <fence_i+0x34>
9000000000005494:	38728000 	ibar	0x0
}
9000000000005498:	03400000 	andi	$r0,$r0,0x0
900000000000549c:	28c0a076 	ld.d	$r22,$r3,40(0x28)
90000000000054a0:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000000054a4:	4c000020 	jirl	$r0,$r1,0

90000000000054a8 <__intr_save>:
{
90000000000054a8:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
90000000000054ac:	29c02076 	st.d	$r22,$r3,8(0x8)
90000000000054b0:	02c04076 	addi.d	$r22,$r3,16(0x10)
	return __csrxchg(0, LISA_CSR_CRMD_IE, LISA_CSR_CRMD);
90000000000054b4:	0015000d 	move	$r13,$r0
90000000000054b8:	0280100c 	addi.w	$r12,$r0,4(0x4)
90000000000054bc:	0400018d 	csrxchg	$r13,$r12,0x0
90000000000054c0:	001501ac 	move	$r12,$r13
90000000000054c4:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
}
90000000000054c8:	00150184 	move	$r4,$r12
90000000000054cc:	28c02076 	ld.d	$r22,$r3,8(0x8)
90000000000054d0:	02c04063 	addi.d	$r3,$r3,16(0x10)
90000000000054d4:	4c000020 	jirl	$r0,$r1,0

90000000000054d8 <__intr_restore>:
{
90000000000054d8:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000000054dc:	29c06076 	st.d	$r22,$r3,24(0x18)
90000000000054e0:	02c08076 	addi.d	$r22,$r3,32(0x20)
90000000000054e4:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
	__csrxchg(flags, LISA_CSR_CRMD_IE, LISA_CSR_CRMD);
90000000000054e8:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
90000000000054ec:	0280100d 	addi.w	$r13,$r0,4(0x4)
90000000000054f0:	040001ac 	csrxchg	$r12,$r13,0x0
}
90000000000054f4:	03400000 	andi	$r0,$r0,0x0
90000000000054f8:	28c06076 	ld.d	$r22,$r3,24(0x18)
90000000000054fc:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000005500:	4c000020 	jirl	$r0,$r1,0

9000000000005504 <set_page_ref>:
page_ref(struct Page *page) {
    return atomic_read(&(page->ref));
}

static inline void
set_page_ref(struct Page *page, int val) {
9000000000005504:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000005508:	29c0a076 	st.d	$r22,$r3,40(0x28)
900000000000550c:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000005510:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000005514:	001500ac 	move	$r12,$r5
9000000000005518:	0040818c 	slli.w	$r12,$r12,0x0
900000000000551c:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
    atomic_set(&(page->ref), val);
9000000000005520:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000005524:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000005528:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
900000000000552c:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
 *
 * Atomically sets the value of @v to @i.
 * */
static __always_inline void
atomic_set(atomic_t *v, int i) {
  v->counter = i;
9000000000005530:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000005534:	28bf92cd 	ld.w	$r13,$r22,-28(0xfe4)
9000000000005538:	2980018d 	st.w	$r13,$r12,0
}
900000000000553c:	03400000 	andi	$r0,$r0,0x0
9000000000005540:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000005544:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000005548:	4c000020 	jirl	$r0,$r1,0

900000000000554c <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
900000000000554c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000005550:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000005554:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000005558:	1c00438c 	pcaddu12i	$r12,540(0x21c)
900000000000555c:	28ca418c 	ld.d	$r12,$r12,656(0x290)
9000000000005560:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static __always_inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
9000000000005564:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000005568:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000556c:	29c0218d 	st.d	$r13,$r12,8(0x8)
9000000000005570:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000005574:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000005578:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000557c:	29c0018d 	st.d	$r13,$r12,0
    list_init(&free_list);
    nr_free = 0;
9000000000005580:	1c00438c 	pcaddu12i	$r12,540(0x21c)
9000000000005584:	28c9a18c 	ld.d	$r12,$r12,616(0x268)
9000000000005588:	29804180 	st.w	$r0,$r12,16(0x10)
}
900000000000558c:	03400000 	andi	$r0,$r0,0x0
9000000000005590:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000005594:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000005598:	4c000020 	jirl	$r0,$r1,0

900000000000559c <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
900000000000559c:	02fe0063 	addi.d	$r3,$r3,-128(0xf80)
90000000000055a0:	29c1e061 	st.d	$r1,$r3,120(0x78)
90000000000055a4:	29c1c076 	st.d	$r22,$r3,112(0x70)
90000000000055a8:	02c20076 	addi.d	$r22,$r3,128(0x80)
90000000000055ac:	29fe22c4 	st.d	$r4,$r22,-120(0xf88)
90000000000055b0:	29fe02c5 	st.d	$r5,$r22,-128(0xf80)
#ifdef LAB2_EX1
    assert(n > 0);
90000000000055b4:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
90000000000055b8:	44001d80 	bnez	$r12,28(0x1c) # 90000000000055d4 <default_init_memmap+0x38>
90000000000055bc:	1c000346 	pcaddu12i	$r6,26(0x1a)
90000000000055c0:	02e830c6 	addi.d	$r6,$r6,-1524(0xa0c)
90000000000055c4:	0281b805 	addi.w	$r5,$r0,110(0x6e)
90000000000055c8:	1c000344 	pcaddu12i	$r4,26(0x1a)
90000000000055cc:	02e86084 	addi.d	$r4,$r4,-1512(0xa18)
90000000000055d0:	5476b000 	bl	30384(0x76b0) # 900000000000cc80 <__panic>
    struct Page *p = base;
90000000000055d4:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
90000000000055d8:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    for (; p != base + n; p ++) {
90000000000055dc:	5000b000 	b	176(0xb0) # 900000000000568c <default_init_memmap+0xf0>
        assert(PageReserved(p));
90000000000055e0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000055e4:	02c0118c 	addi.d	$r12,$r12,4(0x4)
90000000000055e8:	29bf92c0 	st.w	$r0,$r22,-28(0xfe4)
90000000000055ec:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
 * @nr:     the bit to test
 * @addr:   the address to count from
 * */
static __always_inline bool
test_bit(int nr, volatile uint32_t *addr) {
  unsigned char c = 0;
90000000000055f0:	293f5ec0 	st.b	$r0,$r22,-41(0xfd7)
  int intr_flag;
  local_intr_save (intr_flag);
90000000000055f4:	57feb7ff 	bl	-332(0xffffeb4) # 90000000000054a8 <__intr_save>
90000000000055f8:	0015008c 	move	$r12,$r4
90000000000055fc:	29bf42cc 	st.w	$r12,$r22,-48(0xfd0)
  if (*addr & (1 << nr))
9000000000005600:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000005604:	2880018c 	ld.w	$r12,$r12,0
9000000000005608:	0015018d 	move	$r13,$r12
900000000000560c:	0280040e 	addi.w	$r14,$r0,1(0x1)
9000000000005610:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000005614:	001731cc 	sll.w	$r12,$r14,$r12
9000000000005618:	0014b1ac 	and	$r12,$r13,$r12
900000000000561c:	40000d80 	beqz	$r12,12(0xc) # 9000000000005628 <default_init_memmap+0x8c>
    c = 1;
9000000000005620:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000005624:	293f5ecc 	st.b	$r12,$r22,-41(0xfd7)
  local_intr_restore (intr_flag);
9000000000005628:	28bf42cc 	ld.w	$r12,$r22,-48(0xfd0)
900000000000562c:	00150184 	move	$r4,$r12
9000000000005630:	57feabff 	bl	-344(0xffffea8) # 90000000000054d8 <__intr_restore>
  return c != 0;
9000000000005634:	2a3f5ecc 	ld.bu	$r12,$r22,-41(0xfd7)
9000000000005638:	0012b00c 	sltu	$r12,$r0,$r12
900000000000563c:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
9000000000005640:	44001d80 	bnez	$r12,28(0x1c) # 900000000000565c <default_init_memmap+0xc0>
9000000000005644:	1c000346 	pcaddu12i	$r6,26(0x1a)
9000000000005648:	02e6d0c6 	addi.d	$r6,$r6,-1612(0x9b4)
900000000000564c:	0281c405 	addi.w	$r5,$r0,113(0x71)
9000000000005650:	1c000344 	pcaddu12i	$r4,26(0x1a)
9000000000005654:	02e64084 	addi.d	$r4,$r4,-1648(0x990)
9000000000005658:	54762800 	bl	30248(0x7628) # 900000000000cc80 <__panic>
        p->flags = p->property = 0;
900000000000565c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000005660:	29802180 	st.w	$r0,$r12,8(0x8)
9000000000005664:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000005668:	2880218d 	ld.w	$r13,$r12,8(0x8)
900000000000566c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000005670:	2980118d 	st.w	$r13,$r12,4(0x4)
        set_page_ref(p, 0);
9000000000005674:	00150005 	move	$r5,$r0
9000000000005678:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000567c:	57fe8bff 	bl	-376(0xffffe88) # 9000000000005504 <set_page_ref>
    for (; p != base + n; p ++) {
9000000000005680:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000005684:	02c0c18c 	addi.d	$r12,$r12,48(0x30)
9000000000005688:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000000568c:	28fe02cd 	ld.d	$r13,$r22,-128(0xf80)
9000000000005690:	0280c00c 	addi.w	$r12,$r0,48(0x30)
9000000000005694:	001db1ac 	mul.d	$r12,$r13,$r12
9000000000005698:	28fe22cd 	ld.d	$r13,$r22,-120(0xf88)
900000000000569c:	0010b1ac 	add.d	$r12,$r13,$r12
90000000000056a0:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
90000000000056a4:	5fff3dac 	bne	$r13,$r12,-196(0x3ff3c) # 90000000000055e0 <default_init_memmap+0x44>
    }
    base->property = n;
90000000000056a8:	28be02cd 	ld.w	$r13,$r22,-128(0xf80)
90000000000056ac:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
90000000000056b0:	2980218d 	st.w	$r13,$r12,8(0x8)
    SetPageProperty(base);
90000000000056b4:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
90000000000056b8:	02c0118c 	addi.d	$r12,$r12,4(0x4)
90000000000056bc:	0280040d 	addi.w	$r13,$r0,1(0x1)
90000000000056c0:	29be92cd 	st.w	$r13,$r22,-92(0xfa4)
90000000000056c4:	29fe62cc 	st.d	$r12,$r22,-104(0xf98)
  local_intr_save (intr_flag);
90000000000056c8:	57fde3ff 	bl	-544(0xffffde0) # 90000000000054a8 <__intr_save>
90000000000056cc:	0015008c 	move	$r12,$r4
90000000000056d0:	29be52cc 	st.w	$r12,$r22,-108(0xf94)
  *addr |= (1 << nr);
90000000000056d4:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
90000000000056d8:	2880018d 	ld.w	$r13,$r12,0
90000000000056dc:	0280040e 	addi.w	$r14,$r0,1(0x1)
90000000000056e0:	28be92cc 	ld.w	$r12,$r22,-92(0xfa4)
90000000000056e4:	001731cc 	sll.w	$r12,$r14,$r12
90000000000056e8:	001531ac 	or	$r12,$r13,$r12
90000000000056ec:	0015018d 	move	$r13,$r12
90000000000056f0:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
90000000000056f4:	2980018d 	st.w	$r13,$r12,0
  local_intr_restore (intr_flag);
90000000000056f8:	28be52cc 	ld.w	$r12,$r22,-108(0xf94)
90000000000056fc:	00150184 	move	$r4,$r12
9000000000005700:	57fddbff 	bl	-552(0xffffdd8) # 90000000000054d8 <__intr_restore>
    nr_free += n;
9000000000005704:	1c00438c 	pcaddu12i	$r12,540(0x21c)
9000000000005708:	28c3918c 	ld.d	$r12,$r12,228(0xe4)
900000000000570c:	2880418d 	ld.w	$r13,$r12,16(0x10)
9000000000005710:	28be02cc 	ld.w	$r12,$r22,-128(0xf80)
9000000000005714:	001031ac 	add.w	$r12,$r13,$r12
9000000000005718:	0015018d 	move	$r13,$r12
900000000000571c:	1c00438c 	pcaddu12i	$r12,540(0x21c)
9000000000005720:	28c3318c 	ld.d	$r12,$r12,204(0xcc)
9000000000005724:	2980418d 	st.w	$r13,$r12,16(0x10)
    list_add_before(&free_list, &(base->page_link));
9000000000005728:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
900000000000572c:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000005730:	1c00438d 	pcaddu12i	$r13,540(0x21c)
9000000000005734:	28c2e1ad 	ld.d	$r13,$r13,184(0xb8)
9000000000005738:	29ff22cd 	st.d	$r13,$r22,-56(0xfc8)
900000000000573c:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static __always_inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
9000000000005740:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000005744:	28c0018c 	ld.d	$r12,$r12,0
9000000000005748:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
900000000000574c:	29fee2cd 	st.d	$r13,$r22,-72(0xfb8)
9000000000005750:	29fec2cc 	st.d	$r12,$r22,-80(0xfb0)
9000000000005754:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000005758:	29fea2cc 	st.d	$r12,$r22,-88(0xfa8)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static __always_inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
900000000000575c:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
9000000000005760:	28fee2cd 	ld.d	$r13,$r22,-72(0xfb8)
9000000000005764:	29c0018d 	st.d	$r13,$r12,0
9000000000005768:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000000576c:	28c0018d 	ld.d	$r13,$r12,0
9000000000005770:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
9000000000005774:	29c0218d 	st.d	$r13,$r12,8(0x8)
    elm->next = next;
9000000000005778:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000577c:	28fea2cd 	ld.d	$r13,$r22,-88(0xfa8)
9000000000005780:	29c0218d 	st.d	$r13,$r12,8(0x8)
    elm->prev = prev;
9000000000005784:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000005788:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
900000000000578c:	29c0018d 	st.d	$r13,$r12,0
#endif
}
9000000000005790:	03400000 	andi	$r0,$r0,0x0
9000000000005794:	28c1e061 	ld.d	$r1,$r3,120(0x78)
9000000000005798:	28c1c076 	ld.d	$r22,$r3,112(0x70)
900000000000579c:	02c20063 	addi.d	$r3,$r3,128(0x80)
90000000000057a0:	4c000020 	jirl	$r0,$r1,0

90000000000057a4 <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
90000000000057a4:	02fd4063 	addi.d	$r3,$r3,-176(0xf50)
90000000000057a8:	29c2a061 	st.d	$r1,$r3,168(0xa8)
90000000000057ac:	29c28076 	st.d	$r22,$r3,160(0xa0)
90000000000057b0:	02c2c076 	addi.d	$r22,$r3,176(0xb0)
90000000000057b4:	29fd62c4 	st.d	$r4,$r22,-168(0xf58)
#ifdef LAB2_EX1
    assert(n > 0);
90000000000057b8:	28fd62cc 	ld.d	$r12,$r22,-168(0xf58)
90000000000057bc:	44001d80 	bnez	$r12,28(0x1c) # 90000000000057d8 <default_alloc_pages+0x34>
90000000000057c0:	1c000346 	pcaddu12i	$r6,26(0x1a)
90000000000057c4:	02e020c6 	addi.d	$r6,$r6,-2040(0x808)
90000000000057c8:	0281fc05 	addi.w	$r5,$r0,127(0x7f)
90000000000057cc:	1c000344 	pcaddu12i	$r4,26(0x1a)
90000000000057d0:	02e05084 	addi.d	$r4,$r4,-2028(0x814)
90000000000057d4:	5474ac00 	bl	29868(0x74ac) # 900000000000cc80 <__panic>
    if (n > nr_free) {
90000000000057d8:	1c00438c 	pcaddu12i	$r12,540(0x21c)
90000000000057dc:	28c0418c 	ld.d	$r12,$r12,16(0x10)
90000000000057e0:	2880418c 	ld.w	$r12,$r12,16(0x10)
90000000000057e4:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
90000000000057e8:	28fd62cd 	ld.d	$r13,$r22,-168(0xf58)
90000000000057ec:	6c000d8d 	bgeu	$r12,$r13,12(0xc) # 90000000000057f8 <default_alloc_pages+0x54>
        return NULL;
90000000000057f0:	0015000c 	move	$r12,$r0
90000000000057f4:	50022c00 	b	556(0x22c) # 9000000000005a20 <default_alloc_pages+0x27c>
    }
    struct Page *page = NULL;
90000000000057f8:	29ffa2c0 	st.d	$r0,$r22,-24(0xfe8)
    list_entry_t *le = &free_list;
90000000000057fc:	1c00438c 	pcaddu12i	$r12,540(0x21c)
9000000000005800:	28ffb18c 	ld.d	$r12,$r12,-20(0xfec)
9000000000005804:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    // TODO: optimize (next-fit)
    while ((le = list_next(le)) != &free_list) {
9000000000005808:	50003000 	b	48(0x30) # 9000000000005838 <default_alloc_pages+0x94>
        struct Page *p = le2page(le, page_link);
900000000000580c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000005810:	02ffc18c 	addi.d	$r12,$r12,-16(0xff0)
9000000000005814:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        if (p->property >= n) {
9000000000005818:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000581c:	2880218c 	ld.w	$r12,$r12,8(0x8)
9000000000005820:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
9000000000005824:	28fd62cd 	ld.d	$r13,$r22,-168(0xf58)
9000000000005828:	6800118d 	bltu	$r12,$r13,16(0x10) # 9000000000005838 <default_alloc_pages+0x94>
            page = p;
900000000000582c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000005830:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
            break;
9000000000005834:	50002800 	b	40(0x28) # 900000000000585c <default_alloc_pages+0xb8>
9000000000005838:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000583c:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
    return listelm->next;
9000000000005840:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000005844:	28c0218c 	ld.d	$r12,$r12,8(0x8)
    while ((le = list_next(le)) != &free_list) {
9000000000005848:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
900000000000584c:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000005850:	1c00438c 	pcaddu12i	$r12,540(0x21c)
9000000000005854:	28fe618c 	ld.d	$r12,$r12,-104(0xf98)
9000000000005858:	5fffb5ac 	bne	$r13,$r12,-76(0x3ffb4) # 900000000000580c <default_alloc_pages+0x68>
        }
    }
    if (page != NULL) {
900000000000585c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000005860:	4001bd80 	beqz	$r12,444(0x1bc) # 9000000000005a1c <default_alloc_pages+0x278>
        if (page->property > n) {
9000000000005864:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000005868:	2880218c 	ld.w	$r12,$r12,8(0x8)
900000000000586c:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
9000000000005870:	28fd62cd 	ld.d	$r13,$r22,-168(0xf58)
9000000000005874:	6c00f1ac 	bgeu	$r13,$r12,240(0xf0) # 9000000000005964 <default_alloc_pages+0x1c0>
            struct Page *p = page + n;
9000000000005878:	28fd62cd 	ld.d	$r13,$r22,-168(0xf58)
900000000000587c:	0280c00c 	addi.w	$r12,$r0,48(0x30)
9000000000005880:	001db1ac 	mul.d	$r12,$r13,$r12
9000000000005884:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000005888:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000588c:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
            p->property = page->property - n;
9000000000005890:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000005894:	2880218d 	ld.w	$r13,$r12,8(0x8)
9000000000005898:	28bd62cc 	ld.w	$r12,$r22,-168(0xf58)
900000000000589c:	001131ac 	sub.w	$r12,$r13,$r12
90000000000058a0:	0015018d 	move	$r13,$r12
90000000000058a4:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
90000000000058a8:	2980218d 	st.w	$r13,$r12,8(0x8)
            SetPageProperty(p);
90000000000058ac:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
90000000000058b0:	02c0118c 	addi.d	$r12,$r12,4(0x4)
90000000000058b4:	0280040d 	addi.w	$r13,$r0,1(0x1)
90000000000058b8:	29be72cd 	st.w	$r13,$r22,-100(0xf9c)
90000000000058bc:	29fe42cc 	st.d	$r12,$r22,-112(0xf90)
  local_intr_save (intr_flag);
90000000000058c0:	57fbebff 	bl	-1048(0xffffbe8) # 90000000000054a8 <__intr_save>
90000000000058c4:	0015008c 	move	$r12,$r4
90000000000058c8:	29be32cc 	st.w	$r12,$r22,-116(0xf8c)
  *addr |= (1 << nr);
90000000000058cc:	28fe42cc 	ld.d	$r12,$r22,-112(0xf90)
90000000000058d0:	2880018d 	ld.w	$r13,$r12,0
90000000000058d4:	0280040e 	addi.w	$r14,$r0,1(0x1)
90000000000058d8:	28be72cc 	ld.w	$r12,$r22,-100(0xf9c)
90000000000058dc:	001731cc 	sll.w	$r12,$r14,$r12
90000000000058e0:	001531ac 	or	$r12,$r13,$r12
90000000000058e4:	0015018d 	move	$r13,$r12
90000000000058e8:	28fe42cc 	ld.d	$r12,$r22,-112(0xf90)
90000000000058ec:	2980018d 	st.w	$r13,$r12,0
  local_intr_restore (intr_flag);
90000000000058f0:	28be32cc 	ld.w	$r12,$r22,-116(0xf8c)
90000000000058f4:	00150184 	move	$r4,$r12
90000000000058f8:	57fbe3ff 	bl	-1056(0xffffbe0) # 90000000000054d8 <__intr_restore>
            list_add_after(&(page->page_link), &(p->page_link));
90000000000058fc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000005900:	02c0418d 	addi.d	$r13,$r12,16(0x10)
9000000000005904:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000005908:	02c0418c 	addi.d	$r12,$r12,16(0x10)
900000000000590c:	29ff02cd 	st.d	$r13,$r22,-64(0xfc0)
9000000000005910:	29fee2cc 	st.d	$r12,$r22,-72(0xfb8)
    __list_add(elm, listelm, listelm->next);
9000000000005914:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000005918:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000000591c:	28fee2cd 	ld.d	$r13,$r22,-72(0xfb8)
9000000000005920:	29fec2cd 	st.d	$r13,$r22,-80(0xfb0)
9000000000005924:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
9000000000005928:	29fea2cd 	st.d	$r13,$r22,-88(0xfa8)
900000000000592c:	29fe82cc 	st.d	$r12,$r22,-96(0xfa0)
    prev->next = next->prev = elm;
9000000000005930:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
9000000000005934:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
9000000000005938:	29c0018d 	st.d	$r13,$r12,0
900000000000593c:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
9000000000005940:	28c0018d 	ld.d	$r13,$r12,0
9000000000005944:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
9000000000005948:	29c0218d 	st.d	$r13,$r12,8(0x8)
    elm->next = next;
900000000000594c:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
9000000000005950:	28fe82cd 	ld.d	$r13,$r22,-96(0xfa0)
9000000000005954:	29c0218d 	st.d	$r13,$r12,8(0x8)
    elm->prev = prev;
9000000000005958:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000000595c:	28fea2cd 	ld.d	$r13,$r22,-88(0xfa8)
9000000000005960:	29c0018d 	st.d	$r13,$r12,0
        }
        list_del(&(page->page_link));
9000000000005964:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000005968:	02c0418c 	addi.d	$r12,$r12,16(0x10)
900000000000596c:	29fdc2cc 	st.d	$r12,$r22,-144(0xf70)
    __list_del(listelm->prev, listelm->next);
9000000000005970:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
9000000000005974:	28c0018d 	ld.d	$r13,$r12,0
9000000000005978:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
900000000000597c:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000005980:	29fda2cd 	st.d	$r13,$r22,-152(0xf68)
9000000000005984:	29fd82cc 	st.d	$r12,$r22,-160(0xf60)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static __always_inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
9000000000005988:	28fda2cc 	ld.d	$r12,$r22,-152(0xf68)
900000000000598c:	28fd82cd 	ld.d	$r13,$r22,-160(0xf60)
9000000000005990:	29c0218d 	st.d	$r13,$r12,8(0x8)
    next->prev = prev;
9000000000005994:	28fd82cc 	ld.d	$r12,$r22,-160(0xf60)
9000000000005998:	28fda2cd 	ld.d	$r13,$r22,-152(0xf68)
900000000000599c:	29c0018d 	st.d	$r13,$r12,0
        nr_free -= n;
90000000000059a0:	1c00438c 	pcaddu12i	$r12,540(0x21c)
90000000000059a4:	28f9218c 	ld.d	$r12,$r12,-440(0xe48)
90000000000059a8:	2880418d 	ld.w	$r13,$r12,16(0x10)
90000000000059ac:	28bd62cc 	ld.w	$r12,$r22,-168(0xf58)
90000000000059b0:	001131ac 	sub.w	$r12,$r13,$r12
90000000000059b4:	0015018d 	move	$r13,$r12
90000000000059b8:	1c00438c 	pcaddu12i	$r12,540(0x21c)
90000000000059bc:	28f8c18c 	ld.d	$r12,$r12,-464(0xe30)
90000000000059c0:	2980418d 	st.w	$r13,$r12,16(0x10)
        ClearPageProperty(page);
90000000000059c4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000059c8:	02c0118c 	addi.d	$r12,$r12,4(0x4)
90000000000059cc:	0280040d 	addi.w	$r13,$r0,1(0x1)
90000000000059d0:	29be22cd 	st.w	$r13,$r22,-120(0xf88)
90000000000059d4:	29fe02cc 	st.d	$r12,$r22,-128(0xf80)
  local_intr_save (intr_flag);
90000000000059d8:	57fad3ff 	bl	-1328(0xffffad0) # 90000000000054a8 <__intr_save>
90000000000059dc:	0015008c 	move	$r12,$r4
90000000000059e0:	29bdf2cc 	st.w	$r12,$r22,-132(0xf7c)
  *addr &= ~(1 << nr);
90000000000059e4:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
90000000000059e8:	2880018c 	ld.w	$r12,$r12,0
90000000000059ec:	0015018d 	move	$r13,$r12
90000000000059f0:	0280040e 	addi.w	$r14,$r0,1(0x1)
90000000000059f4:	28be22cc 	ld.w	$r12,$r22,-120(0xf88)
90000000000059f8:	001731cc 	sll.w	$r12,$r14,$r12
90000000000059fc:	0014300c 	nor	$r12,$r0,$r12
9000000000005a00:	0014b1ac 	and	$r12,$r13,$r12
9000000000005a04:	0015018d 	move	$r13,$r12
9000000000005a08:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
9000000000005a0c:	2980018d 	st.w	$r13,$r12,0
  local_intr_restore (intr_flag);
9000000000005a10:	28bdf2cc 	ld.w	$r12,$r22,-132(0xf7c)
9000000000005a14:	00150184 	move	$r4,$r12
9000000000005a18:	57fac3ff 	bl	-1344(0xffffac0) # 90000000000054d8 <__intr_restore>
    }
    return page;
9000000000005a1c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
#endif
}
9000000000005a20:	00150184 	move	$r4,$r12
9000000000005a24:	28c2a061 	ld.d	$r1,$r3,168(0xa8)
9000000000005a28:	28c28076 	ld.d	$r22,$r3,160(0xa0)
9000000000005a2c:	02c2c063 	addi.d	$r3,$r3,176(0xb0)
9000000000005a30:	4c000020 	jirl	$r0,$r1,0

9000000000005a34 <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
9000000000005a34:	02fb8063 	addi.d	$r3,$r3,-288(0xee0)
9000000000005a38:	29c46061 	st.d	$r1,$r3,280(0x118)
9000000000005a3c:	29c44076 	st.d	$r22,$r3,272(0x110)
9000000000005a40:	02c48076 	addi.d	$r22,$r3,288(0x120)
9000000000005a44:	29fba2c4 	st.d	$r4,$r22,-280(0xee8)
9000000000005a48:	29fb82c5 	st.d	$r5,$r22,-288(0xee0)
#ifdef LAB2_EX1
    assert(n > 0);
9000000000005a4c:	28fb82cc 	ld.d	$r12,$r22,-288(0xee0)
9000000000005a50:	44001d80 	bnez	$r12,28(0x1c) # 9000000000005a6c <default_free_pages+0x38>
9000000000005a54:	1c000326 	pcaddu12i	$r6,25(0x19)
9000000000005a58:	02d5d0c6 	addi.d	$r6,$r6,1396(0x574)
9000000000005a5c:	02827c05 	addi.w	$r5,$r0,159(0x9f)
9000000000005a60:	1c000324 	pcaddu12i	$r4,25(0x19)
9000000000005a64:	02d60084 	addi.d	$r4,$r4,1408(0x580)
9000000000005a68:	54721800 	bl	29208(0x7218) # 900000000000cc80 <__panic>
    struct Page *p = base;
9000000000005a6c:	28fba2cc 	ld.d	$r12,$r22,-280(0xee8)
9000000000005a70:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    for (; p != base + n; p ++) {
9000000000005a74:	50010800 	b	264(0x108) # 9000000000005b7c <default_free_pages+0x148>
        assert(!PageReserved(p) && !PageProperty(p));
9000000000005a78:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000005a7c:	02c0118c 	addi.d	$r12,$r12,4(0x4)
9000000000005a80:	29bf72c0 	st.w	$r0,$r22,-36(0xfdc)
9000000000005a84:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
  unsigned char c = 0;
9000000000005a88:	293f3ec0 	st.b	$r0,$r22,-49(0xfcf)
  local_intr_save (intr_flag);
9000000000005a8c:	57fa1fff 	bl	-1508(0xffffa1c) # 90000000000054a8 <__intr_save>
9000000000005a90:	0015008c 	move	$r12,$r4
9000000000005a94:	29bf22cc 	st.w	$r12,$r22,-56(0xfc8)
  if (*addr & (1 << nr))
9000000000005a98:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000005a9c:	2880018c 	ld.w	$r12,$r12,0
9000000000005aa0:	0015018d 	move	$r13,$r12
9000000000005aa4:	0280040e 	addi.w	$r14,$r0,1(0x1)
9000000000005aa8:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000005aac:	001731cc 	sll.w	$r12,$r14,$r12
9000000000005ab0:	0014b1ac 	and	$r12,$r13,$r12
9000000000005ab4:	40000d80 	beqz	$r12,12(0xc) # 9000000000005ac0 <default_free_pages+0x8c>
    c = 1;
9000000000005ab8:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000005abc:	293f3ecc 	st.b	$r12,$r22,-49(0xfcf)
  local_intr_restore (intr_flag);
9000000000005ac0:	28bf22cc 	ld.w	$r12,$r22,-56(0xfc8)
9000000000005ac4:	00150184 	move	$r4,$r12
9000000000005ac8:	57fa13ff 	bl	-1520(0xffffa10) # 90000000000054d8 <__intr_restore>
  return c != 0;
9000000000005acc:	2a3f3ecc 	ld.bu	$r12,$r22,-49(0xfcf)
9000000000005ad0:	0012b00c 	sltu	$r12,$r0,$r12
9000000000005ad4:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
9000000000005ad8:	44006d80 	bnez	$r12,108(0x6c) # 9000000000005b44 <default_free_pages+0x110>
9000000000005adc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000005ae0:	02c0118c 	addi.d	$r12,$r12,4(0x4)
9000000000005ae4:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000005ae8:	29bf12cd 	st.w	$r13,$r22,-60(0xfc4)
9000000000005aec:	29fee2cc 	st.d	$r12,$r22,-72(0xfb8)
  unsigned char c = 0;
9000000000005af0:	293edec0 	st.b	$r0,$r22,-73(0xfb7)
  local_intr_save (intr_flag);
9000000000005af4:	57f9b7ff 	bl	-1612(0xffff9b4) # 90000000000054a8 <__intr_save>
9000000000005af8:	0015008c 	move	$r12,$r4
9000000000005afc:	29bec2cc 	st.w	$r12,$r22,-80(0xfb0)
  if (*addr & (1 << nr))
9000000000005b00:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000005b04:	2880018c 	ld.w	$r12,$r12,0
9000000000005b08:	0015018d 	move	$r13,$r12
9000000000005b0c:	0280040e 	addi.w	$r14,$r0,1(0x1)
9000000000005b10:	28bf12cc 	ld.w	$r12,$r22,-60(0xfc4)
9000000000005b14:	001731cc 	sll.w	$r12,$r14,$r12
9000000000005b18:	0014b1ac 	and	$r12,$r13,$r12
9000000000005b1c:	40000d80 	beqz	$r12,12(0xc) # 9000000000005b28 <default_free_pages+0xf4>
    c = 1;
9000000000005b20:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000005b24:	293edecc 	st.b	$r12,$r22,-73(0xfb7)
  local_intr_restore (intr_flag);
9000000000005b28:	28bec2cc 	ld.w	$r12,$r22,-80(0xfb0)
9000000000005b2c:	00150184 	move	$r4,$r12
9000000000005b30:	57f9abff 	bl	-1624(0xffff9a8) # 90000000000054d8 <__intr_restore>
  return c != 0;
9000000000005b34:	2a3edecc 	ld.bu	$r12,$r22,-73(0xfb7)
9000000000005b38:	0012b00c 	sltu	$r12,$r0,$r12
9000000000005b3c:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
9000000000005b40:	40001d80 	beqz	$r12,28(0x1c) # 9000000000005b5c <default_free_pages+0x128>
9000000000005b44:	1c000326 	pcaddu12i	$r6,25(0x19)
9000000000005b48:	02d370c6 	addi.d	$r6,$r6,1244(0x4dc)
9000000000005b4c:	02828805 	addi.w	$r5,$r0,162(0xa2)
9000000000005b50:	1c000324 	pcaddu12i	$r4,25(0x19)
9000000000005b54:	02d24084 	addi.d	$r4,$r4,1168(0x490)
9000000000005b58:	54712800 	bl	28968(0x7128) # 900000000000cc80 <__panic>
        p->flags = 0;
9000000000005b5c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000005b60:	29801180 	st.w	$r0,$r12,4(0x4)
        set_page_ref(p, 0);
9000000000005b64:	00150005 	move	$r5,$r0
9000000000005b68:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000005b6c:	57f99bff 	bl	-1640(0xffff998) # 9000000000005504 <set_page_ref>
    for (; p != base + n; p ++) {
9000000000005b70:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000005b74:	02c0c18c 	addi.d	$r12,$r12,48(0x30)
9000000000005b78:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000005b7c:	28fb82cd 	ld.d	$r13,$r22,-288(0xee0)
9000000000005b80:	0280c00c 	addi.w	$r12,$r0,48(0x30)
9000000000005b84:	001db1ac 	mul.d	$r12,$r13,$r12
9000000000005b88:	28fba2cd 	ld.d	$r13,$r22,-280(0xee8)
9000000000005b8c:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000005b90:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000005b94:	5ffee5ac 	bne	$r13,$r12,-284(0x3fee4) # 9000000000005a78 <default_free_pages+0x44>
    }
    base->property = n;
9000000000005b98:	28bb82cd 	ld.w	$r13,$r22,-288(0xee0)
9000000000005b9c:	28fba2cc 	ld.d	$r12,$r22,-280(0xee8)
9000000000005ba0:	2980218d 	st.w	$r13,$r12,8(0x8)
    SetPageProperty(base);
9000000000005ba4:	28fba2cc 	ld.d	$r12,$r22,-280(0xee8)
9000000000005ba8:	02c0118c 	addi.d	$r12,$r12,4(0x4)
9000000000005bac:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000005bb0:	29be92cd 	st.w	$r13,$r22,-92(0xfa4)
9000000000005bb4:	29fe62cc 	st.d	$r12,$r22,-104(0xf98)
  local_intr_save (intr_flag);
9000000000005bb8:	57f8f3ff 	bl	-1808(0xffff8f0) # 90000000000054a8 <__intr_save>
9000000000005bbc:	0015008c 	move	$r12,$r4
9000000000005bc0:	29be52cc 	st.w	$r12,$r22,-108(0xf94)
  *addr |= (1 << nr);
9000000000005bc4:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
9000000000005bc8:	2880018d 	ld.w	$r13,$r12,0
9000000000005bcc:	0280040e 	addi.w	$r14,$r0,1(0x1)
9000000000005bd0:	28be92cc 	ld.w	$r12,$r22,-92(0xfa4)
9000000000005bd4:	001731cc 	sll.w	$r12,$r14,$r12
9000000000005bd8:	001531ac 	or	$r12,$r13,$r12
9000000000005bdc:	0015018d 	move	$r13,$r12
9000000000005be0:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
9000000000005be4:	2980018d 	st.w	$r13,$r12,0
  local_intr_restore (intr_flag);
9000000000005be8:	28be52cc 	ld.w	$r12,$r22,-108(0xf94)
9000000000005bec:	00150184 	move	$r4,$r12
9000000000005bf0:	57f8ebff 	bl	-1816(0xffff8e8) # 90000000000054d8 <__intr_restore>
9000000000005bf4:	1c00438c 	pcaddu12i	$r12,540(0x21c)
9000000000005bf8:	28efd18c 	ld.d	$r12,$r12,-1036(0xbf4)
9000000000005bfc:	29fea2cc 	st.d	$r12,$r22,-88(0xfa8)
    return listelm->next;
9000000000005c00:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
9000000000005c04:	28c0218c 	ld.d	$r12,$r12,8(0x8)
    list_entry_t *le = list_next(&free_list);
9000000000005c08:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    while (le != &free_list) {
9000000000005c0c:	5001e000 	b	480(0x1e0) # 9000000000005dec <default_free_pages+0x3b8>
        p = le2page(le, page_link);
9000000000005c10:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000005c14:	02ffc18c 	addi.d	$r12,$r12,-16(0xff0)
9000000000005c18:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000005c1c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000005c20:	29fe22cc 	st.d	$r12,$r22,-120(0xf88)
9000000000005c24:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
9000000000005c28:	28c0218c 	ld.d	$r12,$r12,8(0x8)
        le = list_next(le);
9000000000005c2c:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
        // TODO: optimize
        if (base + base->property == p) {
9000000000005c30:	28fba2cc 	ld.d	$r12,$r22,-280(0xee8)
9000000000005c34:	2880218c 	ld.w	$r12,$r12,8(0x8)
9000000000005c38:	00df018d 	bstrpick.d	$r13,$r12,0x1f,0x0
9000000000005c3c:	0280c00c 	addi.w	$r12,$r0,48(0x30)
9000000000005c40:	001db1ac 	mul.d	$r12,$r13,$r12
9000000000005c44:	28fba2cd 	ld.d	$r13,$r22,-280(0xee8)
9000000000005c48:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000005c4c:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000005c50:	5c00bdac 	bne	$r13,$r12,188(0xbc) # 9000000000005d0c <default_free_pages+0x2d8>
            base->property += p->property;
9000000000005c54:	28fba2cc 	ld.d	$r12,$r22,-280(0xee8)
9000000000005c58:	2880218d 	ld.w	$r13,$r12,8(0x8)
9000000000005c5c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000005c60:	2880218c 	ld.w	$r12,$r12,8(0x8)
9000000000005c64:	001031ac 	add.w	$r12,$r13,$r12
9000000000005c68:	0015018d 	move	$r13,$r12
9000000000005c6c:	28fba2cc 	ld.d	$r12,$r22,-280(0xee8)
9000000000005c70:	2980218d 	st.w	$r13,$r12,8(0x8)
            ClearPageProperty(p);
9000000000005c74:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000005c78:	02c0118c 	addi.d	$r12,$r12,4(0x4)
9000000000005c7c:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000005c80:	29bdb2cd 	st.w	$r13,$r22,-148(0xf6c)
9000000000005c84:	29fd82cc 	st.d	$r12,$r22,-160(0xf60)
  local_intr_save (intr_flag);
9000000000005c88:	57f823ff 	bl	-2016(0xffff820) # 90000000000054a8 <__intr_save>
9000000000005c8c:	0015008c 	move	$r12,$r4
9000000000005c90:	29bd72cc 	st.w	$r12,$r22,-164(0xf5c)
  *addr &= ~(1 << nr);
9000000000005c94:	28fd82cc 	ld.d	$r12,$r22,-160(0xf60)
9000000000005c98:	2880018c 	ld.w	$r12,$r12,0
9000000000005c9c:	0015018d 	move	$r13,$r12
9000000000005ca0:	0280040e 	addi.w	$r14,$r0,1(0x1)
9000000000005ca4:	28bdb2cc 	ld.w	$r12,$r22,-148(0xf6c)
9000000000005ca8:	001731cc 	sll.w	$r12,$r14,$r12
9000000000005cac:	0014300c 	nor	$r12,$r0,$r12
9000000000005cb0:	0014b1ac 	and	$r12,$r13,$r12
9000000000005cb4:	0015018d 	move	$r13,$r12
9000000000005cb8:	28fd82cc 	ld.d	$r12,$r22,-160(0xf60)
9000000000005cbc:	2980018d 	st.w	$r13,$r12,0
  local_intr_restore (intr_flag);
9000000000005cc0:	28bd72cc 	ld.w	$r12,$r22,-164(0xf5c)
9000000000005cc4:	00150184 	move	$r4,$r12
9000000000005cc8:	57f813ff 	bl	-2032(0xffff810) # 90000000000054d8 <__intr_restore>
            list_del(&(p->page_link));
9000000000005ccc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000005cd0:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000005cd4:	29fe02cc 	st.d	$r12,$r22,-128(0xf80)
    __list_del(listelm->prev, listelm->next);
9000000000005cd8:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
9000000000005cdc:	28c0018d 	ld.d	$r13,$r12,0
9000000000005ce0:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
9000000000005ce4:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000005ce8:	29fde2cd 	st.d	$r13,$r22,-136(0xf78)
9000000000005cec:	29fdc2cc 	st.d	$r12,$r22,-144(0xf70)
    prev->next = next;
9000000000005cf0:	28fde2cc 	ld.d	$r12,$r22,-136(0xf78)
9000000000005cf4:	28fdc2cd 	ld.d	$r13,$r22,-144(0xf70)
9000000000005cf8:	29c0218d 	st.d	$r13,$r12,8(0x8)
    next->prev = prev;
9000000000005cfc:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
9000000000005d00:	28fde2cd 	ld.d	$r13,$r22,-136(0xf78)
9000000000005d04:	29c0018d 	st.d	$r13,$r12,0
9000000000005d08:	5000e400 	b	228(0xe4) # 9000000000005dec <default_free_pages+0x3b8>
        }
        else if (p + p->property == base) {
9000000000005d0c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000005d10:	2880218c 	ld.w	$r12,$r12,8(0x8)
9000000000005d14:	00df018d 	bstrpick.d	$r13,$r12,0x1f,0x0
9000000000005d18:	0280c00c 	addi.w	$r12,$r0,48(0x30)
9000000000005d1c:	001db1ac 	mul.d	$r12,$r13,$r12
9000000000005d20:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000005d24:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000005d28:	28fba2cd 	ld.d	$r13,$r22,-280(0xee8)
9000000000005d2c:	5c00c1ac 	bne	$r13,$r12,192(0xc0) # 9000000000005dec <default_free_pages+0x3b8>
            p->property += base->property;
9000000000005d30:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000005d34:	2880218d 	ld.w	$r13,$r12,8(0x8)
9000000000005d38:	28fba2cc 	ld.d	$r12,$r22,-280(0xee8)
9000000000005d3c:	2880218c 	ld.w	$r12,$r12,8(0x8)
9000000000005d40:	001031ac 	add.w	$r12,$r13,$r12
9000000000005d44:	0015018d 	move	$r13,$r12
9000000000005d48:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000005d4c:	2980218d 	st.w	$r13,$r12,8(0x8)
            ClearPageProperty(base);
9000000000005d50:	28fba2cc 	ld.d	$r12,$r22,-280(0xee8)
9000000000005d54:	02c0118c 	addi.d	$r12,$r12,4(0x4)
9000000000005d58:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000005d5c:	29bcf2cd 	st.w	$r13,$r22,-196(0xf3c)
9000000000005d60:	29fcc2cc 	st.d	$r12,$r22,-208(0xf30)
  local_intr_save (intr_flag);
9000000000005d64:	57f747ff 	bl	-2236(0xffff744) # 90000000000054a8 <__intr_save>
9000000000005d68:	0015008c 	move	$r12,$r4
9000000000005d6c:	29bcb2cc 	st.w	$r12,$r22,-212(0xf2c)
  *addr &= ~(1 << nr);
9000000000005d70:	28fcc2cc 	ld.d	$r12,$r22,-208(0xf30)
9000000000005d74:	2880018c 	ld.w	$r12,$r12,0
9000000000005d78:	0015018d 	move	$r13,$r12
9000000000005d7c:	0280040e 	addi.w	$r14,$r0,1(0x1)
9000000000005d80:	28bcf2cc 	ld.w	$r12,$r22,-196(0xf3c)
9000000000005d84:	001731cc 	sll.w	$r12,$r14,$r12
9000000000005d88:	0014300c 	nor	$r12,$r0,$r12
9000000000005d8c:	0014b1ac 	and	$r12,$r13,$r12
9000000000005d90:	0015018d 	move	$r13,$r12
9000000000005d94:	28fcc2cc 	ld.d	$r12,$r22,-208(0xf30)
9000000000005d98:	2980018d 	st.w	$r13,$r12,0
  local_intr_restore (intr_flag);
9000000000005d9c:	28bcb2cc 	ld.w	$r12,$r22,-212(0xf2c)
9000000000005da0:	00150184 	move	$r4,$r12
9000000000005da4:	57f737ff 	bl	-2252(0xffff734) # 90000000000054d8 <__intr_restore>
            base = p;
9000000000005da8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000005dac:	29fba2cc 	st.d	$r12,$r22,-280(0xee8)
            list_del(&(p->page_link));
9000000000005db0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000005db4:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000005db8:	29fd42cc 	st.d	$r12,$r22,-176(0xf50)
    __list_del(listelm->prev, listelm->next);
9000000000005dbc:	28fd42cc 	ld.d	$r12,$r22,-176(0xf50)
9000000000005dc0:	28c0018d 	ld.d	$r13,$r12,0
9000000000005dc4:	28fd42cc 	ld.d	$r12,$r22,-176(0xf50)
9000000000005dc8:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000005dcc:	29fd22cd 	st.d	$r13,$r22,-184(0xf48)
9000000000005dd0:	29fd02cc 	st.d	$r12,$r22,-192(0xf40)
    prev->next = next;
9000000000005dd4:	28fd22cc 	ld.d	$r12,$r22,-184(0xf48)
9000000000005dd8:	28fd02cd 	ld.d	$r13,$r22,-192(0xf40)
9000000000005ddc:	29c0218d 	st.d	$r13,$r12,8(0x8)
    next->prev = prev;
9000000000005de0:	28fd02cc 	ld.d	$r12,$r22,-192(0xf40)
9000000000005de4:	28fd22cd 	ld.d	$r13,$r22,-184(0xf48)
9000000000005de8:	29c0018d 	st.d	$r13,$r12,0
    while (le != &free_list) {
9000000000005dec:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000005df0:	1c00438c 	pcaddu12i	$r12,540(0x21c)
9000000000005df4:	28e7e18c 	ld.d	$r12,$r12,-1544(0x9f8)
9000000000005df8:	5ffe19ac 	bne	$r13,$r12,-488(0x3fe18) # 9000000000005c10 <default_free_pages+0x1dc>
        }
    }
    nr_free += n;
9000000000005dfc:	1c00438c 	pcaddu12i	$r12,540(0x21c)
9000000000005e00:	28e7b18c 	ld.d	$r12,$r12,-1556(0x9ec)
9000000000005e04:	2880418d 	ld.w	$r13,$r12,16(0x10)
9000000000005e08:	28bb82cc 	ld.w	$r12,$r22,-288(0xee0)
9000000000005e0c:	001031ac 	add.w	$r12,$r13,$r12
9000000000005e10:	0015018d 	move	$r13,$r12
9000000000005e14:	1c00438c 	pcaddu12i	$r12,540(0x21c)
9000000000005e18:	28e7518c 	ld.d	$r12,$r12,-1580(0x9d4)
9000000000005e1c:	2980418d 	st.w	$r13,$r12,16(0x10)
9000000000005e20:	1c00438c 	pcaddu12i	$r12,540(0x21c)
9000000000005e24:	28e7218c 	ld.d	$r12,$r12,-1592(0x9c8)
9000000000005e28:	29fc82cc 	st.d	$r12,$r22,-224(0xf20)
    return listelm->next;
9000000000005e2c:	28fc82cc 	ld.d	$r12,$r22,-224(0xf20)
9000000000005e30:	28c0218c 	ld.d	$r12,$r12,8(0x8)
    le = list_next(&free_list);
9000000000005e34:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    while (le != &free_list) {
9000000000005e38:	50008400 	b	132(0x84) # 9000000000005ebc <default_free_pages+0x488>
        p = le2page(le, page_link);
9000000000005e3c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000005e40:	02ffc18c 	addi.d	$r12,$r12,-16(0xff0)
9000000000005e44:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
        if (base + base->property <= p) {
9000000000005e48:	28fba2cc 	ld.d	$r12,$r22,-280(0xee8)
9000000000005e4c:	2880218c 	ld.w	$r12,$r12,8(0x8)
9000000000005e50:	00df018d 	bstrpick.d	$r13,$r12,0x1f,0x0
9000000000005e54:	0280c00c 	addi.w	$r12,$r0,48(0x30)
9000000000005e58:	001db1ac 	mul.d	$r12,$r13,$r12
9000000000005e5c:	28fba2cd 	ld.d	$r13,$r22,-280(0xee8)
9000000000005e60:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000005e64:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000005e68:	680041ac 	bltu	$r13,$r12,64(0x40) # 9000000000005ea8 <default_free_pages+0x474>
            assert(base + base->property != p);
9000000000005e6c:	28fba2cc 	ld.d	$r12,$r22,-280(0xee8)
9000000000005e70:	2880218c 	ld.w	$r12,$r12,8(0x8)
9000000000005e74:	00df018d 	bstrpick.d	$r13,$r12,0x1f,0x0
9000000000005e78:	0280c00c 	addi.w	$r12,$r0,48(0x30)
9000000000005e7c:	001db1ac 	mul.d	$r12,$r13,$r12
9000000000005e80:	28fba2cd 	ld.d	$r13,$r22,-280(0xee8)
9000000000005e84:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000005e88:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000005e8c:	5c0045ac 	bne	$r13,$r12,68(0x44) # 9000000000005ed0 <default_free_pages+0x49c>
9000000000005e90:	1c000326 	pcaddu12i	$r6,25(0x19)
9000000000005e94:	02c720c6 	addi.d	$r6,$r6,456(0x1c8)
9000000000005e98:	0282f805 	addi.w	$r5,$r0,190(0xbe)
9000000000005e9c:	1c000324 	pcaddu12i	$r4,25(0x19)
9000000000005ea0:	02c51084 	addi.d	$r4,$r4,324(0x144)
9000000000005ea4:	546ddc00 	bl	28124(0x6ddc) # 900000000000cc80 <__panic>
9000000000005ea8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000005eac:	29fc62cc 	st.d	$r12,$r22,-232(0xf18)
9000000000005eb0:	28fc62cc 	ld.d	$r12,$r22,-232(0xf18)
9000000000005eb4:	28c0218c 	ld.d	$r12,$r12,8(0x8)
            break;
        }
        le = list_next(le);
9000000000005eb8:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    while (le != &free_list) {
9000000000005ebc:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000005ec0:	1c00438c 	pcaddu12i	$r12,540(0x21c)
9000000000005ec4:	28e4a18c 	ld.d	$r12,$r12,-1752(0x928)
9000000000005ec8:	5fff75ac 	bne	$r13,$r12,-140(0x3ff74) # 9000000000005e3c <default_free_pages+0x408>
9000000000005ecc:	50000800 	b	8(0x8) # 9000000000005ed4 <default_free_pages+0x4a0>
            break;
9000000000005ed0:	03400000 	andi	$r0,$r0,0x0
    }
    list_add_before(le, &(base->page_link));
9000000000005ed4:	28fba2cc 	ld.d	$r12,$r22,-280(0xee8)
9000000000005ed8:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000005edc:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000005ee0:	29fc42cd 	st.d	$r13,$r22,-240(0xf10)
9000000000005ee4:	29fc22cc 	st.d	$r12,$r22,-248(0xf08)
    __list_add(elm, listelm->prev, listelm);
9000000000005ee8:	28fc42cc 	ld.d	$r12,$r22,-240(0xf10)
9000000000005eec:	28c0018c 	ld.d	$r12,$r12,0
9000000000005ef0:	28fc22cd 	ld.d	$r13,$r22,-248(0xf08)
9000000000005ef4:	29fc02cd 	st.d	$r13,$r22,-256(0xf00)
9000000000005ef8:	29fbe2cc 	st.d	$r12,$r22,-264(0xef8)
9000000000005efc:	28fc42cc 	ld.d	$r12,$r22,-240(0xf10)
9000000000005f00:	29fbc2cc 	st.d	$r12,$r22,-272(0xef0)
    prev->next = next->prev = elm;
9000000000005f04:	28fbc2cc 	ld.d	$r12,$r22,-272(0xef0)
9000000000005f08:	28fc02cd 	ld.d	$r13,$r22,-256(0xf00)
9000000000005f0c:	29c0018d 	st.d	$r13,$r12,0
9000000000005f10:	28fbc2cc 	ld.d	$r12,$r22,-272(0xef0)
9000000000005f14:	28c0018d 	ld.d	$r13,$r12,0
9000000000005f18:	28fbe2cc 	ld.d	$r12,$r22,-264(0xef8)
9000000000005f1c:	29c0218d 	st.d	$r13,$r12,8(0x8)
    elm->next = next;
9000000000005f20:	28fc02cc 	ld.d	$r12,$r22,-256(0xf00)
9000000000005f24:	28fbc2cd 	ld.d	$r13,$r22,-272(0xef0)
9000000000005f28:	29c0218d 	st.d	$r13,$r12,8(0x8)
    elm->prev = prev;
9000000000005f2c:	28fc02cc 	ld.d	$r12,$r22,-256(0xf00)
9000000000005f30:	28fbe2cd 	ld.d	$r13,$r22,-264(0xef8)
9000000000005f34:	29c0018d 	st.d	$r13,$r12,0
#endif
}
9000000000005f38:	03400000 	andi	$r0,$r0,0x0
9000000000005f3c:	28c46061 	ld.d	$r1,$r3,280(0x118)
9000000000005f40:	28c44076 	ld.d	$r22,$r3,272(0x110)
9000000000005f44:	02c48063 	addi.d	$r3,$r3,288(0x120)
9000000000005f48:	4c000020 	jirl	$r0,$r1,0

9000000000005f4c <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
9000000000005f4c:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000000005f50:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000000005f54:	02c04076 	addi.d	$r22,$r3,16(0x10)
    return nr_free;
9000000000005f58:	1c00438c 	pcaddu12i	$r12,540(0x21c)
9000000000005f5c:	28e2418c 	ld.d	$r12,$r12,-1904(0x890)
9000000000005f60:	2880418c 	ld.w	$r12,$r12,16(0x10)
9000000000005f64:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
}
9000000000005f68:	00150184 	move	$r4,$r12
9000000000005f6c:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000000005f70:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000000005f74:	4c000020 	jirl	$r0,$r1,0

9000000000005f78 <basic_check>:

static void
basic_check(void) {
9000000000005f78:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000005f7c:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000005f80:	02c08076 	addi.d	$r22,$r3,32(0x20)
    nr_free = nr_free_store;

    free_page(p);
    free_page(p1);
    free_page(p2);
}
9000000000005f84:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000005f88:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000005f8c:	4c000020 	jirl	$r0,$r1,0

9000000000005f90 <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
9000000000005f90:	02fbc063 	addi.d	$r3,$r3,-272(0xef0)
9000000000005f94:	29c42061 	st.d	$r1,$r3,264(0x108)
9000000000005f98:	29c40076 	st.d	$r22,$r3,256(0x100)
9000000000005f9c:	29c3e077 	st.d	$r23,$r3,248(0xf8)
9000000000005fa0:	02c44076 	addi.d	$r22,$r3,272(0x110)
    int count = 0, total = 0;
9000000000005fa4:	29bf72c0 	st.w	$r0,$r22,-36(0xfdc)
9000000000005fa8:	29bf62c0 	st.w	$r0,$r22,-40(0xfd8)
    list_entry_t *le = &free_list;
9000000000005fac:	1c00438c 	pcaddu12i	$r12,540(0x21c)
9000000000005fb0:	28e0f18c 	ld.d	$r12,$r12,-1988(0x83c)
9000000000005fb4:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    while ((le = list_next(le)) != &free_list) {
9000000000005fb8:	5000b000 	b	176(0xb0) # 9000000000006068 <default_check+0xd8>
        struct Page *p = le2page(le, page_link);
9000000000005fbc:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000005fc0:	02ffc18c 	addi.d	$r12,$r12,-16(0xff0)
9000000000005fc4:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
        assert(PageProperty(p));
9000000000005fc8:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000005fcc:	02c0118c 	addi.d	$r12,$r12,4(0x4)
9000000000005fd0:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000005fd4:	29be72cd 	st.w	$r13,$r22,-100(0xf9c)
9000000000005fd8:	29fe42cc 	st.d	$r12,$r22,-112(0xf90)
  unsigned char c = 0;
9000000000005fdc:	293e3ec0 	st.b	$r0,$r22,-113(0xf8f)
  local_intr_save (intr_flag);
9000000000005fe0:	57f4cbff 	bl	-2872(0xffff4c8) # 90000000000054a8 <__intr_save>
9000000000005fe4:	0015008c 	move	$r12,$r4
9000000000005fe8:	29be22cc 	st.w	$r12,$r22,-120(0xf88)
  if (*addr & (1 << nr))
9000000000005fec:	28fe42cc 	ld.d	$r12,$r22,-112(0xf90)
9000000000005ff0:	2880018c 	ld.w	$r12,$r12,0
9000000000005ff4:	0015018d 	move	$r13,$r12
9000000000005ff8:	0280040e 	addi.w	$r14,$r0,1(0x1)
9000000000005ffc:	28be72cc 	ld.w	$r12,$r22,-100(0xf9c)
9000000000006000:	001731cc 	sll.w	$r12,$r14,$r12
9000000000006004:	0014b1ac 	and	$r12,$r13,$r12
9000000000006008:	40000d80 	beqz	$r12,12(0xc) # 9000000000006014 <default_check+0x84>
    c = 1;
900000000000600c:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000006010:	293e3ecc 	st.b	$r12,$r22,-113(0xf8f)
  local_intr_restore (intr_flag);
9000000000006014:	28be22cc 	ld.w	$r12,$r22,-120(0xf88)
9000000000006018:	00150184 	move	$r4,$r12
900000000000601c:	57f4bfff 	bl	-2884(0xffff4bc) # 90000000000054d8 <__intr_restore>
  return c != 0;
9000000000006020:	2a3e3ecc 	ld.bu	$r12,$r22,-113(0xf8f)
9000000000006024:	0012b00c 	sltu	$r12,$r0,$r12
9000000000006028:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
900000000000602c:	44001d80 	bnez	$r12,28(0x1c) # 9000000000006048 <default_check+0xb8>
9000000000006030:	1c000326 	pcaddu12i	$r6,25(0x19)
9000000000006034:	02c160c6 	addi.d	$r6,$r6,88(0x58)
9000000000006038:	02842005 	addi.w	$r5,$r0,264(0x108)
900000000000603c:	1c000324 	pcaddu12i	$r4,25(0x19)
9000000000006040:	02fe9084 	addi.d	$r4,$r4,-92(0xfa4)
9000000000006044:	546c3c00 	bl	27708(0x6c3c) # 900000000000cc80 <__panic>
        count ++, total += p->property;
9000000000006048:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
900000000000604c:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000006050:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
9000000000006054:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000006058:	2880218d 	ld.w	$r13,$r12,8(0x8)
900000000000605c:	28bf62cc 	ld.w	$r12,$r22,-40(0xfd8)
9000000000006060:	001031ac 	add.w	$r12,$r13,$r12
9000000000006064:	29bf62cc 	st.w	$r12,$r22,-40(0xfd8)
9000000000006068:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000606c:	29fe02cc 	st.d	$r12,$r22,-128(0xf80)
    return listelm->next;
9000000000006070:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
9000000000006074:	28c0218c 	ld.d	$r12,$r12,8(0x8)
    while ((le = list_next(le)) != &free_list) {
9000000000006078:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
900000000000607c:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000006080:	1c00436c 	pcaddu12i	$r12,539(0x21b)
9000000000006084:	28dda18c 	ld.d	$r12,$r12,1896(0x768)
9000000000006088:	5fff35ac 	bne	$r13,$r12,-204(0x3ff34) # 9000000000005fbc <default_check+0x2c>
    }
    assert(total == nr_free_pages());
900000000000608c:	28bf62d7 	ld.w	$r23,$r22,-40(0xfd8)
9000000000006090:	5432cc00 	bl	13004(0x32cc) # 900000000000935c <nr_free_pages>
9000000000006094:	0015008c 	move	$r12,$r4
9000000000006098:	58001eec 	beq	$r23,$r12,28(0x1c) # 90000000000060b4 <default_check+0x124>
900000000000609c:	1c000326 	pcaddu12i	$r6,25(0x19)
90000000000060a0:	02c050c6 	addi.d	$r6,$r6,20(0x14)
90000000000060a4:	02842c05 	addi.w	$r5,$r0,267(0x10b)
90000000000060a8:	1c000324 	pcaddu12i	$r4,25(0x19)
90000000000060ac:	02fce084 	addi.d	$r4,$r4,-200(0xf38)
90000000000060b0:	546bd000 	bl	27600(0x6bd0) # 900000000000cc80 <__panic>

    basic_check();
90000000000060b4:	57fec7ff 	bl	-316(0xffffec4) # 9000000000005f78 <basic_check>
    struct Page *p0 = alloc_pages(5), *p1, *p2;
90000000000060b8:	02801404 	addi.w	$r4,$r0,5(0x5)
90000000000060bc:	5431e000 	bl	12768(0x31e0) # 900000000000929c <alloc_pages>
90000000000060c0:	29ff02c4 	st.d	$r4,$r22,-64(0xfc0)
    assert(p0 != NULL);
90000000000060c4:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
90000000000060c8:	44001d80 	bnez	$r12,28(0x1c) # 90000000000060e4 <default_check+0x154>
90000000000060cc:	1c000326 	pcaddu12i	$r6,25(0x19)
90000000000060d0:	02c050c6 	addi.d	$r6,$r6,20(0x14)
90000000000060d4:	02843c05 	addi.w	$r5,$r0,271(0x10f)
90000000000060d8:	1c000324 	pcaddu12i	$r4,25(0x19)
90000000000060dc:	02fc2084 	addi.d	$r4,$r4,-248(0xf08)
90000000000060e0:	546ba000 	bl	27552(0x6ba0) # 900000000000cc80 <__panic>
    assert(!PageProperty(p0));
90000000000060e4:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
90000000000060e8:	02c0118c 	addi.d	$r12,$r12,4(0x4)
90000000000060ec:	0280040d 	addi.w	$r13,$r0,1(0x1)
90000000000060f0:	29bdf2cd 	st.w	$r13,$r22,-132(0xf7c)
90000000000060f4:	29fdc2cc 	st.d	$r12,$r22,-144(0xf70)
  unsigned char c = 0;
90000000000060f8:	293dbec0 	st.b	$r0,$r22,-145(0xf6f)
  local_intr_save (intr_flag);
90000000000060fc:	57f3afff 	bl	-3156(0xffff3ac) # 90000000000054a8 <__intr_save>
9000000000006100:	0015008c 	move	$r12,$r4
9000000000006104:	29bda2cc 	st.w	$r12,$r22,-152(0xf68)
  if (*addr & (1 << nr))
9000000000006108:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
900000000000610c:	2880018c 	ld.w	$r12,$r12,0
9000000000006110:	0015018d 	move	$r13,$r12
9000000000006114:	0280040e 	addi.w	$r14,$r0,1(0x1)
9000000000006118:	28bdf2cc 	ld.w	$r12,$r22,-132(0xf7c)
900000000000611c:	001731cc 	sll.w	$r12,$r14,$r12
9000000000006120:	0014b1ac 	and	$r12,$r13,$r12
9000000000006124:	40000d80 	beqz	$r12,12(0xc) # 9000000000006130 <default_check+0x1a0>
    c = 1;
9000000000006128:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000000612c:	293dbecc 	st.b	$r12,$r22,-145(0xf6f)
  local_intr_restore (intr_flag);
9000000000006130:	28bda2cc 	ld.w	$r12,$r22,-152(0xf68)
9000000000006134:	00150184 	move	$r4,$r12
9000000000006138:	57f3a3ff 	bl	-3168(0xffff3a0) # 90000000000054d8 <__intr_restore>
  return c != 0;
900000000000613c:	2a3dbecc 	ld.bu	$r12,$r22,-145(0xf6f)
9000000000006140:	0012b00c 	sltu	$r12,$r0,$r12
9000000000006144:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
9000000000006148:	40001d80 	beqz	$r12,28(0x1c) # 9000000000006164 <default_check+0x1d4>
900000000000614c:	1c000326 	pcaddu12i	$r6,25(0x19)
9000000000006150:	02fed0c6 	addi.d	$r6,$r6,-76(0xfb4)
9000000000006154:	02844005 	addi.w	$r5,$r0,272(0x110)
9000000000006158:	1c000324 	pcaddu12i	$r4,25(0x19)
900000000000615c:	02fa2084 	addi.d	$r4,$r4,-376(0xe88)
9000000000006160:	546b2000 	bl	27424(0x6b20) # 900000000000cc80 <__panic>

    list_entry_t free_list_store = free_list;
9000000000006164:	1c00436c 	pcaddu12i	$r12,539(0x21b)
9000000000006168:	28da118c 	ld.d	$r12,$r12,1668(0x684)
900000000000616c:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000006170:	28c0018c 	ld.d	$r12,$r12,0
9000000000006174:	29fbe2cc 	st.d	$r12,$r22,-264(0xef8)
9000000000006178:	29fc02cd 	st.d	$r13,$r22,-256(0xf00)
900000000000617c:	1c00436c 	pcaddu12i	$r12,539(0x21b)
9000000000006180:	28d9b18c 	ld.d	$r12,$r12,1644(0x66c)
9000000000006184:	29fd62cc 	st.d	$r12,$r22,-168(0xf58)
    elm->prev = elm->next = elm;
9000000000006188:	28fd62cc 	ld.d	$r12,$r22,-168(0xf58)
900000000000618c:	28fd62cd 	ld.d	$r13,$r22,-168(0xf58)
9000000000006190:	29c0218d 	st.d	$r13,$r12,8(0x8)
9000000000006194:	28fd62cc 	ld.d	$r12,$r22,-168(0xf58)
9000000000006198:	28c0218d 	ld.d	$r13,$r12,8(0x8)
900000000000619c:	28fd62cc 	ld.d	$r12,$r22,-168(0xf58)
90000000000061a0:	29c0018d 	st.d	$r13,$r12,0
90000000000061a4:	1c00436c 	pcaddu12i	$r12,539(0x21b)
90000000000061a8:	28d9118c 	ld.d	$r12,$r12,1604(0x644)
90000000000061ac:	29fd82cc 	st.d	$r12,$r22,-160(0xf60)
    return list->next == list;
90000000000061b0:	28fd82cc 	ld.d	$r12,$r22,-160(0xf60)
90000000000061b4:	28c0218d 	ld.d	$r13,$r12,8(0x8)
90000000000061b8:	28fd82cc 	ld.d	$r12,$r22,-160(0xf60)
90000000000061bc:	0015b1ac 	xor	$r12,$r13,$r12
90000000000061c0:	0240058c 	sltui	$r12,$r12,1(0x1)
90000000000061c4:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
    list_init(&free_list);
    assert(list_empty(&free_list));
90000000000061c8:	44001d80 	bnez	$r12,28(0x1c) # 90000000000061e4 <default_check+0x254>
90000000000061cc:	1c000326 	pcaddu12i	$r6,25(0x19)
90000000000061d0:	02fd70c6 	addi.d	$r6,$r6,-164(0xf5c)
90000000000061d4:	02845005 	addi.w	$r5,$r0,276(0x114)
90000000000061d8:	1c000324 	pcaddu12i	$r4,25(0x19)
90000000000061dc:	02f82084 	addi.d	$r4,$r4,-504(0xe08)
90000000000061e0:	546aa000 	bl	27296(0x6aa0) # 900000000000cc80 <__panic>
    assert(alloc_page() == NULL);
90000000000061e4:	02800404 	addi.w	$r4,$r0,1(0x1)
90000000000061e8:	5430b400 	bl	12468(0x30b4) # 900000000000929c <alloc_pages>
90000000000061ec:	0015008c 	move	$r12,$r4
90000000000061f0:	40001d80 	beqz	$r12,28(0x1c) # 900000000000620c <default_check+0x27c>
90000000000061f4:	1c000326 	pcaddu12i	$r6,25(0x19)
90000000000061f8:	02fd90c6 	addi.d	$r6,$r6,-156(0xf64)
90000000000061fc:	02845405 	addi.w	$r5,$r0,277(0x115)
9000000000006200:	1c000324 	pcaddu12i	$r4,25(0x19)
9000000000006204:	02f78084 	addi.d	$r4,$r4,-544(0xde0)
9000000000006208:	546a7800 	bl	27256(0x6a78) # 900000000000cc80 <__panic>
    unsigned int nr_free_store = nr_free;
900000000000620c:	1c00436c 	pcaddu12i	$r12,539(0x21b)
9000000000006210:	28d7718c 	ld.d	$r12,$r12,1500(0x5dc)
9000000000006214:	2880418c 	ld.w	$r12,$r12,16(0x10)
9000000000006218:	29bef2cc 	st.w	$r12,$r22,-68(0xfbc)
    nr_free = 0;
900000000000621c:	1c00436c 	pcaddu12i	$r12,539(0x21b)
9000000000006220:	28d7318c 	ld.d	$r12,$r12,1484(0x5cc)
9000000000006224:	29804180 	st.w	$r0,$r12,16(0x10)

    free_pages(p0 + 2, 3);
9000000000006228:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000622c:	02c1818c 	addi.d	$r12,$r12,96(0x60)
9000000000006230:	02800c05 	addi.w	$r5,$r0,3(0x3)
9000000000006234:	00150184 	move	$r4,$r12
9000000000006238:	5430c400 	bl	12484(0x30c4) # 90000000000092fc <free_pages>
    assert(alloc_pages(4) == NULL);
900000000000623c:	02801004 	addi.w	$r4,$r0,4(0x4)
9000000000006240:	54305c00 	bl	12380(0x305c) # 900000000000929c <alloc_pages>
9000000000006244:	0015008c 	move	$r12,$r4
9000000000006248:	40001d80 	beqz	$r12,28(0x1c) # 9000000000006264 <default_check+0x2d4>
900000000000624c:	1c000326 	pcaddu12i	$r6,25(0x19)
9000000000006250:	02fcd0c6 	addi.d	$r6,$r6,-204(0xf34)
9000000000006254:	02846805 	addi.w	$r5,$r0,282(0x11a)
9000000000006258:	1c000324 	pcaddu12i	$r4,25(0x19)
900000000000625c:	02f62084 	addi.d	$r4,$r4,-632(0xd88)
9000000000006260:	546a2000 	bl	27168(0x6a20) # 900000000000cc80 <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
9000000000006264:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000006268:	02c1818c 	addi.d	$r12,$r12,96(0x60)
900000000000626c:	02c0118c 	addi.d	$r12,$r12,4(0x4)
9000000000006270:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000006274:	29bd52cd 	st.w	$r13,$r22,-172(0xf54)
9000000000006278:	29fd22cc 	st.d	$r12,$r22,-184(0xf48)
  unsigned char c = 0;
900000000000627c:	293d1ec0 	st.b	$r0,$r22,-185(0xf47)
  local_intr_save (intr_flag);
9000000000006280:	57f22bff 	bl	-3544(0xffff228) # 90000000000054a8 <__intr_save>
9000000000006284:	0015008c 	move	$r12,$r4
9000000000006288:	29bd02cc 	st.w	$r12,$r22,-192(0xf40)
  if (*addr & (1 << nr))
900000000000628c:	28fd22cc 	ld.d	$r12,$r22,-184(0xf48)
9000000000006290:	2880018c 	ld.w	$r12,$r12,0
9000000000006294:	0015018d 	move	$r13,$r12
9000000000006298:	0280040e 	addi.w	$r14,$r0,1(0x1)
900000000000629c:	28bd52cc 	ld.w	$r12,$r22,-172(0xf54)
90000000000062a0:	001731cc 	sll.w	$r12,$r14,$r12
90000000000062a4:	0014b1ac 	and	$r12,$r13,$r12
90000000000062a8:	40000d80 	beqz	$r12,12(0xc) # 90000000000062b4 <default_check+0x324>
    c = 1;
90000000000062ac:	0280040c 	addi.w	$r12,$r0,1(0x1)
90000000000062b0:	293d1ecc 	st.b	$r12,$r22,-185(0xf47)
  local_intr_restore (intr_flag);
90000000000062b4:	28bd02cc 	ld.w	$r12,$r22,-192(0xf40)
90000000000062b8:	00150184 	move	$r4,$r12
90000000000062bc:	57f21fff 	bl	-3556(0xffff21c) # 90000000000054d8 <__intr_restore>
  return c != 0;
90000000000062c0:	2a3d1ecc 	ld.bu	$r12,$r22,-185(0xf47)
90000000000062c4:	0012b00c 	sltu	$r12,$r0,$r12
90000000000062c8:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
90000000000062cc:	40001d80 	beqz	$r12,28(0x1c) # 90000000000062e8 <default_check+0x358>
90000000000062d0:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
90000000000062d4:	02c1818c 	addi.d	$r12,$r12,96(0x60)
90000000000062d8:	2880218c 	ld.w	$r12,$r12,8(0x8)
90000000000062dc:	0015018d 	move	$r13,$r12
90000000000062e0:	02800c0c 	addi.w	$r12,$r0,3(0x3)
90000000000062e4:	58001dac 	beq	$r13,$r12,28(0x1c) # 9000000000006300 <default_check+0x370>
90000000000062e8:	1c000326 	pcaddu12i	$r6,25(0x19)
90000000000062ec:	02fb20c6 	addi.d	$r6,$r6,-312(0xec8)
90000000000062f0:	02846c05 	addi.w	$r5,$r0,283(0x11b)
90000000000062f4:	1c000324 	pcaddu12i	$r4,25(0x19)
90000000000062f8:	02f3b084 	addi.d	$r4,$r4,-788(0xcec)
90000000000062fc:	54698400 	bl	27012(0x6984) # 900000000000cc80 <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
9000000000006300:	02800c04 	addi.w	$r4,$r0,3(0x3)
9000000000006304:	542f9800 	bl	12184(0x2f98) # 900000000000929c <alloc_pages>
9000000000006308:	29fec2c4 	st.d	$r4,$r22,-80(0xfb0)
900000000000630c:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
9000000000006310:	44001d80 	bnez	$r12,28(0x1c) # 900000000000632c <default_check+0x39c>
9000000000006314:	1c000326 	pcaddu12i	$r6,25(0x19)
9000000000006318:	02fb70c6 	addi.d	$r6,$r6,-292(0xedc)
900000000000631c:	02847005 	addi.w	$r5,$r0,284(0x11c)
9000000000006320:	1c000324 	pcaddu12i	$r4,25(0x19)
9000000000006324:	02f30084 	addi.d	$r4,$r4,-832(0xcc0)
9000000000006328:	54695800 	bl	26968(0x6958) # 900000000000cc80 <__panic>
    assert(alloc_page() == NULL);
900000000000632c:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000000006330:	542f6c00 	bl	12140(0x2f6c) # 900000000000929c <alloc_pages>
9000000000006334:	0015008c 	move	$r12,$r4
9000000000006338:	40001d80 	beqz	$r12,28(0x1c) # 9000000000006354 <default_check+0x3c4>
900000000000633c:	1c000326 	pcaddu12i	$r6,25(0x19)
9000000000006340:	02f870c6 	addi.d	$r6,$r6,-484(0xe1c)
9000000000006344:	02847405 	addi.w	$r5,$r0,285(0x11d)
9000000000006348:	1c000324 	pcaddu12i	$r4,25(0x19)
900000000000634c:	02f26084 	addi.d	$r4,$r4,-872(0xc98)
9000000000006350:	54693000 	bl	26928(0x6930) # 900000000000cc80 <__panic>
    assert(p0 + 2 == p1);
9000000000006354:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000006358:	02c1818c 	addi.d	$r12,$r12,96(0x60)
900000000000635c:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
9000000000006360:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000000637c <default_check+0x3ec>
9000000000006364:	1c000326 	pcaddu12i	$r6,25(0x19)
9000000000006368:	02faf0c6 	addi.d	$r6,$r6,-324(0xebc)
900000000000636c:	02847805 	addi.w	$r5,$r0,286(0x11e)
9000000000006370:	1c000324 	pcaddu12i	$r4,25(0x19)
9000000000006374:	02f1c084 	addi.d	$r4,$r4,-912(0xc70)
9000000000006378:	54690800 	bl	26888(0x6908) # 900000000000cc80 <__panic>
    p2 = p0 + 1;
900000000000637c:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000006380:	02c0c18c 	addi.d	$r12,$r12,48(0x30)
9000000000006384:	29fea2cc 	st.d	$r12,$r22,-88(0xfa8)
    free_page(p0);
9000000000006388:	02800405 	addi.w	$r5,$r0,1(0x1)
900000000000638c:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
9000000000006390:	542f6c00 	bl	12140(0x2f6c) # 90000000000092fc <free_pages>
    free_pages(p1, 3);
9000000000006394:	02800c05 	addi.w	$r5,$r0,3(0x3)
9000000000006398:	28fec2c4 	ld.d	$r4,$r22,-80(0xfb0)
900000000000639c:	542f6000 	bl	12128(0x2f60) # 90000000000092fc <free_pages>
    assert(PageProperty(p0) && p0->property == 1);
90000000000063a0:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
90000000000063a4:	02c0118c 	addi.d	$r12,$r12,4(0x4)
90000000000063a8:	0280040d 	addi.w	$r13,$r0,1(0x1)
90000000000063ac:	29bcf2cd 	st.w	$r13,$r22,-196(0xf3c)
90000000000063b0:	29fcc2cc 	st.d	$r12,$r22,-208(0xf30)
  unsigned char c = 0;
90000000000063b4:	293cbec0 	st.b	$r0,$r22,-209(0xf2f)
  local_intr_save (intr_flag);
90000000000063b8:	57f0f3ff 	bl	-3856(0xffff0f0) # 90000000000054a8 <__intr_save>
90000000000063bc:	0015008c 	move	$r12,$r4
90000000000063c0:	29bca2cc 	st.w	$r12,$r22,-216(0xf28)
  if (*addr & (1 << nr))
90000000000063c4:	28fcc2cc 	ld.d	$r12,$r22,-208(0xf30)
90000000000063c8:	2880018c 	ld.w	$r12,$r12,0
90000000000063cc:	0015018d 	move	$r13,$r12
90000000000063d0:	0280040e 	addi.w	$r14,$r0,1(0x1)
90000000000063d4:	28bcf2cc 	ld.w	$r12,$r22,-196(0xf3c)
90000000000063d8:	001731cc 	sll.w	$r12,$r14,$r12
90000000000063dc:	0014b1ac 	and	$r12,$r13,$r12
90000000000063e0:	40000d80 	beqz	$r12,12(0xc) # 90000000000063ec <default_check+0x45c>
    c = 1;
90000000000063e4:	0280040c 	addi.w	$r12,$r0,1(0x1)
90000000000063e8:	293cbecc 	st.b	$r12,$r22,-209(0xf2f)
  local_intr_restore (intr_flag);
90000000000063ec:	28bca2cc 	ld.w	$r12,$r22,-216(0xf28)
90000000000063f0:	00150184 	move	$r4,$r12
90000000000063f4:	57f0e7ff 	bl	-3868(0xffff0e4) # 90000000000054d8 <__intr_restore>
  return c != 0;
90000000000063f8:	2a3cbecc 	ld.bu	$r12,$r22,-209(0xf2f)
90000000000063fc:	0012b00c 	sltu	$r12,$r0,$r12
9000000000006400:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
9000000000006404:	40001980 	beqz	$r12,24(0x18) # 900000000000641c <default_check+0x48c>
9000000000006408:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000640c:	2880218c 	ld.w	$r12,$r12,8(0x8)
9000000000006410:	0015018d 	move	$r13,$r12
9000000000006414:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000006418:	58001dac 	beq	$r13,$r12,28(0x1c) # 9000000000006434 <default_check+0x4a4>
900000000000641c:	1c000326 	pcaddu12i	$r6,25(0x19)
9000000000006420:	02f890c6 	addi.d	$r6,$r6,-476(0xe24)
9000000000006424:	02848805 	addi.w	$r5,$r0,290(0x122)
9000000000006428:	1c000324 	pcaddu12i	$r4,25(0x19)
900000000000642c:	02eee084 	addi.d	$r4,$r4,-1096(0xbb8)
9000000000006430:	54685000 	bl	26704(0x6850) # 900000000000cc80 <__panic>
    assert(PageProperty(p1) && p1->property == 3);
9000000000006434:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
9000000000006438:	02c0118c 	addi.d	$r12,$r12,4(0x4)
900000000000643c:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000006440:	29bc92cd 	st.w	$r13,$r22,-220(0xf24)
9000000000006444:	29fc62cc 	st.d	$r12,$r22,-232(0xf18)
  unsigned char c = 0;
9000000000006448:	293c5ec0 	st.b	$r0,$r22,-233(0xf17)
  local_intr_save (intr_flag);
900000000000644c:	57f05fff 	bl	-4004(0xffff05c) # 90000000000054a8 <__intr_save>
9000000000006450:	0015008c 	move	$r12,$r4
9000000000006454:	29bc42cc 	st.w	$r12,$r22,-240(0xf10)
  if (*addr & (1 << nr))
9000000000006458:	28fc62cc 	ld.d	$r12,$r22,-232(0xf18)
900000000000645c:	2880018c 	ld.w	$r12,$r12,0
9000000000006460:	0015018d 	move	$r13,$r12
9000000000006464:	0280040e 	addi.w	$r14,$r0,1(0x1)
9000000000006468:	28bc92cc 	ld.w	$r12,$r22,-220(0xf24)
900000000000646c:	001731cc 	sll.w	$r12,$r14,$r12
9000000000006470:	0014b1ac 	and	$r12,$r13,$r12
9000000000006474:	40000d80 	beqz	$r12,12(0xc) # 9000000000006480 <default_check+0x4f0>
    c = 1;
9000000000006478:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000000647c:	293c5ecc 	st.b	$r12,$r22,-233(0xf17)
  local_intr_restore (intr_flag);
9000000000006480:	28bc42cc 	ld.w	$r12,$r22,-240(0xf10)
9000000000006484:	00150184 	move	$r4,$r12
9000000000006488:	57f053ff 	bl	-4016(0xffff050) # 90000000000054d8 <__intr_restore>
  return c != 0;
900000000000648c:	2a3c5ecc 	ld.bu	$r12,$r22,-233(0xf17)
9000000000006490:	0012b00c 	sltu	$r12,$r0,$r12
9000000000006494:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
9000000000006498:	40001980 	beqz	$r12,24(0x18) # 90000000000064b0 <default_check+0x520>
900000000000649c:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
90000000000064a0:	2880218c 	ld.w	$r12,$r12,8(0x8)
90000000000064a4:	0015018d 	move	$r13,$r12
90000000000064a8:	02800c0c 	addi.w	$r12,$r0,3(0x3)
90000000000064ac:	58001dac 	beq	$r13,$r12,28(0x1c) # 90000000000064c8 <default_check+0x538>
90000000000064b0:	1c000326 	pcaddu12i	$r6,25(0x19)
90000000000064b4:	02f720c6 	addi.d	$r6,$r6,-568(0xdc8)
90000000000064b8:	02848c05 	addi.w	$r5,$r0,291(0x123)
90000000000064bc:	1c000324 	pcaddu12i	$r4,25(0x19)
90000000000064c0:	02ec9084 	addi.d	$r4,$r4,-1244(0xb24)
90000000000064c4:	5467bc00 	bl	26556(0x67bc) # 900000000000cc80 <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
90000000000064c8:	02800404 	addi.w	$r4,$r0,1(0x1)
90000000000064cc:	542dd000 	bl	11728(0x2dd0) # 900000000000929c <alloc_pages>
90000000000064d0:	29ff02c4 	st.d	$r4,$r22,-64(0xfc0)
90000000000064d4:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
90000000000064d8:	02ff418c 	addi.d	$r12,$r12,-48(0xfd0)
90000000000064dc:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
90000000000064e0:	58001dac 	beq	$r13,$r12,28(0x1c) # 90000000000064fc <default_check+0x56c>
90000000000064e4:	1c000326 	pcaddu12i	$r6,25(0x19)
90000000000064e8:	02f730c6 	addi.d	$r6,$r6,-564(0xdcc)
90000000000064ec:	02849405 	addi.w	$r5,$r0,293(0x125)
90000000000064f0:	1c000324 	pcaddu12i	$r4,25(0x19)
90000000000064f4:	02ebc084 	addi.d	$r4,$r4,-1296(0xaf0)
90000000000064f8:	54678800 	bl	26504(0x6788) # 900000000000cc80 <__panic>
    free_page(p0);
90000000000064fc:	02800405 	addi.w	$r5,$r0,1(0x1)
9000000000006500:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
9000000000006504:	542df800 	bl	11768(0x2df8) # 90000000000092fc <free_pages>
    assert((p0 = alloc_pages(2)) == p2 + 1);
9000000000006508:	02800804 	addi.w	$r4,$r0,2(0x2)
900000000000650c:	542d9000 	bl	11664(0x2d90) # 900000000000929c <alloc_pages>
9000000000006510:	29ff02c4 	st.d	$r4,$r22,-64(0xfc0)
9000000000006514:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
9000000000006518:	02c0c18c 	addi.d	$r12,$r12,48(0x30)
900000000000651c:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
9000000000006520:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000000653c <default_check+0x5ac>
9000000000006524:	1c000326 	pcaddu12i	$r6,25(0x19)
9000000000006528:	02f6f0c6 	addi.d	$r6,$r6,-580(0xdbc)
900000000000652c:	02849c05 	addi.w	$r5,$r0,295(0x127)
9000000000006530:	1c000324 	pcaddu12i	$r4,25(0x19)
9000000000006534:	02eac084 	addi.d	$r4,$r4,-1360(0xab0)
9000000000006538:	54674800 	bl	26440(0x6748) # 900000000000cc80 <__panic>

    free_pages(p0, 2);
900000000000653c:	02800805 	addi.w	$r5,$r0,2(0x2)
9000000000006540:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
9000000000006544:	542db800 	bl	11704(0x2db8) # 90000000000092fc <free_pages>
    free_page(p2);
9000000000006548:	02800405 	addi.w	$r5,$r0,1(0x1)
900000000000654c:	28fea2c4 	ld.d	$r4,$r22,-88(0xfa8)
9000000000006550:	542dac00 	bl	11692(0x2dac) # 90000000000092fc <free_pages>

    assert((p0 = alloc_pages(5)) != NULL);
9000000000006554:	02801404 	addi.w	$r4,$r0,5(0x5)
9000000000006558:	542d4400 	bl	11588(0x2d44) # 900000000000929c <alloc_pages>
900000000000655c:	29ff02c4 	st.d	$r4,$r22,-64(0xfc0)
9000000000006560:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000006564:	44001d80 	bnez	$r12,28(0x1c) # 9000000000006580 <default_check+0x5f0>
9000000000006568:	1c000326 	pcaddu12i	$r6,25(0x19)
900000000000656c:	02f6c0c6 	addi.d	$r6,$r6,-592(0xdb0)
9000000000006570:	0284b005 	addi.w	$r5,$r0,300(0x12c)
9000000000006574:	1c000324 	pcaddu12i	$r4,25(0x19)
9000000000006578:	02e9b084 	addi.d	$r4,$r4,-1428(0xa6c)
900000000000657c:	54670400 	bl	26372(0x6704) # 900000000000cc80 <__panic>
    assert(alloc_page() == NULL);
9000000000006580:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000000006584:	542d1800 	bl	11544(0x2d18) # 900000000000929c <alloc_pages>
9000000000006588:	0015008c 	move	$r12,$r4
900000000000658c:	40001d80 	beqz	$r12,28(0x1c) # 90000000000065a8 <default_check+0x618>
9000000000006590:	1c000326 	pcaddu12i	$r6,25(0x19)
9000000000006594:	02ef20c6 	addi.d	$r6,$r6,-1080(0xbc8)
9000000000006598:	0284b405 	addi.w	$r5,$r0,301(0x12d)
900000000000659c:	1c000324 	pcaddu12i	$r4,25(0x19)
90000000000065a0:	02e91084 	addi.d	$r4,$r4,-1468(0xa44)
90000000000065a4:	5466dc00 	bl	26332(0x66dc) # 900000000000cc80 <__panic>

    assert(nr_free == 0);
90000000000065a8:	1c00436c 	pcaddu12i	$r12,539(0x21b)
90000000000065ac:	28c9018c 	ld.d	$r12,$r12,576(0x240)
90000000000065b0:	2880418c 	ld.w	$r12,$r12,16(0x10)
90000000000065b4:	40001d80 	beqz	$r12,28(0x1c) # 90000000000065d0 <default_check+0x640>
90000000000065b8:	1c000326 	pcaddu12i	$r6,25(0x19)
90000000000065bc:	02f640c6 	addi.d	$r6,$r6,-624(0xd90)
90000000000065c0:	0284bc05 	addi.w	$r5,$r0,303(0x12f)
90000000000065c4:	1c000324 	pcaddu12i	$r4,25(0x19)
90000000000065c8:	02e87084 	addi.d	$r4,$r4,-1508(0xa1c)
90000000000065cc:	5466b400 	bl	26292(0x66b4) # 900000000000cc80 <__panic>
    nr_free = nr_free_store;
90000000000065d0:	1c00436c 	pcaddu12i	$r12,539(0x21b)
90000000000065d4:	28c8618c 	ld.d	$r12,$r12,536(0x218)
90000000000065d8:	28bef2cd 	ld.w	$r13,$r22,-68(0xfbc)
90000000000065dc:	2980418d 	st.w	$r13,$r12,16(0x10)

    free_list = free_list_store;
90000000000065e0:	1c00436e 	pcaddu12i	$r14,539(0x21b)
90000000000065e4:	28c821ce 	ld.d	$r14,$r14,520(0x208)
90000000000065e8:	28fbe2cc 	ld.d	$r12,$r22,-264(0xef8)
90000000000065ec:	28fc02cd 	ld.d	$r13,$r22,-256(0xf00)
90000000000065f0:	29c001cc 	st.d	$r12,$r14,0
90000000000065f4:	29c021cd 	st.d	$r13,$r14,8(0x8)
    free_pages(p0, 5);
90000000000065f8:	02801405 	addi.w	$r5,$r0,5(0x5)
90000000000065fc:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
9000000000006600:	542cfc00 	bl	11516(0x2cfc) # 90000000000092fc <free_pages>

    le = &free_list;
9000000000006604:	1c00436c 	pcaddu12i	$r12,539(0x21b)
9000000000006608:	28c7918c 	ld.d	$r12,$r12,484(0x1e4)
900000000000660c:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    while ((le = list_next(le)) != &free_list) {
9000000000006610:	50003000 	b	48(0x30) # 9000000000006640 <default_check+0x6b0>
        struct Page *p = le2page(le, page_link);
9000000000006614:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000006618:	02ffc18c 	addi.d	$r12,$r12,-16(0xff0)
900000000000661c:	29fe82cc 	st.d	$r12,$r22,-96(0xfa0)
        count --, total -= p->property;
9000000000006620:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000006624:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
9000000000006628:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
900000000000662c:	28bf62cd 	ld.w	$r13,$r22,-40(0xfd8)
9000000000006630:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
9000000000006634:	2880218c 	ld.w	$r12,$r12,8(0x8)
9000000000006638:	001131ac 	sub.w	$r12,$r13,$r12
900000000000663c:	29bf62cc 	st.w	$r12,$r22,-40(0xfd8)
9000000000006640:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000006644:	29fc22cc 	st.d	$r12,$r22,-248(0xf08)
    return listelm->next;
9000000000006648:	28fc22cc 	ld.d	$r12,$r22,-248(0xf08)
900000000000664c:	28c0218c 	ld.d	$r12,$r12,8(0x8)
    while ((le = list_next(le)) != &free_list) {
9000000000006650:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
9000000000006654:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000006658:	1c00436c 	pcaddu12i	$r12,539(0x21b)
900000000000665c:	28c6418c 	ld.d	$r12,$r12,400(0x190)
9000000000006660:	5fffb5ac 	bne	$r13,$r12,-76(0x3ffb4) # 9000000000006614 <default_check+0x684>
    }
    assert(count == 0);
9000000000006664:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000006668:	40001d80 	beqz	$r12,28(0x1c) # 9000000000006684 <default_check+0x6f4>
900000000000666c:	1c000326 	pcaddu12i	$r6,25(0x19)
9000000000006670:	02f3f0c6 	addi.d	$r6,$r6,-772(0xcfc)
9000000000006674:	0284e805 	addi.w	$r5,$r0,314(0x13a)
9000000000006678:	1c000324 	pcaddu12i	$r4,25(0x19)
900000000000667c:	02e5a084 	addi.d	$r4,$r4,-1688(0x968)
9000000000006680:	54660000 	bl	26112(0x6600) # 900000000000cc80 <__panic>
    assert(total == 0);
9000000000006684:	28bf62cc 	ld.w	$r12,$r22,-40(0xfd8)
9000000000006688:	40001d80 	beqz	$r12,28(0x1c) # 90000000000066a4 <default_check+0x714>
900000000000668c:	1c000326 	pcaddu12i	$r6,25(0x19)
9000000000006690:	02f3f0c6 	addi.d	$r6,$r6,-772(0xcfc)
9000000000006694:	0284ec05 	addi.w	$r5,$r0,315(0x13b)
9000000000006698:	1c000324 	pcaddu12i	$r4,25(0x19)
900000000000669c:	02e52084 	addi.d	$r4,$r4,-1720(0x948)
90000000000066a0:	5465e000 	bl	26080(0x65e0) # 900000000000cc80 <__panic>
}
90000000000066a4:	03400000 	andi	$r0,$r0,0x0
90000000000066a8:	28c42061 	ld.d	$r1,$r3,264(0x108)
90000000000066ac:	28c40076 	ld.d	$r22,$r3,256(0x100)
90000000000066b0:	28c3e077 	ld.d	$r23,$r3,248(0xf8)
90000000000066b4:	02c44063 	addi.d	$r3,$r3,272(0x110)
90000000000066b8:	4c000020 	jirl	$r0,$r1,0

90000000000066bc <fence_i>:
static void fence_i(void *va_start, int size) {
90000000000066bc:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000000066c0:	29c0a076 	st.d	$r22,$r3,40(0x28)
90000000000066c4:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000000066c8:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
90000000000066cc:	001500ac 	move	$r12,$r5
90000000000066d0:	0040818c 	slli.w	$r12,$r12,0x0
90000000000066d4:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
90000000000066d8:	38720000 	dbar	0x0
    void *va_end = va_start + size;
90000000000066dc:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
90000000000066e0:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
90000000000066e4:	0010b1ac 	add.d	$r12,$r13,$r12
90000000000066e8:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
90000000000066ec:	50002000 	b	32(0x20) # 900000000000670c <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
90000000000066f0:	06000189 	cacop	0x9,$r12,0
90000000000066f4:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
90000000000066f8:	06000188 	cacop	0x8,$r12,0
90000000000066fc:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
9000000000006700:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000006704:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000006708:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
900000000000670c:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000006710:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000006714:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 90000000000066f0 <fence_i+0x34>
9000000000006718:	38728000 	ibar	0x0
}
900000000000671c:	03400000 	andi	$r0,$r0,0x0
9000000000006720:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000006724:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000006728:	4c000020 	jirl	$r0,$r1,0

900000000000672c <__intr_save>:
{
900000000000672c:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000000006730:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000000006734:	02c04076 	addi.d	$r22,$r3,16(0x10)
	return __csrxchg(0, LISA_CSR_CRMD_IE, LISA_CSR_CRMD);
9000000000006738:	0015000d 	move	$r13,$r0
900000000000673c:	0280100c 	addi.w	$r12,$r0,4(0x4)
9000000000006740:	0400018d 	csrxchg	$r13,$r12,0x0
9000000000006744:	001501ac 	move	$r12,$r13
9000000000006748:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
}
900000000000674c:	00150184 	move	$r4,$r12
9000000000006750:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000000006754:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000000006758:	4c000020 	jirl	$r0,$r1,0

900000000000675c <__intr_restore>:
{
900000000000675c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000006760:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000006764:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000006768:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
	__csrxchg(flags, LISA_CSR_CRMD_IE, LISA_CSR_CRMD);
900000000000676c:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
9000000000006770:	0280100d 	addi.w	$r13,$r0,4(0x4)
9000000000006774:	040001ac 	csrxchg	$r12,$r13,0x0
}
9000000000006778:	03400000 	andi	$r0,$r0,0x0
900000000000677c:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000006780:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000006784:	4c000020 	jirl	$r0,$r1,0

9000000000006788 <page2ppn>:
page2ppn(struct Page *page) {
9000000000006788:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000678c:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000006790:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000006794:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    return page - pages;
9000000000006798:	1c00436c 	pcaddu12i	$r12,539(0x21b)
900000000000679c:	28c1c18c 	ld.d	$r12,$r12,112(0x70)
90000000000067a0:	28c0018c 	ld.d	$r12,$r12,0
90000000000067a4:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
90000000000067a8:	0011b1ac 	sub.d	$r12,$r13,$r12
90000000000067ac:	0049118d 	srai.d	$r13,$r12,0x4
90000000000067b0:	1555554c 	lu12i.w	$r12,-349526(0xaaaaa)
90000000000067b4:	03aaad8c 	ori	$r12,$r12,0xaab
90000000000067b8:	1755554c 	lu32i.d	$r12,-349526(0xaaaaa)
90000000000067bc:	032aa98c 	lu52i.d	$r12,$r12,-1366(0xaaa)
90000000000067c0:	001db1ac 	mul.d	$r12,$r13,$r12
}
90000000000067c4:	00150184 	move	$r4,$r12
90000000000067c8:	28c06076 	ld.d	$r22,$r3,24(0x18)
90000000000067cc:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000000067d0:	4c000020 	jirl	$r0,$r1,0

90000000000067d4 <page2pa>:
page2pa(struct Page *page) {
90000000000067d4:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000000067d8:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000000067dc:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000000067e0:	02c08076 	addi.d	$r22,$r3,32(0x20)
90000000000067e4:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    return KERNBASE + (page2ppn(page) << PGSHIFT);
90000000000067e8:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
90000000000067ec:	57ff9fff 	bl	-100(0xfffff9c) # 9000000000006788 <page2ppn>
90000000000067f0:	0015008c 	move	$r12,$r4
90000000000067f4:	0041318d 	slli.d	$r13,$r12,0xc
90000000000067f8:	0324000c 	lu52i.d	$r12,$r0,-1792(0x900)
90000000000067fc:	0010b1ac 	add.d	$r12,$r13,$r12
}
9000000000006800:	00150184 	move	$r4,$r12
9000000000006804:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000006808:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000000680c:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000006810:	4c000020 	jirl	$r0,$r1,0

9000000000006814 <pa2page>:
pa2page(uintptr_t pa) {
9000000000006814:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000006818:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000000681c:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000006820:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000006824:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    if (PPN(pa) >= npage) {
9000000000006828:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000682c:	031c000c 	lu52i.d	$r12,$r0,1792(0x700)
9000000000006830:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000006834:	0045318d 	srli.d	$r13,$r12,0xc
9000000000006838:	1c00436c 	pcaddu12i	$r12,539(0x21b)
900000000000683c:	28fc418c 	ld.d	$r12,$r12,-240(0xf10)
9000000000006840:	28c0018c 	ld.d	$r12,$r12,0
9000000000006844:	68001dac 	bltu	$r13,$r12,28(0x1c) # 9000000000006860 <pa2page+0x4c>
        panic("pa2page called with invalid pa");
9000000000006848:	1c000326 	pcaddu12i	$r6,25(0x19)
900000000000684c:	02eec0c6 	addi.d	$r6,$r6,-1104(0xbb0)
9000000000006850:	02819c05 	addi.w	$r5,$r0,103(0x67)
9000000000006854:	1c000324 	pcaddu12i	$r4,25(0x19)
9000000000006858:	02ef1084 	addi.d	$r4,$r4,-1084(0xbc4)
900000000000685c:	54642400 	bl	25636(0x6424) # 900000000000cc80 <__panic>
    return &pages[PPN(pa)];
9000000000006860:	1c00436c 	pcaddu12i	$r12,539(0x21b)
9000000000006864:	28fea18c 	ld.d	$r12,$r12,-88(0xfa8)
9000000000006868:	28c0018d 	ld.d	$r13,$r12,0
900000000000686c:	28ffa2ce 	ld.d	$r14,$r22,-24(0xfe8)
9000000000006870:	031c000c 	lu52i.d	$r12,$r0,1792(0x700)
9000000000006874:	0010b1cc 	add.d	$r12,$r14,$r12
9000000000006878:	0045318e 	srli.d	$r14,$r12,0xc
900000000000687c:	0280c00c 	addi.w	$r12,$r0,48(0x30)
9000000000006880:	001db1cc 	mul.d	$r12,$r14,$r12
9000000000006884:	0010b1ac 	add.d	$r12,$r13,$r12
}
9000000000006888:	00150184 	move	$r4,$r12
900000000000688c:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000006890:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000006894:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000006898:	4c000020 	jirl	$r0,$r1,0

900000000000689c <page2kva>:
page2kva(struct Page *page) {
900000000000689c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000000068a0:	29c0a061 	st.d	$r1,$r3,40(0x28)
90000000000068a4:	29c08076 	st.d	$r22,$r3,32(0x20)
90000000000068a8:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000000068ac:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    return KADDR(page2pa(page));
90000000000068b0:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
90000000000068b4:	57ff23ff 	bl	-224(0xfffff20) # 90000000000067d4 <page2pa>
90000000000068b8:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
90000000000068bc:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
90000000000068c0:	031c000c 	lu52i.d	$r12,$r0,1792(0x700)
90000000000068c4:	0010b1ac 	add.d	$r12,$r13,$r12
90000000000068c8:	0045318c 	srli.d	$r12,$r12,0xc
90000000000068cc:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
90000000000068d0:	1c00436c 	pcaddu12i	$r12,539(0x21b)
90000000000068d4:	28f9e18c 	ld.d	$r12,$r12,-392(0xe78)
90000000000068d8:	28c0018c 	ld.d	$r12,$r12,0
90000000000068dc:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
90000000000068e0:	680021ac 	bltu	$r13,$r12,32(0x20) # 9000000000006900 <page2kva+0x64>
90000000000068e4:	28ffa2c7 	ld.d	$r7,$r22,-24(0xfe8)
90000000000068e8:	1c000326 	pcaddu12i	$r6,25(0x19)
90000000000068ec:	02ed00c6 	addi.d	$r6,$r6,-1216(0xb40)
90000000000068f0:	0281b805 	addi.w	$r5,$r0,110(0x6e)
90000000000068f4:	1c000324 	pcaddu12i	$r4,25(0x19)
90000000000068f8:	02ec9084 	addi.d	$r4,$r4,-1244(0xb24)
90000000000068fc:	54638400 	bl	25476(0x6384) # 900000000000cc80 <__panic>
9000000000006900:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
}
9000000000006904:	00150184 	move	$r4,$r12
9000000000006908:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000000690c:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000006910:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000006914:	4c000020 	jirl	$r0,$r1,0

9000000000006918 <kva2page>:
kva2page(void *kva) {
9000000000006918:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000691c:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000006920:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000006924:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000006928:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    return pa2page(PADDR(kva));
900000000000692c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000006930:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000006934:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000006938:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
900000000000693c:	0323fd8c 	lu52i.d	$r12,$r12,-1793(0x8ff)
9000000000006940:	6800218d 	bltu	$r12,$r13,32(0x20) # 9000000000006960 <kva2page+0x48>
9000000000006944:	28ffa2c7 	ld.d	$r7,$r22,-24(0xfe8)
9000000000006948:	1c000326 	pcaddu12i	$r6,25(0x19)
900000000000694c:	02ec20c6 	addi.d	$r6,$r6,-1272(0xb08)
9000000000006950:	0281cc05 	addi.w	$r5,$r0,115(0x73)
9000000000006954:	1c000324 	pcaddu12i	$r4,25(0x19)
9000000000006958:	02eb1084 	addi.d	$r4,$r4,-1340(0xac4)
900000000000695c:	54632400 	bl	25380(0x6324) # 900000000000cc80 <__panic>
9000000000006960:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000006964:	00150184 	move	$r4,$r12
9000000000006968:	57feafff 	bl	-340(0xffffeac) # 9000000000006814 <pa2page>
900000000000696c:	0015008c 	move	$r12,$r4
}
9000000000006970:	00150184 	move	$r4,$r12
9000000000006974:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000006978:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000000697c:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000006980:	4c000020 	jirl	$r0,$r1,0

9000000000006984 <slab_init>:

#define ALIGN_SHIFT 4

//slab_init - call init_kmem_cache function to reset the slab_cache array
static void
slab_init(void) {
9000000000006984:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000006988:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000000698c:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000006990:	02c08076 	addi.d	$r22,$r3,32(0x20)
    size_t i;
    //the align bit for obj in slab. 2^n could be better for performance
    //size_t align = 16;
    for (i = 0; i < SLAB_CACHE_NUM; i ++) {
9000000000006994:	29ffa2c0 	st.d	$r0,$r22,-24(0xfe8)
9000000000006998:	50004800 	b	72(0x48) # 90000000000069e0 <slab_init+0x5c>
        init_kmem_cache(slab_cache + i, 1 << (i + MIN_SIZE_ORDER));
900000000000699c:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
90000000000069a0:	0281600c 	addi.w	$r12,$r0,88(0x58)
90000000000069a4:	001db1ad 	mul.d	$r13,$r13,$r12
90000000000069a8:	1c00436c 	pcaddu12i	$r12,539(0x21b)
90000000000069ac:	02d7e18c 	addi.d	$r12,$r12,1528(0x5f8)
90000000000069b0:	0010b1ad 	add.d	$r13,$r13,$r12
90000000000069b4:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
90000000000069b8:	0280158c 	addi.w	$r12,$r12,5(0x5)
90000000000069bc:	0040818e 	slli.w	$r14,$r12,0x0
90000000000069c0:	0280040c 	addi.w	$r12,$r0,1(0x1)
90000000000069c4:	0017398c 	sll.w	$r12,$r12,$r14
90000000000069c8:	00150185 	move	$r5,$r12
90000000000069cc:	001501a4 	move	$r4,$r13
90000000000069d0:	54057c00 	bl	1404(0x57c) # 9000000000006f4c <init_kmem_cache>
    for (i = 0; i < SLAB_CACHE_NUM; i ++) {
90000000000069d4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000069d8:	02c0058c 	addi.d	$r12,$r12,1(0x1)
90000000000069dc:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
90000000000069e0:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
90000000000069e4:	0280300c 	addi.w	$r12,$r0,12(0xc)
90000000000069e8:	6fffb58d 	bgeu	$r12,$r13,-76(0x3ffb4) # 900000000000699c <slab_init+0x18>
    }
    check_slab();
90000000000069ec:	54124c00 	bl	4684(0x124c) # 9000000000007c38 <check_slab>
}
90000000000069f0:	03400000 	andi	$r0,$r0,0x0
90000000000069f4:	28c06061 	ld.d	$r1,$r3,24(0x18)
90000000000069f8:	28c04076 	ld.d	$r22,$r3,16(0x10)
90000000000069fc:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000006a00:	4c000020 	jirl	$r0,$r1,0

9000000000006a04 <kmalloc_init>:

inline void 
kmalloc_init(void) {
9000000000006a04:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000000006a08:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000000006a0c:	29c00076 	st.d	$r22,$r3,0
9000000000006a10:	02c04076 	addi.d	$r22,$r3,16(0x10)
	slab_init();
9000000000006a14:	57ff73ff 	bl	-144(0xfffff70) # 9000000000006984 <slab_init>
	kprintf("kmalloc_init() succeeded!\n");
9000000000006a18:	1c000324 	pcaddu12i	$r4,25(0x19)
9000000000006a1c:	02e98084 	addi.d	$r4,$r4,-1440(0xa60)
9000000000006a20:	57d3ffff 	bl	-11268(0xfffd3fc) # 9000000000003e1c <kprintf>
}
9000000000006a24:	03400000 	andi	$r0,$r0,0x0
9000000000006a28:	28c02061 	ld.d	$r1,$r3,8(0x8)
9000000000006a2c:	28c00076 	ld.d	$r22,$r3,0
9000000000006a30:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000000006a34:	4c000020 	jirl	$r0,$r1,0

9000000000006a38 <slab_allocated>:

//slab_allocated - summary the total size of allocated objs
static size_t
slab_allocated(void) {
9000000000006a38:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
9000000000006a3c:	29c16061 	st.d	$r1,$r3,88(0x58)
9000000000006a40:	29c14076 	st.d	$r22,$r3,80(0x50)
9000000000006a44:	02c18076 	addi.d	$r22,$r3,96(0x60)
    size_t total = 0;
9000000000006a48:	29ffa2c0 	st.d	$r0,$r22,-24(0xfe8)
    int i;
    bool intr_flag;
    local_intr_save(intr_flag);
9000000000006a4c:	57fce3ff 	bl	-800(0xffffce0) # 900000000000672c <__intr_save>
9000000000006a50:	0015008c 	move	$r12,$r4
9000000000006a54:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
    {
        for (i = 0; i < SLAB_CACHE_NUM; i ++) {
9000000000006a58:	29bf92c0 	st.w	$r0,$r22,-28(0xfe4)
9000000000006a5c:	5000e000 	b	224(0xe0) # 9000000000006b3c <slab_allocated+0x104>
            kmem_cache_t *cachep = slab_cache + i;
9000000000006a60:	28bf92cd 	ld.w	$r13,$r22,-28(0xfe4)
9000000000006a64:	0281600c 	addi.w	$r12,$r0,88(0x58)
9000000000006a68:	001db1ad 	mul.d	$r13,$r13,$r12
9000000000006a6c:	1c00436c 	pcaddu12i	$r12,539(0x21b)
9000000000006a70:	02d4d18c 	addi.d	$r12,$r12,1332(0x534)
9000000000006a74:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000006a78:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
            list_entry_t *list, *le;
            list = le = &(cachep->slabs_full);
9000000000006a7c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000006a80:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
9000000000006a84:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000006a88:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
            while ((le = list_next(le)) != list) {
9000000000006a8c:	50002400 	b	36(0x24) # 9000000000006ab0 <slab_allocated+0x78>
                total += cachep->num * cachep->objsize;
9000000000006a90:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000006a94:	28c0c18d 	ld.d	$r13,$r12,48(0x30)
9000000000006a98:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000006a9c:	28c0818c 	ld.d	$r12,$r12,32(0x20)
9000000000006aa0:	001db1ac 	mul.d	$r12,$r13,$r12
9000000000006aa4:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000006aa8:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000006aac:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000006ab0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000006ab4:	29fec2cc 	st.d	$r12,$r22,-80(0xfb0)
9000000000006ab8:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
9000000000006abc:	28c0218c 	ld.d	$r12,$r12,8(0x8)
            while ((le = list_next(le)) != list) {
9000000000006ac0:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
9000000000006ac4:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000006ac8:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000006acc:	5fffc5ac 	bne	$r13,$r12,-60(0x3ffc4) # 9000000000006a90 <slab_allocated+0x58>
            }
            list = le = &(cachep->slabs_notfull);
9000000000006ad0:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000006ad4:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000006ad8:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
9000000000006adc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000006ae0:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
            while ((le = list_next(le)) != list) {
9000000000006ae4:	50002c00 	b	44(0x2c) # 9000000000006b10 <slab_allocated+0xd8>
                slab_t *slabp = le2slab(le, slab_link);
9000000000006ae8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000006aec:	29fee2cc 	st.d	$r12,$r22,-72(0xfb8)
                total += slabp->inuse * cachep->objsize;
9000000000006af0:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000006af4:	28c0618d 	ld.d	$r13,$r12,24(0x18)
9000000000006af8:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000006afc:	28c0818c 	ld.d	$r12,$r12,32(0x20)
9000000000006b00:	001db1ac 	mul.d	$r12,$r13,$r12
9000000000006b04:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000006b08:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000006b0c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000006b10:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000006b14:	29fea2cc 	st.d	$r12,$r22,-88(0xfa8)
9000000000006b18:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
9000000000006b1c:	28c0218c 	ld.d	$r12,$r12,8(0x8)
            while ((le = list_next(le)) != list) {
9000000000006b20:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
9000000000006b24:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000006b28:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000006b2c:	5fffbdac 	bne	$r13,$r12,-68(0x3ffbc) # 9000000000006ae8 <slab_allocated+0xb0>
        for (i = 0; i < SLAB_CACHE_NUM; i ++) {
9000000000006b30:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000006b34:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000006b38:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
9000000000006b3c:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000006b40:	0015018d 	move	$r13,$r12
9000000000006b44:	0280300c 	addi.w	$r12,$r0,12(0xc)
9000000000006b48:	67ff198d 	bge	$r12,$r13,-232(0x3ff18) # 9000000000006a60 <slab_allocated+0x28>
            }
        }
    }
    local_intr_restore(intr_flag);
9000000000006b4c:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000006b50:	00150184 	move	$r4,$r12
9000000000006b54:	57fc0bff 	bl	-1016(0xffffc08) # 900000000000675c <__intr_restore>
    return total;
9000000000006b58:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
}
9000000000006b5c:	00150184 	move	$r4,$r12
9000000000006b60:	28c16061 	ld.d	$r1,$r3,88(0x58)
9000000000006b64:	28c14076 	ld.d	$r22,$r3,80(0x50)
9000000000006b68:	02c18063 	addi.d	$r3,$r3,96(0x60)
9000000000006b6c:	4c000020 	jirl	$r0,$r1,0

9000000000006b70 <kallocated>:

inline size_t
kallocated(void) {
9000000000006b70:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000000006b74:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000000006b78:	29c00076 	st.d	$r22,$r3,0
9000000000006b7c:	02c04076 	addi.d	$r22,$r3,16(0x10)
   return slab_allocated();
9000000000006b80:	57febbff 	bl	-328(0xffffeb8) # 9000000000006a38 <slab_allocated>
9000000000006b84:	0015008c 	move	$r12,$r4
}
9000000000006b88:	00150184 	move	$r4,$r12
9000000000006b8c:	28c02061 	ld.d	$r1,$r3,8(0x8)
9000000000006b90:	28c00076 	ld.d	$r22,$r3,0
9000000000006b94:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000000006b98:	4c000020 	jirl	$r0,$r1,0

9000000000006b9c <slab_mgmt_size>:

// slab_mgmt_size - get the size of slab control area (slab_t+num*kmem_bufctl_t)
static size_t
slab_mgmt_size(size_t num) {
9000000000006b9c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000006ba0:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000006ba4:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000006ba8:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    return ROUNDUP_2N(sizeof(slab_t) + num * sizeof(kmem_bufctl_t), ALIGN_SHIFT);
9000000000006bac:	0280100c 	addi.w	$r12,$r0,4(0x4)
9000000000006bb0:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000006bb4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000006bb8:	02c0198c 	addi.d	$r12,$r12,6(0x6)
9000000000006bbc:	00410d8c 	slli.d	$r12,$r12,0x3
9000000000006bc0:	28bfa2cd 	ld.w	$r13,$r22,-24(0xfe8)
9000000000006bc4:	004081ae 	slli.w	$r14,$r13,0x0
9000000000006bc8:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000006bcc:	001739ad 	sll.w	$r13,$r13,$r14
9000000000006bd0:	0010b58c 	add.d	$r12,$r12,$r13
9000000000006bd4:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
9000000000006bd8:	28bfa2cd 	ld.w	$r13,$r22,-24(0xfe8)
9000000000006bdc:	004081ad 	slli.w	$r13,$r13,0x0
9000000000006be0:	0019358c 	srl.d	$r12,$r12,$r13
9000000000006be4:	28bfa2cd 	ld.w	$r13,$r22,-24(0xfe8)
9000000000006be8:	004081ad 	slli.w	$r13,$r13,0x0
9000000000006bec:	0018b58c 	sll.d	$r12,$r12,$r13
}
9000000000006bf0:	00150184 	move	$r4,$r12
9000000000006bf4:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000006bf8:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000006bfc:	4c000020 	jirl	$r0,$r1,0

9000000000006c00 <cache_estimate>:
  {113, 59, 30, 15},
};

// cacahe_estimate - estimate the number of objs in a slab
static void
cache_estimate(size_t order, size_t objsize_shift, bool off_slab, size_t *remainder, size_t *num) {
9000000000006c00:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
9000000000006c04:	29c16061 	st.d	$r1,$r3,88(0x58)
9000000000006c08:	29c14076 	st.d	$r22,$r3,80(0x50)
9000000000006c0c:	02c18076 	addi.d	$r22,$r3,96(0x60)
9000000000006c10:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
9000000000006c14:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
9000000000006c18:	001500cc 	move	$r12,$r6
9000000000006c1c:	29fec2c7 	st.d	$r7,$r22,-80(0xfb0)
9000000000006c20:	29fea2c8 	st.d	$r8,$r22,-88(0xfa8)
9000000000006c24:	0040818c 	slli.w	$r12,$r12,0x0
9000000000006c28:	29bef2cc 	st.w	$r12,$r22,-68(0xfbc)
    size_t nr_objs, mgmt_size;
    size_t slab_size = (PGSIZE << order);
9000000000006c2c:	28bf22cc 	ld.w	$r12,$r22,-56(0xfc8)
9000000000006c30:	0040818d 	slli.w	$r13,$r12,0x0
9000000000006c34:	1400002c 	lu12i.w	$r12,1(0x1)
9000000000006c38:	0017358c 	sll.w	$r12,$r12,$r13
9000000000006c3c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    size_t objsize = 1<<objsize_shift;
9000000000006c40:	28bf02cc 	ld.w	$r12,$r22,-64(0xfc0)
9000000000006c44:	0040818d 	slli.w	$r13,$r12,0x0
9000000000006c48:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000006c4c:	0017358c 	sll.w	$r12,$r12,$r13
9000000000006c50:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)

    if (off_slab) {
9000000000006c54:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
9000000000006c58:	40003d80 	beqz	$r12,60(0x3c) # 9000000000006c94 <cache_estimate+0x94>
        mgmt_size = 0;
9000000000006c5c:	29ff82c0 	st.d	$r0,$r22,-32(0xfe0)
        nr_objs = slab_size >> objsize_shift;
9000000000006c60:	28bf02cc 	ld.w	$r12,$r22,-64(0xfc0)
9000000000006c64:	0040818d 	slli.w	$r13,$r12,0x0
9000000000006c68:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000006c6c:	0019358c 	srl.d	$r12,$r12,$r13
9000000000006c70:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
        if (nr_objs > SLAB_LIMIT) {
9000000000006c74:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000006c78:	02bff80c 	addi.w	$r12,$r0,-2(0xffe)
9000000000006c7c:	1600000c 	lu32i.d	$r12,0
9000000000006c80:	6c009d8d 	bgeu	$r12,$r13,156(0x9c) # 9000000000006d1c <cache_estimate+0x11c>
            nr_objs = SLAB_LIMIT;
9000000000006c84:	02bff80c 	addi.w	$r12,$r0,-2(0xffe)
9000000000006c88:	1600000c 	lu32i.d	$r12,0
9000000000006c8c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000006c90:	50008c00 	b	140(0x8c) # 9000000000006d1c <cache_estimate+0x11c>
    }
    else {
        /* no div! precomputed */
        //panic("no div, precompute?");
        //nr_objs = (slab_size - sizeof(slab_t)) / (objsize + sizeof(kmem_bufctl_t));
        nr_objs = __slab_div_table[order][objsize_shift - 5];
9000000000006c94:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000006c98:	02ffed8c 	addi.d	$r12,$r12,-5(0xffb)
9000000000006c9c:	1c0003ad 	pcaddu12i	$r13,29(0x1d)
9000000000006ca0:	02ce11ad 	addi.d	$r13,$r13,900(0x384)
9000000000006ca4:	28ff22ce 	ld.d	$r14,$r22,-56(0xfc8)
9000000000006ca8:	00410dce 	slli.d	$r14,$r14,0x3
9000000000006cac:	0010b1cc 	add.d	$r12,$r14,$r12
9000000000006cb0:	0041098c 	slli.d	$r12,$r12,0x2
9000000000006cb4:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000006cb8:	2880018c 	ld.w	$r12,$r12,0
9000000000006cbc:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
        while (slab_mgmt_size(nr_objs) + nr_objs * objsize > slab_size) {
9000000000006cc0:	50001000 	b	16(0x10) # 9000000000006cd0 <cache_estimate+0xd0>
            nr_objs --;
9000000000006cc4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000006cc8:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
9000000000006ccc:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
        while (slab_mgmt_size(nr_objs) + nr_objs * objsize > slab_size) {
9000000000006cd0:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000006cd4:	57fecbff 	bl	-312(0xffffec8) # 9000000000006b9c <slab_mgmt_size>
9000000000006cd8:	0015008e 	move	$r14,$r4
9000000000006cdc:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000006ce0:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000006ce4:	001db1ac 	mul.d	$r12,$r13,$r12
9000000000006ce8:	0010b1cc 	add.d	$r12,$r14,$r12
9000000000006cec:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000006cf0:	6bffd5ac 	bltu	$r13,$r12,-44(0x3ffd4) # 9000000000006cc4 <cache_estimate+0xc4>
        }
        if (nr_objs > SLAB_LIMIT) {
9000000000006cf4:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000006cf8:	02bff80c 	addi.w	$r12,$r0,-2(0xffe)
9000000000006cfc:	1600000c 	lu32i.d	$r12,0
9000000000006d00:	6c00118d 	bgeu	$r12,$r13,16(0x10) # 9000000000006d10 <cache_estimate+0x110>
            nr_objs = SLAB_LIMIT;
9000000000006d04:	02bff80c 	addi.w	$r12,$r0,-2(0xffe)
9000000000006d08:	1600000c 	lu32i.d	$r12,0
9000000000006d0c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
        }
        mgmt_size = slab_mgmt_size(nr_objs);
9000000000006d10:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000006d14:	57fe8bff 	bl	-376(0xffffe88) # 9000000000006b9c <slab_mgmt_size>
9000000000006d18:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)
    }
    *num = nr_objs;
9000000000006d1c:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
9000000000006d20:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000006d24:	29c0018d 	st.d	$r13,$r12,0
    *remainder = slab_size - nr_objs * objsize - mgmt_size;
9000000000006d28:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000006d2c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000006d30:	001db1ac 	mul.d	$r12,$r13,$r12
9000000000006d34:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000006d38:	0011b1ad 	sub.d	$r13,$r13,$r12
9000000000006d3c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000006d40:	0011b1ad 	sub.d	$r13,$r13,$r12
9000000000006d44:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
9000000000006d48:	29c0018d 	st.d	$r13,$r12,0
}
9000000000006d4c:	03400000 	andi	$r0,$r0,0x0
9000000000006d50:	28c16061 	ld.d	$r1,$r3,88(0x58)
9000000000006d54:	28c14076 	ld.d	$r22,$r3,80(0x50)
9000000000006d58:	02c18063 	addi.d	$r3,$r3,96(0x60)
9000000000006d5c:	4c000020 	jirl	$r0,$r1,0

9000000000006d60 <calculate_slab_order>:
//   objsize:   the size of obj
//   align:     align bit for objs
//   off_slab:  the control part of slab in slab or not
//   left_over: the size of can not be used area in slab
static void
calculate_slab_order(kmem_cache_t *cachep, size_t objsize_shift, bool off_slab, size_t *left_over) {
9000000000006d60:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
9000000000006d64:	29c16061 	st.d	$r1,$r3,88(0x58)
9000000000006d68:	29c14076 	st.d	$r22,$r3,80(0x50)
9000000000006d6c:	02c18076 	addi.d	$r22,$r3,96(0x60)
9000000000006d70:	29fee2c4 	st.d	$r4,$r22,-72(0xfb8)
9000000000006d74:	29fec2c5 	st.d	$r5,$r22,-80(0xfb0)
9000000000006d78:	001500cc 	move	$r12,$r6
9000000000006d7c:	29fe82c7 	st.d	$r7,$r22,-96(0xfa0)
9000000000006d80:	0040818c 	slli.w	$r12,$r12,0x0
9000000000006d84:	29beb2cc 	st.w	$r12,$r22,-84(0xfac)
    size_t order;
    size_t objsize = 1 << objsize_shift;
9000000000006d88:	28bec2cc 	ld.w	$r12,$r22,-80(0xfb0)
9000000000006d8c:	0040818d 	slli.w	$r13,$r12,0x0
9000000000006d90:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000006d94:	0017358c 	sll.w	$r12,$r12,$r13
9000000000006d98:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    for (order = 0; order <= KMALLOC_MAX_ORDER; order ++) {
9000000000006d9c:	29ffa2c0 	st.d	$r0,$r22,-24(0xfe8)
9000000000006da0:	5000d800 	b	216(0xd8) # 9000000000006e78 <calculate_slab_order+0x118>
        size_t num, remainder;
        cache_estimate(order, objsize_shift, off_slab, &remainder, &num);
9000000000006da4:	02ff42ce 	addi.d	$r14,$r22,-48(0xfd0)
9000000000006da8:	02ff22cd 	addi.d	$r13,$r22,-56(0xfc8)
9000000000006dac:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
9000000000006db0:	001501c8 	move	$r8,$r14
9000000000006db4:	001501a7 	move	$r7,$r13
9000000000006db8:	00150186 	move	$r6,$r12
9000000000006dbc:	28fec2c5 	ld.d	$r5,$r22,-80(0xfb0)
9000000000006dc0:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000006dc4:	57fe3fff 	bl	-452(0xffffe3c) # 9000000000006c00 <cache_estimate>
        if (num != 0) {
9000000000006dc8:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000006dcc:	4000a180 	beqz	$r12,160(0xa0) # 9000000000006e6c <calculate_slab_order+0x10c>
            if (off_slab) {
9000000000006dd0:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
9000000000006dd4:	40004d80 	beqz	$r12,76(0x4c) # 9000000000006e20 <calculate_slab_order+0xc0>
                size_t off_slab_limit = objsize - sizeof(slab_t);
9000000000006dd8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000006ddc:	02ff418c 	addi.d	$r12,$r12,-48(0xfd0)
9000000000006de0:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
                /* sizeof(kmem_cache_t) == 4 */
                off_slab_limit /= sizeof(kmem_bufctl_t);
9000000000006de4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000006de8:	00450d8c 	srli.d	$r12,$r12,0x3
9000000000006dec:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
                if (num > off_slab_limit) {
9000000000006df0:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000006df4:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000006df8:	6c0029ac 	bgeu	$r13,$r12,40(0x28) # 9000000000006e20 <calculate_slab_order+0xc0>
                    panic("off_slab: objsize = %d, num = %d.", objsize, num);
9000000000006dfc:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000006e00:	00150188 	move	$r8,$r12
9000000000006e04:	28ff82c7 	ld.d	$r7,$r22,-32(0xfe0)
9000000000006e08:	1c000306 	pcaddu12i	$r6,24(0x18)
9000000000006e0c:	02da40c6 	addi.d	$r6,$r6,1680(0x690)
9000000000006e10:	02838005 	addi.w	$r5,$r0,224(0xe0)
9000000000006e14:	1c000304 	pcaddu12i	$r4,24(0x18)
9000000000006e18:	02dab084 	addi.d	$r4,$r4,1708(0x6ac)
9000000000006e1c:	545e6400 	bl	24164(0x5e64) # 900000000000cc80 <__panic>
                }
            }
            if (remainder * 8 <= (PGSIZE << order)) {
9000000000006e20:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000006e24:	00410d8c 	slli.d	$r12,$r12,0x3
9000000000006e28:	28bfa2cd 	ld.w	$r13,$r22,-24(0xfe8)
9000000000006e2c:	004081ae 	slli.w	$r14,$r13,0x0
9000000000006e30:	1400002d 	lu12i.w	$r13,1(0x1)
9000000000006e34:	001739ad 	sll.w	$r13,$r13,$r14
9000000000006e38:	680035ac 	bltu	$r13,$r12,52(0x34) # 9000000000006e6c <calculate_slab_order+0x10c>
                cachep->num = num;
9000000000006e3c:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000006e40:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000006e44:	29c0c18d 	st.d	$r13,$r12,48(0x30)
                cachep->page_order = order;
9000000000006e48:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000006e4c:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000006e50:	29c1218d 	st.d	$r13,$r12,72(0x48)
                if (left_over != NULL) {
9000000000006e54:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
9000000000006e58:	40004580 	beqz	$r12,68(0x44) # 9000000000006e9c <calculate_slab_order+0x13c>
                    *left_over = remainder;
9000000000006e5c:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
9000000000006e60:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
9000000000006e64:	29c0018d 	st.d	$r13,$r12,0
                }
                return ;
9000000000006e68:	50003400 	b	52(0x34) # 9000000000006e9c <calculate_slab_order+0x13c>
    for (order = 0; order <= KMALLOC_MAX_ORDER; order ++) {
9000000000006e6c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000006e70:	02c0058c 	addi.d	$r12,$r12,1(0x1)
9000000000006e74:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000006e78:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000006e7c:	0280280c 	addi.w	$r12,$r0,10(0xa)
9000000000006e80:	6fff258d 	bgeu	$r12,$r13,-220(0x3ff24) # 9000000000006da4 <calculate_slab_order+0x44>
            }
        }
    }
    panic("calculate_slab_over: failed.");
9000000000006e84:	1c000306 	pcaddu12i	$r6,24(0x18)
9000000000006e88:	02d950c6 	addi.d	$r6,$r6,1620(0x654)
9000000000006e8c:	0283b405 	addi.w	$r5,$r0,237(0xed)
9000000000006e90:	1c000304 	pcaddu12i	$r4,24(0x18)
9000000000006e94:	02d8c084 	addi.d	$r4,$r4,1584(0x630)
9000000000006e98:	545de800 	bl	24040(0x5de8) # 900000000000cc80 <__panic>
                return ;
9000000000006e9c:	03400000 	andi	$r0,$r0,0x0
}
9000000000006ea0:	28c16061 	ld.d	$r1,$r3,88(0x58)
9000000000006ea4:	28c14076 	ld.d	$r22,$r3,80(0x50)
9000000000006ea8:	02c18063 	addi.d	$r3,$r3,96(0x60)
9000000000006eac:	4c000020 	jirl	$r0,$r1,0

9000000000006eb0 <getorder>:

// getorder - find order, should satisfy n <= minest 2^order
static inline size_t
getorder(size_t n) {
9000000000006eb0:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000006eb4:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000006eb8:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000006ebc:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000006ec0:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    size_t order = MIN_SIZE_ORDER, order_size = (1 << order);
9000000000006ec4:	0280140c 	addi.w	$r12,$r0,5(0x5)
9000000000006ec8:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000006ecc:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
9000000000006ed0:	0040818d 	slli.w	$r13,$r12,0x0
9000000000006ed4:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000006ed8:	0017358c 	sll.w	$r12,$r12,$r13
9000000000006edc:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    for (; order <= MAX_SIZE_ORDER; order ++, order_size <<= 1) {
9000000000006ee0:	50003000 	b	48(0x30) # 9000000000006f10 <getorder+0x60>
        if (n <= order_size) {
9000000000006ee4:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000006ee8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000006eec:	68000d8d 	bltu	$r12,$r13,12(0xc) # 9000000000006ef8 <getorder+0x48>
            return order;
9000000000006ef0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000006ef4:	50004400 	b	68(0x44) # 9000000000006f38 <getorder+0x88>
    for (; order <= MAX_SIZE_ORDER; order ++, order_size <<= 1) {
9000000000006ef8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000006efc:	02c0058c 	addi.d	$r12,$r12,1(0x1)
9000000000006f00:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000006f04:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000006f08:	0041058c 	slli.d	$r12,$r12,0x1
9000000000006f0c:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000006f10:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000006f14:	0280440c 	addi.w	$r12,$r0,17(0x11)
9000000000006f18:	6fffcd8d 	bgeu	$r12,$r13,-52(0x3ffcc) # 9000000000006ee4 <getorder+0x34>
        }
    }
    panic("getorder failed. %d\n", n);
9000000000006f1c:	28ff62c7 	ld.d	$r7,$r22,-40(0xfd8)
9000000000006f20:	1c000306 	pcaddu12i	$r6,24(0x18)
9000000000006f24:	02d760c6 	addi.d	$r6,$r6,1496(0x5d8)
9000000000006f28:	0283e405 	addi.w	$r5,$r0,249(0xf9)
9000000000006f2c:	1c000304 	pcaddu12i	$r4,24(0x18)
9000000000006f30:	02d65084 	addi.d	$r4,$r4,1428(0x594)
9000000000006f34:	545d4c00 	bl	23884(0x5d4c) # 900000000000cc80 <__panic>
}
9000000000006f38:	00150184 	move	$r4,$r12
9000000000006f3c:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000006f40:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000006f44:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000006f48:	4c000020 	jirl	$r0,$r1,0

9000000000006f4c <init_kmem_cache>:


// init_kmem_cache - initial a slab_cache cachep according to the obj with the size = objsize
static void
init_kmem_cache(kmem_cache_t *cachep, size_t objsize) {
9000000000006f4c:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
9000000000006f50:	29c12061 	st.d	$r1,$r3,72(0x48)
9000000000006f54:	29c10076 	st.d	$r22,$r3,64(0x40)
9000000000006f58:	02c14076 	addi.d	$r22,$r3,80(0x50)
9000000000006f5c:	29fee2c4 	st.d	$r4,$r22,-72(0xfb8)
9000000000006f60:	29fec2c5 	st.d	$r5,$r22,-80(0xfb0)
    list_init(&(cachep->slabs_full));
9000000000006f64:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000006f68:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    elm->prev = elm->next = elm;
9000000000006f6c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000006f70:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000006f74:	29c0218d 	st.d	$r13,$r12,8(0x8)
9000000000006f78:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000006f7c:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000006f80:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000006f84:	29c0018d 	st.d	$r13,$r12,0
    list_init(&(cachep->slabs_notfull));
9000000000006f88:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000006f8c:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000006f90:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
9000000000006f94:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000006f98:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000006f9c:	29c0218d 	st.d	$r13,$r12,8(0x8)
9000000000006fa0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000006fa4:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000006fa8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000006fac:	29c0018d 	st.d	$r13,$r12,0

    objsize = ROUNDUP_2N(objsize, ALIGN_SHIFT);
9000000000006fb0:	0280100c 	addi.w	$r12,$r0,4(0x4)
9000000000006fb4:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000006fb8:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
9000000000006fbc:	0040818d 	slli.w	$r13,$r12,0x0
9000000000006fc0:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000006fc4:	0017358c 	sll.w	$r12,$r12,$r13
9000000000006fc8:	0015018d 	move	$r13,$r12
9000000000006fcc:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
9000000000006fd0:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000006fd4:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
9000000000006fd8:	28bfa2cd 	ld.w	$r13,$r22,-24(0xfe8)
9000000000006fdc:	004081ad 	slli.w	$r13,$r13,0x0
9000000000006fe0:	0019358c 	srl.d	$r12,$r12,$r13
9000000000006fe4:	28bfa2cd 	ld.w	$r13,$r22,-24(0xfe8)
9000000000006fe8:	004081ad 	slli.w	$r13,$r13,0x0
9000000000006fec:	0018b58c 	sll.d	$r12,$r12,$r13
9000000000006ff0:	29fec2cc 	st.d	$r12,$r22,-80(0xfb0)
    cachep->objsize = objsize;
9000000000006ff4:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000006ff8:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
9000000000006ffc:	29c0818d 	st.d	$r13,$r12,32(0x20)
    cachep->off_slab = (objsize >= (PGSIZE >> 3));
9000000000007000:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
9000000000007004:	0248018c 	sltui	$r12,$r12,512(0x200)
9000000000007008:	03c0058c 	xori	$r12,$r12,0x1
900000000000700c:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
9000000000007010:	0015018d 	move	$r13,$r12
9000000000007014:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000007018:	2981018d 	st.w	$r13,$r12,64(0x40)
//    cachep->off_slab = 1;
    cachep->objsize_shift = getorder(objsize);
900000000000701c:	28fec2c4 	ld.d	$r4,$r22,-80(0xfb0)
9000000000007020:	57fe93ff 	bl	-368(0xffffe90) # 9000000000006eb0 <getorder>
9000000000007024:	0015008d 	move	$r13,$r4
9000000000007028:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000702c:	29c0a18d 	st.d	$r13,$r12,40(0x28)

    size_t left_over;
    calculate_slab_order(cachep, cachep->objsize_shift, cachep->off_slab, &left_over);
9000000000007030:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000007034:	28c0a18d 	ld.d	$r13,$r12,40(0x28)
9000000000007038:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000703c:	2881018c 	ld.w	$r12,$r12,64(0x40)
9000000000007040:	02ff22ce 	addi.d	$r14,$r22,-56(0xfc8)
9000000000007044:	001501c7 	move	$r7,$r14
9000000000007048:	00150186 	move	$r6,$r12
900000000000704c:	001501a5 	move	$r5,$r13
9000000000007050:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
9000000000007054:	57fd0fff 	bl	-756(0xffffd0c) # 9000000000006d60 <calculate_slab_order>

    assert(cachep->num > 0);
9000000000007058:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000705c:	28c0c18c 	ld.d	$r12,$r12,48(0x30)
9000000000007060:	44001d80 	bnez	$r12,28(0x1c) # 900000000000707c <init_kmem_cache+0x130>
9000000000007064:	1c000306 	pcaddu12i	$r6,24(0x18)
9000000000007068:	02d2b0c6 	addi.d	$r6,$r6,1196(0x4ac)
900000000000706c:	02843005 	addi.w	$r5,$r0,268(0x10c)
9000000000007070:	1c000304 	pcaddu12i	$r4,24(0x18)
9000000000007074:	02d14084 	addi.d	$r4,$r4,1104(0x450)
9000000000007078:	545c0800 	bl	23560(0x5c08) # 900000000000cc80 <__panic>

    size_t mgmt_size = slab_mgmt_size(cachep->num);
900000000000707c:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000007080:	28c0c18c 	ld.d	$r12,$r12,48(0x30)
9000000000007084:	00150184 	move	$r4,$r12
9000000000007088:	57fb17ff 	bl	-1260(0xffffb14) # 9000000000006b9c <slab_mgmt_size>
900000000000708c:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)

    if (cachep->off_slab && left_over >= mgmt_size) {
9000000000007090:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000007094:	2881018c 	ld.w	$r12,$r12,64(0x40)
9000000000007098:	40001980 	beqz	$r12,24(0x18) # 90000000000070b0 <init_kmem_cache+0x164>
900000000000709c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000070a0:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
90000000000070a4:	68000d8d 	bltu	$r12,$r13,12(0xc) # 90000000000070b0 <init_kmem_cache+0x164>
        cachep->off_slab = 0;
90000000000070a8:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
90000000000070ac:	29810180 	st.w	$r0,$r12,64(0x40)
    }

    if (cachep->off_slab) {
90000000000070b0:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
90000000000070b4:	2881018c 	ld.w	$r12,$r12,64(0x40)
90000000000070b8:	40003d80 	beqz	$r12,60(0x3c) # 90000000000070f4 <init_kmem_cache+0x1a8>
        cachep->offset = 0;
90000000000070bc:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
90000000000070c0:	29c0e180 	st.d	$r0,$r12,56(0x38)
        cachep->slab_cachep = slab_cache + (getorder(mgmt_size) - MIN_SIZE_ORDER);
90000000000070c4:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
90000000000070c8:	57fdebff 	bl	-536(0xffffde8) # 9000000000006eb0 <getorder>
90000000000070cc:	0015008d 	move	$r13,$r4
90000000000070d0:	0281600c 	addi.w	$r12,$r0,88(0x58)
90000000000070d4:	001db1ac 	mul.d	$r12,$r13,$r12
90000000000070d8:	02f9218d 	addi.d	$r13,$r12,-440(0xe48)
90000000000070dc:	1c00436c 	pcaddu12i	$r12,539(0x21b)
90000000000070e0:	02fb118c 	addi.d	$r12,$r12,-316(0xec4)
90000000000070e4:	0010b1ad 	add.d	$r13,$r13,$r12
90000000000070e8:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
90000000000070ec:	29c1418d 	st.d	$r13,$r12,80(0x50)
    }
    else {
        cachep->offset = mgmt_size;
    }
}
90000000000070f0:	50001000 	b	16(0x10) # 9000000000007100 <init_kmem_cache+0x1b4>
        cachep->offset = mgmt_size;
90000000000070f4:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
90000000000070f8:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
90000000000070fc:	29c0e18d 	st.d	$r13,$r12,56(0x38)
}
9000000000007100:	03400000 	andi	$r0,$r0,0x0
9000000000007104:	28c12061 	ld.d	$r1,$r3,72(0x48)
9000000000007108:	28c10076 	ld.d	$r22,$r3,64(0x40)
900000000000710c:	02c14063 	addi.d	$r3,$r3,80(0x50)
9000000000007110:	4c000020 	jirl	$r0,$r1,0

9000000000007114 <kmem_cache_slabmgmt>:
    ((kmem_bufctl_t*)(((slab_t *)(slabp)) + 1))

// kmem_cache_slabmgmt - get the address of a slab according to page
//                     - and initialize the slab according to cachep
static slab_t *
kmem_cache_slabmgmt(kmem_cache_t *cachep, struct Page *page) {
9000000000007114:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000007118:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000000711c:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000007120:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000007124:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000007128:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
    void *objp = page2kva(page);
900000000000712c:	28ff42c4 	ld.d	$r4,$r22,-48(0xfd0)
9000000000007130:	57f76fff 	bl	-2196(0xffff76c) # 900000000000689c <page2kva>
9000000000007134:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)
    slab_t *slabp;
    if (cachep->off_slab) {
9000000000007138:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000713c:	2881018c 	ld.w	$r12,$r12,64(0x40)
9000000000007140:	40002980 	beqz	$r12,40(0x28) # 9000000000007168 <kmem_cache_slabmgmt+0x54>
        if ((slabp = kmem_cache_alloc(cachep->slab_cachep)) == NULL) {
9000000000007144:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000007148:	28c1418c 	ld.d	$r12,$r12,80(0x50)
900000000000714c:	00150184 	move	$r4,$r12
9000000000007150:	54042800 	bl	1064(0x428) # 9000000000007578 <kmem_cache_alloc>
9000000000007154:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
9000000000007158:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000715c:	44001980 	bnez	$r12,24(0x18) # 9000000000007174 <kmem_cache_slabmgmt+0x60>
            return NULL;
9000000000007160:	0015000c 	move	$r12,$r0
9000000000007164:	50004400 	b	68(0x44) # 90000000000071a8 <kmem_cache_slabmgmt+0x94>
        }
    }
    else {
        slabp = page2kva(page);
9000000000007168:	28ff42c4 	ld.d	$r4,$r22,-48(0xfd0)
900000000000716c:	57f733ff 	bl	-2256(0xffff730) # 900000000000689c <page2kva>
9000000000007170:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    }
    slabp->inuse = 0;
9000000000007174:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000007178:	29c06180 	st.d	$r0,$r12,24(0x18)
    slabp->offset = cachep->offset;
900000000000717c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000007180:	28c0e18d 	ld.d	$r13,$r12,56(0x38)
9000000000007184:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000007188:	29c0818d 	st.d	$r13,$r12,32(0x20)
    slabp->s_mem = objp + cachep->offset;
900000000000718c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000007190:	28c0e18c 	ld.d	$r12,$r12,56(0x38)
9000000000007194:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000007198:	0010b1ad 	add.d	$r13,$r13,$r12
900000000000719c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000071a0:	29c0418d 	st.d	$r13,$r12,16(0x10)
    return slabp;
90000000000071a4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
}
90000000000071a8:	00150184 	move	$r4,$r12
90000000000071ac:	28c0a061 	ld.d	$r1,$r3,40(0x28)
90000000000071b0:	28c08076 	ld.d	$r22,$r3,32(0x20)
90000000000071b4:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000000071b8:	4c000020 	jirl	$r0,$r1,0

90000000000071bc <kmem_cache_grow>:
    } while (0)

// kmem_cache_grow - allocate a new slab by calling alloc_pages
//                 - set control area in the new slab
static bool
kmem_cache_grow(kmem_cache_t *cachep) {
90000000000071bc:	02fd4063 	addi.d	$r3,$r3,-176(0xf50)
90000000000071c0:	29c2a061 	st.d	$r1,$r3,168(0xa8)
90000000000071c4:	29c28076 	st.d	$r22,$r3,160(0xa0)
90000000000071c8:	02c2c076 	addi.d	$r22,$r3,176(0xb0)
90000000000071cc:	29fd62c4 	st.d	$r4,$r22,-168(0xf58)
    struct Page *page = alloc_pages(1 << cachep->page_order);
90000000000071d0:	28fd62cc 	ld.d	$r12,$r22,-168(0xf58)
90000000000071d4:	28c1218c 	ld.d	$r12,$r12,72(0x48)
90000000000071d8:	0040818c 	slli.w	$r12,$r12,0x0
90000000000071dc:	0040818d 	slli.w	$r13,$r12,0x0
90000000000071e0:	0280040c 	addi.w	$r12,$r0,1(0x1)
90000000000071e4:	0017358c 	sll.w	$r12,$r12,$r13
90000000000071e8:	00150184 	move	$r4,$r12
90000000000071ec:	5420b000 	bl	8368(0x20b0) # 900000000000929c <alloc_pages>
90000000000071f0:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    if (page == NULL) {
90000000000071f4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000071f8:	40022580 	beqz	$r12,548(0x224) # 900000000000741c <kmem_cache_grow+0x260>
        goto failed;
    }

    slab_t *slabp;
    if ((slabp = kmem_cache_slabmgmt(cachep, page)) == NULL) {
90000000000071fc:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
9000000000007200:	28fd62c4 	ld.d	$r4,$r22,-168(0xf58)
9000000000007204:	57ff13ff 	bl	-240(0xfffff10) # 9000000000007114 <kmem_cache_slabmgmt>
9000000000007208:	29ff42c4 	st.d	$r4,$r22,-48(0xfd0)
900000000000720c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000007210:	4001e180 	beqz	$r12,480(0x1e0) # 90000000000073f0 <kmem_cache_grow+0x234>
        goto oops;
    }

    size_t order_size = (1 << cachep->page_order);
9000000000007214:	28fd62cc 	ld.d	$r12,$r22,-168(0xf58)
9000000000007218:	28c1218c 	ld.d	$r12,$r12,72(0x48)
900000000000721c:	0040818c 	slli.w	$r12,$r12,0x0
9000000000007220:	0040818d 	slli.w	$r13,$r12,0x0
9000000000007224:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000007228:	0017358c 	sll.w	$r12,$r12,$r13
900000000000722c:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    do {
        //setup this page in the free list (see memlayout.h: struct page)???
        SET_PAGE_CACHE(page, cachep);
9000000000007230:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000007234:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
9000000000007238:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000723c:	02c0618c 	addi.d	$r12,$r12,24(0x18)
9000000000007240:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
9000000000007244:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000007248:	28fd62cd 	ld.d	$r13,$r22,-168(0xf58)
900000000000724c:	29c0018d 	st.d	$r13,$r12,0
        SET_PAGE_SLAB(page, slabp);
9000000000007250:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000007254:	29fee2cc 	st.d	$r12,$r22,-72(0xfb8)
9000000000007258:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000725c:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000007260:	29fec2cc 	st.d	$r12,$r22,-80(0xfb0)
9000000000007264:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
9000000000007268:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000000726c:	29c0018d 	st.d	$r13,$r12,0
	//this page is used for slab
        SetPageSlab(page);
9000000000007270:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000007274:	02c0118c 	addi.d	$r12,$r12,4(0x4)
9000000000007278:	0280080d 	addi.w	$r13,$r0,2(0x2)
900000000000727c:	29bea2cd 	st.w	$r13,$r22,-88(0xfa8)
9000000000007280:	29fe82cc 	st.d	$r12,$r22,-96(0xfa0)
  local_intr_save (intr_flag);
9000000000007284:	57f4abff 	bl	-2904(0xffff4a8) # 900000000000672c <__intr_save>
9000000000007288:	0015008c 	move	$r12,$r4
900000000000728c:	29be72cc 	st.w	$r12,$r22,-100(0xf9c)
  *addr |= (1 << nr);
9000000000007290:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
9000000000007294:	2880018d 	ld.w	$r13,$r12,0
9000000000007298:	0280040e 	addi.w	$r14,$r0,1(0x1)
900000000000729c:	28bea2cc 	ld.w	$r12,$r22,-88(0xfa8)
90000000000072a0:	001731cc 	sll.w	$r12,$r14,$r12
90000000000072a4:	001531ac 	or	$r12,$r13,$r12
90000000000072a8:	0015018d 	move	$r13,$r12
90000000000072ac:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
90000000000072b0:	2980018d 	st.w	$r13,$r12,0
  local_intr_restore (intr_flag);
90000000000072b4:	28be72cc 	ld.w	$r12,$r22,-100(0xf9c)
90000000000072b8:	00150184 	move	$r4,$r12
90000000000072bc:	57f4a3ff 	bl	-2912(0xffff4a0) # 900000000000675c <__intr_restore>
        page ++;
90000000000072c0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000072c4:	02c0c18c 	addi.d	$r12,$r12,48(0x30)
90000000000072c8:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    } while (-- order_size);
90000000000072cc:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000072d0:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
90000000000072d4:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
90000000000072d8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000072dc:	47ff559f 	bnez	$r12,-172(0x7fff54) # 9000000000007230 <kmem_cache_grow+0x74>

    int i;
    for (i = 0; i < cachep->num; i ++) {
90000000000072e0:	29bf72c0 	st.w	$r0,$r22,-36(0xfdc)
90000000000072e4:	50003800 	b	56(0x38) # 900000000000731c <kmem_cache_grow+0x160>
        slab_bufctl(slabp)[i] = i + 1;
90000000000072e8:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
90000000000072ec:	0280058c 	addi.w	$r12,$r12,1(0x1)
90000000000072f0:	0015018e 	move	$r14,$r12
90000000000072f4:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
90000000000072f8:	02c0c18d 	addi.d	$r13,$r12,48(0x30)
90000000000072fc:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000007300:	00410d8c 	slli.d	$r12,$r12,0x3
9000000000007304:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000007308:	001501cd 	move	$r13,$r14
900000000000730c:	29c0018d 	st.d	$r13,$r12,0
    for (i = 0; i < cachep->num; i ++) {
9000000000007310:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000007314:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000007318:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
900000000000731c:	28bf72cd 	ld.w	$r13,$r22,-36(0xfdc)
9000000000007320:	28fd62cc 	ld.d	$r12,$r22,-168(0xf58)
9000000000007324:	28c0c18c 	ld.d	$r12,$r12,48(0x30)
9000000000007328:	6bffc1ac 	bltu	$r13,$r12,-64(0x3ffc0) # 90000000000072e8 <kmem_cache_grow+0x12c>
    }
    slab_bufctl(slabp)[cachep->num - 1] = BUFCTL_END;
900000000000732c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000007330:	02c0c18d 	addi.d	$r13,$r12,48(0x30)
9000000000007334:	28fd62cc 	ld.d	$r12,$r22,-168(0xf58)
9000000000007338:	28c0c18c 	ld.d	$r12,$r12,48(0x30)
900000000000733c:	00410d8c 	slli.d	$r12,$r12,0x3
9000000000007340:	02ffe18c 	addi.d	$r12,$r12,-8(0xff8)
9000000000007344:	0010b1ad 	add.d	$r13,$r13,$r12
9000000000007348:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
900000000000734c:	1600000c 	lu32i.d	$r12,0
9000000000007350:	29c001ac 	st.d	$r12,$r13,0
    slabp->free = 0;
9000000000007354:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000007358:	29c0a180 	st.d	$r0,$r12,40(0x28)

    bool intr_flag;
    local_intr_save(intr_flag);
900000000000735c:	57f3d3ff 	bl	-3120(0xffff3d0) # 900000000000672c <__intr_save>
9000000000007360:	0015008c 	move	$r12,$r4
9000000000007364:	29beb2cc 	st.w	$r12,$r22,-84(0xfac)
    {
        list_add(&(cachep->slabs_notfull), &(slabp->slab_link));
9000000000007368:	28fd62cc 	ld.d	$r12,$r22,-168(0xf58)
900000000000736c:	02c0418d 	addi.d	$r13,$r12,16(0x10)
9000000000007370:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000007374:	29fe42cd 	st.d	$r13,$r22,-112(0xf90)
9000000000007378:	29fe22cc 	st.d	$r12,$r22,-120(0xf88)
900000000000737c:	28fe42cc 	ld.d	$r12,$r22,-112(0xf90)
9000000000007380:	29fe02cc 	st.d	$r12,$r22,-128(0xf80)
9000000000007384:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
9000000000007388:	29fde2cc 	st.d	$r12,$r22,-136(0xf78)
    __list_add(elm, listelm, listelm->next);
900000000000738c:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
9000000000007390:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000007394:	28fde2cd 	ld.d	$r13,$r22,-136(0xf78)
9000000000007398:	29fdc2cd 	st.d	$r13,$r22,-144(0xf70)
900000000000739c:	28fe02cd 	ld.d	$r13,$r22,-128(0xf80)
90000000000073a0:	29fda2cd 	st.d	$r13,$r22,-152(0xf68)
90000000000073a4:	29fd82cc 	st.d	$r12,$r22,-160(0xf60)
    prev->next = next->prev = elm;
90000000000073a8:	28fd82cc 	ld.d	$r12,$r22,-160(0xf60)
90000000000073ac:	28fdc2cd 	ld.d	$r13,$r22,-144(0xf70)
90000000000073b0:	29c0018d 	st.d	$r13,$r12,0
90000000000073b4:	28fd82cc 	ld.d	$r12,$r22,-160(0xf60)
90000000000073b8:	28c0018d 	ld.d	$r13,$r12,0
90000000000073bc:	28fda2cc 	ld.d	$r12,$r22,-152(0xf68)
90000000000073c0:	29c0218d 	st.d	$r13,$r12,8(0x8)
    elm->next = next;
90000000000073c4:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
90000000000073c8:	28fd82cd 	ld.d	$r13,$r22,-160(0xf60)
90000000000073cc:	29c0218d 	st.d	$r13,$r12,8(0x8)
    elm->prev = prev;
90000000000073d0:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
90000000000073d4:	28fda2cd 	ld.d	$r13,$r22,-152(0xf68)
90000000000073d8:	29c0018d 	st.d	$r13,$r12,0
    }
    local_intr_restore(intr_flag);
90000000000073dc:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
90000000000073e0:	00150184 	move	$r4,$r12
90000000000073e4:	57f37bff 	bl	-3208(0xffff378) # 900000000000675c <__intr_restore>
    return 1;
90000000000073e8:	0280040c 	addi.w	$r12,$r0,1(0x1)
90000000000073ec:	50003800 	b	56(0x38) # 9000000000007424 <kmem_cache_grow+0x268>
        goto oops;
90000000000073f0:	03400000 	andi	$r0,$r0,0x0

oops:
    free_pages(page, 1 << cachep->page_order);
90000000000073f4:	28fd62cc 	ld.d	$r12,$r22,-168(0xf58)
90000000000073f8:	28c1218c 	ld.d	$r12,$r12,72(0x48)
90000000000073fc:	0040818c 	slli.w	$r12,$r12,0x0
9000000000007400:	0040818d 	slli.w	$r13,$r12,0x0
9000000000007404:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000007408:	0017358c 	sll.w	$r12,$r12,$r13
900000000000740c:	00150185 	move	$r5,$r12
9000000000007410:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000007414:	541ee800 	bl	7912(0x1ee8) # 90000000000092fc <free_pages>
9000000000007418:	50000800 	b	8(0x8) # 9000000000007420 <kmem_cache_grow+0x264>
        goto failed;
900000000000741c:	03400000 	andi	$r0,$r0,0x0
failed:
    return 0;
9000000000007420:	0015000c 	move	$r12,$r0
}
9000000000007424:	00150184 	move	$r4,$r12
9000000000007428:	28c2a061 	ld.d	$r1,$r3,168(0xa8)
900000000000742c:	28c28076 	ld.d	$r22,$r3,160(0xa0)
9000000000007430:	02c2c063 	addi.d	$r3,$r3,176(0xb0)
9000000000007434:	4c000020 	jirl	$r0,$r1,0

9000000000007438 <kmem_cache_alloc_one>:

// kmem_cache_alloc_one - allocate a obj in a slab
static void * 
kmem_cache_alloc_one(kmem_cache_t *cachep, slab_t *slabp) {
9000000000007438:	02fe0063 	addi.d	$r3,$r3,-128(0xf80)
900000000000743c:	29c1e076 	st.d	$r22,$r3,120(0x78)
9000000000007440:	02c20076 	addi.d	$r22,$r3,128(0x80)
9000000000007444:	29fe22c4 	st.d	$r4,$r22,-120(0xf88)
9000000000007448:	29fe02c5 	st.d	$r5,$r22,-128(0xf80)
    slabp->inuse ++;
900000000000744c:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
9000000000007450:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000007454:	02c0058d 	addi.d	$r13,$r12,1(0x1)
9000000000007458:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
900000000000745c:	29c0618d 	st.d	$r13,$r12,24(0x18)
    void *objp = slabp->s_mem + slabp->free * cachep->objsize;
9000000000007460:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
9000000000007464:	28c0418d 	ld.d	$r13,$r12,16(0x10)
9000000000007468:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
900000000000746c:	28c0a18e 	ld.d	$r14,$r12,40(0x28)
9000000000007470:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
9000000000007474:	28c0818c 	ld.d	$r12,$r12,32(0x20)
9000000000007478:	001db1cc 	mul.d	$r12,$r14,$r12
900000000000747c:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000007480:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    slabp->free = slab_bufctl(slabp)[slabp->free];
9000000000007484:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
9000000000007488:	02c0c18d 	addi.d	$r13,$r12,48(0x30)
900000000000748c:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
9000000000007490:	28c0a18c 	ld.d	$r12,$r12,40(0x28)
9000000000007494:	00410d8c 	slli.d	$r12,$r12,0x3
9000000000007498:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000749c:	28c0018d 	ld.d	$r13,$r12,0
90000000000074a0:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
90000000000074a4:	29c0a18d 	st.d	$r13,$r12,40(0x28)

    if (slabp->free == BUFCTL_END) {
90000000000074a8:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
90000000000074ac:	28c0a18d 	ld.d	$r13,$r12,40(0x28)
90000000000074b0:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
90000000000074b4:	1600000c 	lu32i.d	$r12,0
90000000000074b8:	5c00adac 	bne	$r13,$r12,172(0xac) # 9000000000007564 <kmem_cache_alloc_one+0x12c>
        list_del(&(slabp->slab_link));
90000000000074bc:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
90000000000074c0:	29fea2cc 	st.d	$r12,$r22,-88(0xfa8)
    __list_del(listelm->prev, listelm->next);
90000000000074c4:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
90000000000074c8:	28c0018d 	ld.d	$r13,$r12,0
90000000000074cc:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
90000000000074d0:	28c0218c 	ld.d	$r12,$r12,8(0x8)
90000000000074d4:	29fe82cd 	st.d	$r13,$r22,-96(0xfa0)
90000000000074d8:	29fe62cc 	st.d	$r12,$r22,-104(0xf98)
    prev->next = next;
90000000000074dc:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
90000000000074e0:	28fe62cd 	ld.d	$r13,$r22,-104(0xf98)
90000000000074e4:	29c0218d 	st.d	$r13,$r12,8(0x8)
    next->prev = prev;
90000000000074e8:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
90000000000074ec:	28fe82cd 	ld.d	$r13,$r22,-96(0xfa0)
90000000000074f0:	29c0018d 	st.d	$r13,$r12,0
        list_add(&(cachep->slabs_full), &(slabp->slab_link));
90000000000074f4:	28fe22cd 	ld.d	$r13,$r22,-120(0xf88)
90000000000074f8:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
90000000000074fc:	29ff82cd 	st.d	$r13,$r22,-32(0xfe0)
9000000000007500:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
9000000000007504:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000007508:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
900000000000750c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000007510:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
    __list_add(elm, listelm, listelm->next);
9000000000007514:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000007518:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000000751c:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
9000000000007520:	29ff02cd 	st.d	$r13,$r22,-64(0xfc0)
9000000000007524:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000007528:	29fee2cd 	st.d	$r13,$r22,-72(0xfb8)
900000000000752c:	29fec2cc 	st.d	$r12,$r22,-80(0xfb0)
    prev->next = next->prev = elm;
9000000000007530:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
9000000000007534:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
9000000000007538:	29c0018d 	st.d	$r13,$r12,0
900000000000753c:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
9000000000007540:	28c0018d 	ld.d	$r13,$r12,0
9000000000007544:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000007548:	29c0218d 	st.d	$r13,$r12,8(0x8)
    elm->next = next;
900000000000754c:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000007550:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
9000000000007554:	29c0218d 	st.d	$r13,$r12,8(0x8)
    elm->prev = prev;
9000000000007558:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000755c:	28fee2cd 	ld.d	$r13,$r22,-72(0xfb8)
9000000000007560:	29c0018d 	st.d	$r13,$r12,0
    }
    return objp;
9000000000007564:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
}
9000000000007568:	00150184 	move	$r4,$r12
900000000000756c:	28c1e076 	ld.d	$r22,$r3,120(0x78)
9000000000007570:	02c20063 	addi.d	$r3,$r3,128(0x80)
9000000000007574:	4c000020 	jirl	$r0,$r1,0

9000000000007578 <kmem_cache_alloc>:

// kmem_cache_alloc - call kmem_cache_alloc_one function to allocate a obj
//                  - if no free obj, try to allocate a slab
static void *
kmem_cache_alloc(kmem_cache_t *cachep) {
9000000000007578:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
900000000000757c:	29c12061 	st.d	$r1,$r3,72(0x48)
9000000000007580:	29c10076 	st.d	$r22,$r3,64(0x40)
9000000000007584:	02c14076 	addi.d	$r22,$r3,80(0x50)
9000000000007588:	29fee2c4 	st.d	$r4,$r22,-72(0xfb8)
    void *objp;
    bool intr_flag;

try_again:
    local_intr_save(intr_flag);
900000000000758c:	57f1a3ff 	bl	-3680(0xffff1a0) # 900000000000672c <__intr_save>
9000000000007590:	0015008c 	move	$r12,$r4
9000000000007594:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    if (list_empty(&(cachep->slabs_notfull))) {
9000000000007598:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000759c:	02c0418c 	addi.d	$r12,$r12,16(0x10)
90000000000075a0:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    return list->next == list;
90000000000075a4:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
90000000000075a8:	28c0218d 	ld.d	$r13,$r12,8(0x8)
90000000000075ac:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
90000000000075b0:	0015b1ac 	xor	$r12,$r13,$r12
90000000000075b4:	0240058c 	sltui	$r12,$r12,1(0x1)
90000000000075b8:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
90000000000075bc:	44004180 	bnez	$r12,64(0x40) # 90000000000075fc <kmem_cache_alloc+0x84>
        goto alloc_new_slab;
    }
    slab_t *slabp = le2slab(list_next(&(cachep->slabs_notfull)), slab_link);
90000000000075c0:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
90000000000075c4:	02c0418c 	addi.d	$r12,$r12,16(0x10)
90000000000075c8:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
    return listelm->next;
90000000000075cc:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000075d0:	28c0218c 	ld.d	$r12,$r12,8(0x8)
90000000000075d4:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    objp = kmem_cache_alloc_one(cachep, slabp);
90000000000075d8:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
90000000000075dc:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
90000000000075e0:	57fe5bff 	bl	-424(0xffffe58) # 9000000000007438 <kmem_cache_alloc_one>
90000000000075e4:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    local_intr_restore(intr_flag);
90000000000075e8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000075ec:	00150184 	move	$r4,$r12
90000000000075f0:	57f16fff 	bl	-3732(0xffff16c) # 900000000000675c <__intr_restore>
    return objp;
90000000000075f4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000075f8:	50002c00 	b	44(0x2c) # 9000000000007624 <kmem_cache_alloc+0xac>
        goto alloc_new_slab;
90000000000075fc:	03400000 	andi	$r0,$r0,0x0

alloc_new_slab:
    local_intr_restore(intr_flag);
9000000000007600:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000007604:	00150184 	move	$r4,$r12
9000000000007608:	57f157ff 	bl	-3756(0xffff154) # 900000000000675c <__intr_restore>

    if (kmem_cache_grow(cachep)) {
900000000000760c:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
9000000000007610:	57fbafff 	bl	-1108(0xffffbac) # 90000000000071bc <kmem_cache_grow>
9000000000007614:	0015008c 	move	$r12,$r4
9000000000007618:	40000980 	beqz	$r12,8(0x8) # 9000000000007620 <kmem_cache_alloc+0xa8>
        goto try_again;
900000000000761c:	53ff73ff 	b	-144(0xfffff70) # 900000000000758c <kmem_cache_alloc+0x14>
    }
    return NULL;
9000000000007620:	0015000c 	move	$r12,$r0
}
9000000000007624:	00150184 	move	$r4,$r12
9000000000007628:	28c12061 	ld.d	$r1,$r3,72(0x48)
900000000000762c:	28c10076 	ld.d	$r22,$r3,64(0x40)
9000000000007630:	02c14063 	addi.d	$r3,$r3,80(0x50)
9000000000007634:	4c000020 	jirl	$r0,$r1,0

9000000000007638 <kmalloc>:

// kmalloc - simple interface used by outside functions 
//         - to allocate a free memory using kmem_cache_alloc function
void *
kmalloc(size_t size) {
9000000000007638:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000763c:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000007640:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000007644:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000007648:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    assert(size > 0);
900000000000764c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000007650:	44001d80 	bnez	$r12,28(0x1c) # 900000000000766c <kmalloc+0x34>
9000000000007654:	1c000306 	pcaddu12i	$r6,24(0x18)
9000000000007658:	02fb90c6 	addi.d	$r6,$r6,-284(0xee4)
900000000000765c:	02867405 	addi.w	$r5,$r0,413(0x19d)
9000000000007660:	1c000304 	pcaddu12i	$r4,24(0x18)
9000000000007664:	02f98084 	addi.d	$r4,$r4,-416(0xe60)
9000000000007668:	54561800 	bl	22040(0x5618) # 900000000000cc80 <__panic>
    size_t order = getorder(size);
900000000000766c:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000007670:	57f843ff 	bl	-1984(0xffff840) # 9000000000006eb0 <getorder>
9000000000007674:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    if (order > MAX_SIZE_ORDER) {
9000000000007678:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000767c:	0280440c 	addi.w	$r12,$r0,17(0x11)
9000000000007680:	6c000d8d 	bgeu	$r12,$r13,12(0xc) # 900000000000768c <kmalloc+0x54>
        return NULL;
9000000000007684:	0015000c 	move	$r12,$r0
9000000000007688:	50002c00 	b	44(0x2c) # 90000000000076b4 <kmalloc+0x7c>
    }
    return kmem_cache_alloc(slab_cache + (order - MIN_SIZE_ORDER));
900000000000768c:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000007690:	0281600c 	addi.w	$r12,$r0,88(0x58)
9000000000007694:	001db1ac 	mul.d	$r12,$r13,$r12
9000000000007698:	02f9218d 	addi.d	$r13,$r12,-440(0xe48)
900000000000769c:	1c00436c 	pcaddu12i	$r12,539(0x21b)
90000000000076a0:	02e4118c 	addi.d	$r12,$r12,-1788(0x904)
90000000000076a4:	0010b1ac 	add.d	$r12,$r13,$r12
90000000000076a8:	00150184 	move	$r4,$r12
90000000000076ac:	57fecfff 	bl	-308(0xffffecc) # 9000000000007578 <kmem_cache_alloc>
90000000000076b0:	0015008c 	move	$r12,$r4
}
90000000000076b4:	00150184 	move	$r4,$r12
90000000000076b8:	28c0a061 	ld.d	$r1,$r3,40(0x28)
90000000000076bc:	28c08076 	ld.d	$r22,$r3,32(0x20)
90000000000076c0:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000000076c4:	4c000020 	jirl	$r0,$r1,0

90000000000076c8 <kmem_slab_destroy>:

static void kmem_cache_free(kmem_cache_t *cachep, void *obj);

// kmem_slab_destroy - call free_pages & kmem_cache_free to free a slab 
static void
kmem_slab_destroy(kmem_cache_t *cachep, slab_t *slabp) {
90000000000076c8:	02fe4063 	addi.d	$r3,$r3,-112(0xf90)
90000000000076cc:	29c1a061 	st.d	$r1,$r3,104(0x68)
90000000000076d0:	29c18076 	st.d	$r22,$r3,96(0x60)
90000000000076d4:	02c1c076 	addi.d	$r22,$r3,112(0x70)
90000000000076d8:	29fe62c4 	st.d	$r4,$r22,-104(0xf98)
90000000000076dc:	29fe42c5 	st.d	$r5,$r22,-112(0xf90)
    struct Page *page = kva2page(slabp->s_mem - slabp->offset);
90000000000076e0:	28fe42cc 	ld.d	$r12,$r22,-112(0xf90)
90000000000076e4:	28c0418d 	ld.d	$r13,$r12,16(0x10)
90000000000076e8:	28fe42cc 	ld.d	$r12,$r22,-112(0xf90)
90000000000076ec:	28c0818c 	ld.d	$r12,$r12,32(0x20)
90000000000076f0:	0011b00c 	sub.d	$r12,$r0,$r12
90000000000076f4:	0010b1ac 	add.d	$r12,$r13,$r12
90000000000076f8:	00150184 	move	$r4,$r12
90000000000076fc:	57f21fff 	bl	-3556(0xffff21c) # 9000000000006918 <kva2page>
9000000000007700:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)

    struct Page *p = page;
9000000000007704:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000007708:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    size_t order_size = (1 << cachep->page_order);
900000000000770c:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
9000000000007710:	28c1218c 	ld.d	$r12,$r12,72(0x48)
9000000000007714:	0040818c 	slli.w	$r12,$r12,0x0
9000000000007718:	0040818d 	slli.w	$r13,$r12,0x0
900000000000771c:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000007720:	0017358c 	sll.w	$r12,$r12,$r13
9000000000007724:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    do {
        assert(PageSlab(p));
9000000000007728:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000772c:	02c0118c 	addi.d	$r12,$r12,4(0x4)
9000000000007730:	0280080d 	addi.w	$r13,$r0,2(0x2)
9000000000007734:	29bf52cd 	st.w	$r13,$r22,-44(0xfd4)
9000000000007738:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
  unsigned char c = 0;
900000000000773c:	293f1ec0 	st.b	$r0,$r22,-57(0xfc7)
  local_intr_save (intr_flag);
9000000000007740:	57efefff 	bl	-4116(0xfffefec) # 900000000000672c <__intr_save>
9000000000007744:	0015008c 	move	$r12,$r4
9000000000007748:	29bf02cc 	st.w	$r12,$r22,-64(0xfc0)
  if (*addr & (1 << nr))
900000000000774c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000007750:	2880018c 	ld.w	$r12,$r12,0
9000000000007754:	0015018d 	move	$r13,$r12
9000000000007758:	0280040e 	addi.w	$r14,$r0,1(0x1)
900000000000775c:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000007760:	001731cc 	sll.w	$r12,$r14,$r12
9000000000007764:	0014b1ac 	and	$r12,$r13,$r12
9000000000007768:	40000d80 	beqz	$r12,12(0xc) # 9000000000007774 <kmem_slab_destroy+0xac>
    c = 1;
900000000000776c:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000007770:	293f1ecc 	st.b	$r12,$r22,-57(0xfc7)
  local_intr_restore (intr_flag);
9000000000007774:	28bf02cc 	ld.w	$r12,$r22,-64(0xfc0)
9000000000007778:	00150184 	move	$r4,$r12
900000000000777c:	57efe3ff 	bl	-4128(0xfffefe0) # 900000000000675c <__intr_restore>
  return c != 0;
9000000000007780:	2a3f1ecc 	ld.bu	$r12,$r22,-57(0xfc7)
9000000000007784:	0012b00c 	sltu	$r12,$r0,$r12
9000000000007788:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
900000000000778c:	44001d80 	bnez	$r12,28(0x1c) # 90000000000077a8 <kmem_slab_destroy+0xe0>
9000000000007790:	1c000306 	pcaddu12i	$r6,24(0x18)
9000000000007794:	02f720c6 	addi.d	$r6,$r6,-568(0xdc8)
9000000000007798:	0286bc05 	addi.w	$r5,$r0,431(0x1af)
900000000000779c:	1c000304 	pcaddu12i	$r4,24(0x18)
90000000000077a0:	02f49084 	addi.d	$r4,$r4,-732(0xd24)
90000000000077a4:	5454dc00 	bl	21724(0x54dc) # 900000000000cc80 <__panic>
        ClearPageSlab(p);
90000000000077a8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000077ac:	02c0118c 	addi.d	$r12,$r12,4(0x4)
90000000000077b0:	0280080d 	addi.w	$r13,$r0,2(0x2)
90000000000077b4:	29bef2cd 	st.w	$r13,$r22,-68(0xfbc)
90000000000077b8:	29fec2cc 	st.d	$r12,$r22,-80(0xfb0)
  local_intr_save (intr_flag);
90000000000077bc:	57ef73ff 	bl	-4240(0xfffef70) # 900000000000672c <__intr_save>
90000000000077c0:	0015008c 	move	$r12,$r4
90000000000077c4:	29beb2cc 	st.w	$r12,$r22,-84(0xfac)
  *addr &= ~(1 << nr);
90000000000077c8:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
90000000000077cc:	2880018c 	ld.w	$r12,$r12,0
90000000000077d0:	0015018d 	move	$r13,$r12
90000000000077d4:	0280040e 	addi.w	$r14,$r0,1(0x1)
90000000000077d8:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
90000000000077dc:	001731cc 	sll.w	$r12,$r14,$r12
90000000000077e0:	0014300c 	nor	$r12,$r0,$r12
90000000000077e4:	0014b1ac 	and	$r12,$r13,$r12
90000000000077e8:	0015018d 	move	$r13,$r12
90000000000077ec:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
90000000000077f0:	2980018d 	st.w	$r13,$r12,0
  local_intr_restore (intr_flag);
90000000000077f4:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
90000000000077f8:	00150184 	move	$r4,$r12
90000000000077fc:	57ef63ff 	bl	-4256(0xfffef60) # 900000000000675c <__intr_restore>
        p ++;
9000000000007800:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000007804:	02c0c18c 	addi.d	$r12,$r12,48(0x30)
9000000000007808:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    } while (-- order_size);
900000000000780c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000007810:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
9000000000007814:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000007818:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000781c:	47ff0d9f 	bnez	$r12,-244(0x7fff0c) # 9000000000007728 <kmem_slab_destroy+0x60>

    free_pages(page, 1 << cachep->page_order);
9000000000007820:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
9000000000007824:	28c1218c 	ld.d	$r12,$r12,72(0x48)
9000000000007828:	0040818c 	slli.w	$r12,$r12,0x0
900000000000782c:	0040818d 	slli.w	$r13,$r12,0x0
9000000000007830:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000007834:	0017358c 	sll.w	$r12,$r12,$r13
9000000000007838:	00150185 	move	$r5,$r12
900000000000783c:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000007840:	541abc00 	bl	6844(0x1abc) # 90000000000092fc <free_pages>

    if (cachep->off_slab) {
9000000000007844:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
9000000000007848:	2881018c 	ld.w	$r12,$r12,64(0x40)
900000000000784c:	40001980 	beqz	$r12,24(0x18) # 9000000000007864 <kmem_slab_destroy+0x19c>
        kmem_cache_free(cachep->slab_cachep, slabp);
9000000000007850:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
9000000000007854:	28c1418c 	ld.d	$r12,$r12,80(0x50)
9000000000007858:	28fe42c5 	ld.d	$r5,$r22,-112(0xf90)
900000000000785c:	00150184 	move	$r4,$r12
9000000000007860:	5401c800 	bl	456(0x1c8) # 9000000000007a28 <kmem_cache_free>
    }
}
9000000000007864:	03400000 	andi	$r0,$r0,0x0
9000000000007868:	28c1a061 	ld.d	$r1,$r3,104(0x68)
900000000000786c:	28c18076 	ld.d	$r22,$r3,96(0x60)
9000000000007870:	02c1c063 	addi.d	$r3,$r3,112(0x70)
9000000000007874:	4c000020 	jirl	$r0,$r1,0

9000000000007878 <kmem_cache_free_one>:

// kmem_cache_free_one - free an obj in a slab
//                     - if slab->inuse==0, then free the slab
static void
kmem_cache_free_one(kmem_cache_t *cachep, slab_t *slabp, void *objp) {
9000000000007878:	02fd8063 	addi.d	$r3,$r3,-160(0xf60)
900000000000787c:	29c26061 	st.d	$r1,$r3,152(0x98)
9000000000007880:	29c24076 	st.d	$r22,$r3,144(0x90)
9000000000007884:	02c28076 	addi.d	$r22,$r3,160(0xa0)
9000000000007888:	29fde2c4 	st.d	$r4,$r22,-136(0xf78)
900000000000788c:	29fdc2c5 	st.d	$r5,$r22,-144(0xf70)
9000000000007890:	29fda2c6 	st.d	$r6,$r22,-152(0xf68)
    //should not use divide operator ???
    size_t objnr = (objp - slabp->s_mem) >> cachep->objsize_shift;
9000000000007894:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
9000000000007898:	28c0418c 	ld.d	$r12,$r12,16(0x10)
900000000000789c:	28fda2cd 	ld.d	$r13,$r22,-152(0xf68)
90000000000078a0:	0011b1ac 	sub.d	$r12,$r13,$r12
90000000000078a4:	28fde2cd 	ld.d	$r13,$r22,-136(0xf78)
90000000000078a8:	28c0a1ad 	ld.d	$r13,$r13,40(0x28)
90000000000078ac:	004081ad 	slli.w	$r13,$r13,0x0
90000000000078b0:	004081ad 	slli.w	$r13,$r13,0x0
90000000000078b4:	0019b58c 	sra.d	$r12,$r12,$r13
90000000000078b8:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    slab_bufctl(slabp)[objnr] = slabp->free;
90000000000078bc:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
90000000000078c0:	02c0c18d 	addi.d	$r13,$r12,48(0x30)
90000000000078c4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000078c8:	00410d8c 	slli.d	$r12,$r12,0x3
90000000000078cc:	0010b1ac 	add.d	$r12,$r13,$r12
90000000000078d0:	28fdc2cd 	ld.d	$r13,$r22,-144(0xf70)
90000000000078d4:	28c0a1ad 	ld.d	$r13,$r13,40(0x28)
90000000000078d8:	29c0018d 	st.d	$r13,$r12,0
    slabp->free = objnr;
90000000000078dc:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
90000000000078e0:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
90000000000078e4:	29c0a18d 	st.d	$r13,$r12,40(0x28)

    slabp->inuse --;
90000000000078e8:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
90000000000078ec:	28c0618c 	ld.d	$r12,$r12,24(0x18)
90000000000078f0:	02fffd8d 	addi.d	$r13,$r12,-1(0xfff)
90000000000078f4:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
90000000000078f8:	29c0618d 	st.d	$r13,$r12,24(0x18)

    if (slabp->inuse == 0) {
90000000000078fc:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
9000000000007900:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000007904:	44004d80 	bnez	$r12,76(0x4c) # 9000000000007950 <kmem_cache_free_one+0xd8>
        list_del(&(slabp->slab_link));
9000000000007908:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
900000000000790c:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    __list_del(listelm->prev, listelm->next);
9000000000007910:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000007914:	28c0018d 	ld.d	$r13,$r12,0
9000000000007918:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000791c:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000007920:	29ff62cd 	st.d	$r13,$r22,-40(0xfd8)
9000000000007924:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    prev->next = next;
9000000000007928:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000792c:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000007930:	29c0218d 	st.d	$r13,$r12,8(0x8)
    next->prev = prev;
9000000000007934:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000007938:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000793c:	29c0018d 	st.d	$r13,$r12,0
        kmem_slab_destroy(cachep, slabp);
9000000000007940:	28fdc2c5 	ld.d	$r5,$r22,-144(0xf70)
9000000000007944:	28fde2c4 	ld.d	$r4,$r22,-136(0xf78)
9000000000007948:	57fd83ff 	bl	-640(0xffffd80) # 90000000000076c8 <kmem_slab_destroy>
    }
    else if (slabp->inuse == cachep->num -1 ) {
        list_del(&(slabp->slab_link));
        list_add(&(cachep->slabs_notfull), &(slabp->slab_link));
    }
}
900000000000794c:	5000c800 	b	200(0xc8) # 9000000000007a14 <kmem_cache_free_one+0x19c>
    else if (slabp->inuse == cachep->num -1 ) {
9000000000007950:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
9000000000007954:	28c0618d 	ld.d	$r13,$r12,24(0x18)
9000000000007958:	28fde2cc 	ld.d	$r12,$r22,-136(0xf78)
900000000000795c:	28c0c18c 	ld.d	$r12,$r12,48(0x30)
9000000000007960:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
9000000000007964:	5c00b1ac 	bne	$r13,$r12,176(0xb0) # 9000000000007a14 <kmem_cache_free_one+0x19c>
        list_del(&(slabp->slab_link));
9000000000007968:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
900000000000796c:	29fe42cc 	st.d	$r12,$r22,-112(0xf90)
    __list_del(listelm->prev, listelm->next);
9000000000007970:	28fe42cc 	ld.d	$r12,$r22,-112(0xf90)
9000000000007974:	28c0018d 	ld.d	$r13,$r12,0
9000000000007978:	28fe42cc 	ld.d	$r12,$r22,-112(0xf90)
900000000000797c:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000007980:	29fe22cd 	st.d	$r13,$r22,-120(0xf88)
9000000000007984:	29fe02cc 	st.d	$r12,$r22,-128(0xf80)
    prev->next = next;
9000000000007988:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
900000000000798c:	28fe02cd 	ld.d	$r13,$r22,-128(0xf80)
9000000000007990:	29c0218d 	st.d	$r13,$r12,8(0x8)
    next->prev = prev;
9000000000007994:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
9000000000007998:	28fe22cd 	ld.d	$r13,$r22,-120(0xf88)
900000000000799c:	29c0018d 	st.d	$r13,$r12,0
        list_add(&(cachep->slabs_notfull), &(slabp->slab_link));
90000000000079a0:	28fde2cc 	ld.d	$r12,$r22,-136(0xf78)
90000000000079a4:	02c0418d 	addi.d	$r13,$r12,16(0x10)
90000000000079a8:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
90000000000079ac:	29ff22cd 	st.d	$r13,$r22,-56(0xfc8)
90000000000079b0:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
90000000000079b4:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000079b8:	29fee2cc 	st.d	$r12,$r22,-72(0xfb8)
90000000000079bc:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
90000000000079c0:	29fec2cc 	st.d	$r12,$r22,-80(0xfb0)
    __list_add(elm, listelm, listelm->next);
90000000000079c4:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
90000000000079c8:	28c0218c 	ld.d	$r12,$r12,8(0x8)
90000000000079cc:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
90000000000079d0:	29fea2cd 	st.d	$r13,$r22,-88(0xfa8)
90000000000079d4:	28fee2cd 	ld.d	$r13,$r22,-72(0xfb8)
90000000000079d8:	29fe82cd 	st.d	$r13,$r22,-96(0xfa0)
90000000000079dc:	29fe62cc 	st.d	$r12,$r22,-104(0xf98)
    prev->next = next->prev = elm;
90000000000079e0:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
90000000000079e4:	28fea2cd 	ld.d	$r13,$r22,-88(0xfa8)
90000000000079e8:	29c0018d 	st.d	$r13,$r12,0
90000000000079ec:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
90000000000079f0:	28c0018d 	ld.d	$r13,$r12,0
90000000000079f4:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
90000000000079f8:	29c0218d 	st.d	$r13,$r12,8(0x8)
    elm->next = next;
90000000000079fc:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
9000000000007a00:	28fe62cd 	ld.d	$r13,$r22,-104(0xf98)
9000000000007a04:	29c0218d 	st.d	$r13,$r12,8(0x8)
    elm->prev = prev;
9000000000007a08:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
9000000000007a0c:	28fe82cd 	ld.d	$r13,$r22,-96(0xfa0)
9000000000007a10:	29c0018d 	st.d	$r13,$r12,0
}
9000000000007a14:	03400000 	andi	$r0,$r0,0x0
9000000000007a18:	28c26061 	ld.d	$r1,$r3,152(0x98)
9000000000007a1c:	28c24076 	ld.d	$r22,$r3,144(0x90)
9000000000007a20:	02c28063 	addi.d	$r3,$r3,160(0xa0)
9000000000007a24:	4c000020 	jirl	$r0,$r1,0

9000000000007a28 <kmem_cache_free>:
#define GET_PAGE_SLAB(page)                                 \
    (slab_t *)((page)->page_link.prev)

// kmem_cache_free - call kmem_cache_free_one function to free an obj 
static void
kmem_cache_free(kmem_cache_t *cachep, void *objp) {
9000000000007a28:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000007a2c:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000007a30:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000007a34:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000007a38:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
9000000000007a3c:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
    bool intr_flag;
    struct Page *page = kva2page(objp);
9000000000007a40:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
9000000000007a44:	57eed7ff 	bl	-4396(0xfffeed4) # 9000000000006918 <kva2page>
9000000000007a48:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)

    if (!PageSlab(page)) {
9000000000007a4c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000007a50:	02c0118c 	addi.d	$r12,$r12,4(0x4)
9000000000007a54:	0280080d 	addi.w	$r13,$r0,2(0x2)
9000000000007a58:	29bf82cd 	st.w	$r13,$r22,-32(0xfe0)
9000000000007a5c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
  unsigned char c = 0;
9000000000007a60:	293f5ec0 	st.b	$r0,$r22,-41(0xfd7)
  local_intr_save (intr_flag);
9000000000007a64:	57eccbff 	bl	-4920(0xfffecc8) # 900000000000672c <__intr_save>
9000000000007a68:	0015008c 	move	$r12,$r4
9000000000007a6c:	29bf42cc 	st.w	$r12,$r22,-48(0xfd0)
  if (*addr & (1 << nr))
9000000000007a70:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000007a74:	2880018c 	ld.w	$r12,$r12,0
9000000000007a78:	0015018d 	move	$r13,$r12
9000000000007a7c:	0280040e 	addi.w	$r14,$r0,1(0x1)
9000000000007a80:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
9000000000007a84:	001731cc 	sll.w	$r12,$r14,$r12
9000000000007a88:	0014b1ac 	and	$r12,$r13,$r12
9000000000007a8c:	40000d80 	beqz	$r12,12(0xc) # 9000000000007a98 <kmem_cache_free+0x70>
    c = 1;
9000000000007a90:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000007a94:	293f5ecc 	st.b	$r12,$r22,-41(0xfd7)
  local_intr_restore (intr_flag);
9000000000007a98:	28bf42cc 	ld.w	$r12,$r22,-48(0xfd0)
9000000000007a9c:	00150184 	move	$r4,$r12
9000000000007aa0:	57ecbfff 	bl	-4932(0xfffecbc) # 900000000000675c <__intr_restore>
  return c != 0;
9000000000007aa4:	2a3f5ecc 	ld.bu	$r12,$r22,-41(0xfd7)
9000000000007aa8:	0012b00c 	sltu	$r12,$r0,$r12
9000000000007aac:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
9000000000007ab0:	44002180 	bnez	$r12,32(0x20) # 9000000000007ad0 <kmem_cache_free+0xa8>
        panic("not a slab page %08x\n", objp);
9000000000007ab4:	28ff02c7 	ld.d	$r7,$r22,-64(0xfc0)
9000000000007ab8:	1c000306 	pcaddu12i	$r6,24(0x18)
9000000000007abc:	02eb00c6 	addi.d	$r6,$r6,-1344(0xac0)
9000000000007ac0:	02877405 	addi.w	$r5,$r0,477(0x1dd)
9000000000007ac4:	1c000304 	pcaddu12i	$r4,24(0x18)
9000000000007ac8:	02e7f084 	addi.d	$r4,$r4,-1540(0x9fc)
9000000000007acc:	5451b400 	bl	20916(0x51b4) # 900000000000cc80 <__panic>
    }
    local_intr_save(intr_flag);
9000000000007ad0:	57ec5fff 	bl	-5028(0xfffec5c) # 900000000000672c <__intr_save>
9000000000007ad4:	0015008c 	move	$r12,$r4
9000000000007ad8:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
    {
        kmem_cache_free_one(cachep, GET_PAGE_SLAB(page), objp);
9000000000007adc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000007ae0:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000007ae4:	28ff02c6 	ld.d	$r6,$r22,-64(0xfc0)
9000000000007ae8:	00150185 	move	$r5,$r12
9000000000007aec:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000007af0:	57fd8bff 	bl	-632(0xffffd88) # 9000000000007878 <kmem_cache_free_one>
    }
    local_intr_restore(intr_flag);
9000000000007af4:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000007af8:	00150184 	move	$r4,$r12
9000000000007afc:	57ec63ff 	bl	-5024(0xfffec60) # 900000000000675c <__intr_restore>
}
9000000000007b00:	03400000 	andi	$r0,$r0,0x0
9000000000007b04:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000000007b08:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000000007b0c:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000007b10:	4c000020 	jirl	$r0,$r1,0

9000000000007b14 <kfree>:

// kfree - simple interface used by ooutside functions to free an obj
void
kfree(void *objp) {
9000000000007b14:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000007b18:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000007b1c:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000007b20:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000007b24:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    kmem_cache_free(GET_PAGE_CACHE(kva2page(objp)), objp);
9000000000007b28:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000007b2c:	57edefff 	bl	-4628(0xfffedec) # 9000000000006918 <kva2page>
9000000000007b30:	0015008c 	move	$r12,$r4
9000000000007b34:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000007b38:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
9000000000007b3c:	00150184 	move	$r4,$r12
9000000000007b40:	57feebff 	bl	-280(0xffffee8) # 9000000000007a28 <kmem_cache_free>
}
9000000000007b44:	03400000 	andi	$r0,$r0,0x0
9000000000007b48:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000007b4c:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000007b50:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000007b54:	4c000020 	jirl	$r0,$r1,0

9000000000007b58 <check_slab_empty>:

static inline void
check_slab_empty(void) {
9000000000007b58:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000007b5c:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000007b60:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000007b64:	02c0c076 	addi.d	$r22,$r3,48(0x30)
    int i;
    for (i = 0; i < SLAB_CACHE_NUM; i ++) {
9000000000007b68:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
9000000000007b6c:	5000a800 	b	168(0xa8) # 9000000000007c14 <check_slab_empty+0xbc>
        kmem_cache_t *cachep = slab_cache + i;
9000000000007b70:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
9000000000007b74:	0281600c 	addi.w	$r12,$r0,88(0x58)
9000000000007b78:	001db1ad 	mul.d	$r13,$r13,$r12
9000000000007b7c:	1c00434c 	pcaddu12i	$r12,538(0x21a)
9000000000007b80:	02d0918c 	addi.d	$r12,$r12,1060(0x424)
9000000000007b84:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000007b88:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
        assert(list_empty(&(cachep->slabs_full)));
9000000000007b8c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000007b90:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    return list->next == list;
9000000000007b94:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000007b98:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000007b9c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000007ba0:	0015b1ac 	xor	$r12,$r13,$r12
9000000000007ba4:	0240058c 	sltui	$r12,$r12,1(0x1)
9000000000007ba8:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
9000000000007bac:	44001d80 	bnez	$r12,28(0x1c) # 9000000000007bc8 <check_slab_empty+0x70>
9000000000007bb0:	1c000306 	pcaddu12i	$r6,24(0x18)
9000000000007bb4:	02e780c6 	addi.d	$r6,$r6,-1568(0x9e0)
9000000000007bb8:	0287c405 	addi.w	$r5,$r0,497(0x1f1)
9000000000007bbc:	1c000304 	pcaddu12i	$r4,24(0x18)
9000000000007bc0:	02e41084 	addi.d	$r4,$r4,-1788(0x904)
9000000000007bc4:	5450bc00 	bl	20668(0x50bc) # 900000000000cc80 <__panic>
        assert(list_empty(&(cachep->slabs_notfull)));
9000000000007bc8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000007bcc:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000007bd0:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
9000000000007bd4:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000007bd8:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000007bdc:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000007be0:	0015b1ac 	xor	$r12,$r13,$r12
9000000000007be4:	0240058c 	sltui	$r12,$r12,1(0x1)
9000000000007be8:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
9000000000007bec:	44001d80 	bnez	$r12,28(0x1c) # 9000000000007c08 <check_slab_empty+0xb0>
9000000000007bf0:	1c000306 	pcaddu12i	$r6,24(0x18)
9000000000007bf4:	02e760c6 	addi.d	$r6,$r6,-1576(0x9d8)
9000000000007bf8:	0287c805 	addi.w	$r5,$r0,498(0x1f2)
9000000000007bfc:	1c000304 	pcaddu12i	$r4,24(0x18)
9000000000007c00:	02e31084 	addi.d	$r4,$r4,-1852(0x8c4)
9000000000007c04:	54507c00 	bl	20604(0x507c) # 900000000000cc80 <__panic>
    for (i = 0; i < SLAB_CACHE_NUM; i ++) {
9000000000007c08:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000007c0c:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000007c10:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000007c14:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000007c18:	0015018d 	move	$r13,$r12
9000000000007c1c:	0280300c 	addi.w	$r12,$r0,12(0xc)
9000000000007c20:	67ff518d 	bge	$r12,$r13,-176(0x3ff50) # 9000000000007b70 <check_slab_empty+0x18>
    }
}
9000000000007c24:	03400000 	andi	$r0,$r0,0x0
9000000000007c28:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000007c2c:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000007c30:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000007c34:	4c000020 	jirl	$r0,$r1,0

9000000000007c38 <check_slab>:

void
check_slab(void) {
9000000000007c38:	02f90063 	addi.d	$r3,$r3,-448(0xe40)
9000000000007c3c:	29c6e061 	st.d	$r1,$r3,440(0x1b8)
9000000000007c40:	29c6c076 	st.d	$r22,$r3,432(0x1b0)
9000000000007c44:	02c70076 	addi.d	$r22,$r3,448(0x1c0)
    int i;
    void *v0, *v1;

    size_t nr_free_pages_store = nr_free_pages();
9000000000007c48:	54171400 	bl	5908(0x1714) # 900000000000935c <nr_free_pages>
9000000000007c4c:	29fea2c4 	st.d	$r4,$r22,-88(0xfa8)
    size_t slab_allocated_store = slab_allocated();
9000000000007c50:	57edebff 	bl	-4632(0xfffede8) # 9000000000006a38 <slab_allocated>
9000000000007c54:	29fe82c4 	st.d	$r4,$r22,-96(0xfa0)

    /* slab must be empty now */
    check_slab_empty();
9000000000007c58:	57ff03ff 	bl	-256(0xfffff00) # 9000000000007b58 <check_slab_empty>
    assert(slab_allocated() == 0);
9000000000007c5c:	57eddfff 	bl	-4644(0xfffeddc) # 9000000000006a38 <slab_allocated>
9000000000007c60:	0015008c 	move	$r12,$r4
9000000000007c64:	40001d80 	beqz	$r12,28(0x1c) # 9000000000007c80 <check_slab+0x48>
9000000000007c68:	1c000306 	pcaddu12i	$r6,24(0x18)
9000000000007c6c:	02e660c6 	addi.d	$r6,$r6,-1640(0x998)
9000000000007c70:	02880005 	addi.w	$r5,$r0,512(0x200)
9000000000007c74:	1c000304 	pcaddu12i	$r4,24(0x18)
9000000000007c78:	02e13084 	addi.d	$r4,$r4,-1972(0x84c)
9000000000007c7c:	54500400 	bl	20484(0x5004) # 900000000000cc80 <__panic>

    kmem_cache_t *cachep0, *cachep1;

    cachep0 = slab_cache;
9000000000007c80:	1c00434c 	pcaddu12i	$r12,538(0x21a)
9000000000007c84:	02cc818c 	addi.d	$r12,$r12,800(0x320)
9000000000007c88:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    assert(cachep0->objsize == 32 && cachep0->num > 1 && !cachep0->off_slab);
9000000000007c8c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000007c90:	28c0818d 	ld.d	$r13,$r12,32(0x20)
9000000000007c94:	0280800c 	addi.w	$r12,$r0,32(0x20)
9000000000007c98:	5c0021ac 	bne	$r13,$r12,32(0x20) # 9000000000007cb8 <check_slab+0x80>
9000000000007c9c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000007ca0:	28c0c18d 	ld.d	$r13,$r12,48(0x30)
9000000000007ca4:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000007ca8:	6c00118d 	bgeu	$r12,$r13,16(0x10) # 9000000000007cb8 <check_slab+0x80>
9000000000007cac:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000007cb0:	2881018c 	ld.w	$r12,$r12,64(0x40)
9000000000007cb4:	40001d80 	beqz	$r12,28(0x1c) # 9000000000007cd0 <check_slab+0x98>
9000000000007cb8:	1c000306 	pcaddu12i	$r6,24(0x18)
9000000000007cbc:	02e5c0c6 	addi.d	$r6,$r6,-1680(0x970)
9000000000007cc0:	02881405 	addi.w	$r5,$r0,517(0x205)
9000000000007cc4:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000007cc8:	02dff084 	addi.d	$r4,$r4,2044(0x7fc)
9000000000007ccc:	544fb400 	bl	20404(0x4fb4) # 900000000000cc80 <__panic>
    assert((v0 = kmalloc(16)) != NULL);
9000000000007cd0:	02804004 	addi.w	$r4,$r0,16(0x10)
9000000000007cd4:	57f967ff 	bl	-1692(0xffff964) # 9000000000007638 <kmalloc>
9000000000007cd8:	29fe62c4 	st.d	$r4,$r22,-104(0xf98)
9000000000007cdc:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
9000000000007ce0:	44001d80 	bnez	$r12,28(0x1c) # 9000000000007cfc <check_slab+0xc4>
9000000000007ce4:	1c000306 	pcaddu12i	$r6,24(0x18)
9000000000007ce8:	02e670c6 	addi.d	$r6,$r6,-1636(0x99c)
9000000000007cec:	02881805 	addi.w	$r5,$r0,518(0x206)
9000000000007cf0:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000007cf4:	02df4084 	addi.d	$r4,$r4,2000(0x7d0)
9000000000007cf8:	544f8800 	bl	20360(0x4f88) # 900000000000cc80 <__panic>

    slab_t *slabp0, *slabp1;

    assert(!list_empty(&(cachep0->slabs_notfull)));
9000000000007cfc:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000007d00:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000007d04:	29fe02cc 	st.d	$r12,$r22,-128(0xf80)
9000000000007d08:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
9000000000007d0c:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000007d10:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
9000000000007d14:	0015b1ac 	xor	$r12,$r13,$r12
9000000000007d18:	0240058c 	sltui	$r12,$r12,1(0x1)
9000000000007d1c:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
9000000000007d20:	40001d80 	beqz	$r12,28(0x1c) # 9000000000007d3c <check_slab+0x104>
9000000000007d24:	1c000306 	pcaddu12i	$r6,24(0x18)
9000000000007d28:	02e630c6 	addi.d	$r6,$r6,-1652(0x98c)
9000000000007d2c:	02882805 	addi.w	$r5,$r0,522(0x20a)
9000000000007d30:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000007d34:	02de4084 	addi.d	$r4,$r4,1936(0x790)
9000000000007d38:	544f4800 	bl	20296(0x4f48) # 900000000000cc80 <__panic>
    slabp0 = le2slab(list_next(&(cachep0->slabs_notfull)), slab_link);
9000000000007d3c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000007d40:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000007d44:	29fde2cc 	st.d	$r12,$r22,-136(0xf78)
    return listelm->next;
9000000000007d48:	28fde2cc 	ld.d	$r12,$r22,-136(0xf78)
9000000000007d4c:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000007d50:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    assert(slabp0->inuse == 1 && list_next(&(slabp0->slab_link)) == &(cachep0->slabs_notfull));
9000000000007d54:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000007d58:	28c0618d 	ld.d	$r13,$r12,24(0x18)
9000000000007d5c:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000007d60:	5c0021ac 	bne	$r13,$r12,32(0x20) # 9000000000007d80 <check_slab+0x148>
9000000000007d64:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000007d68:	29fdc2cc 	st.d	$r12,$r22,-144(0xf70)
9000000000007d6c:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
9000000000007d70:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000007d74:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000007d78:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000007d7c:	58001dac 	beq	$r13,$r12,28(0x1c) # 9000000000007d98 <check_slab+0x160>
9000000000007d80:	1c000306 	pcaddu12i	$r6,24(0x18)
9000000000007d84:	02e5c0c6 	addi.d	$r6,$r6,-1680(0x970)
9000000000007d88:	02883005 	addi.w	$r5,$r0,524(0x20c)
9000000000007d8c:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000007d90:	02dcd084 	addi.d	$r4,$r4,1844(0x734)
9000000000007d94:	544eec00 	bl	20204(0x4eec) # 900000000000cc80 <__panic>

    struct Page *p0, *p1;
    size_t order_size;


    p0 = kva2page(slabp0->s_mem - slabp0->offset), p1 = p0;
9000000000007d98:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000007d9c:	28c0418d 	ld.d	$r13,$r12,16(0x10)
9000000000007da0:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000007da4:	28c0818c 	ld.d	$r12,$r12,32(0x20)
9000000000007da8:	0011b00c 	sub.d	$r12,$r0,$r12
9000000000007dac:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000007db0:	00150184 	move	$r4,$r12
9000000000007db4:	57eb67ff 	bl	-5276(0xfffeb64) # 9000000000006918 <kva2page>
9000000000007db8:	29ff02c4 	st.d	$r4,$r22,-64(0xfc0)
9000000000007dbc:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000007dc0:	29fee2cc 	st.d	$r12,$r22,-72(0xfb8)
    order_size = (1 << cachep0->page_order);
9000000000007dc4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000007dc8:	28c1218c 	ld.d	$r12,$r12,72(0x48)
9000000000007dcc:	0040818c 	slli.w	$r12,$r12,0x0
9000000000007dd0:	0040818d 	slli.w	$r13,$r12,0x0
9000000000007dd4:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000007dd8:	0017358c 	sll.w	$r12,$r12,$r13
9000000000007ddc:	29fe42cc 	st.d	$r12,$r22,-112(0xf90)
    for (i = 0; i < cachep0->page_order; i ++, p1 ++) {
9000000000007de0:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
9000000000007de4:	5000d400 	b	212(0xd4) # 9000000000007eb8 <check_slab+0x280>
        assert(PageSlab(p1));
9000000000007de8:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000007dec:	02c0118c 	addi.d	$r12,$r12,4(0x4)
9000000000007df0:	0280080d 	addi.w	$r13,$r0,2(0x2)
9000000000007df4:	29bdb2cd 	st.w	$r13,$r22,-148(0xf6c)
9000000000007df8:	29fd82cc 	st.d	$r12,$r22,-160(0xf60)
  unsigned char c = 0;
9000000000007dfc:	293d7ec0 	st.b	$r0,$r22,-161(0xf5f)
  local_intr_save (intr_flag);
9000000000007e00:	57e92fff 	bl	-5844(0xfffe92c) # 900000000000672c <__intr_save>
9000000000007e04:	0015008c 	move	$r12,$r4
9000000000007e08:	29bd62cc 	st.w	$r12,$r22,-168(0xf58)
  if (*addr & (1 << nr))
9000000000007e0c:	28fd82cc 	ld.d	$r12,$r22,-160(0xf60)
9000000000007e10:	2880018c 	ld.w	$r12,$r12,0
9000000000007e14:	0015018d 	move	$r13,$r12
9000000000007e18:	0280040e 	addi.w	$r14,$r0,1(0x1)
9000000000007e1c:	28bdb2cc 	ld.w	$r12,$r22,-148(0xf6c)
9000000000007e20:	001731cc 	sll.w	$r12,$r14,$r12
9000000000007e24:	0014b1ac 	and	$r12,$r13,$r12
9000000000007e28:	40000d80 	beqz	$r12,12(0xc) # 9000000000007e34 <check_slab+0x1fc>
    c = 1;
9000000000007e2c:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000007e30:	293d7ecc 	st.b	$r12,$r22,-161(0xf5f)
  local_intr_restore (intr_flag);
9000000000007e34:	28bd62cc 	ld.w	$r12,$r22,-168(0xf58)
9000000000007e38:	00150184 	move	$r4,$r12
9000000000007e3c:	57e923ff 	bl	-5856(0xfffe920) # 900000000000675c <__intr_restore>
  return c != 0;
9000000000007e40:	2a3d7ecc 	ld.bu	$r12,$r22,-161(0xf5f)
9000000000007e44:	0012b00c 	sltu	$r12,$r0,$r12
9000000000007e48:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
9000000000007e4c:	44001d80 	bnez	$r12,28(0x1c) # 9000000000007e68 <check_slab+0x230>
9000000000007e50:	1c000306 	pcaddu12i	$r6,24(0x18)
9000000000007e54:	02e420c6 	addi.d	$r6,$r6,-1784(0x908)
9000000000007e58:	02885405 	addi.w	$r5,$r0,533(0x215)
9000000000007e5c:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000007e60:	02d99084 	addi.d	$r4,$r4,1636(0x664)
9000000000007e64:	544e1c00 	bl	19996(0x4e1c) # 900000000000cc80 <__panic>
        assert(GET_PAGE_CACHE(p1) == cachep0 && GET_PAGE_SLAB(p1) == slabp0);
9000000000007e68:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000007e6c:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000007e70:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000007e74:	5c0015ac 	bne	$r13,$r12,20(0x14) # 9000000000007e88 <check_slab+0x250>
9000000000007e78:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000007e7c:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000007e80:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000007e84:	58001dac 	beq	$r13,$r12,28(0x1c) # 9000000000007ea0 <check_slab+0x268>
9000000000007e88:	1c000306 	pcaddu12i	$r6,24(0x18)
9000000000007e8c:	02e3c0c6 	addi.d	$r6,$r6,-1808(0x8f0)
9000000000007e90:	02885805 	addi.w	$r5,$r0,534(0x216)
9000000000007e94:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000007e98:	02d8b084 	addi.d	$r4,$r4,1580(0x62c)
9000000000007e9c:	544de400 	bl	19940(0x4de4) # 900000000000cc80 <__panic>
    for (i = 0; i < cachep0->page_order; i ++, p1 ++) {
9000000000007ea0:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000007ea4:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000007ea8:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000007eac:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000007eb0:	02c0c18c 	addi.d	$r12,$r12,48(0x30)
9000000000007eb4:	29fee2cc 	st.d	$r12,$r22,-72(0xfb8)
9000000000007eb8:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
9000000000007ebc:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000007ec0:	28c1218c 	ld.d	$r12,$r12,72(0x48)
9000000000007ec4:	6bff25ac 	bltu	$r13,$r12,-220(0x3ff24) # 9000000000007de8 <check_slab+0x1b0>
    }

    assert(v0 == slabp0->s_mem);
9000000000007ec8:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000007ecc:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000007ed0:	28fe62cd 	ld.d	$r13,$r22,-104(0xf98)
9000000000007ed4:	58001dac 	beq	$r13,$r12,28(0x1c) # 9000000000007ef0 <check_slab+0x2b8>
9000000000007ed8:	1c000306 	pcaddu12i	$r6,24(0x18)
9000000000007edc:	02e3c0c6 	addi.d	$r6,$r6,-1808(0x8f0)
9000000000007ee0:	02886405 	addi.w	$r5,$r0,537(0x219)
9000000000007ee4:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000007ee8:	02d77084 	addi.d	$r4,$r4,1500(0x5dc)
9000000000007eec:	544d9400 	bl	19860(0x4d94) # 900000000000cc80 <__panic>
    assert((v1 = kmalloc(16)) != NULL && v1 == v0 + 32);
9000000000007ef0:	02804004 	addi.w	$r4,$r0,16(0x10)
9000000000007ef4:	57f747ff 	bl	-2236(0xffff744) # 9000000000007638 <kmalloc>
9000000000007ef8:	29fe22c4 	st.d	$r4,$r22,-120(0xf88)
9000000000007efc:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
9000000000007f00:	40001580 	beqz	$r12,20(0x14) # 9000000000007f14 <check_slab+0x2dc>
9000000000007f04:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
9000000000007f08:	02c0818c 	addi.d	$r12,$r12,32(0x20)
9000000000007f0c:	28fe22cd 	ld.d	$r13,$r22,-120(0xf88)
9000000000007f10:	58001dac 	beq	$r13,$r12,28(0x1c) # 9000000000007f2c <check_slab+0x2f4>
9000000000007f14:	1c000306 	pcaddu12i	$r6,24(0x18)
9000000000007f18:	02e370c6 	addi.d	$r6,$r6,-1828(0x8dc)
9000000000007f1c:	02886805 	addi.w	$r5,$r0,538(0x21a)
9000000000007f20:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000007f24:	02d68084 	addi.d	$r4,$r4,1440(0x5a0)
9000000000007f28:	544d5800 	bl	19800(0x4d58) # 900000000000cc80 <__panic>

    kfree(v0);
9000000000007f2c:	28fe62c4 	ld.d	$r4,$r22,-104(0xf98)
9000000000007f30:	57fbe7ff 	bl	-1052(0xffffbe4) # 9000000000007b14 <kfree>
    assert(slabp0->free == 0);
9000000000007f34:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000007f38:	28c0a18c 	ld.d	$r12,$r12,40(0x28)
9000000000007f3c:	40001d80 	beqz	$r12,28(0x1c) # 9000000000007f58 <check_slab+0x320>
9000000000007f40:	1c000306 	pcaddu12i	$r6,24(0x18)
9000000000007f44:	02e3c0c6 	addi.d	$r6,$r6,-1808(0x8f0)
9000000000007f48:	02887405 	addi.w	$r5,$r0,541(0x21d)
9000000000007f4c:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000007f50:	02d5d084 	addi.d	$r4,$r4,1396(0x574)
9000000000007f54:	544d2c00 	bl	19756(0x4d2c) # 900000000000cc80 <__panic>
    kfree(v1);
9000000000007f58:	28fe22c4 	ld.d	$r4,$r22,-120(0xf88)
9000000000007f5c:	57fbbbff 	bl	-1096(0xffffbb8) # 9000000000007b14 <kfree>
    assert(list_empty(&(cachep0->slabs_notfull)));
9000000000007f60:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000007f64:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000007f68:	29fd42cc 	st.d	$r12,$r22,-176(0xf50)
    return list->next == list;
9000000000007f6c:	28fd42cc 	ld.d	$r12,$r22,-176(0xf50)
9000000000007f70:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000007f74:	28fd42cc 	ld.d	$r12,$r22,-176(0xf50)
9000000000007f78:	0015b1ac 	xor	$r12,$r13,$r12
9000000000007f7c:	0240058c 	sltui	$r12,$r12,1(0x1)
9000000000007f80:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
9000000000007f84:	44001d80 	bnez	$r12,28(0x1c) # 9000000000007fa0 <check_slab+0x368>
9000000000007f88:	1c000306 	pcaddu12i	$r6,24(0x18)
9000000000007f8c:	02e340c6 	addi.d	$r6,$r6,-1840(0x8d0)
9000000000007f90:	02887c05 	addi.w	$r5,$r0,543(0x21f)
9000000000007f94:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000007f98:	02d4b084 	addi.d	$r4,$r4,1324(0x52c)
9000000000007f9c:	544ce400 	bl	19684(0x4ce4) # 900000000000cc80 <__panic>

    for (i = 0; i < cachep0->page_order; i ++, p0 ++) {
9000000000007fa0:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
9000000000007fa4:	50009c00 	b	156(0x9c) # 9000000000008040 <check_slab+0x408>
        assert(!PageSlab(p0));
9000000000007fa8:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000007fac:	02c0118c 	addi.d	$r12,$r12,4(0x4)
9000000000007fb0:	0280080d 	addi.w	$r13,$r0,2(0x2)
9000000000007fb4:	29bd32cd 	st.w	$r13,$r22,-180(0xf4c)
9000000000007fb8:	29fd02cc 	st.d	$r12,$r22,-192(0xf40)
  unsigned char c = 0;
9000000000007fbc:	293cfec0 	st.b	$r0,$r22,-193(0xf3f)
  local_intr_save (intr_flag);
9000000000007fc0:	57e76fff 	bl	-6292(0xfffe76c) # 900000000000672c <__intr_save>
9000000000007fc4:	0015008c 	move	$r12,$r4
9000000000007fc8:	29bce2cc 	st.w	$r12,$r22,-200(0xf38)
  if (*addr & (1 << nr))
9000000000007fcc:	28fd02cc 	ld.d	$r12,$r22,-192(0xf40)
9000000000007fd0:	2880018c 	ld.w	$r12,$r12,0
9000000000007fd4:	0015018d 	move	$r13,$r12
9000000000007fd8:	0280040e 	addi.w	$r14,$r0,1(0x1)
9000000000007fdc:	28bd32cc 	ld.w	$r12,$r22,-180(0xf4c)
9000000000007fe0:	001731cc 	sll.w	$r12,$r14,$r12
9000000000007fe4:	0014b1ac 	and	$r12,$r13,$r12
9000000000007fe8:	40000d80 	beqz	$r12,12(0xc) # 9000000000007ff4 <check_slab+0x3bc>
    c = 1;
9000000000007fec:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000007ff0:	293cfecc 	st.b	$r12,$r22,-193(0xf3f)
  local_intr_restore (intr_flag);
9000000000007ff4:	28bce2cc 	ld.w	$r12,$r22,-200(0xf38)
9000000000007ff8:	00150184 	move	$r4,$r12
9000000000007ffc:	57e763ff 	bl	-6304(0xfffe760) # 900000000000675c <__intr_restore>
  return c != 0;
9000000000008000:	2a3cfecc 	ld.bu	$r12,$r22,-193(0xf3f)
9000000000008004:	0012b00c 	sltu	$r12,$r0,$r12
9000000000008008:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
900000000000800c:	40001d80 	beqz	$r12,28(0x1c) # 9000000000008028 <check_slab+0x3f0>
9000000000008010:	1c000306 	pcaddu12i	$r6,24(0x18)
9000000000008014:	02e200c6 	addi.d	$r6,$r6,-1920(0x880)
9000000000008018:	02888805 	addi.w	$r5,$r0,546(0x222)
900000000000801c:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000008020:	02d29084 	addi.d	$r4,$r4,1188(0x4a4)
9000000000008024:	544c5c00 	bl	19548(0x4c5c) # 900000000000cc80 <__panic>
    for (i = 0; i < cachep0->page_order; i ++, p0 ++) {
9000000000008028:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000802c:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000008030:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000008034:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000008038:	02c0c18c 	addi.d	$r12,$r12,48(0x30)
900000000000803c:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
9000000000008040:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
9000000000008044:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000008048:	28c1218c 	ld.d	$r12,$r12,72(0x48)
900000000000804c:	6bff5dac 	bltu	$r13,$r12,-164(0x3ff5c) # 9000000000007fa8 <check_slab+0x370>
    }


    v0 = kmalloc(16);
9000000000008050:	02804004 	addi.w	$r4,$r0,16(0x10)
9000000000008054:	57f5e7ff 	bl	-2588(0xffff5e4) # 9000000000007638 <kmalloc>
9000000000008058:	29fe62c4 	st.d	$r4,$r22,-104(0xf98)
    assert(!list_empty(&(cachep0->slabs_notfull)));
900000000000805c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000008060:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000008064:	29fcc2cc 	st.d	$r12,$r22,-208(0xf30)
9000000000008068:	28fcc2cc 	ld.d	$r12,$r22,-208(0xf30)
900000000000806c:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000008070:	28fcc2cc 	ld.d	$r12,$r22,-208(0xf30)
9000000000008074:	0015b1ac 	xor	$r12,$r13,$r12
9000000000008078:	0240058c 	sltui	$r12,$r12,1(0x1)
900000000000807c:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
9000000000008080:	40001d80 	beqz	$r12,28(0x1c) # 900000000000809c <check_slab+0x464>
9000000000008084:	1c0002e6 	pcaddu12i	$r6,23(0x17)
9000000000008088:	02d8b0c6 	addi.d	$r6,$r6,1580(0x62c)
900000000000808c:	02889c05 	addi.w	$r5,$r0,551(0x227)
9000000000008090:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000008094:	02d0c084 	addi.d	$r4,$r4,1072(0x430)
9000000000008098:	544be800 	bl	19432(0x4be8) # 900000000000cc80 <__panic>
    slabp0 = le2slab(list_next(&(cachep0->slabs_notfull)), slab_link);
900000000000809c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000080a0:	02c0418c 	addi.d	$r12,$r12,16(0x10)
90000000000080a4:	29fca2cc 	st.d	$r12,$r22,-216(0xf28)
    return listelm->next;
90000000000080a8:	28fca2cc 	ld.d	$r12,$r22,-216(0xf28)
90000000000080ac:	28c0218c 	ld.d	$r12,$r12,8(0x8)
90000000000080b0:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)

    for (i = 0; i < cachep0->num - 1; i ++) {
90000000000080b4:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
90000000000080b8:	50001800 	b	24(0x18) # 90000000000080d0 <check_slab+0x498>
        kmalloc(16);
90000000000080bc:	02804004 	addi.w	$r4,$r0,16(0x10)
90000000000080c0:	57f57bff 	bl	-2696(0xffff578) # 9000000000007638 <kmalloc>
    for (i = 0; i < cachep0->num - 1; i ++) {
90000000000080c4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000080c8:	0280058c 	addi.w	$r12,$r12,1(0x1)
90000000000080cc:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
90000000000080d0:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
90000000000080d4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000080d8:	28c0c18c 	ld.d	$r12,$r12,48(0x30)
90000000000080dc:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
90000000000080e0:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 90000000000080bc <check_slab+0x484>
    }

    assert(slabp0->inuse == cachep0->num);
90000000000080e4:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
90000000000080e8:	28c0618d 	ld.d	$r13,$r12,24(0x18)
90000000000080ec:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000080f0:	28c0c18c 	ld.d	$r12,$r12,48(0x30)
90000000000080f4:	58001dac 	beq	$r13,$r12,28(0x1c) # 9000000000008110 <check_slab+0x4d8>
90000000000080f8:	1c0002e6 	pcaddu12i	$r6,23(0x17)
90000000000080fc:	02dee0c6 	addi.d	$r6,$r6,1976(0x7b8)
9000000000008100:	0288b805 	addi.w	$r5,$r0,558(0x22e)
9000000000008104:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000008108:	02cef084 	addi.d	$r4,$r4,956(0x3bc)
900000000000810c:	544b7400 	bl	19316(0x4b74) # 900000000000cc80 <__panic>
    assert(list_next(&(cachep0->slabs_full)) == &(slabp0->slab_link));
9000000000008110:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000008114:	29fc82cc 	st.d	$r12,$r22,-224(0xf20)
9000000000008118:	28fc82cc 	ld.d	$r12,$r22,-224(0xf20)
900000000000811c:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000008120:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000008124:	58001dac 	beq	$r13,$r12,28(0x1c) # 9000000000008140 <check_slab+0x508>
9000000000008128:	1c0002e6 	pcaddu12i	$r6,23(0x17)
900000000000812c:	02dee0c6 	addi.d	$r6,$r6,1976(0x7b8)
9000000000008130:	0288bc05 	addi.w	$r5,$r0,559(0x22f)
9000000000008134:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000008138:	02ce3084 	addi.d	$r4,$r4,908(0x38c)
900000000000813c:	544b4400 	bl	19268(0x4b44) # 900000000000cc80 <__panic>
    assert(list_empty(&(cachep0->slabs_notfull)));
9000000000008140:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000008144:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000008148:	29fc62cc 	st.d	$r12,$r22,-232(0xf18)
    return list->next == list;
900000000000814c:	28fc62cc 	ld.d	$r12,$r22,-232(0xf18)
9000000000008150:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000008154:	28fc62cc 	ld.d	$r12,$r22,-232(0xf18)
9000000000008158:	0015b1ac 	xor	$r12,$r13,$r12
900000000000815c:	0240058c 	sltui	$r12,$r12,1(0x1)
9000000000008160:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
9000000000008164:	44001d80 	bnez	$r12,28(0x1c) # 9000000000008180 <check_slab+0x548>
9000000000008168:	1c0002e6 	pcaddu12i	$r6,23(0x17)
900000000000816c:	02dbc0c6 	addi.d	$r6,$r6,1776(0x6f0)
9000000000008170:	0288c005 	addi.w	$r5,$r0,560(0x230)
9000000000008174:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000008178:	02cd3084 	addi.d	$r4,$r4,844(0x34c)
900000000000817c:	544b0400 	bl	19204(0x4b04) # 900000000000cc80 <__panic>

    v1 = kmalloc(16);
9000000000008180:	02804004 	addi.w	$r4,$r0,16(0x10)
9000000000008184:	57f4b7ff 	bl	-2892(0xffff4b4) # 9000000000007638 <kmalloc>
9000000000008188:	29fe22c4 	st.d	$r4,$r22,-120(0xf88)
    assert(!list_empty(&(cachep0->slabs_notfull)));
900000000000818c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000008190:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000008194:	29fc42cc 	st.d	$r12,$r22,-240(0xf10)
9000000000008198:	28fc42cc 	ld.d	$r12,$r22,-240(0xf10)
900000000000819c:	28c0218d 	ld.d	$r13,$r12,8(0x8)
90000000000081a0:	28fc42cc 	ld.d	$r12,$r22,-240(0xf10)
90000000000081a4:	0015b1ac 	xor	$r12,$r13,$r12
90000000000081a8:	0240058c 	sltui	$r12,$r12,1(0x1)
90000000000081ac:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
90000000000081b0:	40001d80 	beqz	$r12,28(0x1c) # 90000000000081cc <check_slab+0x594>
90000000000081b4:	1c0002e6 	pcaddu12i	$r6,23(0x17)
90000000000081b8:	02d3f0c6 	addi.d	$r6,$r6,1276(0x4fc)
90000000000081bc:	0288cc05 	addi.w	$r5,$r0,563(0x233)
90000000000081c0:	1c0002e4 	pcaddu12i	$r4,23(0x17)
90000000000081c4:	02cc0084 	addi.d	$r4,$r4,768(0x300)
90000000000081c8:	544ab800 	bl	19128(0x4ab8) # 900000000000cc80 <__panic>
    slabp1 = le2slab(list_next(&(cachep0->slabs_notfull)), slab_link);
90000000000081cc:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000081d0:	02c0418c 	addi.d	$r12,$r12,16(0x10)
90000000000081d4:	29fc02cc 	st.d	$r12,$r22,-256(0xf00)
    return listelm->next;
90000000000081d8:	28fc02cc 	ld.d	$r12,$r22,-256(0xf00)
90000000000081dc:	28c0218c 	ld.d	$r12,$r12,8(0x8)
90000000000081e0:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)

    kfree(v0);
90000000000081e4:	28fe62c4 	ld.d	$r4,$r22,-104(0xf98)
90000000000081e8:	57f92fff 	bl	-1748(0xffff92c) # 9000000000007b14 <kfree>
    assert(list_empty(&(cachep0->slabs_full)));
90000000000081ec:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000081f0:	29fc22cc 	st.d	$r12,$r22,-248(0xf08)
    return list->next == list;
90000000000081f4:	28fc22cc 	ld.d	$r12,$r22,-248(0xf08)
90000000000081f8:	28c0218d 	ld.d	$r13,$r12,8(0x8)
90000000000081fc:	28fc22cc 	ld.d	$r12,$r22,-248(0xf08)
9000000000008200:	0015b1ac 	xor	$r12,$r13,$r12
9000000000008204:	0240058c 	sltui	$r12,$r12,1(0x1)
9000000000008208:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
900000000000820c:	44001d80 	bnez	$r12,28(0x1c) # 9000000000008228 <check_slab+0x5f0>
9000000000008210:	1c0002e6 	pcaddu12i	$r6,23(0x17)
9000000000008214:	02dc80c6 	addi.d	$r6,$r6,1824(0x720)
9000000000008218:	0288dc05 	addi.w	$r5,$r0,567(0x237)
900000000000821c:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000008220:	02ca9084 	addi.d	$r4,$r4,676(0x2a4)
9000000000008224:	544a5c00 	bl	19036(0x4a5c) # 900000000000cc80 <__panic>
    assert(list_next(&(slabp0->slab_link)) == &(slabp1->slab_link)
9000000000008228:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000822c:	29fbe2cc 	st.d	$r12,$r22,-264(0xef8)
    return listelm->next;
9000000000008230:	28fbe2cc 	ld.d	$r12,$r22,-264(0xef8)
9000000000008234:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000008238:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000823c:	580035ac 	beq	$r13,$r12,52(0x34) # 9000000000008270 <check_slab+0x638>
9000000000008240:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000008244:	29fbc2cc 	st.d	$r12,$r22,-272(0xef0)
9000000000008248:	28fbc2cc 	ld.d	$r12,$r22,-272(0xef0)
900000000000824c:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000008250:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000008254:	58001dac 	beq	$r13,$r12,28(0x1c) # 9000000000008270 <check_slab+0x638>
9000000000008258:	1c0002e6 	pcaddu12i	$r6,23(0x17)
900000000000825c:	02dc40c6 	addi.d	$r6,$r6,1808(0x710)
9000000000008260:	0288e405 	addi.w	$r5,$r0,569(0x239)
9000000000008264:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000008268:	02c97084 	addi.d	$r4,$r4,604(0x25c)
900000000000826c:	544a1400 	bl	18964(0x4a14) # 900000000000cc80 <__panic>
            || list_next(&(slabp1->slab_link)) == &(slabp0->slab_link));

    kfree(v1);
9000000000008270:	28fe22c4 	ld.d	$r4,$r22,-120(0xf88)
9000000000008274:	57f8a3ff 	bl	-1888(0xffff8a0) # 9000000000007b14 <kfree>
    assert(!list_empty(&(cachep0->slabs_notfull)));
9000000000008278:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000827c:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000008280:	29fba2cc 	st.d	$r12,$r22,-280(0xee8)
    return list->next == list;
9000000000008284:	28fba2cc 	ld.d	$r12,$r22,-280(0xee8)
9000000000008288:	28c0218d 	ld.d	$r13,$r12,8(0x8)
900000000000828c:	28fba2cc 	ld.d	$r12,$r22,-280(0xee8)
9000000000008290:	0015b1ac 	xor	$r12,$r13,$r12
9000000000008294:	0240058c 	sltui	$r12,$r12,1(0x1)
9000000000008298:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
900000000000829c:	40001d80 	beqz	$r12,28(0x1c) # 90000000000082b8 <check_slab+0x680>
90000000000082a0:	1c0002e6 	pcaddu12i	$r6,23(0x17)
90000000000082a4:	02d040c6 	addi.d	$r6,$r6,1040(0x410)
90000000000082a8:	0288f005 	addi.w	$r5,$r0,572(0x23c)
90000000000082ac:	1c0002e4 	pcaddu12i	$r4,23(0x17)
90000000000082b0:	02c85084 	addi.d	$r4,$r4,532(0x214)
90000000000082b4:	5449cc00 	bl	18892(0x49cc) # 900000000000cc80 <__panic>
    assert(list_next(&(cachep0->slabs_notfull)) == &(slabp0->slab_link));
90000000000082b8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000082bc:	02c0418c 	addi.d	$r12,$r12,16(0x10)
90000000000082c0:	29fb82cc 	st.d	$r12,$r22,-288(0xee0)
    return listelm->next;
90000000000082c4:	28fb82cc 	ld.d	$r12,$r22,-288(0xee0)
90000000000082c8:	28c0218d 	ld.d	$r13,$r12,8(0x8)
90000000000082cc:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
90000000000082d0:	58001dac 	beq	$r13,$r12,28(0x1c) # 90000000000082ec <check_slab+0x6b4>
90000000000082d4:	1c0002e6 	pcaddu12i	$r6,23(0x17)
90000000000082d8:	02dc70c6 	addi.d	$r6,$r6,1820(0x71c)
90000000000082dc:	0288f405 	addi.w	$r5,$r0,573(0x23d)
90000000000082e0:	1c0002e4 	pcaddu12i	$r4,23(0x17)
90000000000082e4:	02c78084 	addi.d	$r4,$r4,480(0x1e0)
90000000000082e8:	54499800 	bl	18840(0x4998) # 900000000000cc80 <__panic>
    assert(list_next(&(slabp0->slab_link)) == &(cachep0->slabs_notfull));
90000000000082ec:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
90000000000082f0:	29fb62cc 	st.d	$r12,$r22,-296(0xed8)
90000000000082f4:	28fb62cc 	ld.d	$r12,$r22,-296(0xed8)
90000000000082f8:	28c0218d 	ld.d	$r13,$r12,8(0x8)
90000000000082fc:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000008300:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000008304:	58001dac 	beq	$r13,$r12,28(0x1c) # 9000000000008320 <check_slab+0x6e8>
9000000000008308:	1c0002e6 	pcaddu12i	$r6,23(0x17)
900000000000830c:	02dce0c6 	addi.d	$r6,$r6,1848(0x738)
9000000000008310:	0288f805 	addi.w	$r5,$r0,574(0x23e)
9000000000008314:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000008318:	02c6b084 	addi.d	$r4,$r4,428(0x1ac)
900000000000831c:	54496400 	bl	18788(0x4964) # 900000000000cc80 <__panic>

    v1 = kmalloc(16);
9000000000008320:	02804004 	addi.w	$r4,$r0,16(0x10)
9000000000008324:	57f317ff 	bl	-3308(0xffff314) # 9000000000007638 <kmalloc>
9000000000008328:	29fe22c4 	st.d	$r4,$r22,-120(0xf88)
    assert(v1 == v0);
900000000000832c:	28fe22cd 	ld.d	$r13,$r22,-120(0xf88)
9000000000008330:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
9000000000008334:	58001dac 	beq	$r13,$r12,28(0x1c) # 9000000000008350 <check_slab+0x718>
9000000000008338:	1c0002e6 	pcaddu12i	$r6,23(0x17)
900000000000833c:	02dd60c6 	addi.d	$r6,$r6,1880(0x758)
9000000000008340:	02890405 	addi.w	$r5,$r0,577(0x241)
9000000000008344:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000008348:	02c5f084 	addi.d	$r4,$r4,380(0x17c)
900000000000834c:	54493400 	bl	18740(0x4934) # 900000000000cc80 <__panic>
    assert(list_next(&(cachep0->slabs_full)) == &(slabp0->slab_link));
9000000000008350:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000008354:	29fb42cc 	st.d	$r12,$r22,-304(0xed0)
9000000000008358:	28fb42cc 	ld.d	$r12,$r22,-304(0xed0)
900000000000835c:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000008360:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000008364:	58001dac 	beq	$r13,$r12,28(0x1c) # 9000000000008380 <check_slab+0x748>
9000000000008368:	1c0002e6 	pcaddu12i	$r6,23(0x17)
900000000000836c:	02d5e0c6 	addi.d	$r6,$r6,1400(0x578)
9000000000008370:	02890805 	addi.w	$r5,$r0,578(0x242)
9000000000008374:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000008378:	02c53084 	addi.d	$r4,$r4,332(0x14c)
900000000000837c:	54490400 	bl	18692(0x4904) # 900000000000cc80 <__panic>
    assert(list_empty(&(cachep0->slabs_notfull)));
9000000000008380:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000008384:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000008388:	29fb22cc 	st.d	$r12,$r22,-312(0xec8)
    return list->next == list;
900000000000838c:	28fb22cc 	ld.d	$r12,$r22,-312(0xec8)
9000000000008390:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000008394:	28fb22cc 	ld.d	$r12,$r22,-312(0xec8)
9000000000008398:	0015b1ac 	xor	$r12,$r13,$r12
900000000000839c:	0240058c 	sltui	$r12,$r12,1(0x1)
90000000000083a0:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
90000000000083a4:	44001d80 	bnez	$r12,28(0x1c) # 90000000000083c0 <check_slab+0x788>
90000000000083a8:	1c0002e6 	pcaddu12i	$r6,23(0x17)
90000000000083ac:	02d2c0c6 	addi.d	$r6,$r6,1200(0x4b0)
90000000000083b0:	02890c05 	addi.w	$r5,$r0,579(0x243)
90000000000083b4:	1c0002e4 	pcaddu12i	$r4,23(0x17)
90000000000083b8:	02c43084 	addi.d	$r4,$r4,268(0x10c)
90000000000083bc:	5448c400 	bl	18628(0x48c4) # 900000000000cc80 <__panic>

    for (i = 0; i < cachep0->num; i ++) {
90000000000083c0:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
90000000000083c4:	50003000 	b	48(0x30) # 90000000000083f4 <check_slab+0x7bc>
        kfree(v1 + i * cachep0->objsize);
90000000000083c8:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
90000000000083cc:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000083d0:	28c0818c 	ld.d	$r12,$r12,32(0x20)
90000000000083d4:	001db1ac 	mul.d	$r12,$r13,$r12
90000000000083d8:	28fe22cd 	ld.d	$r13,$r22,-120(0xf88)
90000000000083dc:	0010b1ac 	add.d	$r12,$r13,$r12
90000000000083e0:	00150184 	move	$r4,$r12
90000000000083e4:	57f733ff 	bl	-2256(0xffff730) # 9000000000007b14 <kfree>
    for (i = 0; i < cachep0->num; i ++) {
90000000000083e8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000083ec:	0280058c 	addi.w	$r12,$r12,1(0x1)
90000000000083f0:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
90000000000083f4:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
90000000000083f8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000083fc:	28c0c18c 	ld.d	$r12,$r12,48(0x30)
9000000000008400:	6bffc9ac 	bltu	$r13,$r12,-56(0x3ffc8) # 90000000000083c8 <check_slab+0x790>
    }

    assert(list_empty(&(cachep0->slabs_full)));
9000000000008404:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000008408:	29fb02cc 	st.d	$r12,$r22,-320(0xec0)
900000000000840c:	28fb02cc 	ld.d	$r12,$r22,-320(0xec0)
9000000000008410:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000008414:	28fb02cc 	ld.d	$r12,$r22,-320(0xec0)
9000000000008418:	0015b1ac 	xor	$r12,$r13,$r12
900000000000841c:	0240058c 	sltui	$r12,$r12,1(0x1)
9000000000008420:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
9000000000008424:	44001d80 	bnez	$r12,28(0x1c) # 9000000000008440 <check_slab+0x808>
9000000000008428:	1c0002e6 	pcaddu12i	$r6,23(0x17)
900000000000842c:	02d420c6 	addi.d	$r6,$r6,1288(0x508)
9000000000008430:	02892405 	addi.w	$r5,$r0,585(0x249)
9000000000008434:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000008438:	02c23084 	addi.d	$r4,$r4,140(0x8c)
900000000000843c:	54484400 	bl	18500(0x4844) # 900000000000cc80 <__panic>
    assert(list_empty(&(cachep0->slabs_notfull)));
9000000000008440:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000008444:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000008448:	29fae2cc 	st.d	$r12,$r22,-328(0xeb8)
900000000000844c:	28fae2cc 	ld.d	$r12,$r22,-328(0xeb8)
9000000000008450:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000008454:	28fae2cc 	ld.d	$r12,$r22,-328(0xeb8)
9000000000008458:	0015b1ac 	xor	$r12,$r13,$r12
900000000000845c:	0240058c 	sltui	$r12,$r12,1(0x1)
9000000000008460:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
9000000000008464:	44001d80 	bnez	$r12,28(0x1c) # 9000000000008480 <check_slab+0x848>
9000000000008468:	1c0002e6 	pcaddu12i	$r6,23(0x17)
900000000000846c:	02cfc0c6 	addi.d	$r6,$r6,1008(0x3f0)
9000000000008470:	02892805 	addi.w	$r5,$r0,586(0x24a)
9000000000008474:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000008478:	02c13084 	addi.d	$r4,$r4,76(0x4c)
900000000000847c:	54480400 	bl	18436(0x4804) # 900000000000cc80 <__panic>

    cachep0 = slab_cache;
9000000000008480:	1c00434c 	pcaddu12i	$r12,538(0x21a)
9000000000008484:	02ec818c 	addi.d	$r12,$r12,-1248(0xb20)
9000000000008488:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)

    bool has_off_slab = 0;
900000000000848c:	29bed2c0 	st.w	$r0,$r22,-76(0xfb4)
    for (i = 0; i < SLAB_CACHE_NUM; i ++, cachep0 ++) {
9000000000008490:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
9000000000008494:	50004800 	b	72(0x48) # 90000000000084dc <check_slab+0x8a4>
        if (cachep0->off_slab) {
9000000000008498:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000849c:	2881018c 	ld.w	$r12,$r12,64(0x40)
90000000000084a0:	40002580 	beqz	$r12,36(0x24) # 90000000000084c4 <check_slab+0x88c>
            has_off_slab = 1;
90000000000084a4:	0280040c 	addi.w	$r12,$r0,1(0x1)
90000000000084a8:	29bed2cc 	st.w	$r12,$r22,-76(0xfb4)
            cachep1 = cachep0->slab_cachep;
90000000000084ac:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000084b0:	28c1418c 	ld.d	$r12,$r12,80(0x50)
90000000000084b4:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
            if (!cachep1->off_slab) {
90000000000084b8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000084bc:	2881018c 	ld.w	$r12,$r12,64(0x40)
90000000000084c0:	40003180 	beqz	$r12,48(0x30) # 90000000000084f0 <check_slab+0x8b8>
    for (i = 0; i < SLAB_CACHE_NUM; i ++, cachep0 ++) {
90000000000084c4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000084c8:	0280058c 	addi.w	$r12,$r12,1(0x1)
90000000000084cc:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
90000000000084d0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000084d4:	02c1618c 	addi.d	$r12,$r12,88(0x58)
90000000000084d8:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
90000000000084dc:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000084e0:	0015018d 	move	$r13,$r12
90000000000084e4:	0280300c 	addi.w	$r12,$r0,12(0xc)
90000000000084e8:	67ffb18d 	bge	$r12,$r13,-80(0x3ffb0) # 9000000000008498 <check_slab+0x860>
90000000000084ec:	50000800 	b	8(0x8) # 90000000000084f4 <check_slab+0x8bc>
                break;
90000000000084f0:	03400000 	andi	$r0,$r0,0x0
            }
        }
    }

    if (!has_off_slab) {
90000000000084f4:	28bed2cc 	ld.w	$r12,$r22,-76(0xfb4)
90000000000084f8:	40046180 	beqz	$r12,1120(0x460) # 9000000000008958 <check_slab+0xd20>
        goto check_pass;
    }

    assert(cachep0->off_slab && !cachep1->off_slab);
90000000000084fc:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000008500:	2881018c 	ld.w	$r12,$r12,64(0x40)
9000000000008504:	40001180 	beqz	$r12,16(0x10) # 9000000000008514 <check_slab+0x8dc>
9000000000008508:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000850c:	2881018c 	ld.w	$r12,$r12,64(0x40)
9000000000008510:	40001d80 	beqz	$r12,28(0x1c) # 900000000000852c <check_slab+0x8f4>
9000000000008514:	1c0002e6 	pcaddu12i	$r6,23(0x17)
9000000000008518:	02d670c6 	addi.d	$r6,$r6,1436(0x59c)
900000000000851c:	02897405 	addi.w	$r5,$r0,605(0x25d)
9000000000008520:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000008524:	02fe8084 	addi.d	$r4,$r4,-96(0xfa0)
9000000000008528:	54475800 	bl	18264(0x4758) # 900000000000cc80 <__panic>
    assert(cachep1 < cachep0);
900000000000852c:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000008530:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000008534:	68001dac 	bltu	$r13,$r12,28(0x1c) # 9000000000008550 <check_slab+0x918>
9000000000008538:	1c0002e6 	pcaddu12i	$r6,23(0x17)
900000000000853c:	02d6e0c6 	addi.d	$r6,$r6,1464(0x5b8)
9000000000008540:	02897805 	addi.w	$r5,$r0,606(0x25e)
9000000000008544:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000008548:	02fdf084 	addi.d	$r4,$r4,-132(0xf7c)
900000000000854c:	54473400 	bl	18228(0x4734) # 900000000000cc80 <__panic>

    assert(list_empty(&(cachep0->slabs_full)));
9000000000008550:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000008554:	29fac2cc 	st.d	$r12,$r22,-336(0xeb0)
9000000000008558:	28fac2cc 	ld.d	$r12,$r22,-336(0xeb0)
900000000000855c:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000008560:	28fac2cc 	ld.d	$r12,$r22,-336(0xeb0)
9000000000008564:	0015b1ac 	xor	$r12,$r13,$r12
9000000000008568:	0240058c 	sltui	$r12,$r12,1(0x1)
900000000000856c:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
9000000000008570:	44001d80 	bnez	$r12,28(0x1c) # 900000000000858c <check_slab+0x954>
9000000000008574:	1c0002e6 	pcaddu12i	$r6,23(0x17)
9000000000008578:	02cef0c6 	addi.d	$r6,$r6,956(0x3bc)
900000000000857c:	02898005 	addi.w	$r5,$r0,608(0x260)
9000000000008580:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000008584:	02fd0084 	addi.d	$r4,$r4,-192(0xf40)
9000000000008588:	5446f800 	bl	18168(0x46f8) # 900000000000cc80 <__panic>
    assert(list_empty(&(cachep0->slabs_notfull)));
900000000000858c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000008590:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000008594:	29faa2cc 	st.d	$r12,$r22,-344(0xea8)
9000000000008598:	28faa2cc 	ld.d	$r12,$r22,-344(0xea8)
900000000000859c:	28c0218d 	ld.d	$r13,$r12,8(0x8)
90000000000085a0:	28faa2cc 	ld.d	$r12,$r22,-344(0xea8)
90000000000085a4:	0015b1ac 	xor	$r12,$r13,$r12
90000000000085a8:	0240058c 	sltui	$r12,$r12,1(0x1)
90000000000085ac:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
90000000000085b0:	44001d80 	bnez	$r12,28(0x1c) # 90000000000085cc <check_slab+0x994>
90000000000085b4:	1c0002e6 	pcaddu12i	$r6,23(0x17)
90000000000085b8:	02ca90c6 	addi.d	$r6,$r6,676(0x2a4)
90000000000085bc:	02898405 	addi.w	$r5,$r0,609(0x261)
90000000000085c0:	1c0002e4 	pcaddu12i	$r4,23(0x17)
90000000000085c4:	02fc0084 	addi.d	$r4,$r4,-256(0xf00)
90000000000085c8:	5446b800 	bl	18104(0x46b8) # 900000000000cc80 <__panic>

    assert(list_empty(&(cachep1->slabs_full)));
90000000000085cc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000085d0:	29fa82cc 	st.d	$r12,$r22,-352(0xea0)
90000000000085d4:	28fa82cc 	ld.d	$r12,$r22,-352(0xea0)
90000000000085d8:	28c0218d 	ld.d	$r13,$r12,8(0x8)
90000000000085dc:	28fa82cc 	ld.d	$r12,$r22,-352(0xea0)
90000000000085e0:	0015b1ac 	xor	$r12,$r13,$r12
90000000000085e4:	0240058c 	sltui	$r12,$r12,1(0x1)
90000000000085e8:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
90000000000085ec:	44001d80 	bnez	$r12,28(0x1c) # 9000000000008608 <check_slab+0x9d0>
90000000000085f0:	1c0002e6 	pcaddu12i	$r6,23(0x17)
90000000000085f4:	02d4a0c6 	addi.d	$r6,$r6,1320(0x528)
90000000000085f8:	02898c05 	addi.w	$r5,$r0,611(0x263)
90000000000085fc:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000008600:	02fb1084 	addi.d	$r4,$r4,-316(0xec4)
9000000000008604:	54467c00 	bl	18044(0x467c) # 900000000000cc80 <__panic>
    assert(list_empty(&(cachep1->slabs_notfull)));
9000000000008608:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000860c:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000008610:	29fa62cc 	st.d	$r12,$r22,-360(0xe98)
9000000000008614:	28fa62cc 	ld.d	$r12,$r22,-360(0xe98)
9000000000008618:	28c0218d 	ld.d	$r13,$r12,8(0x8)
900000000000861c:	28fa62cc 	ld.d	$r12,$r22,-360(0xe98)
9000000000008620:	0015b1ac 	xor	$r12,$r13,$r12
9000000000008624:	0240058c 	sltui	$r12,$r12,1(0x1)
9000000000008628:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
900000000000862c:	44001d80 	bnez	$r12,28(0x1c) # 9000000000008648 <check_slab+0xa10>
9000000000008630:	1c0002e6 	pcaddu12i	$r6,23(0x17)
9000000000008634:	02d480c6 	addi.d	$r6,$r6,1312(0x520)
9000000000008638:	02899005 	addi.w	$r5,$r0,612(0x264)
900000000000863c:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000008640:	02fa1084 	addi.d	$r4,$r4,-380(0xe84)
9000000000008644:	54463c00 	bl	17980(0x463c) # 900000000000cc80 <__panic>

    v0 = kmalloc(cachep0->objsize);
9000000000008648:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000864c:	28c0818c 	ld.d	$r12,$r12,32(0x20)
9000000000008650:	00150184 	move	$r4,$r12
9000000000008654:	57efe7ff 	bl	-4124(0xfffefe4) # 9000000000007638 <kmalloc>
9000000000008658:	29fe62c4 	st.d	$r4,$r22,-104(0xf98)
    p0 = kva2page(v0);
900000000000865c:	28fe62c4 	ld.d	$r4,$r22,-104(0xf98)
9000000000008660:	57e2bbff 	bl	-7496(0xfffe2b8) # 9000000000006918 <kva2page>
9000000000008664:	29ff02c4 	st.d	$r4,$r22,-64(0xfc0)
    assert(page2kva(p0) == v0);
9000000000008668:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
900000000000866c:	57e233ff 	bl	-7632(0xfffe230) # 900000000000689c <page2kva>
9000000000008670:	0015008d 	move	$r13,$r4
9000000000008674:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
9000000000008678:	58001d8d 	beq	$r12,$r13,28(0x1c) # 9000000000008694 <check_slab+0xa5c>
900000000000867c:	1c0002e6 	pcaddu12i	$r6,23(0x17)
9000000000008680:	02d430c6 	addi.d	$r6,$r6,1292(0x50c)
9000000000008684:	0289a005 	addi.w	$r5,$r0,616(0x268)
9000000000008688:	1c0002e4 	pcaddu12i	$r4,23(0x17)
900000000000868c:	02f8e084 	addi.d	$r4,$r4,-456(0xe38)
9000000000008690:	5445f000 	bl	17904(0x45f0) # 900000000000cc80 <__panic>

    if (cachep0->num == 1) {
9000000000008694:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000008698:	28c0c18d 	ld.d	$r13,$r12,48(0x30)
900000000000869c:	0280040c 	addi.w	$r12,$r0,1(0x1)
90000000000086a0:	5c0059ac 	bne	$r13,$r12,88(0x58) # 90000000000086f8 <check_slab+0xac0>
        assert(!list_empty(&(cachep0->slabs_full)));
90000000000086a4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000086a8:	29fa42cc 	st.d	$r12,$r22,-368(0xe90)
90000000000086ac:	28fa42cc 	ld.d	$r12,$r22,-368(0xe90)
90000000000086b0:	28c0218d 	ld.d	$r13,$r12,8(0x8)
90000000000086b4:	28fa42cc 	ld.d	$r12,$r22,-368(0xe90)
90000000000086b8:	0015b1ac 	xor	$r12,$r13,$r12
90000000000086bc:	0240058c 	sltui	$r12,$r12,1(0x1)
90000000000086c0:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
90000000000086c4:	40001d80 	beqz	$r12,28(0x1c) # 90000000000086e0 <check_slab+0xaa8>
90000000000086c8:	1c0002e6 	pcaddu12i	$r6,23(0x17)
90000000000086cc:	02d3a0c6 	addi.d	$r6,$r6,1256(0x4e8)
90000000000086d0:	0289ac05 	addi.w	$r5,$r0,619(0x26b)
90000000000086d4:	1c0002e4 	pcaddu12i	$r4,23(0x17)
90000000000086d8:	02f7b084 	addi.d	$r4,$r4,-532(0xdec)
90000000000086dc:	5445a400 	bl	17828(0x45a4) # 900000000000cc80 <__panic>
        slabp0 = le2slab(list_next(&(cachep0->slabs_full)), slab_link);
90000000000086e0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000086e4:	29fa22cc 	st.d	$r12,$r22,-376(0xe88)
    return listelm->next;
90000000000086e8:	28fa22cc 	ld.d	$r12,$r22,-376(0xe88)
90000000000086ec:	28c0218c 	ld.d	$r12,$r12,8(0x8)
90000000000086f0:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
90000000000086f4:	50005c00 	b	92(0x5c) # 9000000000008750 <check_slab+0xb18>
    }
    else {
        assert(!list_empty(&(cachep0->slabs_notfull)));
90000000000086f8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000086fc:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000008700:	29fa02cc 	st.d	$r12,$r22,-384(0xe80)
    return list->next == list;
9000000000008704:	28fa02cc 	ld.d	$r12,$r22,-384(0xe80)
9000000000008708:	28c0218d 	ld.d	$r13,$r12,8(0x8)
900000000000870c:	28fa02cc 	ld.d	$r12,$r22,-384(0xe80)
9000000000008710:	0015b1ac 	xor	$r12,$r13,$r12
9000000000008714:	0240058c 	sltui	$r12,$r12,1(0x1)
9000000000008718:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
900000000000871c:	40001d80 	beqz	$r12,28(0x1c) # 9000000000008738 <check_slab+0xb00>
9000000000008720:	1c0002e6 	pcaddu12i	$r6,23(0x17)
9000000000008724:	02fe40c6 	addi.d	$r6,$r6,-112(0xf90)
9000000000008728:	0289bc05 	addi.w	$r5,$r0,623(0x26f)
900000000000872c:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000008730:	02f65084 	addi.d	$r4,$r4,-620(0xd94)
9000000000008734:	54454c00 	bl	17740(0x454c) # 900000000000cc80 <__panic>
        slabp0 = le2slab(list_next(&(cachep0->slabs_notfull)), slab_link);
9000000000008738:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000873c:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000008740:	29f9e2cc 	st.d	$r12,$r22,-392(0xe78)
    return listelm->next;
9000000000008744:	28f9e2cc 	ld.d	$r12,$r22,-392(0xe78)
9000000000008748:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000000874c:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    }

    assert(slabp0 != NULL);
9000000000008750:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000008754:	44001d80 	bnez	$r12,28(0x1c) # 9000000000008770 <check_slab+0xb38>
9000000000008758:	1c0002e6 	pcaddu12i	$r6,23(0x17)
900000000000875c:	02d240c6 	addi.d	$r6,$r6,1168(0x490)
9000000000008760:	0289cc05 	addi.w	$r5,$r0,627(0x273)
9000000000008764:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000008768:	02f57084 	addi.d	$r4,$r4,-676(0xd5c)
900000000000876c:	54451400 	bl	17684(0x4514) # 900000000000cc80 <__panic>

    if (cachep1->num == 1) {
9000000000008770:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000008774:	28c0c18d 	ld.d	$r13,$r12,48(0x30)
9000000000008778:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000000877c:	5c0059ac 	bne	$r13,$r12,88(0x58) # 90000000000087d4 <check_slab+0xb9c>
        assert(!list_empty(&(cachep1->slabs_full)));
9000000000008780:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000008784:	29f9c2cc 	st.d	$r12,$r22,-400(0xe70)
    return list->next == list;
9000000000008788:	28f9c2cc 	ld.d	$r12,$r22,-400(0xe70)
900000000000878c:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000008790:	28f9c2cc 	ld.d	$r12,$r22,-400(0xe70)
9000000000008794:	0015b1ac 	xor	$r12,$r13,$r12
9000000000008798:	0240058c 	sltui	$r12,$r12,1(0x1)
900000000000879c:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
90000000000087a0:	40001d80 	beqz	$r12,28(0x1c) # 90000000000087bc <check_slab+0xb84>
90000000000087a4:	1c0002e6 	pcaddu12i	$r6,23(0x17)
90000000000087a8:	02d1b0c6 	addi.d	$r6,$r6,1132(0x46c)
90000000000087ac:	0289d805 	addi.w	$r5,$r0,630(0x276)
90000000000087b0:	1c0002e4 	pcaddu12i	$r4,23(0x17)
90000000000087b4:	02f44084 	addi.d	$r4,$r4,-752(0xd10)
90000000000087b8:	5444c800 	bl	17608(0x44c8) # 900000000000cc80 <__panic>
        slabp1 = le2slab(list_next(&(cachep1->slabs_full)), slab_link);
90000000000087bc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000087c0:	29f9a2cc 	st.d	$r12,$r22,-408(0xe68)
    return listelm->next;
90000000000087c4:	28f9a2cc 	ld.d	$r12,$r22,-408(0xe68)
90000000000087c8:	28c0218c 	ld.d	$r12,$r12,8(0x8)
90000000000087cc:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
90000000000087d0:	50005c00 	b	92(0x5c) # 900000000000882c <check_slab+0xbf4>
    }
    else {
        assert(!list_empty(&(cachep1->slabs_notfull)));
90000000000087d4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000087d8:	02c0418c 	addi.d	$r12,$r12,16(0x10)
90000000000087dc:	29f982cc 	st.d	$r12,$r22,-416(0xe60)
    return list->next == list;
90000000000087e0:	28f982cc 	ld.d	$r12,$r22,-416(0xe60)
90000000000087e4:	28c0218d 	ld.d	$r13,$r12,8(0x8)
90000000000087e8:	28f982cc 	ld.d	$r12,$r22,-416(0xe60)
90000000000087ec:	0015b1ac 	xor	$r12,$r13,$r12
90000000000087f0:	0240058c 	sltui	$r12,$r12,1(0x1)
90000000000087f4:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
90000000000087f8:	40001d80 	beqz	$r12,28(0x1c) # 9000000000008814 <check_slab+0xbdc>
90000000000087fc:	1c0002e6 	pcaddu12i	$r6,23(0x17)
9000000000008800:	02d130c6 	addi.d	$r6,$r6,1100(0x44c)
9000000000008804:	0289e805 	addi.w	$r5,$r0,634(0x27a)
9000000000008808:	1c0002e4 	pcaddu12i	$r4,23(0x17)
900000000000880c:	02f2e084 	addi.d	$r4,$r4,-840(0xcb8)
9000000000008810:	54447000 	bl	17520(0x4470) # 900000000000cc80 <__panic>
        slabp1 = le2slab(list_next(&(cachep1->slabs_notfull)), slab_link);
9000000000008814:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000008818:	02c0418c 	addi.d	$r12,$r12,16(0x10)
900000000000881c:	29f962cc 	st.d	$r12,$r22,-424(0xe58)
    return listelm->next;
9000000000008820:	28f962cc 	ld.d	$r12,$r22,-424(0xe58)
9000000000008824:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000008828:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
    }

    assert(slabp1 != NULL);
900000000000882c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000008830:	44001d80 	bnez	$r12,28(0x1c) # 900000000000884c <check_slab+0xc14>
9000000000008834:	1c0002e6 	pcaddu12i	$r6,23(0x17)
9000000000008838:	02d150c6 	addi.d	$r6,$r6,1108(0x454)
900000000000883c:	0289f805 	addi.w	$r5,$r0,638(0x27e)
9000000000008840:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000008844:	02f20084 	addi.d	$r4,$r4,-896(0xc80)
9000000000008848:	54443800 	bl	17464(0x4438) # 900000000000cc80 <__panic>

    order_size = (1 << cachep0->page_order);
900000000000884c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000008850:	28c1218c 	ld.d	$r12,$r12,72(0x48)
9000000000008854:	0040818c 	slli.w	$r12,$r12,0x0
9000000000008858:	0040818d 	slli.w	$r13,$r12,0x0
900000000000885c:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000008860:	0017358c 	sll.w	$r12,$r12,$r13
9000000000008864:	29fe42cc 	st.d	$r12,$r22,-112(0xf90)
    for (i = 0; i < order_size; i ++, p0 ++) {
9000000000008868:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
900000000000886c:	5000d400 	b	212(0xd4) # 9000000000008940 <check_slab+0xd08>
        assert(PageSlab(p0));
9000000000008870:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000008874:	02c0118c 	addi.d	$r12,$r12,4(0x4)
9000000000008878:	0280080d 	addi.w	$r13,$r0,2(0x2)
900000000000887c:	29b952cd 	st.w	$r13,$r22,-428(0xe54)
9000000000008880:	29f922cc 	st.d	$r12,$r22,-440(0xe48)
  unsigned char c = 0;
9000000000008884:	29391ec0 	st.b	$r0,$r22,-441(0xe47)
  local_intr_save (intr_flag);
9000000000008888:	57dea7ff 	bl	-8540(0xfffdea4) # 900000000000672c <__intr_save>
900000000000888c:	0015008c 	move	$r12,$r4
9000000000008890:	29b902cc 	st.w	$r12,$r22,-448(0xe40)
  if (*addr & (1 << nr))
9000000000008894:	28f922cc 	ld.d	$r12,$r22,-440(0xe48)
9000000000008898:	2880018c 	ld.w	$r12,$r12,0
900000000000889c:	0015018d 	move	$r13,$r12
90000000000088a0:	0280040e 	addi.w	$r14,$r0,1(0x1)
90000000000088a4:	28b952cc 	ld.w	$r12,$r22,-428(0xe54)
90000000000088a8:	001731cc 	sll.w	$r12,$r14,$r12
90000000000088ac:	0014b1ac 	and	$r12,$r13,$r12
90000000000088b0:	40000d80 	beqz	$r12,12(0xc) # 90000000000088bc <check_slab+0xc84>
    c = 1;
90000000000088b4:	0280040c 	addi.w	$r12,$r0,1(0x1)
90000000000088b8:	29391ecc 	st.b	$r12,$r22,-441(0xe47)
  local_intr_restore (intr_flag);
90000000000088bc:	28b902cc 	ld.w	$r12,$r22,-448(0xe40)
90000000000088c0:	00150184 	move	$r4,$r12
90000000000088c4:	57de9bff 	bl	-8552(0xfffde98) # 900000000000675c <__intr_restore>
  return c != 0;
90000000000088c8:	2a391ecc 	ld.bu	$r12,$r22,-441(0xe47)
90000000000088cc:	0012b00c 	sltu	$r12,$r0,$r12
90000000000088d0:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
90000000000088d4:	44001d80 	bnez	$r12,28(0x1c) # 90000000000088f0 <check_slab+0xcb8>
90000000000088d8:	1c0002e6 	pcaddu12i	$r6,23(0x17)
90000000000088dc:	02cf60c6 	addi.d	$r6,$r6,984(0x3d8)
90000000000088e0:	028a0805 	addi.w	$r5,$r0,642(0x282)
90000000000088e4:	1c0002e4 	pcaddu12i	$r4,23(0x17)
90000000000088e8:	02ef7084 	addi.d	$r4,$r4,-1060(0xbdc)
90000000000088ec:	54439400 	bl	17300(0x4394) # 900000000000cc80 <__panic>
        assert(GET_PAGE_CACHE(p0) == cachep0 && GET_PAGE_SLAB(p0) == slabp0);
90000000000088f0:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
90000000000088f4:	28c0618c 	ld.d	$r12,$r12,24(0x18)
90000000000088f8:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
90000000000088fc:	5c0015ac 	bne	$r13,$r12,20(0x14) # 9000000000008910 <check_slab+0xcd8>
9000000000008900:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000008904:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000008908:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000000890c:	58001dac 	beq	$r13,$r12,28(0x1c) # 9000000000008928 <check_slab+0xcf0>
9000000000008910:	1c0002e6 	pcaddu12i	$r6,23(0x17)
9000000000008914:	02cf00c6 	addi.d	$r6,$r6,960(0x3c0)
9000000000008918:	028a0c05 	addi.w	$r5,$r0,643(0x283)
900000000000891c:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000008920:	02ee9084 	addi.d	$r4,$r4,-1116(0xba4)
9000000000008924:	54435c00 	bl	17244(0x435c) # 900000000000cc80 <__panic>
    for (i = 0; i < order_size; i ++, p0 ++) {
9000000000008928:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000892c:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000008930:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000008934:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000008938:	02c0c18c 	addi.d	$r12,$r12,48(0x30)
900000000000893c:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
9000000000008940:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000008944:	28fe42cd 	ld.d	$r13,$r22,-112(0xf90)
9000000000008948:	6bff298d 	bltu	$r12,$r13,-216(0x3ff28) # 9000000000008870 <check_slab+0xc38>
    }

    kfree(v0);
900000000000894c:	28fe62c4 	ld.d	$r4,$r22,-104(0xf98)
9000000000008950:	57f1c7ff 	bl	-3644(0xffff1c4) # 9000000000007b14 <kfree>
9000000000008954:	50000800 	b	8(0x8) # 900000000000895c <check_slab+0xd24>
        goto check_pass;
9000000000008958:	03400000 	andi	$r0,$r0,0x0

check_pass:

    check_rb_tree();
900000000000895c:	57aa5fff 	bl	-21924(0xfffaa5c) # 90000000000033b8 <check_rb_tree>
    check_slab_empty();
9000000000008960:	57f1fbff 	bl	-3592(0xffff1f8) # 9000000000007b58 <check_slab_empty>
    assert(slab_allocated() == 0);
9000000000008964:	57e0d7ff 	bl	-7980(0xfffe0d4) # 9000000000006a38 <slab_allocated>
9000000000008968:	0015008c 	move	$r12,$r4
900000000000896c:	40001d80 	beqz	$r12,28(0x1c) # 9000000000008988 <check_slab+0xd50>
9000000000008970:	1c0002e6 	pcaddu12i	$r6,23(0x17)
9000000000008974:	02f240c6 	addi.d	$r6,$r6,-880(0xc90)
9000000000008978:	028a3005 	addi.w	$r5,$r0,652(0x28c)
900000000000897c:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000008980:	02ed1084 	addi.d	$r4,$r4,-1212(0xb44)
9000000000008984:	5442fc00 	bl	17148(0x42fc) # 900000000000cc80 <__panic>
    assert(nr_free_pages_store == nr_free_pages());
9000000000008988:	5409d400 	bl	2516(0x9d4) # 900000000000935c <nr_free_pages>
900000000000898c:	0015008d 	move	$r13,$r4
9000000000008990:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
9000000000008994:	58001d8d 	beq	$r12,$r13,28(0x1c) # 90000000000089b0 <check_slab+0xd78>
9000000000008998:	1c0002e6 	pcaddu12i	$r6,23(0x17)
900000000000899c:	02ce20c6 	addi.d	$r6,$r6,904(0x388)
90000000000089a0:	028a3405 	addi.w	$r5,$r0,653(0x28d)
90000000000089a4:	1c0002e4 	pcaddu12i	$r4,23(0x17)
90000000000089a8:	02ec7084 	addi.d	$r4,$r4,-1252(0xb1c)
90000000000089ac:	5442d400 	bl	17108(0x42d4) # 900000000000cc80 <__panic>
    assert(slab_allocated_store == slab_allocated());
90000000000089b0:	57e08bff 	bl	-8056(0xfffe088) # 9000000000006a38 <slab_allocated>
90000000000089b4:	0015008d 	move	$r13,$r4
90000000000089b8:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
90000000000089bc:	58001d8d 	beq	$r12,$r13,28(0x1c) # 90000000000089d8 <check_slab+0xda0>
90000000000089c0:	1c0002e6 	pcaddu12i	$r6,23(0x17)
90000000000089c4:	02ce80c6 	addi.d	$r6,$r6,928(0x3a0)
90000000000089c8:	028a3805 	addi.w	$r5,$r0,654(0x28e)
90000000000089cc:	1c0002e4 	pcaddu12i	$r4,23(0x17)
90000000000089d0:	02ebd084 	addi.d	$r4,$r4,-1292(0xaf4)
90000000000089d4:	5442ac00 	bl	17068(0x42ac) # 900000000000cc80 <__panic>

    kprintf("check_slab() succeeded!\n");
90000000000089d8:	1c0002e4 	pcaddu12i	$r4,23(0x17)
90000000000089dc:	02cf2084 	addi.d	$r4,$r4,968(0x3c8)
90000000000089e0:	57b43fff 	bl	-19396(0xfffb43c) # 9000000000003e1c <kprintf>
}
90000000000089e4:	03400000 	andi	$r0,$r0,0x0
90000000000089e8:	28c6e061 	ld.d	$r1,$r3,440(0x1b8)
90000000000089ec:	28c6c076 	ld.d	$r22,$r3,432(0x1b0)
90000000000089f0:	02c70063 	addi.d	$r3,$r3,448(0x1c0)
90000000000089f4:	4c000020 	jirl	$r0,$r1,0

90000000000089f8 <fence_i>:
static void fence_i(void *va_start, int size) {
90000000000089f8:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000000089fc:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000008a00:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000008a04:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000008a08:	001500ac 	move	$r12,$r5
9000000000008a0c:	0040818c 	slli.w	$r12,$r12,0x0
9000000000008a10:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
9000000000008a14:	38720000 	dbar	0x0
    void *va_end = va_start + size;
9000000000008a18:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000008a1c:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000008a20:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000008a24:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
9000000000008a28:	50002000 	b	32(0x20) # 9000000000008a48 <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
9000000000008a2c:	06000189 	cacop	0x9,$r12,0
9000000000008a30:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
9000000000008a34:	06000188 	cacop	0x8,$r12,0
9000000000008a38:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
9000000000008a3c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000008a40:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000008a44:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
9000000000008a48:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000008a4c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000008a50:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 9000000000008a2c <fence_i+0x34>
9000000000008a54:	38728000 	ibar	0x0
}
9000000000008a58:	03400000 	andi	$r0,$r0,0x0
9000000000008a5c:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000008a60:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000008a64:	4c000020 	jirl	$r0,$r1,0

9000000000008a68 <ptep_present>:
{
9000000000008a68:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000008a6c:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000008a70:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000008a74:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
	return (*ptep & PTE_P);
9000000000008a78:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000008a7c:	28c0018c 	ld.d	$r12,$r12,0
9000000000008a80:	0040818c 	slli.w	$r12,$r12,0x0
9000000000008a84:	0340058c 	andi	$r12,$r12,0x1
}
9000000000008a88:	00150184 	move	$r4,$r12
9000000000008a8c:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000008a90:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000008a94:	4c000020 	jirl	$r0,$r1,0

9000000000008a98 <ptep_s_write>:
{
9000000000008a98:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000008a9c:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000008aa0:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000008aa4:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
	return (*ptep & PTE_W);
9000000000008aa8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000008aac:	28c0018c 	ld.d	$r12,$r12,0
9000000000008ab0:	0040818c 	slli.w	$r12,$r12,0x0
9000000000008ab4:	0340098c 	andi	$r12,$r12,0x2
}
9000000000008ab8:	00150184 	move	$r4,$r12
9000000000008abc:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000008ac0:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000008ac4:	4c000020 	jirl	$r0,$r1,0

9000000000008ac8 <ptep_u_read>:
{
9000000000008ac8:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000008acc:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000008ad0:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000008ad4:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
	return (*ptep & PTE_U);
9000000000008ad8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000008adc:	28c0018c 	ld.d	$r12,$r12,0
9000000000008ae0:	0040818c 	slli.w	$r12,$r12,0x0
9000000000008ae4:	0340118c 	andi	$r12,$r12,0x4
}
9000000000008ae8:	00150184 	move	$r4,$r12
9000000000008aec:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000008af0:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000008af4:	4c000020 	jirl	$r0,$r1,0

9000000000008af8 <tlb_replace_random>:
    // kprintf("\n");
    __asm__ __volatile__("tlbwr");
}

static inline void tlb_replace_random(unsigned long long hi, unsigned long long low0, unsigned long long low1)
{
9000000000008af8:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000008afc:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000008b00:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000008b04:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
9000000000008b08:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
9000000000008b0c:	29ff62c6 	st.d	$r6,$r22,-40(0xfd8)
    write_csr_tlbidx(12 << 24);
9000000000008b10:	1418000c 	lu12i.w	$r12,49152(0xc000)
9000000000008b14:	0400402c 	csrwr	$r12,0x10
    // printhex(low0);
    // kprintf("\n");
    // printhex(low1);
    // kprintf("\n");
    // write_csr_stlbps(0xc);
    write_csr_entryhi(hi | 12);
9000000000008b18:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000008b1c:	0380318c 	ori	$r12,$r12,0xc
9000000000008b20:	0400442c 	csrwr	$r12,0x11
    write_csr_entrylo0(low0);
9000000000008b24:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000008b28:	0400482c 	csrwr	$r12,0x12
    write_csr_entrylo1(low1);
9000000000008b2c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000008b30:	04004c2c 	csrwr	$r12,0x13
    write_csr_entryrhi(hi | 12);
9000000000008b34:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000008b38:	0380318c 	ori	$r12,$r12,0xc
9000000000008b3c:	0402382c 	csrwr	$r12,0x8e
    write_csr_entryrlo0(low0);
9000000000008b40:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000008b44:	0402302c 	csrwr	$r12,0x8c
    write_csr_entryrlo1(low1);
9000000000008b48:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000008b4c:	0402342c 	csrwr	$r12,0x8d
    __asm__ __volatile__("tlbfill");
9000000000008b50:	06483400 	tlbfill

}
9000000000008b54:	03400000 	andi	$r0,$r0,0x0
9000000000008b58:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000008b5c:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000008b60:	4c000020 	jirl	$r0,$r1,0

9000000000008b64 <tlb_invalidate>:
#include <memlayout.h>
#include <glue_pgmap.h>
// invalidate both TLB 
// (clean and flush, meaning we write the data back)
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
9000000000008b64:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000008b68:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000008b6c:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000008b70:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000008b74:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
9000000000008b78:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
  tlb_invalidate_all();
9000000000008b7c:	54001800 	bl	24(0x18) # 9000000000008b94 <tlb_invalidate_all>
}
9000000000008b80:	03400000 	andi	$r0,$r0,0x0
9000000000008b84:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000008b88:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000008b8c:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000008b90:	4c000020 	jirl	$r0,$r1,0

9000000000008b94 <tlb_invalidate_all>:

void tlb_invalidate_all(){
9000000000008b94:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000000008b98:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000000008b9c:	02c04076 	addi.d	$r22,$r3,16(0x10)
  write_csr_tlbidx(12 << 24);
9000000000008ba0:	1418000c 	lu12i.w	$r12,49152(0xc000)
9000000000008ba4:	0400402c 	csrwr	$r12,0x10
  write_csr_stlbps(12);
9000000000008ba8:	0280300c 	addi.w	$r12,$r0,12(0xc)
9000000000008bac:	0400782c 	csrwr	$r12,0x1e
  write_csr_entryrhi(12);
9000000000008bb0:	0280300c 	addi.w	$r12,$r0,12(0xc)
9000000000008bb4:	0402382c 	csrwr	$r12,0x8e
  asm volatile("invtlb 0,$r0,$r0");
9000000000008bb8:	06498000 	invtlb	0x0,$r0,$r0
}
9000000000008bbc:	03400000 	andi	$r0,$r0,0x0
9000000000008bc0:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000000008bc4:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000000008bc8:	4c000020 	jirl	$r0,$r1,0

9000000000008bcc <pte2tlblow>:

uint64_t pte2tlblow(pte_t pte)
{
9000000000008bcc:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000008bd0:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000008bd4:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000008bd8:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000008bdc:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
  3. Call 'ptep_present' to check the pte exist
  4. Call 'ptep_u_read' and 'ptep_u_write' to set PLV3 bit and D bit respectively.
  5. return TLB EntryLo value.
*/
  //kprintf("pte is at %x\n", pte);
  uint64_t t = ((uint64_t)pte >> 12 )<<12;
9000000000008be0:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000008be4:	15ffffec 	lu12i.w	$r12,-1(0xfffff)
9000000000008be8:	0014b1ac 	and	$r12,$r13,$r12
9000000000008bec:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
  if(!ptep_present(&pte))
9000000000008bf0:	02ff62cc 	addi.d	$r12,$r22,-40(0xfd8)
9000000000008bf4:	00150184 	move	$r4,$r12
9000000000008bf8:	57fe73ff 	bl	-400(0xffffe70) # 9000000000008a68 <ptep_present>
9000000000008bfc:	0015008c 	move	$r12,$r4
9000000000008c00:	44000d80 	bnez	$r12,12(0xc) # 9000000000008c0c <pte2tlblow+0x40>
    return 0;
9000000000008c04:	0015000c 	move	$r12,$r0
9000000000008c08:	50008000 	b	128(0x80) # 9000000000008c88 <pte2tlblow+0xbc>
  t |= LOONGARCH_TLB_ENTRYL_V;
9000000000008c0c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000008c10:	0380058c 	ori	$r12,$r12,0x1
9000000000008c14:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
  t |= LOONGARCH_TLB_ENTRYL_G;
9000000000008c18:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000008c1c:	0381018c 	ori	$r12,$r12,0x40
9000000000008c20:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
  t |= LOONGARCH_TLB_MAT_CO;
9000000000008c24:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000008c28:	0380418c 	ori	$r12,$r12,0x10
9000000000008c2c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
  t &= ~0xfff0000000000000;
9000000000008c30:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000008c34:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
9000000000008c38:	0300018c 	lu52i.d	$r12,$r12,0
9000000000008c3c:	0014b1ac 	and	$r12,$r13,$r12
9000000000008c40:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
  if (ptep_u_read(&pte)) {
9000000000008c44:	02ff62cc 	addi.d	$r12,$r22,-40(0xfd8)
9000000000008c48:	00150184 	move	$r4,$r12
9000000000008c4c:	57fe7fff 	bl	-388(0xffffe7c) # 9000000000008ac8 <ptep_u_read>
9000000000008c50:	0015008c 	move	$r12,$r4
9000000000008c54:	40001180 	beqz	$r12,16(0x10) # 9000000000008c64 <pte2tlblow+0x98>
    t |= LOONGARCH_TLB_PLV3;
9000000000008c58:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000008c5c:	0380318c 	ori	$r12,$r12,0xc
9000000000008c60:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
  }
  if(ptep_s_write(&pte))
9000000000008c64:	02ff62cc 	addi.d	$r12,$r22,-40(0xfd8)
9000000000008c68:	00150184 	move	$r4,$r12
9000000000008c6c:	57fe2fff 	bl	-468(0xffffe2c) # 9000000000008a98 <ptep_s_write>
9000000000008c70:	0015008c 	move	$r12,$r4
9000000000008c74:	40001180 	beqz	$r12,16(0x10) # 9000000000008c84 <pte2tlblow+0xb8>
    t |= LOONGARCH_TLB_ENTRYL_D;
9000000000008c78:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000008c7c:	0380098c 	ori	$r12,$r12,0x2
9000000000008c80:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
  return t;
9000000000008c84:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
#endif
}
9000000000008c88:	00150184 	move	$r4,$r12
9000000000008c8c:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000008c90:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000008c94:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000008c98:	4c000020 	jirl	$r0,$r1,0

9000000000008c9c <tlb_refill>:

void tlb_refill(uint64_t badaddr, pte_t *pte)
{
9000000000008c9c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000008ca0:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000008ca4:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000008ca8:	29c06077 	st.d	$r23,$r3,24(0x18)
9000000000008cac:	29c04078 	st.d	$r24,$r3,16(0x10)
9000000000008cb0:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000008cb4:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000008cb8:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
  2. Check if badaddr[12] is 1, if is, we should set pte=pte-1
  3. get TLBELO0 and TLBELO1 from 'pte2tlblow' function.
  3. Call tlb_replace_random. Fill TLBEHI will badaddr and clear lowest 13 bit.

*/
  if(!pte)
9000000000008cbc:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000008cc0:	4000a180 	beqz	$r12,160(0xa0) # 9000000000008d60 <tlb_refill+0xc4>
    return ;
  if(badaddr & (1<<12))
9000000000008cc4:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000008cc8:	1400002c 	lu12i.w	$r12,1(0x1)
9000000000008ccc:	0014b1ac 	and	$r12,$r13,$r12
9000000000008cd0:	40001180 	beqz	$r12,16(0x10) # 9000000000008ce0 <tlb_refill+0x44>
    pte--;
9000000000008cd4:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000008cd8:	02ffe18c 	addi.d	$r12,$r12,-8(0xff8)
9000000000008cdc:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
  static int index;
  index = (index + 1) % 8;
9000000000008ce0:	1c00432c 	pcaddu12i	$r12,537(0x219)
9000000000008ce4:	02dce18c 	addi.d	$r12,$r12,1848(0x738)
9000000000008ce8:	2880018c 	ld.w	$r12,$r12,0
9000000000008cec:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000008cf0:	0015018d 	move	$r13,$r12
9000000000008cf4:	0280200c 	addi.w	$r12,$r0,8(0x8)
9000000000008cf8:	0020b1ae 	mod.w	$r14,$r13,$r12
9000000000008cfc:	5c000980 	bne	$r12,$r0,8(0x8) # 9000000000008d04 <tlb_refill+0x68>
9000000000008d00:	002a0007 	break	0x7
9000000000008d04:	001501cd 	move	$r13,$r14
9000000000008d08:	1c00432c 	pcaddu12i	$r12,537(0x219)
9000000000008d0c:	02dc418c 	addi.d	$r12,$r12,1808(0x710)
9000000000008d10:	2980018d 	st.w	$r13,$r12,0
  tlb_replace_random((badaddr & LOONGARCH_TLB_ENTRYH_VPPN_MASK), 
9000000000008d14:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000008d18:	15ffffcc 	lu12i.w	$r12,-2(0xffffe)
9000000000008d1c:	0014b1b7 	and	$r23,$r13,$r12
9000000000008d20:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000008d24:	28c0018c 	ld.d	$r12,$r12,0
9000000000008d28:	00150184 	move	$r4,$r12
9000000000008d2c:	57fea3ff 	bl	-352(0xffffea0) # 9000000000008bcc <pte2tlblow>
9000000000008d30:	00150098 	move	$r24,$r4
      pte2tlblow(*pte), pte2tlblow(*(pte+1)));
9000000000008d34:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000008d38:	02c0218c 	addi.d	$r12,$r12,8(0x8)
  tlb_replace_random((badaddr & LOONGARCH_TLB_ENTRYH_VPPN_MASK), 
9000000000008d3c:	28c0018c 	ld.d	$r12,$r12,0
9000000000008d40:	00150184 	move	$r4,$r12
9000000000008d44:	57fe8bff 	bl	-376(0xffffe88) # 9000000000008bcc <pte2tlblow>
9000000000008d48:	0015008c 	move	$r12,$r4
9000000000008d4c:	00150186 	move	$r6,$r12
9000000000008d50:	00150305 	move	$r5,$r24
9000000000008d54:	001502e4 	move	$r4,$r23
9000000000008d58:	57fda3ff 	bl	-608(0xffffda0) # 9000000000008af8 <tlb_replace_random>
9000000000008d5c:	50000800 	b	8(0x8) # 9000000000008d64 <tlb_refill+0xc8>
    return ;
9000000000008d60:	03400000 	andi	$r0,$r0,0x0
#endif
}
9000000000008d64:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000008d68:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000008d6c:	28c06077 	ld.d	$r23,$r3,24(0x18)
9000000000008d70:	28c04078 	ld.d	$r24,$r3,16(0x10)
9000000000008d74:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000008d78:	4c000020 	jirl	$r0,$r1,0

9000000000008d7c <fence_i>:
static void fence_i(void *va_start, int size) {
9000000000008d7c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000008d80:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000008d84:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000008d88:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000008d8c:	001500ac 	move	$r12,$r5
9000000000008d90:	0040818c 	slli.w	$r12,$r12,0x0
9000000000008d94:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
9000000000008d98:	38720000 	dbar	0x0
    void *va_end = va_start + size;
9000000000008d9c:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000008da0:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000008da4:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000008da8:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
9000000000008dac:	50002000 	b	32(0x20) # 9000000000008dcc <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
9000000000008db0:	06000189 	cacop	0x9,$r12,0
9000000000008db4:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
9000000000008db8:	06000188 	cacop	0x8,$r12,0
9000000000008dbc:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
9000000000008dc0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000008dc4:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000008dc8:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
9000000000008dcc:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000008dd0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000008dd4:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 9000000000008db0 <fence_i+0x34>
9000000000008dd8:	38728000 	ibar	0x0
}
9000000000008ddc:	03400000 	andi	$r0,$r0,0x0
9000000000008de0:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000008de4:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000008de8:	4c000020 	jirl	$r0,$r1,0

9000000000008dec <__intr_save>:
{
9000000000008dec:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000000008df0:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000000008df4:	02c04076 	addi.d	$r22,$r3,16(0x10)
	return __csrxchg(0, LISA_CSR_CRMD_IE, LISA_CSR_CRMD);
9000000000008df8:	0015000d 	move	$r13,$r0
9000000000008dfc:	0280100c 	addi.w	$r12,$r0,4(0x4)
9000000000008e00:	0400018d 	csrxchg	$r13,$r12,0x0
9000000000008e04:	001501ac 	move	$r12,$r13
9000000000008e08:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
}
9000000000008e0c:	00150184 	move	$r4,$r12
9000000000008e10:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000000008e14:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000000008e18:	4c000020 	jirl	$r0,$r1,0

9000000000008e1c <__intr_restore>:
{
9000000000008e1c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000008e20:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000008e24:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000008e28:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
	__csrxchg(flags, LISA_CSR_CRMD_IE, LISA_CSR_CRMD);
9000000000008e2c:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
9000000000008e30:	0280100d 	addi.w	$r13,$r0,4(0x4)
9000000000008e34:	040001ac 	csrxchg	$r12,$r13,0x0
}
9000000000008e38:	03400000 	andi	$r0,$r0,0x0
9000000000008e3c:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000008e40:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000008e44:	4c000020 	jirl	$r0,$r1,0

9000000000008e48 <page2ppn>:
page2ppn(struct Page *page) {
9000000000008e48:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000008e4c:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000008e50:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000008e54:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    return page - pages;
9000000000008e58:	1c00432c 	pcaddu12i	$r12,537(0x219)
9000000000008e5c:	28e6c18c 	ld.d	$r12,$r12,-1616(0x9b0)
9000000000008e60:	28c0018c 	ld.d	$r12,$r12,0
9000000000008e64:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000008e68:	0011b1ac 	sub.d	$r12,$r13,$r12
9000000000008e6c:	0049118d 	srai.d	$r13,$r12,0x4
9000000000008e70:	1555554c 	lu12i.w	$r12,-349526(0xaaaaa)
9000000000008e74:	03aaad8c 	ori	$r12,$r12,0xaab
9000000000008e78:	1755554c 	lu32i.d	$r12,-349526(0xaaaaa)
9000000000008e7c:	032aa98c 	lu52i.d	$r12,$r12,-1366(0xaaa)
9000000000008e80:	001db1ac 	mul.d	$r12,$r13,$r12
}
9000000000008e84:	00150184 	move	$r4,$r12
9000000000008e88:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000008e8c:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000008e90:	4c000020 	jirl	$r0,$r1,0

9000000000008e94 <page2pa>:
page2pa(struct Page *page) {
9000000000008e94:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000008e98:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000008e9c:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000008ea0:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000008ea4:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    return KERNBASE + (page2ppn(page) << PGSHIFT);
9000000000008ea8:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000008eac:	57ff9fff 	bl	-100(0xfffff9c) # 9000000000008e48 <page2ppn>
9000000000008eb0:	0015008c 	move	$r12,$r4
9000000000008eb4:	0041318d 	slli.d	$r13,$r12,0xc
9000000000008eb8:	0324000c 	lu52i.d	$r12,$r0,-1792(0x900)
9000000000008ebc:	0010b1ac 	add.d	$r12,$r13,$r12
}
9000000000008ec0:	00150184 	move	$r4,$r12
9000000000008ec4:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000008ec8:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000008ecc:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000008ed0:	4c000020 	jirl	$r0,$r1,0

9000000000008ed4 <pa2page>:
pa2page(uintptr_t pa) {
9000000000008ed4:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000008ed8:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000008edc:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000008ee0:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000008ee4:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    if (PPN(pa) >= npage) {
9000000000008ee8:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000008eec:	031c000c 	lu52i.d	$r12,$r0,1792(0x700)
9000000000008ef0:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000008ef4:	0045318d 	srli.d	$r13,$r12,0xc
9000000000008ef8:	1c00432c 	pcaddu12i	$r12,537(0x219)
9000000000008efc:	02d4a18c 	addi.d	$r12,$r12,1320(0x528)
9000000000008f00:	28c0018c 	ld.d	$r12,$r12,0
9000000000008f04:	68001dac 	bltu	$r13,$r12,28(0x1c) # 9000000000008f20 <pa2page+0x4c>
        panic("pa2page called with invalid pa");
9000000000008f08:	1c0002e6 	pcaddu12i	$r6,23(0x17)
9000000000008f0c:	02fae0c6 	addi.d	$r6,$r6,-328(0xeb8)
9000000000008f10:	02819c05 	addi.w	$r5,$r0,103(0x67)
9000000000008f14:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000008f18:	02fb3084 	addi.d	$r4,$r4,-308(0xecc)
9000000000008f1c:	543d6400 	bl	15716(0x3d64) # 900000000000cc80 <__panic>
    return &pages[PPN(pa)];
9000000000008f20:	1c00432c 	pcaddu12i	$r12,537(0x219)
9000000000008f24:	28e3a18c 	ld.d	$r12,$r12,-1816(0x8e8)
9000000000008f28:	28c0018d 	ld.d	$r13,$r12,0
9000000000008f2c:	28ffa2ce 	ld.d	$r14,$r22,-24(0xfe8)
9000000000008f30:	031c000c 	lu52i.d	$r12,$r0,1792(0x700)
9000000000008f34:	0010b1cc 	add.d	$r12,$r14,$r12
9000000000008f38:	0045318e 	srli.d	$r14,$r12,0xc
9000000000008f3c:	0280c00c 	addi.w	$r12,$r0,48(0x30)
9000000000008f40:	001db1cc 	mul.d	$r12,$r14,$r12
9000000000008f44:	0010b1ac 	add.d	$r12,$r13,$r12
}
9000000000008f48:	00150184 	move	$r4,$r12
9000000000008f4c:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000008f50:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000008f54:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000008f58:	4c000020 	jirl	$r0,$r1,0

9000000000008f5c <page2kva>:
page2kva(struct Page *page) {
9000000000008f5c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000008f60:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000008f64:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000008f68:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000008f6c:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    return KADDR(page2pa(page));
9000000000008f70:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000008f74:	57ff23ff 	bl	-224(0xfffff20) # 9000000000008e94 <page2pa>
9000000000008f78:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
9000000000008f7c:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000008f80:	031c000c 	lu52i.d	$r12,$r0,1792(0x700)
9000000000008f84:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000008f88:	0045318c 	srli.d	$r12,$r12,0xc
9000000000008f8c:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000008f90:	1c00432c 	pcaddu12i	$r12,537(0x219)
9000000000008f94:	02d2418c 	addi.d	$r12,$r12,1168(0x490)
9000000000008f98:	28c0018c 	ld.d	$r12,$r12,0
9000000000008f9c:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000008fa0:	680021ac 	bltu	$r13,$r12,32(0x20) # 9000000000008fc0 <page2kva+0x64>
9000000000008fa4:	28ffa2c7 	ld.d	$r7,$r22,-24(0xfe8)
9000000000008fa8:	1c0002e6 	pcaddu12i	$r6,23(0x17)
9000000000008fac:	02f920c6 	addi.d	$r6,$r6,-440(0xe48)
9000000000008fb0:	0281b805 	addi.w	$r5,$r0,110(0x6e)
9000000000008fb4:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000008fb8:	02f8b084 	addi.d	$r4,$r4,-468(0xe2c)
9000000000008fbc:	543cc400 	bl	15556(0x3cc4) # 900000000000cc80 <__panic>
9000000000008fc0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
}
9000000000008fc4:	00150184 	move	$r4,$r12
9000000000008fc8:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000008fcc:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000008fd0:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000008fd4:	4c000020 	jirl	$r0,$r1,0

9000000000008fd8 <pte2page>:
pte2page(pte_t pte) {
9000000000008fd8:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000008fdc:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000008fe0:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000008fe4:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000008fe8:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    if (!(pte & PTE_P)) {
9000000000008fec:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000008ff0:	0340058c 	andi	$r12,$r12,0x1
9000000000008ff4:	44001d80 	bnez	$r12,28(0x1c) # 9000000000009010 <pte2page+0x38>
        panic("pte2page called with invalid pte");
9000000000008ff8:	1c0002e6 	pcaddu12i	$r6,23(0x17)
9000000000008ffc:	02f880c6 	addi.d	$r6,$r6,-480(0xe20)
9000000000009000:	0281e405 	addi.w	$r5,$r0,121(0x79)
9000000000009004:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000009008:	02f77084 	addi.d	$r4,$r4,-548(0xddc)
900000000000900c:	543c7400 	bl	15476(0x3c74) # 900000000000cc80 <__panic>
    return pa2page(PTE_ADDR(pte));
9000000000009010:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000009014:	15ffffec 	lu12i.w	$r12,-1(0xfffff)
9000000000009018:	0014b1ac 	and	$r12,$r13,$r12
900000000000901c:	00150184 	move	$r4,$r12
9000000000009020:	57feb7ff 	bl	-332(0xffffeb4) # 9000000000008ed4 <pa2page>
9000000000009024:	0015008c 	move	$r12,$r4
}
9000000000009028:	00150184 	move	$r4,$r12
900000000000902c:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000009030:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000009034:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000009038:	4c000020 	jirl	$r0,$r1,0

900000000000903c <pde2page>:
pde2page(pde_t pde) {
900000000000903c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000009040:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000009044:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000009048:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000000904c:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    return pa2page(PDE_ADDR(pde));
9000000000009050:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000009054:	15ffffec 	lu12i.w	$r12,-1(0xfffff)
9000000000009058:	0014b1ac 	and	$r12,$r13,$r12
900000000000905c:	00150184 	move	$r4,$r12
9000000000009060:	57fe77ff 	bl	-396(0xffffe74) # 9000000000008ed4 <pa2page>
9000000000009064:	0015008c 	move	$r12,$r4
}
9000000000009068:	00150184 	move	$r4,$r12
900000000000906c:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000009070:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000009074:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000009078:	4c000020 	jirl	$r0,$r1,0

900000000000907c <page_ref>:
page_ref(struct Page *page) {
900000000000907c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000009080:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000009084:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000009088:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    return atomic_read(&(page->ref));
900000000000908c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000009090:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
  return v->counter;
9000000000009094:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000009098:	2880018c 	ld.w	$r12,$r12,0
}
900000000000909c:	00150184 	move	$r4,$r12
90000000000090a0:	28c0a076 	ld.d	$r22,$r3,40(0x28)
90000000000090a4:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000000090a8:	4c000020 	jirl	$r0,$r1,0

90000000000090ac <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
90000000000090ac:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000000090b0:	29c0a061 	st.d	$r1,$r3,40(0x28)
90000000000090b4:	29c08076 	st.d	$r22,$r3,32(0x20)
90000000000090b8:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000000090bc:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    return atomic_add_return(&(page->ref), 1);
90000000000090c0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000090c4:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
90000000000090c8:	0280040c 	addi.w	$r12,$r0,1(0x1)
90000000000090cc:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
  local_intr_save (intr_flag);
90000000000090d0:	57fd1fff 	bl	-740(0xffffd1c) # 9000000000008dec <__intr_save>
90000000000090d4:	0015008c 	move	$r12,$r4
90000000000090d8:	29bf82cc 	st.w	$r12,$r22,-32(0xfe0)
  v->counter += i;
90000000000090dc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000090e0:	2880018c 	ld.w	$r12,$r12,0
90000000000090e4:	28bf92cd 	ld.w	$r13,$r22,-28(0xfe4)
90000000000090e8:	001031ac 	add.w	$r12,$r13,$r12
90000000000090ec:	0015018d 	move	$r13,$r12
90000000000090f0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000090f4:	2980018d 	st.w	$r13,$r12,0
  local_intr_restore (intr_flag);
90000000000090f8:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
90000000000090fc:	00150184 	move	$r4,$r12
9000000000009100:	57fd1fff 	bl	-740(0xffffd1c) # 9000000000008e1c <__intr_restore>
  return v->counter;
9000000000009104:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000009108:	2880018c 	ld.w	$r12,$r12,0
}
900000000000910c:	00150184 	move	$r4,$r12
9000000000009110:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000009114:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000009118:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000911c:	4c000020 	jirl	$r0,$r1,0

9000000000009120 <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
9000000000009120:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000009124:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000009128:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000000912c:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000009130:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
    return atomic_sub_return(&(page->ref), 1);
9000000000009134:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000009138:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000000913c:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000009140:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
  return atomic_add_return(v, -i);
9000000000009144:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000009148:	0011300c 	sub.w	$r12,$r0,$r12
900000000000914c:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000009150:	29ff62cd 	st.d	$r13,$r22,-40(0xfd8)
9000000000009154:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
  local_intr_save (intr_flag);
9000000000009158:	57fc97ff 	bl	-876(0xffffc94) # 9000000000008dec <__intr_save>
900000000000915c:	0015008c 	move	$r12,$r4
9000000000009160:	29bf42cc 	st.w	$r12,$r22,-48(0xfd0)
  v->counter += i;
9000000000009164:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000009168:	2880018c 	ld.w	$r12,$r12,0
900000000000916c:	28bf52cd 	ld.w	$r13,$r22,-44(0xfd4)
9000000000009170:	001031ac 	add.w	$r12,$r13,$r12
9000000000009174:	0015018d 	move	$r13,$r12
9000000000009178:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000917c:	2980018d 	st.w	$r13,$r12,0
  local_intr_restore (intr_flag);
9000000000009180:	28bf42cc 	ld.w	$r12,$r22,-48(0xfd0)
9000000000009184:	00150184 	move	$r4,$r12
9000000000009188:	57fc97ff 	bl	-876(0xffffc94) # 9000000000008e1c <__intr_restore>
  return v->counter;
900000000000918c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000009190:	2880018c 	ld.w	$r12,$r12,0
}
9000000000009194:	00150184 	move	$r4,$r12
9000000000009198:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000000919c:	28c0c076 	ld.d	$r22,$r3,48(0x30)
90000000000091a0:	02c10063 	addi.d	$r3,$r3,64(0x40)
90000000000091a4:	4c000020 	jirl	$r0,$r1,0

90000000000091a8 <lcr3>:
static void check_alloc_page(void);
static void check_pgdir(void);
static void check_boot_pgdir(void);

void lcr3(uintptr_t cr3)
{
90000000000091a8:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000000091ac:	29c06076 	st.d	$r22,$r3,24(0x18)
90000000000091b0:	02c08076 	addi.d	$r22,$r3,32(0x20)
90000000000091b4:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
  current_pgdir = (pde_t*)cr3;
90000000000091b8:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
90000000000091bc:	1c00432c 	pcaddu12i	$r12,537(0x219)
90000000000091c0:	02c9d18c 	addi.d	$r12,$r12,628(0x274)
90000000000091c4:	29c0018d 	st.d	$r13,$r12,0
}
90000000000091c8:	03400000 	andi	$r0,$r0,0x0
90000000000091cc:	28c06076 	ld.d	$r22,$r3,24(0x18)
90000000000091d0:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000000091d4:	4c000020 	jirl	$r0,$r1,0

90000000000091d8 <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
90000000000091d8:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
90000000000091dc:	29c02061 	st.d	$r1,$r3,8(0x8)
90000000000091e0:	29c00076 	st.d	$r22,$r3,0
90000000000091e4:	02c04076 	addi.d	$r22,$r3,16(0x10)
    pmm_manager = &default_pmm_manager;
90000000000091e8:	1c00430c 	pcaddu12i	$r12,536(0x218)
90000000000091ec:	28d4c18c 	ld.d	$r12,$r12,1328(0x530)
90000000000091f0:	1c00430d 	pcaddu12i	$r13,536(0x218)
90000000000091f4:	28d521ad 	ld.d	$r13,$r13,1352(0x548)
90000000000091f8:	29c0018d 	st.d	$r13,$r12,0
    kprintf("memory management: ");
90000000000091fc:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000009200:	02f11084 	addi.d	$r4,$r4,-956(0xc44)
9000000000009204:	57ac1bff 	bl	-21480(0xfffac18) # 9000000000003e1c <kprintf>
      kprintf(pmm_manager->name);
9000000000009208:	1c00430c 	pcaddu12i	$r12,536(0x218)
900000000000920c:	28d4418c 	ld.d	$r12,$r12,1296(0x510)
9000000000009210:	28c0018c 	ld.d	$r12,$r12,0
9000000000009214:	28c0018c 	ld.d	$r12,$r12,0
9000000000009218:	00150184 	move	$r4,$r12
900000000000921c:	57ac03ff 	bl	-21504(0xfffac00) # 9000000000003e1c <kprintf>
      kprintf("\n");
9000000000009220:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000009224:	02f0e084 	addi.d	$r4,$r4,-968(0xc38)
9000000000009228:	57abf7ff 	bl	-21516(0xfffabf4) # 9000000000003e1c <kprintf>
    pmm_manager->init();
900000000000922c:	1c00430c 	pcaddu12i	$r12,536(0x218)
9000000000009230:	28d3b18c 	ld.d	$r12,$r12,1260(0x4ec)
9000000000009234:	28c0018c 	ld.d	$r12,$r12,0
9000000000009238:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000000923c:	4c000181 	jirl	$r1,$r12,0
}
9000000000009240:	03400000 	andi	$r0,$r0,0x0
9000000000009244:	28c02061 	ld.d	$r1,$r3,8(0x8)
9000000000009248:	28c00076 	ld.d	$r22,$r3,0
900000000000924c:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000000009250:	4c000020 	jirl	$r0,$r1,0

9000000000009254 <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
9000000000009254:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000009258:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000000925c:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000009260:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000009264:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
9000000000009268:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
    pmm_manager->init_memmap(base, n);
900000000000926c:	1c00430c 	pcaddu12i	$r12,536(0x218)
9000000000009270:	28d2b18c 	ld.d	$r12,$r12,1196(0x4ac)
9000000000009274:	28c0018c 	ld.d	$r12,$r12,0
9000000000009278:	28c0418c 	ld.d	$r12,$r12,16(0x10)
900000000000927c:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
9000000000009280:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000009284:	4c000181 	jirl	$r1,$r12,0
}
9000000000009288:	03400000 	andi	$r0,$r0,0x0
900000000000928c:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000009290:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000009294:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000009298:	4c000020 	jirl	$r0,$r1,0

900000000000929c <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
900000000000929c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000000092a0:	29c0a061 	st.d	$r1,$r3,40(0x28)
90000000000092a4:	29c08076 	st.d	$r22,$r3,32(0x20)
90000000000092a8:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000000092ac:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    struct Page *page;
    bool intr_flag;
    local_intr_save(intr_flag);
90000000000092b0:	57fb3fff 	bl	-1220(0xffffb3c) # 9000000000008dec <__intr_save>
90000000000092b4:	0015008c 	move	$r12,$r4
90000000000092b8:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    {
        page = pmm_manager->alloc_pages(n);
90000000000092bc:	1c00430c 	pcaddu12i	$r12,536(0x218)
90000000000092c0:	28d1718c 	ld.d	$r12,$r12,1116(0x45c)
90000000000092c4:	28c0018c 	ld.d	$r12,$r12,0
90000000000092c8:	28c0618c 	ld.d	$r12,$r12,24(0x18)
90000000000092cc:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
90000000000092d0:	4c000181 	jirl	$r1,$r12,0
90000000000092d4:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)
    }
    local_intr_restore(intr_flag);
90000000000092d8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000092dc:	00150184 	move	$r4,$r12
90000000000092e0:	57fb3fff 	bl	-1220(0xffffb3c) # 9000000000008e1c <__intr_restore>
    return page;
90000000000092e4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
}
90000000000092e8:	00150184 	move	$r4,$r12
90000000000092ec:	28c0a061 	ld.d	$r1,$r3,40(0x28)
90000000000092f0:	28c08076 	ld.d	$r22,$r3,32(0x20)
90000000000092f4:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000000092f8:	4c000020 	jirl	$r0,$r1,0

90000000000092fc <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
90000000000092fc:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000009300:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000009304:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000009308:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000930c:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000009310:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
    bool intr_flag;
    local_intr_save(intr_flag);
9000000000009314:	57fadbff 	bl	-1320(0xffffad8) # 9000000000008dec <__intr_save>
9000000000009318:	0015008c 	move	$r12,$r4
900000000000931c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    {
        pmm_manager->free_pages(base, n);
9000000000009320:	1c00430c 	pcaddu12i	$r12,536(0x218)
9000000000009324:	28cfe18c 	ld.d	$r12,$r12,1016(0x3f8)
9000000000009328:	28c0018c 	ld.d	$r12,$r12,0
900000000000932c:	28c0818c 	ld.d	$r12,$r12,32(0x20)
9000000000009330:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
9000000000009334:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000009338:	4c000181 	jirl	$r1,$r12,0
    }
    local_intr_restore(intr_flag);
900000000000933c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000009340:	00150184 	move	$r4,$r12
9000000000009344:	57fadbff 	bl	-1320(0xffffad8) # 9000000000008e1c <__intr_restore>
}
9000000000009348:	03400000 	andi	$r0,$r0,0x0
900000000000934c:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000009350:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000009354:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000009358:	4c000020 	jirl	$r0,$r1,0

900000000000935c <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
900000000000935c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000009360:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000009364:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000009368:	02c08076 	addi.d	$r22,$r3,32(0x20)
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
900000000000936c:	57fa83ff 	bl	-1408(0xffffa80) # 9000000000008dec <__intr_save>
9000000000009370:	0015008c 	move	$r12,$r4
9000000000009374:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    {
        ret = pmm_manager->nr_free_pages();
9000000000009378:	1c00430c 	pcaddu12i	$r12,536(0x218)
900000000000937c:	28ce818c 	ld.d	$r12,$r12,928(0x3a0)
9000000000009380:	28c0018c 	ld.d	$r12,$r12,0
9000000000009384:	28c0a18c 	ld.d	$r12,$r12,40(0x28)
9000000000009388:	4c000181 	jirl	$r1,$r12,0
900000000000938c:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)
    }
    local_intr_restore(intr_flag);
9000000000009390:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000009394:	00150184 	move	$r4,$r12
9000000000009398:	57fa87ff 	bl	-1404(0xffffa84) # 9000000000008e1c <__intr_restore>
    return ret;
900000000000939c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
}
90000000000093a0:	00150184 	move	$r4,$r12
90000000000093a4:	28c06061 	ld.d	$r1,$r3,24(0x18)
90000000000093a8:	28c04076 	ld.d	$r22,$r3,16(0x10)
90000000000093ac:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000000093b0:	4c000020 	jirl	$r0,$r1,0

90000000000093b4 <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
90000000000093b4:	02fe4063 	addi.d	$r3,$r3,-112(0xf90)
90000000000093b8:	29c1a061 	st.d	$r1,$r3,104(0x68)
90000000000093bc:	29c18076 	st.d	$r22,$r3,96(0x60)
90000000000093c0:	02c1c076 	addi.d	$r22,$r3,112(0x70)
  uint64_t maxpa;
  int i;

  //panic("unimpl");
  kprintf("memory map:\n");
90000000000093c4:	1c0002e4 	pcaddu12i	$r4,23(0x17)
90000000000093c8:	02ea7084 	addi.d	$r4,$r4,-1380(0xa9c)
90000000000093cc:	57aa53ff 	bl	-21936(0xfffaa50) # 9000000000003e1c <kprintf>
  kprintf("    [");
90000000000093d0:	1c0002e4 	pcaddu12i	$r4,23(0x17)
90000000000093d4:	02ea8084 	addi.d	$r4,$r4,-1376(0xaa0)
90000000000093d8:	57aa47ff 	bl	-21948(0xfffaa44) # 9000000000003e1c <kprintf>
  printhex(KERNBASE);
90000000000093dc:	03240004 	lu52i.d	$r4,$r0,-1792(0x900)
90000000000093e0:	57aaabff 	bl	-21848(0xfffaaa8) # 9000000000003e88 <printhex>
  kprintf(", ");
90000000000093e4:	1c0002e4 	pcaddu12i	$r4,23(0x17)
90000000000093e8:	02ea5084 	addi.d	$r4,$r4,-1388(0xa94)
90000000000093ec:	57aa33ff 	bl	-21968(0xfffaa30) # 9000000000003e1c <kprintf>
  printhex(KERNTOP);
90000000000093f0:	1410000c 	lu12i.w	$r12,32768(0x8000)
90000000000093f4:	0324018c 	lu52i.d	$r12,$r12,-1792(0x900)
90000000000093f8:	00150184 	move	$r4,$r12
90000000000093fc:	57aa8fff 	bl	-21876(0xfffaa8c) # 9000000000003e88 <printhex>
  kprintf("]\n\n");
9000000000009400:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000009404:	02ea0084 	addi.d	$r4,$r4,-1408(0xa80)
9000000000009408:	57aa17ff 	bl	-21996(0xfffaa14) # 9000000000003e1c <kprintf>

  maxpa = KERNTOP;
900000000000940c:	1410000c 	lu12i.w	$r12,32768(0x8000)
9000000000009410:	0324018c 	lu52i.d	$r12,$r12,-1792(0x900)
9000000000009414:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
  npage = KMEMSIZE >> PGSHIFT;
9000000000009418:	1c00432c 	pcaddu12i	$r12,537(0x219)
900000000000941c:	02c0218c 	addi.d	$r12,$r12,8(0x8)
9000000000009420:	1400010d 	lu12i.w	$r13,8(0x8)
9000000000009424:	29c0018d 	st.d	$r13,$r12,0

 // end address of kernel
  extern char end[];
  // put page structure table at the end of kernel
  pages = (struct Page *)ROUNDUP_2N((void *)end, PGSHIFT); 
9000000000009428:	0280300c 	addi.w	$r12,$r0,12(0xc)
900000000000942c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
9000000000009430:	28bf62cc 	ld.w	$r12,$r22,-40(0xfd8)
9000000000009434:	0040818d 	slli.w	$r13,$r12,0x0
9000000000009438:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000000943c:	0017358c 	sll.w	$r12,$r12,$r13
9000000000009440:	0015018d 	move	$r13,$r12
9000000000009444:	1c00430c 	pcaddu12i	$r12,536(0x218)
9000000000009448:	28cc718c 	ld.d	$r12,$r12,796(0x31c)
900000000000944c:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
9000000000009450:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000009454:	28bf62cd 	ld.w	$r13,$r22,-40(0xfd8)
9000000000009458:	004081ad 	slli.w	$r13,$r13,0x0
900000000000945c:	0019358c 	srl.d	$r12,$r12,$r13
9000000000009460:	28bf62cd 	ld.w	$r13,$r22,-40(0xfd8)
9000000000009464:	004081ad 	slli.w	$r13,$r13,0x0
9000000000009468:	0018b58c 	sll.d	$r12,$r12,$r13
900000000000946c:	0015018d 	move	$r13,$r12
9000000000009470:	1c00430c 	pcaddu12i	$r12,536(0x218)
9000000000009474:	28ce618c 	ld.d	$r12,$r12,920(0x398)
9000000000009478:	29c0018d 	st.d	$r13,$r12,0
  printhex(pages);
900000000000947c:	1c00430c 	pcaddu12i	$r12,536(0x218)
9000000000009480:	28ce318c 	ld.d	$r12,$r12,908(0x38c)
9000000000009484:	28c0018c 	ld.d	$r12,$r12,0
9000000000009488:	00150184 	move	$r4,$r12
900000000000948c:	57a9ffff 	bl	-22020(0xfffa9fc) # 9000000000003e88 <printhex>
  for(i=0; i < npage; i++){
9000000000009490:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
9000000000009494:	50007400 	b	116(0x74) # 9000000000009508 <page_init+0x154>
    SetPageReserved(pages + i);
9000000000009498:	1c00430c 	pcaddu12i	$r12,536(0x218)
900000000000949c:	28cdc18c 	ld.d	$r12,$r12,880(0x370)
90000000000094a0:	28c0018d 	ld.d	$r13,$r12,0
90000000000094a4:	28bfb2ce 	ld.w	$r14,$r22,-20(0xfec)
90000000000094a8:	0280c00c 	addi.w	$r12,$r0,48(0x30)
90000000000094ac:	001db1cc 	mul.d	$r12,$r14,$r12
90000000000094b0:	0010b1ac 	add.d	$r12,$r13,$r12
90000000000094b4:	02c0118c 	addi.d	$r12,$r12,4(0x4)
90000000000094b8:	29beb2c0 	st.w	$r0,$r22,-84(0xfac)
90000000000094bc:	29fe82cc 	st.d	$r12,$r22,-96(0xfa0)
  local_intr_save (intr_flag);
90000000000094c0:	57f92fff 	bl	-1748(0xffff92c) # 9000000000008dec <__intr_save>
90000000000094c4:	0015008c 	move	$r12,$r4
90000000000094c8:	29be72cc 	st.w	$r12,$r22,-100(0xf9c)
  *addr |= (1 << nr);
90000000000094cc:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
90000000000094d0:	2880018d 	ld.w	$r13,$r12,0
90000000000094d4:	0280040e 	addi.w	$r14,$r0,1(0x1)
90000000000094d8:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
90000000000094dc:	001731cc 	sll.w	$r12,$r14,$r12
90000000000094e0:	001531ac 	or	$r12,$r13,$r12
90000000000094e4:	0015018d 	move	$r13,$r12
90000000000094e8:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
90000000000094ec:	2980018d 	st.w	$r13,$r12,0
  local_intr_restore (intr_flag);
90000000000094f0:	28be72cc 	ld.w	$r12,$r22,-100(0xf9c)
90000000000094f4:	00150184 	move	$r4,$r12
90000000000094f8:	57f927ff 	bl	-1756(0xffff924) # 9000000000008e1c <__intr_restore>
  for(i=0; i < npage; i++){
90000000000094fc:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000009500:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000009504:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000009508:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
900000000000950c:	1c00432c 	pcaddu12i	$r12,537(0x219)
9000000000009510:	02fc518c 	addi.d	$r12,$r12,-236(0xf14)
9000000000009514:	28c0018c 	ld.d	$r12,$r12,0
9000000000009518:	6bff81ac 	bltu	$r13,$r12,-128(0x3ff80) # 9000000000009498 <page_init+0xe4>
  };
  uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
900000000000951c:	1c00432c 	pcaddu12i	$r12,537(0x219)
9000000000009520:	02fc118c 	addi.d	$r12,$r12,-252(0xf04)
9000000000009524:	28c0018d 	ld.d	$r13,$r12,0
9000000000009528:	0280c00c 	addi.w	$r12,$r0,48(0x30)
900000000000952c:	001db1ac 	mul.d	$r12,$r13,$r12
9000000000009530:	1c00430d 	pcaddu12i	$r13,536(0x218)
9000000000009534:	28cb61ad 	ld.d	$r13,$r13,728(0x2d8)
9000000000009538:	28c001ad 	ld.d	$r13,$r13,0
900000000000953c:	0010b58c 	add.d	$r12,$r12,$r13
9000000000009540:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
9000000000009544:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000009548:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
900000000000954c:	0323fd8c 	lu52i.d	$r12,$r12,-1793(0x8ff)
9000000000009550:	6800218d 	bltu	$r12,$r13,32(0x20) # 9000000000009570 <page_init+0x1bc>
9000000000009554:	28ff42c7 	ld.d	$r7,$r22,-48(0xfd0)
9000000000009558:	1c0002e6 	pcaddu12i	$r6,23(0x17)
900000000000955c:	02e4c0c6 	addi.d	$r6,$r6,-1744(0x930)
9000000000009560:	0281dc05 	addi.w	$r5,$r0,119(0x77)
9000000000009564:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000009568:	02e53084 	addi.d	$r4,$r4,-1716(0x94c)
900000000000956c:	54371400 	bl	14100(0x3714) # 900000000000cc80 <__panic>
9000000000009570:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000009574:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
  PRINT_HEX("freemem start at: ", freemem);
9000000000009578:	1c0002e4 	pcaddu12i	$r4,23(0x17)
900000000000957c:	02e52084 	addi.d	$r4,$r4,-1720(0x948)
9000000000009580:	57a89fff 	bl	-22372(0xfffa89c) # 9000000000003e1c <kprintf>
9000000000009584:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000009588:	57a903ff 	bl	-22272(0xfffa900) # 9000000000003e88 <printhex>
900000000000958c:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000009590:	02e33084 	addi.d	$r4,$r4,-1844(0x8cc)
9000000000009594:	57a88bff 	bl	-22392(0xfffa888) # 9000000000003e1c <kprintf>

  uint64_t mbegin = ROUNDUP_2N(freemem, PGSHIFT);
9000000000009598:	0280300c 	addi.w	$r12,$r0,12(0xc)
900000000000959c:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
90000000000095a0:	28bf02cc 	ld.w	$r12,$r22,-64(0xfc0)
90000000000095a4:	0040818d 	slli.w	$r13,$r12,0x0
90000000000095a8:	0280040c 	addi.w	$r12,$r0,1(0x1)
90000000000095ac:	0017358c 	sll.w	$r12,$r12,$r13
90000000000095b0:	0015018d 	move	$r13,$r12
90000000000095b4:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000095b8:	0010b1ac 	add.d	$r12,$r13,$r12
90000000000095bc:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
90000000000095c0:	28bf02cd 	ld.w	$r13,$r22,-64(0xfc0)
90000000000095c4:	004081ad 	slli.w	$r13,$r13,0x0
90000000000095c8:	0019358c 	srl.d	$r12,$r12,$r13
90000000000095cc:	28bf02cd 	ld.w	$r13,$r22,-64(0xfc0)
90000000000095d0:	004081ad 	slli.w	$r13,$r13,0x0
90000000000095d4:	0018b58c 	sll.d	$r12,$r12,$r13
90000000000095d8:	29fee2cc 	st.d	$r12,$r22,-72(0xfb8)
  uint64_t mend = ROUNDDOWN_2N(KERNTOP, PGSHIFT);
90000000000095dc:	1410000c 	lu12i.w	$r12,32768(0x8000)
90000000000095e0:	0324018c 	lu52i.d	$r12,$r12,-1792(0x900)
90000000000095e4:	29fec2cc 	st.d	$r12,$r22,-80(0xfb0)
  assert( mbegin < mend );
90000000000095e8:	28fee2cd 	ld.d	$r13,$r22,-72(0xfb8)
90000000000095ec:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
90000000000095f0:	68001dac 	bltu	$r13,$r12,28(0x1c) # 900000000000960c <page_init+0x258>
90000000000095f4:	1c0002e6 	pcaddu12i	$r6,23(0x17)
90000000000095f8:	02e390c6 	addi.d	$r6,$r6,-1820(0x8e4)
90000000000095fc:	0281f005 	addi.w	$r5,$r0,124(0x7c)
9000000000009600:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000009604:	02e2c084 	addi.d	$r4,$r4,-1872(0x8b0)
9000000000009608:	54367800 	bl	13944(0x3678) # 900000000000cc80 <__panic>
  init_memmap(pa2page(mbegin), (mend - mbegin) >> PGSHIFT );
900000000000960c:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
9000000000009610:	57f8c7ff 	bl	-1852(0xffff8c4) # 9000000000008ed4 <pa2page>
9000000000009614:	0015008e 	move	$r14,$r4
9000000000009618:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
900000000000961c:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000009620:	0011b1ac 	sub.d	$r12,$r13,$r12
9000000000009624:	0045318c 	srli.d	$r12,$r12,0xc
9000000000009628:	00150185 	move	$r5,$r12
900000000000962c:	001501c4 	move	$r4,$r14
9000000000009630:	57fc27ff 	bl	-988(0xffffc24) # 9000000000009254 <init_memmap>
  PRINT_HEX("free pages: ", (mend-mbegin)>>PGSHIFT);
9000000000009634:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000009638:	02e31084 	addi.d	$r4,$r4,-1852(0x8c4)
900000000000963c:	57a7e3ff 	bl	-22560(0xfffa7e0) # 9000000000003e1c <kprintf>
9000000000009640:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
9000000000009644:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000009648:	0011b1ac 	sub.d	$r12,$r13,$r12
900000000000964c:	0045318c 	srli.d	$r12,$r12,0xc
9000000000009650:	00150184 	move	$r4,$r12
9000000000009654:	57a837ff 	bl	-22476(0xfffa834) # 9000000000003e88 <printhex>
9000000000009658:	1c0002e4 	pcaddu12i	$r4,23(0x17)
900000000000965c:	02e00084 	addi.d	$r4,$r4,-2048(0x800)
9000000000009660:	57a7bfff 	bl	-22596(0xfffa7bc) # 9000000000003e1c <kprintf>
  PRINT_HEX("## ", sizeof(struct Page));
9000000000009664:	1c0002e4 	pcaddu12i	$r4,23(0x17)
9000000000009668:	02e29084 	addi.d	$r4,$r4,-1884(0x8a4)
900000000000966c:	57a7b3ff 	bl	-22608(0xfffa7b0) # 9000000000003e1c <kprintf>
9000000000009670:	0280c004 	addi.w	$r4,$r0,48(0x30)
9000000000009674:	57a817ff 	bl	-22508(0xfffa814) # 9000000000003e88 <printhex>
9000000000009678:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000967c:	02df8084 	addi.d	$r4,$r4,2016(0x7e0)
9000000000009680:	57a79fff 	bl	-22628(0xfffa79c) # 9000000000003e1c <kprintf>
}
9000000000009684:	03400000 	andi	$r0,$r0,0x0
9000000000009688:	28c1a061 	ld.d	$r1,$r3,104(0x68)
900000000000968c:	28c18076 	ld.d	$r22,$r3,96(0x60)
9000000000009690:	02c1c063 	addi.d	$r3,$r3,112(0x70)
9000000000009694:	4c000020 	jirl	$r0,$r1,0

9000000000009698 <enable_paging>:

static void
enable_paging(void) {
9000000000009698:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000000969c:	29c02061 	st.d	$r1,$r3,8(0x8)
90000000000096a0:	29c00076 	st.d	$r22,$r3,0
90000000000096a4:	02c04076 	addi.d	$r22,$r3,16(0x10)
  kprintf("enable_paging\n");
90000000000096a8:	1c0002e4 	pcaddu12i	$r4,23(0x17)
90000000000096ac:	02e1a084 	addi.d	$r4,$r4,-1944(0x868)
90000000000096b0:	57a76fff 	bl	-22676(0xfffa76c) # 9000000000003e1c <kprintf>
  /* nothing */
}
90000000000096b4:	03400000 	andi	$r0,$r0,0x0
90000000000096b8:	28c02061 	ld.d	$r1,$r3,8(0x8)
90000000000096bc:	28c00076 	ld.d	$r22,$r3,0
90000000000096c0:	02c04063 	addi.d	$r3,$r3,16(0x10)
90000000000096c4:	4c000020 	jirl	$r0,$r1,0

90000000000096c8 <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
90000000000096c8:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
90000000000096cc:	29c16061 	st.d	$r1,$r3,88(0x58)
90000000000096d0:	29c14076 	st.d	$r22,$r3,80(0x50)
90000000000096d4:	02c18076 	addi.d	$r22,$r3,96(0x60)
90000000000096d8:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
90000000000096dc:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
90000000000096e0:	29fee2c6 	st.d	$r6,$r22,-72(0xfb8)
90000000000096e4:	29fec2c7 	st.d	$r7,$r22,-80(0xfb0)
90000000000096e8:	0015010c 	move	$r12,$r8
90000000000096ec:	0040818c 	slli.w	$r12,$r12,0x0
90000000000096f0:	29beb2cc 	st.w	$r12,$r22,-84(0xfac)
    assert(PGOFF(la) == PGOFF(pa));
90000000000096f4:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
90000000000096f8:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
90000000000096fc:	0015b1ac 	xor	$r12,$r13,$r12
9000000000009700:	037ffd8c 	andi	$r12,$r12,0xfff
9000000000009704:	40001d80 	beqz	$r12,28(0x1c) # 9000000000009720 <boot_map_segment+0x58>
9000000000009708:	1c0002e6 	pcaddu12i	$r6,23(0x17)
900000000000970c:	02e060c6 	addi.d	$r6,$r6,-2024(0x818)
9000000000009710:	02824005 	addi.w	$r5,$r0,144(0x90)
9000000000009714:	1c0002c4 	pcaddu12i	$r4,22(0x16)
9000000000009718:	02de7084 	addi.d	$r4,$r4,1948(0x79c)
900000000000971c:	54356400 	bl	13668(0x3564) # 900000000000cc80 <__panic>
    size_t n = ROUNDUP_2N(size + PGOFF(la), PGSHIFT) >> PGSHIFT;
9000000000009720:	0280300c 	addi.w	$r12,$r0,12(0xc)
9000000000009724:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000009728:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000972c:	037ffd8d 	andi	$r13,$r12,0xfff
9000000000009730:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000009734:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000009738:	28bf82cd 	ld.w	$r13,$r22,-32(0xfe0)
900000000000973c:	004081ae 	slli.w	$r14,$r13,0x0
9000000000009740:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000009744:	001739ad 	sll.w	$r13,$r13,$r14
9000000000009748:	0010b58c 	add.d	$r12,$r12,$r13
900000000000974c:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
9000000000009750:	28bf82cd 	ld.w	$r13,$r22,-32(0xfe0)
9000000000009754:	004081ad 	slli.w	$r13,$r13,0x0
9000000000009758:	0019358c 	srl.d	$r12,$r12,$r13
900000000000975c:	28bf82cd 	ld.w	$r13,$r22,-32(0xfe0)
9000000000009760:	004081ad 	slli.w	$r13,$r13,0x0
9000000000009764:	0018b58c 	sll.d	$r12,$r12,$r13
9000000000009768:	0045318c 	srli.d	$r12,$r12,0xc
900000000000976c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    la = ROUNDDOWN_2N(la, PGSHIFT);
9000000000009770:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
9000000000009774:	15ffffec 	lu12i.w	$r12,-1(0xfffff)
9000000000009778:	0014b1ac 	and	$r12,$r13,$r12
900000000000977c:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
    pa = ROUNDDOWN_2N(pa, PGSHIFT);
9000000000009780:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
9000000000009784:	15ffffec 	lu12i.w	$r12,-1(0xfffff)
9000000000009788:	0014b1ac 	and	$r12,$r13,$r12
900000000000978c:	29fec2cc 	st.d	$r12,$r22,-80(0xfb0)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
9000000000009790:	50007c00 	b	124(0x7c) # 900000000000980c <boot_map_segment+0x144>
        pte_t *ptep = get_pte(pgdir, la, 1);
9000000000009794:	02800406 	addi.w	$r6,$r0,1(0x1)
9000000000009798:	28ff02c5 	ld.d	$r5,$r22,-64(0xfc0)
900000000000979c:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
90000000000097a0:	5401d400 	bl	468(0x1d4) # 9000000000009974 <get_pte>
90000000000097a4:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
        assert(ptep != NULL);
90000000000097a8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000097ac:	44001d80 	bnez	$r12,28(0x1c) # 90000000000097c8 <boot_map_segment+0x100>
90000000000097b0:	1c0002c6 	pcaddu12i	$r6,22(0x16)
90000000000097b4:	02de80c6 	addi.d	$r6,$r6,1952(0x7a0)
90000000000097b8:	02825805 	addi.w	$r5,$r0,150(0x96)
90000000000097bc:	1c0002c4 	pcaddu12i	$r4,22(0x16)
90000000000097c0:	02dbd084 	addi.d	$r4,$r4,1780(0x6f4)
90000000000097c4:	5434bc00 	bl	13500(0x34bc) # 900000000000cc80 <__panic>
        *ptep = pa | PTE_P | perm;
90000000000097c8:	2abeb2cd 	ld.wu	$r13,$r22,-84(0xfac)
90000000000097cc:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
90000000000097d0:	001531ac 	or	$r12,$r13,$r12
90000000000097d4:	0380058d 	ori	$r13,$r12,0x1
90000000000097d8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000097dc:	29c0018d 	st.d	$r13,$r12,0
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
90000000000097e0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000097e4:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
90000000000097e8:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
90000000000097ec:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
90000000000097f0:	1400002c 	lu12i.w	$r12,1(0x1)
90000000000097f4:	0010b1ac 	add.d	$r12,$r13,$r12
90000000000097f8:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
90000000000097fc:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
9000000000009800:	1400002c 	lu12i.w	$r12,1(0x1)
9000000000009804:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000009808:	29fec2cc 	st.d	$r12,$r22,-80(0xfb0)
900000000000980c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000009810:	47ff859f 	bnez	$r12,-124(0x7fff84) # 9000000000009794 <boot_map_segment+0xcc>
    }
}
9000000000009814:	03400000 	andi	$r0,$r0,0x0
9000000000009818:	28c16061 	ld.d	$r1,$r3,88(0x58)
900000000000981c:	28c14076 	ld.d	$r22,$r3,80(0x50)
9000000000009820:	02c18063 	addi.d	$r3,$r3,96(0x60)
9000000000009824:	4c000020 	jirl	$r0,$r1,0

9000000000009828 <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
9000000000009828:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000982c:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000009830:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000009834:	02c08076 	addi.d	$r22,$r3,32(0x20)
    struct Page *p = alloc_pages(2);
9000000000009838:	02800804 	addi.w	$r4,$r0,2(0x2)
900000000000983c:	57fa63ff 	bl	-1440(0xffffa60) # 900000000000929c <alloc_pages>
9000000000009840:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    if (p == NULL) {
9000000000009844:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000009848:	44001d80 	bnez	$r12,28(0x1c) # 9000000000009864 <boot_alloc_page+0x3c>
        panic("boot_alloc_page failed.\n");
900000000000984c:	1c0002c6 	pcaddu12i	$r6,22(0x16)
9000000000009850:	02dc90c6 	addi.d	$r6,$r6,1828(0x724)
9000000000009854:	02828805 	addi.w	$r5,$r0,162(0xa2)
9000000000009858:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000985c:	02d96084 	addi.d	$r4,$r4,1624(0x658)
9000000000009860:	54342000 	bl	13344(0x3420) # 900000000000cc80 <__panic>
    }
    return page2kva(p);
9000000000009864:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000009868:	57f6f7ff 	bl	-2316(0xffff6f4) # 9000000000008f5c <page2kva>
900000000000986c:	0015008c 	move	$r12,$r4
}
9000000000009870:	00150184 	move	$r4,$r12
9000000000009874:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000009878:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000000987c:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000009880:	4c000020 	jirl	$r0,$r1,0

9000000000009884 <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
9000000000009884:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000009888:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000000988c:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000009890:	02c08076 	addi.d	$r22,$r3,32(0x20)
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
9000000000009894:	57f947ff 	bl	-1724(0xffff944) # 90000000000091d8 <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
9000000000009898:	57fb1fff 	bl	-1252(0xffffb1c) # 90000000000093b4 <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
900000000000989c:	54053c00 	bl	1340(0x53c) # 9000000000009dd8 <check_alloc_page>
    
    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
    boot_pgdir = boot_alloc_page();
90000000000098a0:	57ff8bff 	bl	-120(0xfffff88) # 9000000000009828 <boot_alloc_page>
90000000000098a4:	0015008d 	move	$r13,$r4
90000000000098a8:	1c00432c 	pcaddu12i	$r12,537(0x219)
90000000000098ac:	02ee018c 	addi.d	$r12,$r12,-1152(0xb80)
90000000000098b0:	29c0018d 	st.d	$r13,$r12,0
    memset(boot_pgdir, 0, PGSIZE*2);
90000000000098b4:	1c00432c 	pcaddu12i	$r12,537(0x219)
90000000000098b8:	02edd18c 	addi.d	$r12,$r12,-1164(0xb74)
90000000000098bc:	28c0018c 	ld.d	$r12,$r12,0
90000000000098c0:	14000046 	lu12i.w	$r6,2(0x2)
90000000000098c4:	00150005 	move	$r5,$r0
90000000000098c8:	00150184 	move	$r4,$r12
90000000000098cc:	57ac57ff 	bl	-21420(0xfffac54) # 9000000000004520 <memset>
    boot_cr3 = PADDR(boot_pgdir);
90000000000098d0:	1c00432c 	pcaddu12i	$r12,537(0x219)
90000000000098d4:	02ed618c 	addi.d	$r12,$r12,-1192(0xb58)
90000000000098d8:	28c0018c 	ld.d	$r12,$r12,0
90000000000098dc:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
90000000000098e0:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
90000000000098e4:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
90000000000098e8:	0323fd8c 	lu52i.d	$r12,$r12,-1793(0x8ff)
90000000000098ec:	6800218d 	bltu	$r12,$r13,32(0x20) # 900000000000990c <pmm_init+0x88>
90000000000098f0:	28ffa2c7 	ld.d	$r7,$r22,-24(0xfe8)
90000000000098f4:	1c0002c6 	pcaddu12i	$r6,22(0x16)
90000000000098f8:	02d650c6 	addi.d	$r6,$r6,1428(0x594)
90000000000098fc:	0282f005 	addi.w	$r5,$r0,188(0xbc)
9000000000009900:	1c0002c4 	pcaddu12i	$r4,22(0x16)
9000000000009904:	02d6c084 	addi.d	$r4,$r4,1456(0x5b0)
9000000000009908:	54337800 	bl	13176(0x3378) # 900000000000cc80 <__panic>
900000000000990c:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000009910:	1c00430c 	pcaddu12i	$r12,536(0x218)
9000000000009914:	28f9018c 	ld.d	$r12,$r12,-448(0xe40)
9000000000009918:	29c0018d 	st.d	$r13,$r12,0
    current_pgdir = boot_pgdir;
900000000000991c:	1c00432c 	pcaddu12i	$r12,537(0x219)
9000000000009920:	02ec318c 	addi.d	$r12,$r12,-1268(0xb0c)
9000000000009924:	28c0018d 	ld.d	$r13,$r12,0
9000000000009928:	1c00432c 	pcaddu12i	$r12,537(0x219)
900000000000992c:	02ec218c 	addi.d	$r12,$r12,-1272(0xb08)
9000000000009930:	29c0018d 	st.d	$r13,$r12,0

    check_pgdir();
9000000000009934:	5404e800 	bl	1256(0x4e8) # 9000000000009e1c <check_pgdir>

    enable_paging();
9000000000009938:	57fd63ff 	bl	-672(0xffffd60) # 9000000000009698 <enable_paging>
    
    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
900000000000993c:	540b2000 	bl	2848(0xb20) # 900000000000a45c <check_boot_pgdir>
    memset(boot_pgdir, 0, PGSIZE);
9000000000009940:	1c00432c 	pcaddu12i	$r12,537(0x219)
9000000000009944:	02eba18c 	addi.d	$r12,$r12,-1304(0xae8)
9000000000009948:	28c0018c 	ld.d	$r12,$r12,0
900000000000994c:	14000026 	lu12i.w	$r6,1(0x1)
9000000000009950:	00150005 	move	$r5,$r0
9000000000009954:	00150184 	move	$r4,$r12
9000000000009958:	57abcbff 	bl	-21560(0xfffabc8) # 9000000000004520 <memset>
    //print_pgdir();

  	kmalloc_init();
900000000000995c:	57d0abff 	bl	-12120(0xfffd0a8) # 9000000000006a04 <kmalloc_init>
}
9000000000009960:	03400000 	andi	$r0,$r0,0x0
9000000000009964:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000009968:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000000996c:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000009970:	4c000020 	jirl	$r0,$r1,0

9000000000009974 <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
9000000000009974:	02fe4063 	addi.d	$r3,$r3,-112(0xf90)
9000000000009978:	29c1a061 	st.d	$r1,$r3,104(0x68)
900000000000997c:	29c18076 	st.d	$r22,$r3,96(0x60)
9000000000009980:	02c1c076 	addi.d	$r22,$r3,112(0x70)
9000000000009984:	29fea2c4 	st.d	$r4,$r22,-88(0xfa8)
9000000000009988:	29fe82c5 	st.d	$r5,$r22,-96(0xfa0)
900000000000998c:	001500cc 	move	$r12,$r6
9000000000009990:	0040818c 	slli.w	$r12,$r12,0x0
9000000000009994:	29be72cc 	st.w	$r12,$r22,-100(0xf9c)
#ifdef LAB2_EX2
    pde_t *pdep = NULL; // find page directory entry
9000000000009998:	29ffa2c0 	st.d	$r0,$r22,-24(0xfe8)
    pdep = pgdir + PDX(la);
900000000000999c:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
90000000000099a0:	0045598c 	srli.d	$r12,$r12,0x16
90000000000099a4:	034ffd8c 	andi	$r12,$r12,0x3ff
90000000000099a8:	00410d8c 	slli.d	$r12,$r12,0x3
90000000000099ac:	28fea2cd 	ld.d	$r13,$r22,-88(0xfa8)
90000000000099b0:	0010b1ac 	add.d	$r12,$r13,$r12
90000000000099b4:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    
    if ( ((*pdep)&PTE_P) == 0 ) { // check if entry is not present
90000000000099b8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000099bc:	28c0018c 	ld.d	$r12,$r12,0
90000000000099c0:	0340058c 	andi	$r12,$r12,0x1
90000000000099c4:	4400b180 	bnez	$r12,176(0xb0) # 9000000000009a74 <get_pte+0x100>
        // check if creating is needed, then alloc page for page table
        if(!create) return NULL;
90000000000099c8:	28be72cc 	ld.w	$r12,$r22,-100(0xf9c)
90000000000099cc:	44000d80 	bnez	$r12,12(0xc) # 90000000000099d8 <get_pte+0x64>
90000000000099d0:	0015000c 	move	$r12,$r0
90000000000099d4:	50011800 	b	280(0x118) # 9000000000009aec <get_pte+0x178>
        // CAUTION: this page is used for page table, not for common data page
        // set page reference
        struct Page* new_pte = alloc_pages(2);
90000000000099d8:	02800804 	addi.w	$r4,$r0,2(0x2)
90000000000099dc:	57f8c3ff 	bl	-1856(0xffff8c0) # 900000000000929c <alloc_pages>
90000000000099e0:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)
        if(!new_pte) return NULL;
90000000000099e4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000099e8:	44000d80 	bnez	$r12,12(0xc) # 90000000000099f4 <get_pte+0x80>
90000000000099ec:	0015000c 	move	$r12,$r0
90000000000099f0:	5000fc00 	b	252(0xfc) # 9000000000009aec <get_pte+0x178>
        page_ref_inc(new_pte);
90000000000099f4:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
90000000000099f8:	57f6b7ff 	bl	-2380(0xffff6b4) # 90000000000090ac <page_ref_inc>
        uintptr_t pa = (uintptr_t)page2kva(new_pte); // get linear address of page
90000000000099fc:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000009a00:	57f55fff 	bl	-2724(0xffff55c) # 9000000000008f5c <page2kva>
9000000000009a04:	0015008c 	move	$r12,$r4
9000000000009a08:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        // clear page content using memset
        memset((void*)pa, 0, PGSIZE*2);
9000000000009a0c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000009a10:	14000046 	lu12i.w	$r6,2(0x2)
9000000000009a14:	00150005 	move	$r5,$r0
9000000000009a18:	00150184 	move	$r4,$r12
9000000000009a1c:	57ab07ff 	bl	-21756(0xfffab04) # 9000000000004520 <memset>
        //kprintf("@@@ %x\n", pa);
        // set page directory entry's permission
        *pdep = PADDR(pa);
9000000000009a20:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000009a24:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
9000000000009a28:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000009a2c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
9000000000009a30:	0323fd8c 	lu52i.d	$r12,$r12,-1793(0x8ff)
9000000000009a34:	6800218d 	bltu	$r12,$r13,32(0x20) # 9000000000009a54 <get_pte+0xe0>
9000000000009a38:	28ff42c7 	ld.d	$r7,$r22,-48(0xfd0)
9000000000009a3c:	1c0002c6 	pcaddu12i	$r6,22(0x16)
9000000000009a40:	02d130c6 	addi.d	$r6,$r6,1100(0x44c)
9000000000009a44:	02839805 	addi.w	$r5,$r0,230(0xe6)
9000000000009a48:	1c0002c4 	pcaddu12i	$r4,22(0x16)
9000000000009a4c:	02d1a084 	addi.d	$r4,$r4,1128(0x468)
9000000000009a50:	54323000 	bl	12848(0x3230) # 900000000000cc80 <__panic>
9000000000009a54:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000009a58:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000009a5c:	29c0018d 	st.d	$r13,$r12,0
        (*pdep) |= (PTE_U|PTE_P|PTE_W);
9000000000009a60:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000009a64:	28c0018c 	ld.d	$r12,$r12,0
9000000000009a68:	03801d8d 	ori	$r13,$r12,0x7
9000000000009a6c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000009a70:	29c0018d 	st.d	$r13,$r12,0
    }
    pte_t *ret = (pte_t*)KADDR((uintptr_t)((pte_t*)(PDE_ADDR(*pdep))+PTX(la)));
9000000000009a74:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
9000000000009a78:	0045318c 	srli.d	$r12,$r12,0xc
9000000000009a7c:	034ffd8c 	andi	$r12,$r12,0x3ff
9000000000009a80:	00410d8d 	slli.d	$r13,$r12,0x3
9000000000009a84:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000009a88:	28c0018e 	ld.d	$r14,$r12,0
9000000000009a8c:	15ffffec 	lu12i.w	$r12,-1(0xfffff)
9000000000009a90:	0014b1cc 	and	$r12,$r14,$r12
9000000000009a94:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000009a98:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
9000000000009a9c:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
9000000000009aa0:	031c000c 	lu52i.d	$r12,$r0,1792(0x700)
9000000000009aa4:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000009aa8:	0045318c 	srli.d	$r12,$r12,0xc
9000000000009aac:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
9000000000009ab0:	1c00432c 	pcaddu12i	$r12,537(0x219)
9000000000009ab4:	02e5c18c 	addi.d	$r12,$r12,-1680(0x970)
9000000000009ab8:	28c0018c 	ld.d	$r12,$r12,0
9000000000009abc:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
9000000000009ac0:	680021ac 	bltu	$r13,$r12,32(0x20) # 9000000000009ae0 <get_pte+0x16c>
9000000000009ac4:	28ff22c7 	ld.d	$r7,$r22,-56(0xfc8)
9000000000009ac8:	1c0002c6 	pcaddu12i	$r6,22(0x16)
9000000000009acc:	02cca0c6 	addi.d	$r6,$r6,808(0x328)
9000000000009ad0:	0283a405 	addi.w	$r5,$r0,233(0xe9)
9000000000009ad4:	1c0002c4 	pcaddu12i	$r4,22(0x16)
9000000000009ad8:	02cf7084 	addi.d	$r4,$r4,988(0x3dc)
9000000000009adc:	5431a400 	bl	12708(0x31a4) # 900000000000cc80 <__panic>
9000000000009ae0:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000009ae4:	29fee2cc 	st.d	$r12,$r22,-72(0xfb8)
    //kprintf("la is %lx\n",la);
    //kprintf("@@GET_PTE %lx %x %x\n", *pdep, ret, *ret);
    return  ret;// return page table entry
9000000000009ae8:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
                          // (6) clear page content using memset
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
}
9000000000009aec:	00150184 	move	$r4,$r12
9000000000009af0:	28c1a061 	ld.d	$r1,$r3,104(0x68)
9000000000009af4:	28c18076 	ld.d	$r22,$r3,96(0x60)
9000000000009af8:	02c1c063 	addi.d	$r3,$r3,112(0x70)
9000000000009afc:	4c000020 	jirl	$r0,$r1,0

9000000000009b00 <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
9000000000009b00:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000009b04:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000009b08:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000009b0c:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000009b10:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000009b14:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
9000000000009b18:	29ff22c6 	st.d	$r6,$r22,-56(0xfc8)
    pte_t *ptep = get_pte(pgdir, la, 0);
9000000000009b1c:	00150006 	move	$r6,$r0
9000000000009b20:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
9000000000009b24:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000009b28:	57fe4fff 	bl	-436(0xffffe4c) # 9000000000009974 <get_pte>
9000000000009b2c:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    if (ptep_store != NULL) {
9000000000009b30:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000009b34:	40001180 	beqz	$r12,16(0x10) # 9000000000009b44 <get_page+0x44>
        *ptep_store = ptep;
9000000000009b38:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000009b3c:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000009b40:	29c0018d 	st.d	$r13,$r12,0
    }
    if (ptep != NULL && *ptep & PTE_P) {
9000000000009b44:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000009b48:	40002d80 	beqz	$r12,44(0x2c) # 9000000000009b74 <get_page+0x74>
9000000000009b4c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000009b50:	28c0018c 	ld.d	$r12,$r12,0
9000000000009b54:	0340058c 	andi	$r12,$r12,0x1
9000000000009b58:	40001d80 	beqz	$r12,28(0x1c) # 9000000000009b74 <get_page+0x74>
        return pa2page(*ptep);
9000000000009b5c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000009b60:	28c0018c 	ld.d	$r12,$r12,0
9000000000009b64:	00150184 	move	$r4,$r12
9000000000009b68:	57f36fff 	bl	-3220(0xffff36c) # 9000000000008ed4 <pa2page>
9000000000009b6c:	0015008c 	move	$r12,$r4
9000000000009b70:	50000800 	b	8(0x8) # 9000000000009b78 <get_page+0x78>
    }
    return NULL;
9000000000009b74:	0015000c 	move	$r12,$r0
}
9000000000009b78:	00150184 	move	$r4,$r12
9000000000009b7c:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000000009b80:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000000009b84:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000009b88:	4c000020 	jirl	$r0,$r1,0

9000000000009b8c <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
9000000000009b8c:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000009b90:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000009b94:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000009b98:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000009b9c:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000009ba0:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
9000000000009ba4:	29ff22c6 	st.d	$r6,$r22,-56(0xfc8)
#ifdef LAB2_EX3
	if (ptep && (*ptep & PTE_P)) { // check if page directory is present
9000000000009ba8:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000009bac:	40005580 	beqz	$r12,84(0x54) # 9000000000009c00 <page_remove_pte+0x74>
9000000000009bb0:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000009bb4:	28c0018c 	ld.d	$r12,$r12,0
9000000000009bb8:	0340058c 	andi	$r12,$r12,0x1
9000000000009bbc:	40004580 	beqz	$r12,68(0x44) # 9000000000009c00 <page_remove_pte+0x74>
		struct Page *page = pte2page(*ptep); // find corresponding page to pte
9000000000009bc0:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000009bc4:	28c0018c 	ld.d	$r12,$r12,0
9000000000009bc8:	00150184 	move	$r4,$r12
9000000000009bcc:	57f40fff 	bl	-3060(0xffff40c) # 9000000000008fd8 <pte2page>
9000000000009bd0:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
		// decrease page reference
    page_ref_dec(page);
9000000000009bd4:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000009bd8:	57f54bff 	bl	-2744(0xffff548) # 9000000000009120 <page_ref_dec>
		// and free it when reach 0
    if(page_ref(page) == 0){
9000000000009bdc:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000009be0:	57f49fff 	bl	-2916(0xffff49c) # 900000000000907c <page_ref>
9000000000009be4:	0015008c 	move	$r12,$r4
9000000000009be8:	44001180 	bnez	$r12,16(0x10) # 9000000000009bf8 <page_remove_pte+0x6c>
       free_page(page);
9000000000009bec:	02800405 	addi.w	$r5,$r0,1(0x1)
9000000000009bf0:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000009bf4:	57f70bff 	bl	-2296(0xffff708) # 90000000000092fc <free_pages>
    }
		// clear page directory entry
    *ptep = 0;
9000000000009bf8:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000009bfc:	29c00180 	st.d	$r0,$r12,0
	}
		// flush tlb
   tlb_invalidate_all();
9000000000009c00:	57ef97ff 	bl	-4204(0xfffef94) # 9000000000008b94 <tlb_invalidate_all>
                                  //(4) and free this page when page reference reachs 0
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
}
9000000000009c04:	03400000 	andi	$r0,$r0,0x0
9000000000009c08:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000000009c0c:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000000009c10:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000009c14:	4c000020 	jirl	$r0,$r1,0

9000000000009c18 <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
9000000000009c18:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000009c1c:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000009c20:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000009c24:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000009c28:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000009c2c:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
    pte_t *ptep = get_pte(pgdir, la, 0);
9000000000009c30:	00150006 	move	$r6,$r0
9000000000009c34:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
9000000000009c38:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000009c3c:	57fd3bff 	bl	-712(0xffffd38) # 9000000000009974 <get_pte>
9000000000009c40:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    if (ptep != NULL) {
9000000000009c44:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000009c48:	40001580 	beqz	$r12,20(0x14) # 9000000000009c5c <page_remove+0x44>
        page_remove_pte(pgdir, la, ptep);
9000000000009c4c:	28ffa2c6 	ld.d	$r6,$r22,-24(0xfe8)
9000000000009c50:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
9000000000009c54:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000009c58:	57ff37ff 	bl	-204(0xfffff34) # 9000000000009b8c <page_remove_pte>
    }
}
9000000000009c5c:	03400000 	andi	$r0,$r0,0x0
9000000000009c60:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000009c64:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000009c68:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000009c6c:	4c000020 	jirl	$r0,$r1,0

9000000000009c70 <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
9000000000009c70:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000009c74:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000009c78:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000009c7c:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000009c80:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000009c84:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
9000000000009c88:	29ff22c6 	st.d	$r6,$r22,-56(0xfc8)
9000000000009c8c:	001500ec 	move	$r12,$r7
9000000000009c90:	0040818c 	slli.w	$r12,$r12,0x0
9000000000009c94:	29bf12cc 	st.w	$r12,$r22,-60(0xfc4)
    pte_t *ptep = get_pte(pgdir, la, 1);
9000000000009c98:	02800406 	addi.w	$r6,$r0,1(0x1)
9000000000009c9c:	28ff22c5 	ld.d	$r5,$r22,-56(0xfc8)
9000000000009ca0:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000009ca4:	57fcd3ff 	bl	-816(0xffffcd0) # 9000000000009974 <get_pte>
9000000000009ca8:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    if (ptep == NULL) {
9000000000009cac:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000009cb0:	44000d80 	bnez	$r12,12(0xc) # 9000000000009cbc <page_insert+0x4c>
        return -E_NO_MEM;
9000000000009cb4:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
9000000000009cb8:	50008800 	b	136(0x88) # 9000000000009d40 <page_insert+0xd0>
    }
    page_ref_inc(page);
9000000000009cbc:	28ff42c4 	ld.d	$r4,$r22,-48(0xfd0)
9000000000009cc0:	57f3efff 	bl	-3092(0xffff3ec) # 90000000000090ac <page_ref_inc>
    if (*ptep & PTE_P) {
9000000000009cc4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000009cc8:	28c0018c 	ld.d	$r12,$r12,0
9000000000009ccc:	0340058c 	andi	$r12,$r12,0x1
9000000000009cd0:	40004180 	beqz	$r12,64(0x40) # 9000000000009d10 <page_insert+0xa0>
        struct Page *p = pte2page(*ptep);
9000000000009cd4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000009cd8:	28c0018c 	ld.d	$r12,$r12,0
9000000000009cdc:	00150184 	move	$r4,$r12
9000000000009ce0:	57f2fbff 	bl	-3336(0xffff2f8) # 9000000000008fd8 <pte2page>
9000000000009ce4:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)
        if (p == page) {
9000000000009ce8:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000009cec:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000009cf0:	5c0011ac 	bne	$r13,$r12,16(0x10) # 9000000000009d00 <page_insert+0x90>
            page_ref_dec(page);
9000000000009cf4:	28ff42c4 	ld.d	$r4,$r22,-48(0xfd0)
9000000000009cf8:	57f42bff 	bl	-3032(0xffff428) # 9000000000009120 <page_ref_dec>
9000000000009cfc:	50001400 	b	20(0x14) # 9000000000009d10 <page_insert+0xa0>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
9000000000009d00:	28ffa2c6 	ld.d	$r6,$r22,-24(0xfe8)
9000000000009d04:	28ff22c5 	ld.d	$r5,$r22,-56(0xfc8)
9000000000009d08:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000009d0c:	57fe83ff 	bl	-384(0xffffe80) # 9000000000009b8c <page_remove_pte>
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
9000000000009d10:	28ff42c4 	ld.d	$r4,$r22,-48(0xfd0)
9000000000009d14:	57f183ff 	bl	-3712(0xffff180) # 9000000000008e94 <page2pa>
9000000000009d18:	0015008d 	move	$r13,$r4
9000000000009d1c:	2abf12cc 	ld.wu	$r12,$r22,-60(0xfc4)
9000000000009d20:	001531ac 	or	$r12,$r13,$r12
9000000000009d24:	0380058d 	ori	$r13,$r12,0x1
9000000000009d28:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000009d2c:	29c0018d 	st.d	$r13,$r12,0
    tlb_invalidate(pgdir, la);
9000000000009d30:	28ff22c5 	ld.d	$r5,$r22,-56(0xfc8)
9000000000009d34:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000009d38:	57ee2fff 	bl	-4564(0xfffee2c) # 9000000000008b64 <tlb_invalidate>
    return 0;
9000000000009d3c:	0015000c 	move	$r12,$r0
}
9000000000009d40:	00150184 	move	$r4,$r12
9000000000009d44:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000000009d48:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000000009d4c:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000009d50:	4c000020 	jirl	$r0,$r1,0

9000000000009d54 <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
9000000000009d54:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000009d58:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000009d5c:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000009d60:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000009d64:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000009d68:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
9000000000009d6c:	001500cc 	move	$r12,$r6
9000000000009d70:	0040818c 	slli.w	$r12,$r12,0x0
9000000000009d74:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
  struct Page *page = alloc_page();
9000000000009d78:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000000009d7c:	57f523ff 	bl	-2784(0xffff520) # 900000000000929c <alloc_pages>
9000000000009d80:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
  if (page != NULL) {
9000000000009d84:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000009d88:	40003980 	beqz	$r12,56(0x38) # 9000000000009dc0 <pgdir_alloc_page+0x6c>
    if (page_insert(pgdir, page, la, perm) != 0) {
9000000000009d8c:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
9000000000009d90:	00150187 	move	$r7,$r12
9000000000009d94:	28ff42c6 	ld.d	$r6,$r22,-48(0xfd0)
9000000000009d98:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
9000000000009d9c:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000009da0:	57fed3ff 	bl	-304(0xffffed0) # 9000000000009c70 <page_insert>
9000000000009da4:	0015008c 	move	$r12,$r4
9000000000009da8:	40001980 	beqz	$r12,24(0x18) # 9000000000009dc0 <pgdir_alloc_page+0x6c>
      free_page(page);
9000000000009dac:	02800405 	addi.w	$r5,$r0,1(0x1)
9000000000009db0:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000009db4:	57f54bff 	bl	-2744(0xffff548) # 90000000000092fc <free_pages>
      return NULL;
9000000000009db8:	0015000c 	move	$r12,$r0
9000000000009dbc:	50000800 	b	8(0x8) # 9000000000009dc4 <pgdir_alloc_page+0x70>
    }
  }

  return page;
9000000000009dc0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
}
9000000000009dc4:	00150184 	move	$r4,$r12
9000000000009dc8:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000000009dcc:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000000009dd0:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000009dd4:	4c000020 	jirl	$r0,$r1,0

9000000000009dd8 <check_alloc_page>:

static void
check_alloc_page(void) {
9000000000009dd8:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000000009ddc:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000000009de0:	29c00076 	st.d	$r22,$r3,0
9000000000009de4:	02c04076 	addi.d	$r22,$r3,16(0x10)
  pmm_manager->check();
9000000000009de8:	1c00430c 	pcaddu12i	$r12,536(0x218)
9000000000009dec:	28e4c18c 	ld.d	$r12,$r12,-1744(0x930)
9000000000009df0:	28c0018c 	ld.d	$r12,$r12,0
9000000000009df4:	28c0c18c 	ld.d	$r12,$r12,48(0x30)
9000000000009df8:	4c000181 	jirl	$r1,$r12,0
  kprintf("check_alloc_page() succeeded!\n");
9000000000009dfc:	1c0002c4 	pcaddu12i	$r4,22(0x16)
9000000000009e00:	02c65084 	addi.d	$r4,$r4,404(0x194)
9000000000009e04:	57a01bff 	bl	-24552(0xfffa018) # 9000000000003e1c <kprintf>
}
9000000000009e08:	03400000 	andi	$r0,$r0,0x0
9000000000009e0c:	28c02061 	ld.d	$r1,$r3,8(0x8)
9000000000009e10:	28c00076 	ld.d	$r22,$r3,0
9000000000009e14:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000000009e18:	4c000020 	jirl	$r0,$r1,0

9000000000009e1c <check_pgdir>:

static void
check_pgdir(void) {
9000000000009e1c:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000009e20:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000009e24:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000009e28:	02c10076 	addi.d	$r22,$r3,64(0x40)
  assert(npage <= KMEMSIZE / PGSIZE);
9000000000009e2c:	1c00430c 	pcaddu12i	$r12,536(0x218)
9000000000009e30:	02d7d18c 	addi.d	$r12,$r12,1524(0x5f4)
9000000000009e34:	28c0018d 	ld.d	$r13,$r12,0
9000000000009e38:	1400010c 	lu12i.w	$r12,8(0x8)
9000000000009e3c:	6c001d8d 	bgeu	$r12,$r13,28(0x1c) # 9000000000009e58 <check_pgdir+0x3c>
9000000000009e40:	1c0002c6 	pcaddu12i	$r6,22(0x16)
9000000000009e44:	02c5c0c6 	addi.d	$r6,$r6,368(0x170)
9000000000009e48:	02862405 	addi.w	$r5,$r0,393(0x189)
9000000000009e4c:	1c0002c4 	pcaddu12i	$r4,22(0x16)
9000000000009e50:	02c19084 	addi.d	$r4,$r4,100(0x64)
9000000000009e54:	542e2c00 	bl	11820(0x2e2c) # 900000000000cc80 <__panic>
  assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
9000000000009e58:	1c00430c 	pcaddu12i	$r12,536(0x218)
9000000000009e5c:	02d7418c 	addi.d	$r12,$r12,1488(0x5d0)
9000000000009e60:	28c0018c 	ld.d	$r12,$r12,0
9000000000009e64:	40001d80 	beqz	$r12,28(0x1c) # 9000000000009e80 <check_pgdir+0x64>
9000000000009e68:	1c00430c 	pcaddu12i	$r12,536(0x218)
9000000000009e6c:	02d7018c 	addi.d	$r12,$r12,1472(0x5c0)
9000000000009e70:	28c0018c 	ld.d	$r12,$r12,0
9000000000009e74:	0040818c 	slli.w	$r12,$r12,0x0
9000000000009e78:	037ffd8c 	andi	$r12,$r12,0xfff
9000000000009e7c:	40001d80 	beqz	$r12,28(0x1c) # 9000000000009e98 <check_pgdir+0x7c>
9000000000009e80:	1c0002c6 	pcaddu12i	$r6,22(0x16)
9000000000009e84:	02c580c6 	addi.d	$r6,$r6,352(0x160)
9000000000009e88:	02862805 	addi.w	$r5,$r0,394(0x18a)
9000000000009e8c:	1c0002c4 	pcaddu12i	$r4,22(0x16)
9000000000009e90:	02c09084 	addi.d	$r4,$r4,36(0x24)
9000000000009e94:	542dec00 	bl	11756(0x2dec) # 900000000000cc80 <__panic>
  assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
9000000000009e98:	1c00430c 	pcaddu12i	$r12,536(0x218)
9000000000009e9c:	02d6418c 	addi.d	$r12,$r12,1424(0x590)
9000000000009ea0:	28c0018c 	ld.d	$r12,$r12,0
9000000000009ea4:	00150006 	move	$r6,$r0
9000000000009ea8:	00150005 	move	$r5,$r0
9000000000009eac:	00150184 	move	$r4,$r12
9000000000009eb0:	57fc53ff 	bl	-944(0xffffc50) # 9000000000009b00 <get_page>
9000000000009eb4:	0015008c 	move	$r12,$r4
9000000000009eb8:	40001d80 	beqz	$r12,28(0x1c) # 9000000000009ed4 <check_pgdir+0xb8>
9000000000009ebc:	1c0002c6 	pcaddu12i	$r6,22(0x16)
9000000000009ec0:	02c5d0c6 	addi.d	$r6,$r6,372(0x174)
9000000000009ec4:	02862c05 	addi.w	$r5,$r0,395(0x18b)
9000000000009ec8:	1c0002c4 	pcaddu12i	$r4,22(0x16)
9000000000009ecc:	02ffa084 	addi.d	$r4,$r4,-24(0xfe8)
9000000000009ed0:	542db000 	bl	11696(0x2db0) # 900000000000cc80 <__panic>

  struct Page *p1, *p2;
  p1 = alloc_page();
9000000000009ed4:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000000009ed8:	57f3c7ff 	bl	-3132(0xffff3c4) # 900000000000929c <alloc_pages>
9000000000009edc:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
  assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
9000000000009ee0:	1c00430c 	pcaddu12i	$r12,536(0x218)
9000000000009ee4:	02d5218c 	addi.d	$r12,$r12,1352(0x548)
9000000000009ee8:	28c0018c 	ld.d	$r12,$r12,0
9000000000009eec:	00150007 	move	$r7,$r0
9000000000009ef0:	00150006 	move	$r6,$r0
9000000000009ef4:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
9000000000009ef8:	00150184 	move	$r4,$r12
9000000000009efc:	57fd77ff 	bl	-652(0xffffd74) # 9000000000009c70 <page_insert>
9000000000009f00:	0015008c 	move	$r12,$r4
9000000000009f04:	40001d80 	beqz	$r12,28(0x1c) # 9000000000009f20 <check_pgdir+0x104>
9000000000009f08:	1c0002c6 	pcaddu12i	$r6,22(0x16)
9000000000009f0c:	02c5a0c6 	addi.d	$r6,$r6,360(0x168)
9000000000009f10:	02863c05 	addi.w	$r5,$r0,399(0x18f)
9000000000009f14:	1c0002c4 	pcaddu12i	$r4,22(0x16)
9000000000009f18:	02fe7084 	addi.d	$r4,$r4,-100(0xf9c)
9000000000009f1c:	542d6400 	bl	11620(0x2d64) # 900000000000cc80 <__panic>

  pte_t *ptep;
  assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
9000000000009f20:	1c00430c 	pcaddu12i	$r12,536(0x218)
9000000000009f24:	02d4218c 	addi.d	$r12,$r12,1288(0x508)
9000000000009f28:	28c0018c 	ld.d	$r12,$r12,0
9000000000009f2c:	00150006 	move	$r6,$r0
9000000000009f30:	00150005 	move	$r5,$r0
9000000000009f34:	00150184 	move	$r4,$r12
9000000000009f38:	57fa3fff 	bl	-1476(0xffffa3c) # 9000000000009974 <get_pte>
9000000000009f3c:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)
9000000000009f40:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000009f44:	44001d80 	bnez	$r12,28(0x1c) # 9000000000009f60 <check_pgdir+0x144>
9000000000009f48:	1c0002c6 	pcaddu12i	$r6,22(0x16)
9000000000009f4c:	02c5a0c6 	addi.d	$r6,$r6,360(0x168)
9000000000009f50:	02864805 	addi.w	$r5,$r0,402(0x192)
9000000000009f54:	1c0002c4 	pcaddu12i	$r4,22(0x16)
9000000000009f58:	02fd7084 	addi.d	$r4,$r4,-164(0xf5c)
9000000000009f5c:	542d2400 	bl	11556(0x2d24) # 900000000000cc80 <__panic>
  assert(pa2page(*ptep) == p1);
9000000000009f60:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000009f64:	28c0018c 	ld.d	$r12,$r12,0
9000000000009f68:	00150184 	move	$r4,$r12
9000000000009f6c:	57ef6bff 	bl	-4248(0xfffef68) # 9000000000008ed4 <pa2page>
9000000000009f70:	0015008d 	move	$r13,$r4
9000000000009f74:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000009f78:	58001d8d 	beq	$r12,$r13,28(0x1c) # 9000000000009f94 <check_pgdir+0x178>
9000000000009f7c:	1c0002c6 	pcaddu12i	$r6,22(0x16)
9000000000009f80:	02c5d0c6 	addi.d	$r6,$r6,372(0x174)
9000000000009f84:	02864c05 	addi.w	$r5,$r0,403(0x193)
9000000000009f88:	1c0002c4 	pcaddu12i	$r4,22(0x16)
9000000000009f8c:	02fca084 	addi.d	$r4,$r4,-216(0xf28)
9000000000009f90:	542cf000 	bl	11504(0x2cf0) # 900000000000cc80 <__panic>
  assert(page_ref(p1) == 1);
9000000000009f94:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000009f98:	57f0e7ff 	bl	-3868(0xffff0e4) # 900000000000907c <page_ref>
9000000000009f9c:	0015008c 	move	$r12,$r4
9000000000009fa0:	0015018d 	move	$r13,$r12
9000000000009fa4:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000009fa8:	58001dac 	beq	$r13,$r12,28(0x1c) # 9000000000009fc4 <check_pgdir+0x1a8>
9000000000009fac:	1c0002c6 	pcaddu12i	$r6,22(0x16)
9000000000009fb0:	02c5b0c6 	addi.d	$r6,$r6,364(0x16c)
9000000000009fb4:	02865005 	addi.w	$r5,$r0,404(0x194)
9000000000009fb8:	1c0002c4 	pcaddu12i	$r4,22(0x16)
9000000000009fbc:	02fbe084 	addi.d	$r4,$r4,-264(0xef8)
9000000000009fc0:	542cc000 	bl	11456(0x2cc0) # 900000000000cc80 <__panic>

  ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
9000000000009fc4:	1c00430c 	pcaddu12i	$r12,536(0x218)
9000000000009fc8:	02d1918c 	addi.d	$r12,$r12,1124(0x464)
9000000000009fcc:	28c0018c 	ld.d	$r12,$r12,0
9000000000009fd0:	28c0018d 	ld.d	$r13,$r12,0
9000000000009fd4:	15ffffec 	lu12i.w	$r12,-1(0xfffff)
9000000000009fd8:	0014b1ac 	and	$r12,$r13,$r12
9000000000009fdc:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
9000000000009fe0:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000009fe4:	031c000c 	lu52i.d	$r12,$r0,1792(0x700)
9000000000009fe8:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000009fec:	0045318c 	srli.d	$r12,$r12,0xc
9000000000009ff0:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
9000000000009ff4:	1c00430c 	pcaddu12i	$r12,536(0x218)
9000000000009ff8:	02d0b18c 	addi.d	$r12,$r12,1068(0x42c)
9000000000009ffc:	28c0018c 	ld.d	$r12,$r12,0
900000000000a000:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000000a004:	680021ac 	bltu	$r13,$r12,32(0x20) # 900000000000a024 <check_pgdir+0x208>
900000000000a008:	28ff62c7 	ld.d	$r7,$r22,-40(0xfd8)
900000000000a00c:	1c0002c6 	pcaddu12i	$r6,22(0x16)
900000000000a010:	02f790c6 	addi.d	$r6,$r6,-540(0xde4)
900000000000a014:	02865805 	addi.w	$r5,$r0,406(0x196)
900000000000a018:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a01c:	02fa6084 	addi.d	$r4,$r4,-360(0xe98)
900000000000a020:	542c6000 	bl	11360(0x2c60) # 900000000000cc80 <__panic>
900000000000a024:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000a028:	02c0218c 	addi.d	$r12,$r12,8(0x8)
900000000000a02c:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
  assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
900000000000a030:	1c00430c 	pcaddu12i	$r12,536(0x218)
900000000000a034:	02cfe18c 	addi.d	$r12,$r12,1016(0x3f8)
900000000000a038:	28c0018c 	ld.d	$r12,$r12,0
900000000000a03c:	00150006 	move	$r6,$r0
900000000000a040:	14000025 	lu12i.w	$r5,1(0x1)
900000000000a044:	00150184 	move	$r4,$r12
900000000000a048:	57f92fff 	bl	-1748(0xffff92c) # 9000000000009974 <get_pte>
900000000000a04c:	0015008d 	move	$r13,$r4
900000000000a050:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000a054:	58001d8d 	beq	$r12,$r13,28(0x1c) # 900000000000a070 <check_pgdir+0x254>
900000000000a058:	1c0002c6 	pcaddu12i	$r6,22(0x16)
900000000000a05c:	02c3a0c6 	addi.d	$r6,$r6,232(0xe8)
900000000000a060:	02865c05 	addi.w	$r5,$r0,407(0x197)
900000000000a064:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a068:	02f93084 	addi.d	$r4,$r4,-436(0xe4c)
900000000000a06c:	542c1400 	bl	11284(0x2c14) # 900000000000cc80 <__panic>

  p2 = alloc_page();
900000000000a070:	02800404 	addi.w	$r4,$r0,1(0x1)
900000000000a074:	57f22bff 	bl	-3544(0xffff228) # 900000000000929c <alloc_pages>
900000000000a078:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
  assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
900000000000a07c:	1c00430c 	pcaddu12i	$r12,536(0x218)
900000000000a080:	02ceb18c 	addi.d	$r12,$r12,940(0x3ac)
900000000000a084:	28c0018c 	ld.d	$r12,$r12,0
900000000000a088:	02801807 	addi.w	$r7,$r0,6(0x6)
900000000000a08c:	14000026 	lu12i.w	$r6,1(0x1)
900000000000a090:	28ff22c5 	ld.d	$r5,$r22,-56(0xfc8)
900000000000a094:	00150184 	move	$r4,$r12
900000000000a098:	57fbdbff 	bl	-1064(0xffffbd8) # 9000000000009c70 <page_insert>
900000000000a09c:	0015008c 	move	$r12,$r4
900000000000a0a0:	40001d80 	beqz	$r12,28(0x1c) # 900000000000a0bc <check_pgdir+0x2a0>
900000000000a0a4:	1c0002c6 	pcaddu12i	$r6,22(0x16)
900000000000a0a8:	02c370c6 	addi.d	$r6,$r6,220(0xdc)
900000000000a0ac:	02866805 	addi.w	$r5,$r0,410(0x19a)
900000000000a0b0:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a0b4:	02f80084 	addi.d	$r4,$r4,-512(0xe00)
900000000000a0b8:	542bc800 	bl	11208(0x2bc8) # 900000000000cc80 <__panic>
  assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
900000000000a0bc:	1c00430c 	pcaddu12i	$r12,536(0x218)
900000000000a0c0:	02cdb18c 	addi.d	$r12,$r12,876(0x36c)
900000000000a0c4:	28c0018c 	ld.d	$r12,$r12,0
900000000000a0c8:	00150006 	move	$r6,$r0
900000000000a0cc:	14000025 	lu12i.w	$r5,1(0x1)
900000000000a0d0:	00150184 	move	$r4,$r12
900000000000a0d4:	57f8a3ff 	bl	-1888(0xffff8a0) # 9000000000009974 <get_pte>
900000000000a0d8:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)
900000000000a0dc:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000a0e0:	44001d80 	bnez	$r12,28(0x1c) # 900000000000a0fc <check_pgdir+0x2e0>
900000000000a0e4:	1c0002c6 	pcaddu12i	$r6,22(0x16)
900000000000a0e8:	02c3b0c6 	addi.d	$r6,$r6,236(0xec)
900000000000a0ec:	02866c05 	addi.w	$r5,$r0,411(0x19b)
900000000000a0f0:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a0f4:	02f70084 	addi.d	$r4,$r4,-576(0xdc0)
900000000000a0f8:	542b8800 	bl	11144(0x2b88) # 900000000000cc80 <__panic>
  assert(*ptep & PTE_U);
900000000000a0fc:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000a100:	28c0018c 	ld.d	$r12,$r12,0
900000000000a104:	0340118c 	andi	$r12,$r12,0x4
900000000000a108:	44001d80 	bnez	$r12,28(0x1c) # 900000000000a124 <check_pgdir+0x308>
900000000000a10c:	1c0002c6 	pcaddu12i	$r6,22(0x16)
900000000000a110:	02c430c6 	addi.d	$r6,$r6,268(0x10c)
900000000000a114:	02867005 	addi.w	$r5,$r0,412(0x19c)
900000000000a118:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a11c:	02f66084 	addi.d	$r4,$r4,-616(0xd98)
900000000000a120:	542b6000 	bl	11104(0x2b60) # 900000000000cc80 <__panic>
  assert(*ptep & PTE_W);
900000000000a124:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000a128:	28c0018c 	ld.d	$r12,$r12,0
900000000000a12c:	0340098c 	andi	$r12,$r12,0x2
900000000000a130:	44001d80 	bnez	$r12,28(0x1c) # 900000000000a14c <check_pgdir+0x330>
900000000000a134:	1c0002c6 	pcaddu12i	$r6,22(0x16)
900000000000a138:	02c410c6 	addi.d	$r6,$r6,260(0x104)
900000000000a13c:	02867405 	addi.w	$r5,$r0,413(0x19d)
900000000000a140:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a144:	02f5c084 	addi.d	$r4,$r4,-656(0xd70)
900000000000a148:	542b3800 	bl	11064(0x2b38) # 900000000000cc80 <__panic>
  assert(boot_pgdir[0] & PTE_U);
900000000000a14c:	1c00430c 	pcaddu12i	$r12,536(0x218)
900000000000a150:	02cb718c 	addi.d	$r12,$r12,732(0x2dc)
900000000000a154:	28c0018c 	ld.d	$r12,$r12,0
900000000000a158:	28c0018c 	ld.d	$r12,$r12,0
900000000000a15c:	0340118c 	andi	$r12,$r12,0x4
900000000000a160:	44001d80 	bnez	$r12,28(0x1c) # 900000000000a17c <check_pgdir+0x360>
900000000000a164:	1c0002c6 	pcaddu12i	$r6,22(0x16)
900000000000a168:	02c3d0c6 	addi.d	$r6,$r6,244(0xf4)
900000000000a16c:	02867805 	addi.w	$r5,$r0,414(0x19e)
900000000000a170:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a174:	02f50084 	addi.d	$r4,$r4,-704(0xd40)
900000000000a178:	542b0800 	bl	11016(0x2b08) # 900000000000cc80 <__panic>
  assert(page_ref(p2) == 1);
900000000000a17c:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
900000000000a180:	57eeffff 	bl	-4356(0xfffeefc) # 900000000000907c <page_ref>
900000000000a184:	0015008c 	move	$r12,$r4
900000000000a188:	0015018d 	move	$r13,$r12
900000000000a18c:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000000a190:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000000a1ac <check_pgdir+0x390>
900000000000a194:	1c0002c6 	pcaddu12i	$r6,22(0x16)
900000000000a198:	02c3b0c6 	addi.d	$r6,$r6,236(0xec)
900000000000a19c:	02867c05 	addi.w	$r5,$r0,415(0x19f)
900000000000a1a0:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a1a4:	02f44084 	addi.d	$r4,$r4,-752(0xd10)
900000000000a1a8:	542ad800 	bl	10968(0x2ad8) # 900000000000cc80 <__panic>

  assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
900000000000a1ac:	1c00430c 	pcaddu12i	$r12,536(0x218)
900000000000a1b0:	02c9f18c 	addi.d	$r12,$r12,636(0x27c)
900000000000a1b4:	28c0018c 	ld.d	$r12,$r12,0
900000000000a1b8:	00150007 	move	$r7,$r0
900000000000a1bc:	14000026 	lu12i.w	$r6,1(0x1)
900000000000a1c0:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
900000000000a1c4:	00150184 	move	$r4,$r12
900000000000a1c8:	57faabff 	bl	-1368(0xffffaa8) # 9000000000009c70 <page_insert>
900000000000a1cc:	0015008c 	move	$r12,$r4
900000000000a1d0:	40001d80 	beqz	$r12,28(0x1c) # 900000000000a1ec <check_pgdir+0x3d0>
900000000000a1d4:	1c0002c6 	pcaddu12i	$r6,22(0x16)
900000000000a1d8:	02c350c6 	addi.d	$r6,$r6,212(0xd4)
900000000000a1dc:	02868405 	addi.w	$r5,$r0,417(0x1a1)
900000000000a1e0:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a1e4:	02f34084 	addi.d	$r4,$r4,-816(0xcd0)
900000000000a1e8:	542a9800 	bl	10904(0x2a98) # 900000000000cc80 <__panic>
  assert(page_ref(p1) == 2);
900000000000a1ec:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000a1f0:	57ee8fff 	bl	-4468(0xfffee8c) # 900000000000907c <page_ref>
900000000000a1f4:	0015008c 	move	$r12,$r4
900000000000a1f8:	0015018d 	move	$r13,$r12
900000000000a1fc:	0280080c 	addi.w	$r12,$r0,2(0x2)
900000000000a200:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000000a21c <check_pgdir+0x400>
900000000000a204:	1c0002c6 	pcaddu12i	$r6,22(0x16)
900000000000a208:	02c390c6 	addi.d	$r6,$r6,228(0xe4)
900000000000a20c:	02868805 	addi.w	$r5,$r0,418(0x1a2)
900000000000a210:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a214:	02f28084 	addi.d	$r4,$r4,-864(0xca0)
900000000000a218:	542a6800 	bl	10856(0x2a68) # 900000000000cc80 <__panic>
  assert(page_ref(p2) == 0);
900000000000a21c:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
900000000000a220:	57ee5fff 	bl	-4516(0xfffee5c) # 900000000000907c <page_ref>
900000000000a224:	0015008c 	move	$r12,$r4
900000000000a228:	40001d80 	beqz	$r12,28(0x1c) # 900000000000a244 <check_pgdir+0x428>
900000000000a22c:	1c0002c6 	pcaddu12i	$r6,22(0x16)
900000000000a230:	02c390c6 	addi.d	$r6,$r6,228(0xe4)
900000000000a234:	02868c05 	addi.w	$r5,$r0,419(0x1a3)
900000000000a238:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a23c:	02f1e084 	addi.d	$r4,$r4,-904(0xc78)
900000000000a240:	542a4000 	bl	10816(0x2a40) # 900000000000cc80 <__panic>
  assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
900000000000a244:	1c00430c 	pcaddu12i	$r12,536(0x218)
900000000000a248:	02c7918c 	addi.d	$r12,$r12,484(0x1e4)
900000000000a24c:	28c0018c 	ld.d	$r12,$r12,0
900000000000a250:	00150006 	move	$r6,$r0
900000000000a254:	14000025 	lu12i.w	$r5,1(0x1)
900000000000a258:	00150184 	move	$r4,$r12
900000000000a25c:	57f71bff 	bl	-2280(0xffff718) # 9000000000009974 <get_pte>
900000000000a260:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)
900000000000a264:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000a268:	44001d80 	bnez	$r12,28(0x1c) # 900000000000a284 <check_pgdir+0x468>
900000000000a26c:	1c0002c6 	pcaddu12i	$r6,22(0x16)
900000000000a270:	02fd90c6 	addi.d	$r6,$r6,-156(0xf64)
900000000000a274:	02869005 	addi.w	$r5,$r0,420(0x1a4)
900000000000a278:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a27c:	02f0e084 	addi.d	$r4,$r4,-968(0xc38)
900000000000a280:	542a0000 	bl	10752(0x2a00) # 900000000000cc80 <__panic>
  assert(pa2page(*ptep) == p1);
900000000000a284:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000a288:	28c0018c 	ld.d	$r12,$r12,0
900000000000a28c:	00150184 	move	$r4,$r12
900000000000a290:	57ec47ff 	bl	-5052(0xfffec44) # 9000000000008ed4 <pa2page>
900000000000a294:	0015008d 	move	$r13,$r4
900000000000a298:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000a29c:	58001d8d 	beq	$r12,$r13,28(0x1c) # 900000000000a2b8 <check_pgdir+0x49c>
900000000000a2a0:	1c0002c6 	pcaddu12i	$r6,22(0x16)
900000000000a2a4:	02f940c6 	addi.d	$r6,$r6,-432(0xe50)
900000000000a2a8:	02869405 	addi.w	$r5,$r0,421(0x1a5)
900000000000a2ac:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a2b0:	02f01084 	addi.d	$r4,$r4,-1020(0xc04)
900000000000a2b4:	5429cc00 	bl	10700(0x29cc) # 900000000000cc80 <__panic>
  assert((*ptep & PTE_U) == 0);
900000000000a2b8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000a2bc:	28c0018c 	ld.d	$r12,$r12,0
900000000000a2c0:	0340118c 	andi	$r12,$r12,0x4
900000000000a2c4:	40001d80 	beqz	$r12,28(0x1c) # 900000000000a2e0 <check_pgdir+0x4c4>
900000000000a2c8:	1c0002c6 	pcaddu12i	$r6,22(0x16)
900000000000a2cc:	02c1c0c6 	addi.d	$r6,$r6,112(0x70)
900000000000a2d0:	02869805 	addi.w	$r5,$r0,422(0x1a6)
900000000000a2d4:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a2d8:	02ef7084 	addi.d	$r4,$r4,-1060(0xbdc)
900000000000a2dc:	5429a400 	bl	10660(0x29a4) # 900000000000cc80 <__panic>

  page_remove(boot_pgdir, 0x0);
900000000000a2e0:	1c00430c 	pcaddu12i	$r12,536(0x218)
900000000000a2e4:	02c5218c 	addi.d	$r12,$r12,328(0x148)
900000000000a2e8:	28c0018c 	ld.d	$r12,$r12,0
900000000000a2ec:	00150005 	move	$r5,$r0
900000000000a2f0:	00150184 	move	$r4,$r12
900000000000a2f4:	57f927ff 	bl	-1756(0xffff924) # 9000000000009c18 <page_remove>
  assert(page_ref(p1) == 1);
900000000000a2f8:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000a2fc:	57ed83ff 	bl	-4736(0xfffed80) # 900000000000907c <page_ref>
900000000000a300:	0015008c 	move	$r12,$r4
900000000000a304:	0015018d 	move	$r13,$r12
900000000000a308:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000000a30c:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000000a328 <check_pgdir+0x50c>
900000000000a310:	1c0002c6 	pcaddu12i	$r6,22(0x16)
900000000000a314:	02f820c6 	addi.d	$r6,$r6,-504(0xe08)
900000000000a318:	0286a405 	addi.w	$r5,$r0,425(0x1a9)
900000000000a31c:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a320:	02ee5084 	addi.d	$r4,$r4,-1132(0xb94)
900000000000a324:	54295c00 	bl	10588(0x295c) # 900000000000cc80 <__panic>
  assert(page_ref(p2) == 0);
900000000000a328:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
900000000000a32c:	57ed53ff 	bl	-4784(0xfffed50) # 900000000000907c <page_ref>
900000000000a330:	0015008c 	move	$r12,$r4
900000000000a334:	40001d80 	beqz	$r12,28(0x1c) # 900000000000a350 <check_pgdir+0x534>
900000000000a338:	1c0002c6 	pcaddu12i	$r6,22(0x16)
900000000000a33c:	02ff60c6 	addi.d	$r6,$r6,-40(0xfd8)
900000000000a340:	0286a805 	addi.w	$r5,$r0,426(0x1aa)
900000000000a344:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a348:	02edb084 	addi.d	$r4,$r4,-1172(0xb6c)
900000000000a34c:	54293400 	bl	10548(0x2934) # 900000000000cc80 <__panic>

  page_remove(boot_pgdir, PGSIZE);
900000000000a350:	1c00430c 	pcaddu12i	$r12,536(0x218)
900000000000a354:	02c3618c 	addi.d	$r12,$r12,216(0xd8)
900000000000a358:	28c0018c 	ld.d	$r12,$r12,0
900000000000a35c:	14000025 	lu12i.w	$r5,1(0x1)
900000000000a360:	00150184 	move	$r4,$r12
900000000000a364:	57f8b7ff 	bl	-1868(0xffff8b4) # 9000000000009c18 <page_remove>
  assert(page_ref(p1) == 0);
900000000000a368:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000a36c:	57ed13ff 	bl	-4848(0xfffed10) # 900000000000907c <page_ref>
900000000000a370:	0015008c 	move	$r12,$r4
900000000000a374:	40001d80 	beqz	$r12,28(0x1c) # 900000000000a390 <check_pgdir+0x574>
900000000000a378:	1c0002c6 	pcaddu12i	$r6,22(0x16)
900000000000a37c:	02ffa0c6 	addi.d	$r6,$r6,-24(0xfe8)
900000000000a380:	0286b405 	addi.w	$r5,$r0,429(0x1ad)
900000000000a384:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a388:	02ecb084 	addi.d	$r4,$r4,-1236(0xb2c)
900000000000a38c:	5428f400 	bl	10484(0x28f4) # 900000000000cc80 <__panic>
  assert(page_ref(p2) == 0);
900000000000a390:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
900000000000a394:	57ecebff 	bl	-4888(0xfffece8) # 900000000000907c <page_ref>
900000000000a398:	0015008c 	move	$r12,$r4
900000000000a39c:	40001d80 	beqz	$r12,28(0x1c) # 900000000000a3b8 <check_pgdir+0x59c>
900000000000a3a0:	1c0002c6 	pcaddu12i	$r6,22(0x16)
900000000000a3a4:	02fdc0c6 	addi.d	$r6,$r6,-144(0xf70)
900000000000a3a8:	0286b805 	addi.w	$r5,$r0,430(0x1ae)
900000000000a3ac:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a3b0:	02ec1084 	addi.d	$r4,$r4,-1276(0xb04)
900000000000a3b4:	5428cc00 	bl	10444(0x28cc) # 900000000000cc80 <__panic>

  assert(page_ref(pa2page(boot_pgdir[0])) == 1);
900000000000a3b8:	1c00430c 	pcaddu12i	$r12,536(0x218)
900000000000a3bc:	02c1c18c 	addi.d	$r12,$r12,112(0x70)
900000000000a3c0:	28c0018c 	ld.d	$r12,$r12,0
900000000000a3c4:	28c0018c 	ld.d	$r12,$r12,0
900000000000a3c8:	00150184 	move	$r4,$r12
900000000000a3cc:	57eb0bff 	bl	-5368(0xfffeb08) # 9000000000008ed4 <pa2page>
900000000000a3d0:	0015008c 	move	$r12,$r4
900000000000a3d4:	00150184 	move	$r4,$r12
900000000000a3d8:	57eca7ff 	bl	-4956(0xfffeca4) # 900000000000907c <page_ref>
900000000000a3dc:	0015008c 	move	$r12,$r4
900000000000a3e0:	0015018d 	move	$r13,$r12
900000000000a3e4:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000000a3e8:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000000a404 <check_pgdir+0x5e8>
900000000000a3ec:	1c0002c6 	pcaddu12i	$r6,22(0x16)
900000000000a3f0:	02fe70c6 	addi.d	$r6,$r6,-100(0xf9c)
900000000000a3f4:	0286c005 	addi.w	$r5,$r0,432(0x1b0)
900000000000a3f8:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a3fc:	02eae084 	addi.d	$r4,$r4,-1352(0xab8)
900000000000a400:	54288000 	bl	10368(0x2880) # 900000000000cc80 <__panic>
  free_pages(pa2page(boot_pgdir[0]),2);
900000000000a404:	1c00430c 	pcaddu12i	$r12,536(0x218)
900000000000a408:	02c0918c 	addi.d	$r12,$r12,36(0x24)
900000000000a40c:	28c0018c 	ld.d	$r12,$r12,0
900000000000a410:	28c0018c 	ld.d	$r12,$r12,0
900000000000a414:	00150184 	move	$r4,$r12
900000000000a418:	57eabfff 	bl	-5444(0xfffeabc) # 9000000000008ed4 <pa2page>
900000000000a41c:	0015008c 	move	$r12,$r4
900000000000a420:	02800805 	addi.w	$r5,$r0,2(0x2)
900000000000a424:	00150184 	move	$r4,$r12
900000000000a428:	57eed7ff 	bl	-4396(0xfffeed4) # 90000000000092fc <free_pages>
  boot_pgdir[0] = 0;
900000000000a42c:	1c00430c 	pcaddu12i	$r12,536(0x218)
900000000000a430:	02fff18c 	addi.d	$r12,$r12,-4(0xffc)
900000000000a434:	28c0018c 	ld.d	$r12,$r12,0
900000000000a438:	29c00180 	st.d	$r0,$r12,0

  kprintf("check_pgdir() succeeded!\n");
900000000000a43c:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a440:	02fe1084 	addi.d	$r4,$r4,-124(0xf84)
900000000000a444:	5799dbff 	bl	-26152(0xfff99d8) # 9000000000003e1c <kprintf>
}
900000000000a448:	03400000 	andi	$r0,$r0,0x0
900000000000a44c:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000000a450:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000000a454:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000000a458:	4c000020 	jirl	$r0,$r1,0

900000000000a45c <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
900000000000a45c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000a460:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000000a464:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000000a468:	02c08076 	addi.d	$r22,$r3,32(0x20)
  pte_t *ptep;
  int i;
  assert(boot_pgdir[0] == 0);
900000000000a46c:	1c00430c 	pcaddu12i	$r12,536(0x218)
900000000000a470:	02fef18c 	addi.d	$r12,$r12,-68(0xfbc)
900000000000a474:	28c0018c 	ld.d	$r12,$r12,0
900000000000a478:	28c0018c 	ld.d	$r12,$r12,0
900000000000a47c:	40001d80 	beqz	$r12,28(0x1c) # 900000000000a498 <check_boot_pgdir+0x3c>
900000000000a480:	1c0002c6 	pcaddu12i	$r6,22(0x16)
900000000000a484:	02fd80c6 	addi.d	$r6,$r6,-160(0xf60)
900000000000a488:	0286ec05 	addi.w	$r5,$r0,443(0x1bb)
900000000000a48c:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a490:	02e89084 	addi.d	$r4,$r4,-1500(0xa24)
900000000000a494:	5427ec00 	bl	10220(0x27ec) # 900000000000cc80 <__panic>
  struct Page *p;
  p = alloc_page();
900000000000a498:	02800404 	addi.w	$r4,$r0,1(0x1)
900000000000a49c:	57ee03ff 	bl	-4608(0xfffee00) # 900000000000929c <alloc_pages>
900000000000a4a0:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
  *(int*)(page2kva(p) + 0x100) = 0x1234;
900000000000a4a4:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000a4a8:	57eab7ff 	bl	-5452(0xfffeab4) # 9000000000008f5c <page2kva>
900000000000a4ac:	0015008c 	move	$r12,$r4
900000000000a4b0:	02c4018c 	addi.d	$r12,$r12,256(0x100)
900000000000a4b4:	1400002d 	lu12i.w	$r13,1(0x1)
900000000000a4b8:	0388d1ad 	ori	$r13,$r13,0x234
900000000000a4bc:	2980018d 	st.w	$r13,$r12,0
  assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);    
900000000000a4c0:	1c00430c 	pcaddu12i	$r12,536(0x218)
900000000000a4c4:	02fda18c 	addi.d	$r12,$r12,-152(0xf68)
900000000000a4c8:	28c0018c 	ld.d	$r12,$r12,0
900000000000a4cc:	02800807 	addi.w	$r7,$r0,2(0x2)
900000000000a4d0:	02840006 	addi.w	$r6,$r0,256(0x100)
900000000000a4d4:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
900000000000a4d8:	00150184 	move	$r4,$r12
900000000000a4dc:	57f797ff 	bl	-2156(0xffff794) # 9000000000009c70 <page_insert>
900000000000a4e0:	0015008c 	move	$r12,$r4
900000000000a4e4:	40001d80 	beqz	$r12,28(0x1c) # 900000000000a500 <check_boot_pgdir+0xa4>
900000000000a4e8:	1c0002c6 	pcaddu12i	$r6,22(0x16)
900000000000a4ec:	02fc80c6 	addi.d	$r6,$r6,-224(0xf20)
900000000000a4f0:	0286fc05 	addi.w	$r5,$r0,447(0x1bf)
900000000000a4f4:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a4f8:	02e6f084 	addi.d	$r4,$r4,-1604(0x9bc)
900000000000a4fc:	54278400 	bl	10116(0x2784) # 900000000000cc80 <__panic>
  assert(page_ref(p) == 1);
900000000000a500:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000a504:	57eb7bff 	bl	-5256(0xfffeb78) # 900000000000907c <page_ref>
900000000000a508:	0015008c 	move	$r12,$r4
900000000000a50c:	0015018d 	move	$r13,$r12
900000000000a510:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000000a514:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000000a530 <check_boot_pgdir+0xd4>
900000000000a518:	1c0002c6 	pcaddu12i	$r6,22(0x16)
900000000000a51c:	02fcc0c6 	addi.d	$r6,$r6,-208(0xf30)
900000000000a520:	02870005 	addi.w	$r5,$r0,448(0x1c0)
900000000000a524:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a528:	02e63084 	addi.d	$r4,$r4,-1652(0x98c)
900000000000a52c:	54275400 	bl	10068(0x2754) # 900000000000cc80 <__panic>
  assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
900000000000a530:	1c00430c 	pcaddu12i	$r12,536(0x218)
900000000000a534:	02fbe18c 	addi.d	$r12,$r12,-264(0xef8)
900000000000a538:	28c0018d 	ld.d	$r13,$r12,0
900000000000a53c:	02800807 	addi.w	$r7,$r0,2(0x2)
900000000000a540:	1400002c 	lu12i.w	$r12,1(0x1)
900000000000a544:	03840186 	ori	$r6,$r12,0x100
900000000000a548:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
900000000000a54c:	001501a4 	move	$r4,$r13
900000000000a550:	57f723ff 	bl	-2272(0xffff720) # 9000000000009c70 <page_insert>
900000000000a554:	0015008c 	move	$r12,$r4
900000000000a558:	40001d80 	beqz	$r12,28(0x1c) # 900000000000a574 <check_boot_pgdir+0x118>
900000000000a55c:	1c0002c6 	pcaddu12i	$r6,22(0x16)
900000000000a560:	02fc50c6 	addi.d	$r6,$r6,-236(0xf14)
900000000000a564:	02870405 	addi.w	$r5,$r0,449(0x1c1)
900000000000a568:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a56c:	02e52084 	addi.d	$r4,$r4,-1720(0x948)
900000000000a570:	54271000 	bl	10000(0x2710) # 900000000000cc80 <__panic>
  assert(page_ref(p) == 2);
900000000000a574:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000a578:	57eb07ff 	bl	-5372(0xfffeb04) # 900000000000907c <page_ref>
900000000000a57c:	0015008c 	move	$r12,$r4
900000000000a580:	0015018d 	move	$r13,$r12
900000000000a584:	0280080c 	addi.w	$r12,$r0,2(0x2)
900000000000a588:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000000a5a4 <check_boot_pgdir+0x148>
900000000000a58c:	1c0002c6 	pcaddu12i	$r6,22(0x16)
900000000000a590:	02fcd0c6 	addi.d	$r6,$r6,-204(0xf34)
900000000000a594:	02870805 	addi.w	$r5,$r0,450(0x1c2)
900000000000a598:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a59c:	02e46084 	addi.d	$r4,$r4,-1768(0x918)
900000000000a5a0:	5426e000 	bl	9952(0x26e0) # 900000000000cc80 <__panic>
  kprintf("\nHERE\n");
900000000000a5a4:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a5a8:	02fd1084 	addi.d	$r4,$r4,-188(0xf44)
900000000000a5ac:	579873ff 	bl	-26512(0xfff9870) # 9000000000003e1c <kprintf>
#ifdef LAB3_EX1
  assert(*(int*)0x100 == 0x1234);
900000000000a5b0:	0284000c 	addi.w	$r12,$r0,256(0x100)
900000000000a5b4:	2880018c 	ld.w	$r12,$r12,0
900000000000a5b8:	0015018d 	move	$r13,$r12
900000000000a5bc:	1400002c 	lu12i.w	$r12,1(0x1)
900000000000a5c0:	0388d18c 	ori	$r12,$r12,0x234
900000000000a5c4:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000000a5e0 <check_boot_pgdir+0x184>
900000000000a5c8:	1c0002c6 	pcaddu12i	$r6,22(0x16)
900000000000a5cc:	02fca0c6 	addi.d	$r6,$r6,-216(0xf28)
900000000000a5d0:	02871405 	addi.w	$r5,$r0,453(0x1c5)
900000000000a5d4:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a5d8:	02e37084 	addi.d	$r4,$r4,-1828(0x8dc)
900000000000a5dc:	5426a400 	bl	9892(0x26a4) # 900000000000cc80 <__panic>
  const char *str = "ucore: Hello world!!";
900000000000a5e0:	1c0002cc 	pcaddu12i	$r12,22(0x16)
900000000000a5e4:	02fd018c 	addi.d	$r12,$r12,-192(0xf40)
900000000000a5e8:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
  strcpy((void *)0x100, str);
900000000000a5ec:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
900000000000a5f0:	02840004 	addi.w	$r4,$r0,256(0x100)
900000000000a5f4:	579c63ff 	bl	-25504(0xfff9c60) # 9000000000004254 <strcpy>
  assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
900000000000a5f8:	1400002c 	lu12i.w	$r12,1(0x1)
900000000000a5fc:	03840185 	ori	$r5,$r12,0x100
900000000000a600:	02840004 	addi.w	$r4,$r0,256(0x100)
900000000000a604:	579d2fff 	bl	-25300(0xfff9d2c) # 9000000000004330 <strcmp>
900000000000a608:	0015008c 	move	$r12,$r4
900000000000a60c:	40001d80 	beqz	$r12,28(0x1c) # 900000000000a628 <check_boot_pgdir+0x1cc>
900000000000a610:	1c0002c6 	pcaddu12i	$r6,22(0x16)
900000000000a614:	02fca0c6 	addi.d	$r6,$r6,-216(0xf28)
900000000000a618:	02872005 	addi.w	$r5,$r0,456(0x1c8)
900000000000a61c:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a620:	02e25084 	addi.d	$r4,$r4,-1900(0x894)
900000000000a624:	54265c00 	bl	9820(0x265c) # 900000000000cc80 <__panic>
  *(char *)(page2kva(p) + 0x100) = '\0';
900000000000a628:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000a62c:	57e933ff 	bl	-5840(0xfffe930) # 9000000000008f5c <page2kva>
900000000000a630:	0015008c 	move	$r12,$r4
900000000000a634:	02c4018c 	addi.d	$r12,$r12,256(0x100)
900000000000a638:	29000180 	st.b	$r0,$r12,0
  assert(strlen((const char *)0x100) == 0);
900000000000a63c:	02840004 	addi.w	$r4,$r0,256(0x100)
900000000000a640:	579b6fff 	bl	-25748(0xfff9b6c) # 90000000000041ac <strlen>
900000000000a644:	0015008c 	move	$r12,$r4
900000000000a648:	40001d80 	beqz	$r12,28(0x1c) # 900000000000a664 <check_boot_pgdir+0x208>
900000000000a64c:	1c0002c6 	pcaddu12i	$r6,22(0x16)
900000000000a650:	02fcd0c6 	addi.d	$r6,$r6,-204(0xf34)
900000000000a654:	02872805 	addi.w	$r5,$r0,458(0x1ca)
900000000000a658:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a65c:	02e16084 	addi.d	$r4,$r4,-1960(0x858)
900000000000a660:	54262000 	bl	9760(0x2620) # 900000000000cc80 <__panic>
#endif
  free_page(p);
900000000000a664:	02800405 	addi.w	$r5,$r0,1(0x1)
900000000000a668:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000a66c:	57ec93ff 	bl	-4976(0xfffec90) # 90000000000092fc <free_pages>
  free_pages(pa2page(PDE_ADDR(boot_pgdir[0])),2);
900000000000a670:	1c00430c 	pcaddu12i	$r12,536(0x218)
900000000000a674:	02f6e18c 	addi.d	$r12,$r12,-584(0xdb8)
900000000000a678:	28c0018c 	ld.d	$r12,$r12,0
900000000000a67c:	28c0018d 	ld.d	$r13,$r12,0
900000000000a680:	15ffffec 	lu12i.w	$r12,-1(0xfffff)
900000000000a684:	0014b1ac 	and	$r12,$r13,$r12
900000000000a688:	00150184 	move	$r4,$r12
900000000000a68c:	57e84bff 	bl	-6072(0xfffe848) # 9000000000008ed4 <pa2page>
900000000000a690:	0015008c 	move	$r12,$r4
900000000000a694:	02800805 	addi.w	$r5,$r0,2(0x2)
900000000000a698:	00150184 	move	$r4,$r12
900000000000a69c:	57ec63ff 	bl	-5024(0xfffec60) # 90000000000092fc <free_pages>
  boot_pgdir[0] = 0;
900000000000a6a0:	1c00430c 	pcaddu12i	$r12,536(0x218)
900000000000a6a4:	02f6218c 	addi.d	$r12,$r12,-632(0xd88)
900000000000a6a8:	28c0018c 	ld.d	$r12,$r12,0
900000000000a6ac:	29c00180 	st.d	$r0,$r12,0
  kprintf("check_boot_pgdir() succeeded!\n");
900000000000a6b0:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a6b4:	02fc2084 	addi.d	$r4,$r4,-248(0xf08)
900000000000a6b8:	579767ff 	bl	-26780(0xfff9764) # 9000000000003e1c <kprintf>
}
900000000000a6bc:	03400000 	andi	$r0,$r0,0x0
900000000000a6c0:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000000a6c4:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000000a6c8:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000000a6cc:	4c000020 	jirl	$r0,$r1,0

900000000000a6d0 <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
900000000000a6d0:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000a6d4:	29c06076 	st.d	$r22,$r3,24(0x18)
900000000000a6d8:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000000a6dc:	0015008c 	move	$r12,$r4
900000000000a6e0:	0040818c 	slli.w	$r12,$r12,0x0
900000000000a6e4:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
900000000000a6e8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000a6ec:	0340118c 	andi	$r12,$r12,0x4
900000000000a6f0:	40000d80 	beqz	$r12,12(0xc) # 900000000000a6fc <perm2str+0x2c>
900000000000a6f4:	0281d40c 	addi.w	$r12,$r0,117(0x75)
900000000000a6f8:	50000800 	b	8(0x8) # 900000000000a700 <perm2str+0x30>
900000000000a6fc:	0280b40c 	addi.w	$r12,$r0,45(0x2d)
900000000000a700:	1c00430d 	pcaddu12i	$r13,536(0x218)
900000000000a704:	02f4e1ad 	addi.d	$r13,$r13,-712(0xd38)
900000000000a708:	290001ac 	st.b	$r12,$r13,0
    str[1] = 'r';
900000000000a70c:	1c00430c 	pcaddu12i	$r12,536(0x218)
900000000000a710:	02f4b18c 	addi.d	$r12,$r12,-724(0xd2c)
900000000000a714:	0281c80d 	addi.w	$r13,$r0,114(0x72)
900000000000a718:	2900058d 	st.b	$r13,$r12,1(0x1)
    str[2] = (perm & PTE_W) ? 'w' : '-';
900000000000a71c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000a720:	0340098c 	andi	$r12,$r12,0x2
900000000000a724:	40000d80 	beqz	$r12,12(0xc) # 900000000000a730 <perm2str+0x60>
900000000000a728:	0281dc0c 	addi.w	$r12,$r0,119(0x77)
900000000000a72c:	50000800 	b	8(0x8) # 900000000000a734 <perm2str+0x64>
900000000000a730:	0280b40c 	addi.w	$r12,$r0,45(0x2d)
900000000000a734:	1c00430d 	pcaddu12i	$r13,536(0x218)
900000000000a738:	02f411ad 	addi.d	$r13,$r13,-764(0xd04)
900000000000a73c:	290009ac 	st.b	$r12,$r13,2(0x2)
    str[3] = '\0';
900000000000a740:	1c00430c 	pcaddu12i	$r12,536(0x218)
900000000000a744:	02f3e18c 	addi.d	$r12,$r12,-776(0xcf8)
900000000000a748:	29000d80 	st.b	$r0,$r12,3(0x3)
    return str;
900000000000a74c:	1c00430c 	pcaddu12i	$r12,536(0x218)
900000000000a750:	02f3b18c 	addi.d	$r12,$r12,-788(0xcec)
}
900000000000a754:	00150184 	move	$r4,$r12
900000000000a758:	28c06076 	ld.d	$r22,$r3,24(0x18)
900000000000a75c:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000000a760:	4c000020 	jirl	$r0,$r1,0

900000000000a764 <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
900000000000a764:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
900000000000a768:	29c12076 	st.d	$r22,$r3,72(0x48)
900000000000a76c:	02c14076 	addi.d	$r22,$r3,80(0x50)
900000000000a770:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000000a774:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
900000000000a778:	29ff22c6 	st.d	$r6,$r22,-56(0xfc8)
900000000000a77c:	29ff02c7 	st.d	$r7,$r22,-64(0xfc0)
900000000000a780:	29fee2c8 	st.d	$r8,$r22,-72(0xfb8)
900000000000a784:	29fec2c9 	st.d	$r9,$r22,-80(0xfb0)
    if (start >= right) {
900000000000a788:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
900000000000a78c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000a790:	680019ac 	bltu	$r13,$r12,24(0x18) # 900000000000a7a8 <get_pgtable_items+0x44>
        return 0;
900000000000a794:	0015000c 	move	$r12,$r0
900000000000a798:	5000dc00 	b	220(0xdc) # 900000000000a874 <get_pgtable_items+0x110>
    }
    while (start < right && !(table[start] & PTE_P)) {
        start ++;
900000000000a79c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000a7a0:	02c0058c 	addi.d	$r12,$r12,1(0x1)
900000000000a7a4:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
    while (start < right && !(table[start] & PTE_P)) {
900000000000a7a8:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
900000000000a7ac:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000a7b0:	6c0021ac 	bgeu	$r13,$r12,32(0x20) # 900000000000a7d0 <get_pgtable_items+0x6c>
900000000000a7b4:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000a7b8:	00410d8c 	slli.d	$r12,$r12,0x3
900000000000a7bc:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
900000000000a7c0:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000a7c4:	28c0018c 	ld.d	$r12,$r12,0
900000000000a7c8:	0340058c 	andi	$r12,$r12,0x1
900000000000a7cc:	43ffd19f 	beqz	$r12,-48(0x7fffd0) # 900000000000a79c <get_pgtable_items+0x38>
    }
    if (start < right) {
900000000000a7d0:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
900000000000a7d4:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000a7d8:	6c0099ac 	bgeu	$r13,$r12,152(0x98) # 900000000000a870 <get_pgtable_items+0x10c>
        if (left_store != NULL) {
900000000000a7dc:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000a7e0:	40001180 	beqz	$r12,16(0x10) # 900000000000a7f0 <get_pgtable_items+0x8c>
            *left_store = start;
900000000000a7e4:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000a7e8:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
900000000000a7ec:	29c0018d 	st.d	$r13,$r12,0
        }
        int perm = (table[start ++] & PTE_USER);
900000000000a7f0:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000a7f4:	02c0058d 	addi.d	$r13,$r12,1(0x1)
900000000000a7f8:	29ff22cd 	st.d	$r13,$r22,-56(0xfc8)
900000000000a7fc:	00410d8c 	slli.d	$r12,$r12,0x3
900000000000a800:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
900000000000a804:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000a808:	28c0018c 	ld.d	$r12,$r12,0
900000000000a80c:	0040818c 	slli.w	$r12,$r12,0x0
900000000000a810:	03401d8c 	andi	$r12,$r12,0x7
900000000000a814:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
        while (start < right && (table[start] & PTE_USER) == perm) {
900000000000a818:	50001000 	b	16(0x10) # 900000000000a828 <get_pgtable_items+0xc4>
            start ++;
900000000000a81c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000a820:	02c0058c 	addi.d	$r12,$r12,1(0x1)
900000000000a824:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
        while (start < right && (table[start] & PTE_USER) == perm) {
900000000000a828:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
900000000000a82c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000a830:	6c0025ac 	bgeu	$r13,$r12,36(0x24) # 900000000000a854 <get_pgtable_items+0xf0>
900000000000a834:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000a838:	00410d8c 	slli.d	$r12,$r12,0x3
900000000000a83c:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
900000000000a840:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000a844:	28c0018c 	ld.d	$r12,$r12,0
900000000000a848:	03401d8d 	andi	$r13,$r12,0x7
900000000000a84c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000a850:	5bffcdac 	beq	$r13,$r12,-52(0x3ffcc) # 900000000000a81c <get_pgtable_items+0xb8>
        }
        if (right_store != NULL) {
900000000000a854:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000000a858:	40001180 	beqz	$r12,16(0x10) # 900000000000a868 <get_pgtable_items+0x104>
            *right_store = start;
900000000000a85c:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000000a860:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
900000000000a864:	29c0018d 	st.d	$r13,$r12,0
        }
        return perm;
900000000000a868:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000a86c:	50000800 	b	8(0x8) # 900000000000a874 <get_pgtable_items+0x110>
    }
    return 0;
900000000000a870:	0015000c 	move	$r12,$r0
}
900000000000a874:	00150184 	move	$r4,$r12
900000000000a878:	28c12076 	ld.d	$r22,$r3,72(0x48)
900000000000a87c:	02c14063 	addi.d	$r3,$r3,80(0x50)
900000000000a880:	4c000020 	jirl	$r0,$r1,0

900000000000a884 <print_pgdir>:
#define PRINT_PTE(s0, a0,a1,a2,a3,s1) kprintf(s0);printhex(a0);\
  kprintf(") ");printhex(a1);kprintf("-");printhex(a2);kprintf(" ");\
  printhex(a3);kprintf(" ");kprintf(s1);kprintf("\n");
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
900000000000a884:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
900000000000a888:	29c16061 	st.d	$r1,$r3,88(0x58)
900000000000a88c:	29c14076 	st.d	$r22,$r3,80(0x50)
900000000000a890:	02c18076 	addi.d	$r22,$r3,96(0x60)
  size_t left, right = 0, perm;
900000000000a894:	29fec2c0 	st.d	$r0,$r22,-80(0xfb0)
    kprintf("-------------------- BEGIN --------------------\n");
900000000000a898:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a89c:	02f50084 	addi.d	$r4,$r4,-704(0xd40)
900000000000a8a0:	57957fff 	bl	-27268(0xfff957c) # 9000000000003e1c <kprintf>
  while ((perm = get_pgtable_items(0, NPDEENTRY, right, current_pgdir, &left, &right)) != 0) {
900000000000a8a4:	5002d400 	b	724(0x2d4) # 900000000000ab78 <print_pgdir+0x2f4>
    PRINT_PTE("PDE(", right - left,
900000000000a8a8:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a8ac:	02f5a084 	addi.d	$r4,$r4,-664(0xd68)
900000000000a8b0:	57956fff 	bl	-27284(0xfff956c) # 9000000000003e1c <kprintf>
900000000000a8b4:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
900000000000a8b8:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000a8bc:	0011b1ac 	sub.d	$r12,$r13,$r12
900000000000a8c0:	00150184 	move	$r4,$r12
900000000000a8c4:	5795c7ff 	bl	-27196(0xfff95c4) # 9000000000003e88 <printhex>
900000000000a8c8:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a8cc:	02f54084 	addi.d	$r4,$r4,-688(0xd50)
900000000000a8d0:	57954fff 	bl	-27316(0xfff954c) # 9000000000003e1c <kprintf>
900000000000a8d4:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000a8d8:	0041598c 	slli.d	$r12,$r12,0x16
900000000000a8dc:	00150184 	move	$r4,$r12
900000000000a8e0:	5795abff 	bl	-27224(0xfff95a8) # 9000000000003e88 <printhex>
900000000000a8e4:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a8e8:	02f4f084 	addi.d	$r4,$r4,-708(0xd3c)
900000000000a8ec:	579533ff 	bl	-27344(0xfff9530) # 9000000000003e1c <kprintf>
900000000000a8f0:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000000a8f4:	0041598c 	slli.d	$r12,$r12,0x16
900000000000a8f8:	00150184 	move	$r4,$r12
900000000000a8fc:	57958fff 	bl	-27252(0xfff958c) # 9000000000003e88 <printhex>
900000000000a900:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a904:	02f4a084 	addi.d	$r4,$r4,-728(0xd28)
900000000000a908:	579517ff 	bl	-27372(0xfff9514) # 9000000000003e1c <kprintf>
900000000000a90c:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
900000000000a910:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000a914:	0011b1ac 	sub.d	$r12,$r13,$r12
900000000000a918:	0041598c 	slli.d	$r12,$r12,0x16
900000000000a91c:	00150184 	move	$r4,$r12
900000000000a920:	57956bff 	bl	-27288(0xfff9568) # 9000000000003e88 <printhex>
900000000000a924:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000a928:	02f41084 	addi.d	$r4,$r4,-764(0xd04)
900000000000a92c:	5794f3ff 	bl	-27408(0xfff94f0) # 9000000000003e1c <kprintf>
900000000000a930:	28bf22cc 	ld.w	$r12,$r22,-56(0xfc8)
900000000000a934:	00150184 	move	$r4,$r12
900000000000a938:	57fd9bff 	bl	-616(0xffffd98) # 900000000000a6d0 <perm2str>
900000000000a93c:	0015008c 	move	$r12,$r4
900000000000a940:	00150184 	move	$r4,$r12
900000000000a944:	5794dbff 	bl	-27432(0xfff94d8) # 9000000000003e1c <kprintf>
900000000000a948:	1c0002a4 	pcaddu12i	$r4,21(0x15)
900000000000a94c:	02d44084 	addi.d	$r4,$r4,1296(0x510)
900000000000a950:	5794cfff 	bl	-27444(0xfff94cc) # 9000000000003e1c <kprintf>
        left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
    size_t l, r = 0;
900000000000a954:	29fe82c0 	st.d	$r0,$r22,-96(0xfa0)

    size_t perm_ref = get_pgtable_items(0, NPTEENTRY, r, (pte_t *) PDE_ADDR(current_pgdir[left]), &l, &r);
900000000000a958:	28fe82ce 	ld.d	$r14,$r22,-96(0xfa0)
900000000000a95c:	1c00430c 	pcaddu12i	$r12,536(0x218)
900000000000a960:	02eb518c 	addi.d	$r12,$r12,-1324(0xad4)
900000000000a964:	28c0018d 	ld.d	$r13,$r12,0
900000000000a968:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000a96c:	00410d8c 	slli.d	$r12,$r12,0x3
900000000000a970:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000a974:	28c0018d 	ld.d	$r13,$r12,0
900000000000a978:	15ffffec 	lu12i.w	$r12,-1(0xfffff)
900000000000a97c:	0014b1ac 	and	$r12,$r13,$r12
900000000000a980:	02fe82cf 	addi.d	$r15,$r22,-96(0xfa0)
900000000000a984:	02fea2cd 	addi.d	$r13,$r22,-88(0xfa8)
900000000000a988:	001501e9 	move	$r9,$r15
900000000000a98c:	001501a8 	move	$r8,$r13
900000000000a990:	00150187 	move	$r7,$r12
900000000000a994:	001501c6 	move	$r6,$r14
900000000000a998:	02900005 	addi.w	$r5,$r0,1024(0x400)
900000000000a99c:	00150004 	move	$r4,$r0
900000000000a9a0:	57fdc7ff 	bl	-572(0xffffdc4) # 900000000000a764 <get_pgtable_items>
900000000000a9a4:	0015008c 	move	$r12,$r4
900000000000a9a8:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    size_t count, count_ref = 0;
900000000000a9ac:	29ff62c0 	st.d	$r0,$r22,-40(0xfd8)
    size_t count_ref_l = 0;
900000000000a9b0:	29ff42c0 	st.d	$r0,$r22,-48(0xfd0)
    for (count=0; count<right-left; count++) {
900000000000a9b4:	29ff82c0 	st.d	$r0,$r22,-32(0xfe0)
900000000000a9b8:	5001ac00 	b	428(0x1ac) # 900000000000ab64 <print_pgdir+0x2e0>
      l = r = 0;
900000000000a9bc:	29fe82c0 	st.d	$r0,$r22,-96(0xfa0)
900000000000a9c0:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
900000000000a9c4:	29fea2cc 	st.d	$r12,$r22,-88(0xfa8)
      while ((perm = get_pgtable_items(0, NPTEENTRY, r, (pte_t *) PDE_ADDR(current_pgdir[left+count]), &l, &r)) != 0) {
900000000000a9c8:	50012c00 	b	300(0x12c) # 900000000000aaf4 <print_pgdir+0x270>
        if (perm != perm_ref || count == right-left-1) {
900000000000a9cc:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
900000000000a9d0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000a9d4:	5c001dac 	bne	$r13,$r12,28(0x1c) # 900000000000a9f0 <print_pgdir+0x16c>
900000000000a9d8:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
900000000000a9dc:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000a9e0:	0011b1ac 	sub.d	$r12,$r13,$r12
900000000000a9e4:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
900000000000a9e8:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
900000000000a9ec:	5c0109ac 	bne	$r13,$r12,264(0x108) # 900000000000aaf4 <print_pgdir+0x270>
          size_t total_entries = (count-count_ref-1)*NPTEENTRY + (r - l) + (NPTEENTRY - count_ref_l);
900000000000a9f0:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
900000000000a9f4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000a9f8:	0011b1ac 	sub.d	$r12,$r13,$r12
900000000000a9fc:	0041298d 	slli.d	$r13,$r12,0xa
900000000000aa00:	28fe82ce 	ld.d	$r14,$r22,-96(0xfa0)
900000000000aa04:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000000aa08:	0011b1cc 	sub.d	$r12,$r14,$r12
900000000000aa0c:	0010b1ad 	add.d	$r13,$r13,$r12
900000000000aa10:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000aa14:	0011b1ac 	sub.d	$r12,$r13,$r12
900000000000aa18:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
          PRINT_PTE("  |-- PTE(", total_entries, 
900000000000aa1c:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000aa20:	02f05084 	addi.d	$r4,$r4,-1004(0xc14)
900000000000aa24:	5793fbff 	bl	-27656(0xfff93f8) # 9000000000003e1c <kprintf>
900000000000aa28:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
900000000000aa2c:	57945fff 	bl	-27556(0xfff945c) # 9000000000003e88 <printhex>
900000000000aa30:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000aa34:	02efa084 	addi.d	$r4,$r4,-1048(0xbe8)
900000000000aa38:	5793e7ff 	bl	-27676(0xfff93e4) # 9000000000003e1c <kprintf>
900000000000aa3c:	28fee2cd 	ld.d	$r13,$r22,-72(0xfb8)
900000000000aa40:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000aa44:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000aa48:	0041298d 	slli.d	$r13,$r12,0xa
900000000000aa4c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000aa50:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000aa54:	0041318c 	slli.d	$r12,$r12,0xc
900000000000aa58:	00150184 	move	$r4,$r12
900000000000aa5c:	57942fff 	bl	-27604(0xfff942c) # 9000000000003e88 <printhex>
900000000000aa60:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000aa64:	02ef0084 	addi.d	$r4,$r4,-1088(0xbc0)
900000000000aa68:	5793b7ff 	bl	-27724(0xfff93b4) # 9000000000003e1c <kprintf>
900000000000aa6c:	28fee2cd 	ld.d	$r13,$r22,-72(0xfb8)
900000000000aa70:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000aa74:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000aa78:	0041298d 	slli.d	$r13,$r12,0xa
900000000000aa7c:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
900000000000aa80:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000aa84:	0041318c 	slli.d	$r12,$r12,0xc
900000000000aa88:	00150184 	move	$r4,$r12
900000000000aa8c:	5793ffff 	bl	-27652(0xfff93fc) # 9000000000003e88 <printhex>
900000000000aa90:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000aa94:	02ee6084 	addi.d	$r4,$r4,-1128(0xb98)
900000000000aa98:	579387ff 	bl	-27772(0xfff9384) # 9000000000003e1c <kprintf>
900000000000aa9c:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000aaa0:	0041318c 	slli.d	$r12,$r12,0xc
900000000000aaa4:	00150184 	move	$r4,$r12
900000000000aaa8:	5793e3ff 	bl	-27680(0xfff93e0) # 9000000000003e88 <printhex>
900000000000aaac:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000aab0:	02edf084 	addi.d	$r4,$r4,-1156(0xb7c)
900000000000aab4:	57936bff 	bl	-27800(0xfff9368) # 9000000000003e1c <kprintf>
900000000000aab8:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000000aabc:	00150184 	move	$r4,$r12
900000000000aac0:	57fc13ff 	bl	-1008(0xffffc10) # 900000000000a6d0 <perm2str>
900000000000aac4:	0015008c 	move	$r12,$r4
900000000000aac8:	00150184 	move	$r4,$r12
900000000000aacc:	579353ff 	bl	-27824(0xfff9350) # 9000000000003e1c <kprintf>
900000000000aad0:	1c0002a4 	pcaddu12i	$r4,21(0x15)
900000000000aad4:	02ce2084 	addi.d	$r4,$r4,904(0x388)
900000000000aad8:	579347ff 	bl	-27836(0xfff9344) # 9000000000003e1c <kprintf>
              (left+count_ref) * PTSIZE + count_ref_l * PGSIZE, (left+count) * PTSIZE + r * PGSIZE,
              total_entries * PGSIZE, perm2str(perm_ref));
          perm_ref = perm;
900000000000aadc:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000aae0:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
          count_ref = count;
900000000000aae4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000aae8:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
          count_ref_l = r;
900000000000aaec:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
900000000000aaf0:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
      while ((perm = get_pgtable_items(0, NPTEENTRY, r, (pte_t *) PDE_ADDR(current_pgdir[left+count]), &l, &r)) != 0) {
900000000000aaf4:	28fe82cf 	ld.d	$r15,$r22,-96(0xfa0)
900000000000aaf8:	1c00430c 	pcaddu12i	$r12,536(0x218)
900000000000aafc:	02e4e18c 	addi.d	$r12,$r12,-1736(0x938)
900000000000ab00:	28c0018d 	ld.d	$r13,$r12,0
900000000000ab04:	28fee2ce 	ld.d	$r14,$r22,-72(0xfb8)
900000000000ab08:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000ab0c:	0010b1cc 	add.d	$r12,$r14,$r12
900000000000ab10:	00410d8c 	slli.d	$r12,$r12,0x3
900000000000ab14:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000ab18:	28c0018d 	ld.d	$r13,$r12,0
900000000000ab1c:	15ffffec 	lu12i.w	$r12,-1(0xfffff)
900000000000ab20:	0014b1ac 	and	$r12,$r13,$r12
900000000000ab24:	02fe82ce 	addi.d	$r14,$r22,-96(0xfa0)
900000000000ab28:	02fea2cd 	addi.d	$r13,$r22,-88(0xfa8)
900000000000ab2c:	001501c9 	move	$r9,$r14
900000000000ab30:	001501a8 	move	$r8,$r13
900000000000ab34:	00150187 	move	$r7,$r12
900000000000ab38:	001501e6 	move	$r6,$r15
900000000000ab3c:	02900005 	addi.w	$r5,$r0,1024(0x400)
900000000000ab40:	00150004 	move	$r4,$r0
900000000000ab44:	57fc23ff 	bl	-992(0xffffc20) # 900000000000a764 <get_pgtable_items>
900000000000ab48:	0015008c 	move	$r12,$r4
900000000000ab4c:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
900000000000ab50:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000ab54:	47fe799f 	bnez	$r12,-392(0x7ffe78) # 900000000000a9cc <print_pgdir+0x148>
    for (count=0; count<right-left; count++) {
900000000000ab58:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000ab5c:	02c0058c 	addi.d	$r12,$r12,1(0x1)
900000000000ab60:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
900000000000ab64:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
900000000000ab68:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000ab6c:	0011b1ac 	sub.d	$r12,$r13,$r12
900000000000ab70:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
900000000000ab74:	6bfe49ac 	bltu	$r13,$r12,-440(0x3fe48) # 900000000000a9bc <print_pgdir+0x138>
  while ((perm = get_pgtable_items(0, NPDEENTRY, right, current_pgdir, &left, &right)) != 0) {
900000000000ab78:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
900000000000ab7c:	1c00430c 	pcaddu12i	$r12,536(0x218)
900000000000ab80:	02e2d18c 	addi.d	$r12,$r12,-1868(0x8b4)
900000000000ab84:	28c0018c 	ld.d	$r12,$r12,0
900000000000ab88:	02fec2cf 	addi.d	$r15,$r22,-80(0xfb0)
900000000000ab8c:	02fee2ce 	addi.d	$r14,$r22,-72(0xfb8)
900000000000ab90:	001501e9 	move	$r9,$r15
900000000000ab94:	001501c8 	move	$r8,$r14
900000000000ab98:	00150187 	move	$r7,$r12
900000000000ab9c:	001501a6 	move	$r6,$r13
900000000000aba0:	02900005 	addi.w	$r5,$r0,1024(0x400)
900000000000aba4:	00150004 	move	$r4,$r0
900000000000aba8:	57fbbfff 	bl	-1092(0xffffbbc) # 900000000000a764 <get_pgtable_items>
900000000000abac:	0015008c 	move	$r12,$r4
900000000000abb0:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
900000000000abb4:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000abb8:	47fcf19f 	bnez	$r12,-784(0x7ffcf0) # 900000000000a8a8 <print_pgdir+0x24>
        }
      }
    }
  }
    kprintf("--------------------- END ---------------------\n");
900000000000abbc:	1c0002c4 	pcaddu12i	$r4,22(0x16)
900000000000abc0:	02ea1084 	addi.d	$r4,$r4,-1404(0xa84)
900000000000abc4:	57925bff 	bl	-28072(0xfff9258) # 9000000000003e1c <kprintf>
}
900000000000abc8:	03400000 	andi	$r0,$r0,0x0
900000000000abcc:	28c16061 	ld.d	$r1,$r3,88(0x58)
900000000000abd0:	28c14076 	ld.d	$r22,$r3,80(0x50)
900000000000abd4:	02c18063 	addi.d	$r3,$r3,96(0x60)
900000000000abd8:	4c000020 	jirl	$r0,$r1,0

900000000000abdc <unmap_range>:


void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
900000000000abdc:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000000abe0:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000000abe4:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000000abe8:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000000abec:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000000abf0:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
900000000000abf4:	29ff22c6 	st.d	$r6,$r22,-56(0xfc8)
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
900000000000abf8:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000abfc:	037ffd8c 	andi	$r12,$r12,0xfff
900000000000ac00:	44001180 	bnez	$r12,16(0x10) # 900000000000ac10 <unmap_range+0x34>
900000000000ac04:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000ac08:	037ffd8c 	andi	$r12,$r12,0xfff
900000000000ac0c:	40001d80 	beqz	$r12,28(0x1c) # 900000000000ac28 <unmap_range+0x4c>
900000000000ac10:	1c0002c6 	pcaddu12i	$r6,22(0x16)
900000000000ac14:	02e9a0c6 	addi.d	$r6,$r6,-1432(0xa68)
900000000000ac18:	02889405 	addi.w	$r5,$r0,549(0x225)
900000000000ac1c:	1c0002a4 	pcaddu12i	$r4,21(0x15)
900000000000ac20:	02ca5084 	addi.d	$r4,$r4,660(0x294)
900000000000ac24:	54205c00 	bl	8284(0x205c) # 900000000000cc80 <__panic>
    assert(USER_ACCESS(start, end));
900000000000ac28:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000000ac2c:	1420000c 	lu12i.w	$r12,65536(0x10000)
900000000000ac30:	680021ac 	bltu	$r13,$r12,32(0x20) # 900000000000ac50 <unmap_range+0x74>
900000000000ac34:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000000ac38:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000ac3c:	6c0015ac 	bgeu	$r13,$r12,20(0x14) # 900000000000ac50 <unmap_range+0x74>
900000000000ac40:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
900000000000ac44:	1500000c 	lu12i.w	$r12,-524288(0x80000)
900000000000ac48:	1600000c 	lu32i.d	$r12,0
900000000000ac4c:	6c001d8d 	bgeu	$r12,$r13,28(0x1c) # 900000000000ac68 <unmap_range+0x8c>
900000000000ac50:	1c0002c6 	pcaddu12i	$r6,22(0x16)
900000000000ac54:	02e9a0c6 	addi.d	$r6,$r6,-1432(0xa68)
900000000000ac58:	02889805 	addi.w	$r5,$r0,550(0x226)
900000000000ac5c:	1c0002a4 	pcaddu12i	$r4,21(0x15)
900000000000ac60:	02c95084 	addi.d	$r4,$r4,596(0x254)
900000000000ac64:	54201c00 	bl	8220(0x201c) # 900000000000cc80 <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
900000000000ac68:	00150006 	move	$r6,$r0
900000000000ac6c:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
900000000000ac70:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000000ac74:	57ed03ff 	bl	-4864(0xfffed00) # 9000000000009974 <get_pte>
900000000000ac78:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
        if (ptep == NULL) {
900000000000ac7c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ac80:	44002180 	bnez	$r12,32(0x20) # 900000000000aca0 <unmap_range+0xc4>
            start = ROUNDDOWN_2N(start + PTSIZE, PTSHIFT);
900000000000ac84:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000000ac88:	1400800c 	lu12i.w	$r12,1024(0x400)
900000000000ac8c:	0010b1ad 	add.d	$r13,$r13,$r12
900000000000ac90:	15ff800c 	lu12i.w	$r12,-1024(0xffc00)
900000000000ac94:	0014b1ac 	and	$r12,$r13,$r12
900000000000ac98:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
            continue ;
900000000000ac9c:	50003000 	b	48(0x30) # 900000000000accc <unmap_range+0xf0>
        }
        if (*ptep != 0) {
900000000000aca0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000aca4:	28c0018c 	ld.d	$r12,$r12,0
900000000000aca8:	40001580 	beqz	$r12,20(0x14) # 900000000000acbc <unmap_range+0xe0>
            page_remove_pte(pgdir, start, ptep);
900000000000acac:	28ffa2c6 	ld.d	$r6,$r22,-24(0xfe8)
900000000000acb0:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
900000000000acb4:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000000acb8:	57eed7ff 	bl	-4396(0xfffeed4) # 9000000000009b8c <page_remove_pte>
        }
        start += PGSIZE;
900000000000acbc:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000000acc0:	1400002c 	lu12i.w	$r12,1(0x1)
900000000000acc4:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000acc8:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    } while (start != 0 && start < end);
900000000000accc:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000acd0:	40001180 	beqz	$r12,16(0x10) # 900000000000ace0 <unmap_range+0x104>
900000000000acd4:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000000acd8:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000acdc:	6bff8dac 	bltu	$r13,$r12,-116(0x3ff8c) # 900000000000ac68 <unmap_range+0x8c>
}
900000000000ace0:	03400000 	andi	$r0,$r0,0x0
900000000000ace4:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000000ace8:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000000acec:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000000acf0:	4c000020 	jirl	$r0,$r1,0

900000000000acf4 <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
900000000000acf4:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000000acf8:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000000acfc:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000000ad00:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000000ad04:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000000ad08:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
900000000000ad0c:	29ff22c6 	st.d	$r6,$r22,-56(0xfc8)
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
900000000000ad10:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000ad14:	037ffd8c 	andi	$r12,$r12,0xfff
900000000000ad18:	44001180 	bnez	$r12,16(0x10) # 900000000000ad28 <exit_range+0x34>
900000000000ad1c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000ad20:	037ffd8c 	andi	$r12,$r12,0xfff
900000000000ad24:	40001d80 	beqz	$r12,28(0x1c) # 900000000000ad40 <exit_range+0x4c>
900000000000ad28:	1c0002c6 	pcaddu12i	$r6,22(0x16)
900000000000ad2c:	02e540c6 	addi.d	$r6,$r6,-1712(0x950)
900000000000ad30:	0288dc05 	addi.w	$r5,$r0,567(0x237)
900000000000ad34:	1c0002a4 	pcaddu12i	$r4,21(0x15)
900000000000ad38:	02c5f084 	addi.d	$r4,$r4,380(0x17c)
900000000000ad3c:	541f4400 	bl	8004(0x1f44) # 900000000000cc80 <__panic>
    assert(USER_ACCESS(start, end));
900000000000ad40:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000000ad44:	1420000c 	lu12i.w	$r12,65536(0x10000)
900000000000ad48:	680021ac 	bltu	$r13,$r12,32(0x20) # 900000000000ad68 <exit_range+0x74>
900000000000ad4c:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000000ad50:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000ad54:	6c0015ac 	bgeu	$r13,$r12,20(0x14) # 900000000000ad68 <exit_range+0x74>
900000000000ad58:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
900000000000ad5c:	1500000c 	lu12i.w	$r12,-524288(0x80000)
900000000000ad60:	1600000c 	lu32i.d	$r12,0
900000000000ad64:	6c001d8d 	bgeu	$r12,$r13,28(0x1c) # 900000000000ad80 <exit_range+0x8c>
900000000000ad68:	1c0002c6 	pcaddu12i	$r6,22(0x16)
900000000000ad6c:	02e540c6 	addi.d	$r6,$r6,-1712(0x950)
900000000000ad70:	0288e005 	addi.w	$r5,$r0,568(0x238)
900000000000ad74:	1c0002a4 	pcaddu12i	$r4,21(0x15)
900000000000ad78:	02c4f084 	addi.d	$r4,$r4,316(0x13c)
900000000000ad7c:	541f0400 	bl	7940(0x1f04) # 900000000000cc80 <__panic>

    start = ROUNDDOWN_2N(start, PTSHIFT);
900000000000ad80:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000000ad84:	15ff800c 	lu12i.w	$r12,-1024(0xffc00)
900000000000ad88:	0014b1ac 	and	$r12,$r13,$r12
900000000000ad8c:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    do {
        int pde_idx = PDX(start);
900000000000ad90:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000ad94:	0045598c 	srli.d	$r12,$r12,0x16
900000000000ad98:	0040818c 	slli.w	$r12,$r12,0x0
900000000000ad9c:	034ffd8c 	andi	$r12,$r12,0x3ff
900000000000ada0:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
        if (pgdir[pde_idx] & PTE_P) {
900000000000ada4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000ada8:	00410d8c 	slli.d	$r12,$r12,0x3
900000000000adac:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000adb0:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000adb4:	28c0018c 	ld.d	$r12,$r12,0
900000000000adb8:	0340058c 	andi	$r12,$r12,0x1
900000000000adbc:	40004580 	beqz	$r12,68(0x44) # 900000000000ae00 <exit_range+0x10c>
            free_pages(pde2page(pgdir[pde_idx]),2);
900000000000adc0:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000adc4:	00410d8c 	slli.d	$r12,$r12,0x3
900000000000adc8:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000adcc:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000add0:	28c0018c 	ld.d	$r12,$r12,0
900000000000add4:	00150184 	move	$r4,$r12
900000000000add8:	57e267ff 	bl	-7580(0xfffe264) # 900000000000903c <pde2page>
900000000000addc:	0015008c 	move	$r12,$r4
900000000000ade0:	02800805 	addi.w	$r5,$r0,2(0x2)
900000000000ade4:	00150184 	move	$r4,$r12
900000000000ade8:	57e517ff 	bl	-6892(0xfffe514) # 90000000000092fc <free_pages>
            pgdir[pde_idx] = 0;
900000000000adec:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000adf0:	00410d8c 	slli.d	$r12,$r12,0x3
900000000000adf4:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000adf8:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000adfc:	29c00180 	st.d	$r0,$r12,0
        }
        start += PTSIZE;
900000000000ae00:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000000ae04:	1400800c 	lu12i.w	$r12,1024(0x400)
900000000000ae08:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000ae0c:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    } while (start != 0 && start < end);
900000000000ae10:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000ae14:	40001180 	beqz	$r12,16(0x10) # 900000000000ae24 <exit_range+0x130>
900000000000ae18:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000000ae1c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000ae20:	6bff71ac 	bltu	$r13,$r12,-144(0x3ff70) # 900000000000ad90 <exit_range+0x9c>
}
900000000000ae24:	03400000 	andi	$r0,$r0,0x0
900000000000ae28:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000000ae2c:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000000ae30:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000000ae34:	4c000020 	jirl	$r0,$r1,0

900000000000ae38 <copy_range>:

int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
900000000000ae38:	02fe0063 	addi.d	$r3,$r3,-128(0xf80)
900000000000ae3c:	29c1e061 	st.d	$r1,$r3,120(0x78)
900000000000ae40:	29c1c076 	st.d	$r22,$r3,112(0x70)
900000000000ae44:	29c1a077 	st.d	$r23,$r3,104(0x68)
900000000000ae48:	02c20076 	addi.d	$r22,$r3,128(0x80)
900000000000ae4c:	29fea2c4 	st.d	$r4,$r22,-88(0xfa8)
900000000000ae50:	29fe82c5 	st.d	$r5,$r22,-96(0xfa0)
900000000000ae54:	29fe62c6 	st.d	$r6,$r22,-104(0xf98)
900000000000ae58:	29fe42c7 	st.d	$r7,$r22,-112(0xf90)
900000000000ae5c:	0015010c 	move	$r12,$r8
900000000000ae60:	0040818c 	slli.w	$r12,$r12,0x0
900000000000ae64:	29be32cc 	st.w	$r12,$r22,-116(0xf8c)
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
900000000000ae68:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
900000000000ae6c:	037ffd8c 	andi	$r12,$r12,0xfff
900000000000ae70:	44001180 	bnez	$r12,16(0x10) # 900000000000ae80 <copy_range+0x48>
900000000000ae74:	28fe42cc 	ld.d	$r12,$r22,-112(0xf90)
900000000000ae78:	037ffd8c 	andi	$r12,$r12,0xfff
900000000000ae7c:	40001d80 	beqz	$r12,28(0x1c) # 900000000000ae98 <copy_range+0x60>
900000000000ae80:	1c0002a6 	pcaddu12i	$r6,21(0x15)
900000000000ae84:	02dfe0c6 	addi.d	$r6,$r6,2040(0x7f8)
900000000000ae88:	02891c05 	addi.w	$r5,$r0,583(0x247)
900000000000ae8c:	1c0002a4 	pcaddu12i	$r4,21(0x15)
900000000000ae90:	02c09084 	addi.d	$r4,$r4,36(0x24)
900000000000ae94:	541dec00 	bl	7660(0x1dec) # 900000000000cc80 <__panic>
    assert(USER_ACCESS(start, end));
900000000000ae98:	28fe62cd 	ld.d	$r13,$r22,-104(0xf98)
900000000000ae9c:	1420000c 	lu12i.w	$r12,65536(0x10000)
900000000000aea0:	680021ac 	bltu	$r13,$r12,32(0x20) # 900000000000aec0 <copy_range+0x88>
900000000000aea4:	28fe62cd 	ld.d	$r13,$r22,-104(0xf98)
900000000000aea8:	28fe42cc 	ld.d	$r12,$r22,-112(0xf90)
900000000000aeac:	6c0015ac 	bgeu	$r13,$r12,20(0x14) # 900000000000aec0 <copy_range+0x88>
900000000000aeb0:	28fe42cd 	ld.d	$r13,$r22,-112(0xf90)
900000000000aeb4:	1500000c 	lu12i.w	$r12,-524288(0x80000)
900000000000aeb8:	1600000c 	lu32i.d	$r12,0
900000000000aebc:	6c001d8d 	bgeu	$r12,$r13,28(0x1c) # 900000000000aed8 <copy_range+0xa0>
900000000000aec0:	1c0002a6 	pcaddu12i	$r6,21(0x15)
900000000000aec4:	02dfe0c6 	addi.d	$r6,$r6,2040(0x7f8)
900000000000aec8:	02892005 	addi.w	$r5,$r0,584(0x248)
900000000000aecc:	1c0002a4 	pcaddu12i	$r4,21(0x15)
900000000000aed0:	02ff9084 	addi.d	$r4,$r4,-28(0xfe4)
900000000000aed4:	541dac00 	bl	7596(0x1dac) # 900000000000cc80 <__panic>

    do {
        pte_t *ptep = get_pte(from, start, 0), *nptep;
900000000000aed8:	00150006 	move	$r6,$r0
900000000000aedc:	28fe62c5 	ld.d	$r5,$r22,-104(0xf98)
900000000000aee0:	28fe82c4 	ld.d	$r4,$r22,-96(0xfa0)
900000000000aee4:	57ea93ff 	bl	-5488(0xfffea90) # 9000000000009974 <get_pte>
900000000000aee8:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
        if (ptep == NULL) {
900000000000aeec:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000aef0:	44002180 	bnez	$r12,32(0x20) # 900000000000af10 <copy_range+0xd8>
            start = ROUNDDOWN_2N(start + PTSIZE, PGSHIFT);
900000000000aef4:	28fe62cd 	ld.d	$r13,$r22,-104(0xf98)
900000000000aef8:	1400800c 	lu12i.w	$r12,1024(0x400)
900000000000aefc:	0010b1ad 	add.d	$r13,$r13,$r12
900000000000af00:	15ffffec 	lu12i.w	$r12,-1(0xfffff)
900000000000af04:	0014b1ac 	and	$r12,$r13,$r12
900000000000af08:	29fe62cc 	st.d	$r12,$r22,-104(0xf98)
            continue ;
900000000000af0c:	50012000 	b	288(0x120) # 900000000000b02c <copy_range+0x1f4>
        }
        if (*ptep & PTE_P) {
900000000000af10:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000af14:	28c0018c 	ld.d	$r12,$r12,0
900000000000af18:	0340058c 	andi	$r12,$r12,0x1
900000000000af1c:	40010180 	beqz	$r12,256(0x100) # 900000000000b01c <copy_range+0x1e4>
          if ((nptep = get_pte(to, start, 1)) == NULL) {
900000000000af20:	02800406 	addi.w	$r6,$r0,1(0x1)
900000000000af24:	28fe62c5 	ld.d	$r5,$r22,-104(0xf98)
900000000000af28:	28fea2c4 	ld.d	$r4,$r22,-88(0xfa8)
900000000000af2c:	57ea4bff 	bl	-5560(0xfffea48) # 9000000000009974 <get_pte>
900000000000af30:	29ff42c4 	st.d	$r4,$r22,-48(0xfd0)
900000000000af34:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000af38:	44000d80 	bnez	$r12,12(0xc) # 900000000000af44 <copy_range+0x10c>
            return -E_NO_MEM;
900000000000af3c:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
900000000000af40:	50010400 	b	260(0x104) # 900000000000b044 <copy_range+0x20c>
          }
          uint32_t perm = (*ptep & PTE_USER);
900000000000af44:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000af48:	28c0018c 	ld.d	$r12,$r12,0
900000000000af4c:	0040818c 	slli.w	$r12,$r12,0x0
900000000000af50:	03401d8c 	andi	$r12,$r12,0x7
900000000000af54:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
          struct Page *page = pte2page(*ptep);
900000000000af58:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000af5c:	28c0018c 	ld.d	$r12,$r12,0
900000000000af60:	00150184 	move	$r4,$r12
900000000000af64:	57e077ff 	bl	-8076(0xfffe074) # 9000000000008fd8 <pte2page>
900000000000af68:	29ff02c4 	st.d	$r4,$r22,-64(0xfc0)
          struct Page *npage=alloc_page();
900000000000af6c:	02800404 	addi.w	$r4,$r0,1(0x1)
900000000000af70:	57e32fff 	bl	-7380(0xfffe32c) # 900000000000929c <alloc_pages>
900000000000af74:	29fee2c4 	st.d	$r4,$r22,-72(0xfb8)
          assert(page!=NULL);
900000000000af78:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000af7c:	44001d80 	bnez	$r12,28(0x1c) # 900000000000af98 <copy_range+0x160>
900000000000af80:	1c0002a6 	pcaddu12i	$r6,21(0x15)
900000000000af84:	02dda0c6 	addi.d	$r6,$r6,1896(0x768)
900000000000af88:	02895c05 	addi.w	$r5,$r0,599(0x257)
900000000000af8c:	1c0002a4 	pcaddu12i	$r4,21(0x15)
900000000000af90:	02fc9084 	addi.d	$r4,$r4,-220(0xf24)
900000000000af94:	541cec00 	bl	7404(0x1cec) # 900000000000cc80 <__panic>
          assert(npage!=NULL);
900000000000af98:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000af9c:	44001d80 	bnez	$r12,28(0x1c) # 900000000000afb8 <copy_range+0x180>
900000000000afa0:	1c0002a6 	pcaddu12i	$r6,21(0x15)
900000000000afa4:	02dda0c6 	addi.d	$r6,$r6,1896(0x768)
900000000000afa8:	02896005 	addi.w	$r5,$r0,600(0x258)
900000000000afac:	1c0002a4 	pcaddu12i	$r4,21(0x15)
900000000000afb0:	02fc1084 	addi.d	$r4,$r4,-252(0xf04)
900000000000afb4:	541ccc00 	bl	7372(0x1ccc) # 900000000000cc80 <__panic>
          int ret=0;
900000000000afb8:	29bed2c0 	st.w	$r0,$r22,-76(0xfb4)
         * (1) find src_kvaddr: the kernel virtual address of page
         * (2) find dst_kvaddr: the kernel virtual address of npage
         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
         * (4) build the map of phy addr of  nage with the linear addr start
         */
          memcpy(page2kva(npage), page2kva(page), PGSIZE);
900000000000afbc:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
900000000000afc0:	57df9fff 	bl	-8292(0xfffdf9c) # 9000000000008f5c <page2kva>
900000000000afc4:	00150097 	move	$r23,$r4
900000000000afc8:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
900000000000afcc:	57df93ff 	bl	-8304(0xfffdf90) # 9000000000008f5c <page2kva>
900000000000afd0:	0015008c 	move	$r12,$r4
900000000000afd4:	14000026 	lu12i.w	$r6,1(0x1)
900000000000afd8:	00150185 	move	$r5,$r12
900000000000afdc:	001502e4 	move	$r4,$r23
900000000000afe0:	5795a7ff 	bl	-27228(0xfff95a4) # 9000000000004584 <memcpy>
          page_insert(to, npage, start,perm);
900000000000afe4:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
900000000000afe8:	00150187 	move	$r7,$r12
900000000000afec:	28fe62c6 	ld.d	$r6,$r22,-104(0xf98)
900000000000aff0:	28fee2c5 	ld.d	$r5,$r22,-72(0xfb8)
900000000000aff4:	28fea2c4 	ld.d	$r4,$r22,-88(0xfa8)
900000000000aff8:	57ec7bff 	bl	-5000(0xfffec78) # 9000000000009c70 <page_insert>
        #endif
          assert(ret == 0);
900000000000affc:	28bed2cc 	ld.w	$r12,$r22,-76(0xfb4)
900000000000b000:	40001d80 	beqz	$r12,28(0x1c) # 900000000000b01c <copy_range+0x1e4>
900000000000b004:	1c0002a6 	pcaddu12i	$r6,21(0x15)
900000000000b008:	02dc90c6 	addi.d	$r6,$r6,1828(0x724)
900000000000b00c:	0289b005 	addi.w	$r5,$r0,620(0x26c)
900000000000b010:	1c0002a4 	pcaddu12i	$r4,21(0x15)
900000000000b014:	02fa8084 	addi.d	$r4,$r4,-352(0xea0)
900000000000b018:	541c6800 	bl	7272(0x1c68) # 900000000000cc80 <__panic>
        }
        start += PGSIZE;
900000000000b01c:	28fe62cd 	ld.d	$r13,$r22,-104(0xf98)
900000000000b020:	1400002c 	lu12i.w	$r12,1(0x1)
900000000000b024:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000b028:	29fe62cc 	st.d	$r12,$r22,-104(0xf98)
    } while (start != 0 && start < end);
900000000000b02c:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
900000000000b030:	40001180 	beqz	$r12,16(0x10) # 900000000000b040 <copy_range+0x208>
900000000000b034:	28fe62cd 	ld.d	$r13,$r22,-104(0xf98)
900000000000b038:	28fe42cc 	ld.d	$r12,$r22,-112(0xf90)
900000000000b03c:	6bfe9dac 	bltu	$r13,$r12,-356(0x3fe9c) # 900000000000aed8 <copy_range+0xa0>
    return 0;
900000000000b040:	0015000c 	move	$r12,$r0
}
900000000000b044:	00150184 	move	$r4,$r12
900000000000b048:	28c1e061 	ld.d	$r1,$r3,120(0x78)
900000000000b04c:	28c1c076 	ld.d	$r22,$r3,112(0x70)
900000000000b050:	28c1a077 	ld.d	$r23,$r3,104(0x68)
900000000000b054:	02c20063 	addi.d	$r3,$r3,128(0x80)
900000000000b058:	4c000020 	jirl	$r0,$r1,0

900000000000b05c <__divu5>:
static inline unsigned __divu5(unsigned int n) {
900000000000b05c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000b060:	29c0a076 	st.d	$r22,$r3,40(0x28)
900000000000b064:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000b068:	0015008c 	move	$r12,$r4
900000000000b06c:	0040818c 	slli.w	$r12,$r12,0x0
900000000000b070:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
    q = (n >> 3) + (n >> 4);
900000000000b074:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
900000000000b078:	00448d8c 	srli.w	$r12,$r12,0x3
900000000000b07c:	0015018d 	move	$r13,$r12
900000000000b080:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
900000000000b084:	0044918c 	srli.w	$r12,$r12,0x4
900000000000b088:	001031ac 	add.w	$r12,$r13,$r12
900000000000b08c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    q = q + (q >> 4);
900000000000b090:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000b094:	0044918c 	srli.w	$r12,$r12,0x4
900000000000b098:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
900000000000b09c:	001031ac 	add.w	$r12,$r13,$r12
900000000000b0a0:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    q = q + (q >> 8);
900000000000b0a4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000b0a8:	0044a18c 	srli.w	$r12,$r12,0x8
900000000000b0ac:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
900000000000b0b0:	001031ac 	add.w	$r12,$r13,$r12
900000000000b0b4:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    q = q + (q >> 16);
900000000000b0b8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000b0bc:	0044c18c 	srli.w	$r12,$r12,0x10
900000000000b0c0:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
900000000000b0c4:	001031ac 	add.w	$r12,$r13,$r12
900000000000b0c8:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    r = n - q*5;
900000000000b0cc:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
900000000000b0d0:	0280140c 	addi.w	$r12,$r0,5(0x5)
900000000000b0d4:	001c31ac 	mul.w	$r12,$r13,$r12
900000000000b0d8:	28bf72cd 	ld.w	$r13,$r22,-36(0xfdc)
900000000000b0dc:	001131ac 	sub.w	$r12,$r13,$r12
900000000000b0e0:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
    return q + (13*r >> 6);
900000000000b0e4:	28bfa2cd 	ld.w	$r13,$r22,-24(0xfe8)
900000000000b0e8:	0280340c 	addi.w	$r12,$r0,13(0xd)
900000000000b0ec:	001c31ac 	mul.w	$r12,$r13,$r12
900000000000b0f0:	0044998c 	srli.w	$r12,$r12,0x6
900000000000b0f4:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
900000000000b0f8:	001031ac 	add.w	$r12,$r13,$r12
}
900000000000b0fc:	00150184 	move	$r4,$r12
900000000000b100:	28c0a076 	ld.d	$r22,$r3,40(0x28)
900000000000b104:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000b108:	4c000020 	jirl	$r0,$r1,0

900000000000b10c <fence_i>:
static void fence_i(void *va_start, int size) {
900000000000b10c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000b110:	29c0a076 	st.d	$r22,$r3,40(0x28)
900000000000b114:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000b118:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000000b11c:	001500ac 	move	$r12,$r5
900000000000b120:	0040818c 	slli.w	$r12,$r12,0x0
900000000000b124:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
900000000000b128:	38720000 	dbar	0x0
    void *va_end = va_start + size;
900000000000b12c:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
900000000000b130:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000b134:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000b138:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
900000000000b13c:	50002000 	b	32(0x20) # 900000000000b15c <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
900000000000b140:	06000189 	cacop	0x9,$r12,0
900000000000b144:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
900000000000b148:	06000188 	cacop	0x8,$r12,0
900000000000b14c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
900000000000b150:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000b154:	02c0418c 	addi.d	$r12,$r12,16(0x10)
900000000000b158:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
900000000000b15c:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000b160:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000b164:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 900000000000b140 <fence_i+0x34>
900000000000b168:	38728000 	ibar	0x0
}
900000000000b16c:	03400000 	andi	$r0,$r0,0x0
900000000000b170:	28c0a076 	ld.d	$r22,$r3,40(0x28)
900000000000b174:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000b178:	4c000020 	jirl	$r0,$r1,0

900000000000b17c <mm_count>:
void exit_mmap(struct mm_struct *mm);
uintptr_t get_unmapped_area(struct mm_struct *mm, size_t len);
int mm_brk(struct mm_struct *mm, uintptr_t addr, size_t len);

static inline int
mm_count(struct mm_struct *mm) {
900000000000b17c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000b180:	29c0a076 	st.d	$r22,$r3,40(0x28)
900000000000b184:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000b188:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    return atomic_read(&(mm->mm_count));
900000000000b18c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000b190:	02c0918c 	addi.d	$r12,$r12,36(0x24)
900000000000b194:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
  return v->counter;
900000000000b198:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000b19c:	2880018c 	ld.w	$r12,$r12,0
}
900000000000b1a0:	00150184 	move	$r4,$r12
900000000000b1a4:	28c0a076 	ld.d	$r22,$r3,40(0x28)
900000000000b1a8:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000b1ac:	4c000020 	jirl	$r0,$r1,0

900000000000b1b0 <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
900000000000b1b0:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000b1b4:	29c0a076 	st.d	$r22,$r3,40(0x28)
900000000000b1b8:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000b1bc:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000000b1c0:	001500ac 	move	$r12,$r5
900000000000b1c4:	0040818c 	slli.w	$r12,$r12,0x0
900000000000b1c8:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
    atomic_set(&(mm->mm_count), val);
900000000000b1cc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000b1d0:	02c0918c 	addi.d	$r12,$r12,36(0x24)
900000000000b1d4:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000000b1d8:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
900000000000b1dc:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
  v->counter = i;
900000000000b1e0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000b1e4:	28bf92cd 	ld.w	$r13,$r22,-28(0xfe4)
900000000000b1e8:	2980018d 	st.w	$r13,$r12,0
}
900000000000b1ec:	03400000 	andi	$r0,$r0,0x0
900000000000b1f0:	28c0a076 	ld.d	$r22,$r3,40(0x28)
900000000000b1f4:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000b1f8:	4c000020 	jirl	$r0,$r1,0

900000000000b1fc <pa2page>:
pa2page(uintptr_t pa) {
900000000000b1fc:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000b200:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000000b204:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000000b208:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000000b20c:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    if (PPN(pa) >= npage) {
900000000000b210:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000b214:	031c000c 	lu52i.d	$r12,$r0,1792(0x700)
900000000000b218:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000b21c:	0045318d 	srli.d	$r13,$r12,0xc
900000000000b220:	1c0042cc 	pcaddu12i	$r12,534(0x216)
900000000000b224:	28d4a18c 	ld.d	$r12,$r12,1320(0x528)
900000000000b228:	28c0018c 	ld.d	$r12,$r12,0
900000000000b22c:	68001dac 	bltu	$r13,$r12,28(0x1c) # 900000000000b248 <pa2page+0x4c>
        panic("pa2page called with invalid pa");
900000000000b230:	1c0002a6 	pcaddu12i	$r6,21(0x15)
900000000000b234:	02d460c6 	addi.d	$r6,$r6,1304(0x518)
900000000000b238:	02819c05 	addi.w	$r5,$r0,103(0x67)
900000000000b23c:	1c0002a4 	pcaddu12i	$r4,21(0x15)
900000000000b240:	02d4b084 	addi.d	$r4,$r4,1324(0x52c)
900000000000b244:	541a3c00 	bl	6716(0x1a3c) # 900000000000cc80 <__panic>
    return &pages[PPN(pa)];
900000000000b248:	1c0042cc 	pcaddu12i	$r12,534(0x216)
900000000000b24c:	28d7018c 	ld.d	$r12,$r12,1472(0x5c0)
900000000000b250:	28c0018d 	ld.d	$r13,$r12,0
900000000000b254:	28ffa2ce 	ld.d	$r14,$r22,-24(0xfe8)
900000000000b258:	031c000c 	lu52i.d	$r12,$r0,1792(0x700)
900000000000b25c:	0010b1cc 	add.d	$r12,$r14,$r12
900000000000b260:	0045318e 	srli.d	$r14,$r12,0xc
900000000000b264:	0280c00c 	addi.w	$r12,$r0,48(0x30)
900000000000b268:	001db1cc 	mul.d	$r12,$r14,$r12
900000000000b26c:	0010b1ac 	add.d	$r12,$r13,$r12
}
900000000000b270:	00150184 	move	$r4,$r12
900000000000b274:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000000b278:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000000b27c:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000000b280:	4c000020 	jirl	$r0,$r1,0

900000000000b284 <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
900000000000b284:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000b288:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000000b28c:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000000b290:	02c08076 	addi.d	$r22,$r3,32(0x20)
  struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
900000000000b294:	02812004 	addi.w	$r4,$r0,72(0x48)
900000000000b298:	57c3a3ff 	bl	-15456(0xfffc3a0) # 9000000000007638 <kmalloc>
900000000000b29c:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)

  if (mm != NULL) {
900000000000b2a0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000b2a4:	40006180 	beqz	$r12,96(0x60) # 900000000000b304 <mm_create+0x80>
    list_init(&(mm->mmap_list));
900000000000b2a8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000b2ac:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    elm->prev = elm->next = elm;
900000000000b2b0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000b2b4:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
900000000000b2b8:	29c0218d 	st.d	$r13,$r12,8(0x8)
900000000000b2bc:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000b2c0:	28c0218d 	ld.d	$r13,$r12,8(0x8)
900000000000b2c4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000b2c8:	29c0018d 	st.d	$r13,$r12,0
    mm->mmap_cache = NULL;
900000000000b2cc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000b2d0:	29c04180 	st.d	$r0,$r12,16(0x10)
    mm->pgdir = NULL;
900000000000b2d4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000b2d8:	29c06180 	st.d	$r0,$r12,24(0x18)
    mm->map_count = 0;
900000000000b2dc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000b2e0:	29808180 	st.w	$r0,$r12,32(0x20)

    set_mm_count(mm, 0);
900000000000b2e4:	00150005 	move	$r5,$r0
900000000000b2e8:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000b2ec:	57fec7ff 	bl	-316(0xffffec4) # 900000000000b1b0 <set_mm_count>
    sem_init(&(mm->mm_sem), 1);
900000000000b2f0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000b2f4:	02c0a18c 	addi.d	$r12,$r12,40(0x28)
900000000000b2f8:	02800405 	addi.w	$r5,$r0,1(0x1)
900000000000b2fc:	00150184 	move	$r4,$r12
900000000000b300:	5428cc00 	bl	10444(0x28cc) # 900000000000dbcc <sem_init>
  }	
  return mm;
900000000000b304:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
}
900000000000b308:	00150184 	move	$r4,$r12
900000000000b30c:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000000b310:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000000b314:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000000b318:	4c000020 	jirl	$r0,$r1,0

900000000000b31c <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
900000000000b31c:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000000b320:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000000b324:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000000b328:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000000b32c:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000000b330:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
900000000000b334:	001500cc 	move	$r12,$r6
900000000000b338:	0040818c 	slli.w	$r12,$r12,0x0
900000000000b33c:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
  struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
900000000000b340:	0280c004 	addi.w	$r4,$r0,48(0x30)
900000000000b344:	57c2f7ff 	bl	-15628(0xfffc2f4) # 9000000000007638 <kmalloc>
900000000000b348:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)

  if (vma != NULL) {
900000000000b34c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000b350:	40002980 	beqz	$r12,40(0x28) # 900000000000b378 <vma_create+0x5c>
    vma->vm_start = vm_start;
900000000000b354:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000b358:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000b35c:	29c0218d 	st.d	$r13,$r12,8(0x8)
    vma->vm_end = vm_end;
900000000000b360:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000b364:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000000b368:	29c0418d 	st.d	$r13,$r12,16(0x10)
    vma->vm_flags = vm_flags;
900000000000b36c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000b370:	28bf32cd 	ld.w	$r13,$r22,-52(0xfcc)
900000000000b374:	2980618d 	st.w	$r13,$r12,24(0x18)
  }
  return vma;
900000000000b378:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
}
900000000000b37c:	00150184 	move	$r4,$r12
900000000000b380:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000000b384:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000000b388:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000000b38c:	4c000020 	jirl	$r0,$r1,0

900000000000b390 <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
900000000000b390:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
900000000000b394:	29c12076 	st.d	$r22,$r3,72(0x48)
900000000000b398:	02c14076 	addi.d	$r22,$r3,80(0x50)
900000000000b39c:	29fee2c4 	st.d	$r4,$r22,-72(0xfb8)
900000000000b3a0:	29fec2c5 	st.d	$r5,$r22,-80(0xfb0)
  struct vma_struct *vma = NULL;
900000000000b3a4:	29ffa2c0 	st.d	$r0,$r22,-24(0xfe8)
  if (mm != NULL) {
900000000000b3a8:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000b3ac:	4000b980 	beqz	$r12,184(0xb8) # 900000000000b464 <find_vma+0xd4>
    vma = mm->mmap_cache;
900000000000b3b0:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000b3b4:	28c0418c 	ld.d	$r12,$r12,16(0x10)
900000000000b3b8:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
900000000000b3bc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000b3c0:	40002580 	beqz	$r12,36(0x24) # 900000000000b3e4 <find_vma+0x54>
900000000000b3c4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000b3c8:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000000b3cc:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
900000000000b3d0:	680015ac 	bltu	$r13,$r12,20(0x14) # 900000000000b3e4 <find_vma+0x54>
900000000000b3d4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000b3d8:	28c0418c 	ld.d	$r12,$r12,16(0x10)
900000000000b3dc:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
900000000000b3e0:	680071ac 	bltu	$r13,$r12,112(0x70) # 900000000000b450 <find_vma+0xc0>
      bool found = 0;
900000000000b3e4:	29bf92c0 	st.w	$r0,$r22,-28(0xfe4)
      list_entry_t *list = &(mm->mmap_list), *le = list;
900000000000b3e8:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000b3ec:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
900000000000b3f0:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000b3f4:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
      while ((le = list_next(le)) != list) {
900000000000b3f8:	50002c00 	b	44(0x2c) # 900000000000b424 <find_vma+0x94>
        vma = le2vma(le, list_link);
900000000000b3fc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000b400:	02ff818c 	addi.d	$r12,$r12,-32(0xfe0)
900000000000b404:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
        if (addr < vma->vm_end) {
900000000000b408:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000b40c:	28c0418c 	ld.d	$r12,$r12,16(0x10)
900000000000b410:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
900000000000b414:	6c0011ac 	bgeu	$r13,$r12,16(0x10) # 900000000000b424 <find_vma+0x94>
          found = 1;
900000000000b418:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000000b41c:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
          break;
900000000000b420:	50002400 	b	36(0x24) # 900000000000b444 <find_vma+0xb4>
900000000000b424:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000b428:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
    return listelm->next;
900000000000b42c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000b430:	28c0218c 	ld.d	$r12,$r12,8(0x8)
      while ((le = list_next(le)) != list) {
900000000000b434:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
900000000000b438:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000b43c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000b440:	5fffbdac 	bne	$r13,$r12,-68(0x3ffbc) # 900000000000b3fc <find_vma+0x6c>
        }
      }
      if (!found) {
900000000000b444:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000000b448:	44000980 	bnez	$r12,8(0x8) # 900000000000b450 <find_vma+0xc0>
        vma = NULL;
900000000000b44c:	29ffa2c0 	st.d	$r0,$r22,-24(0xfe8)
      }
    }
    if (vma != NULL) {
900000000000b450:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000b454:	40001180 	beqz	$r12,16(0x10) # 900000000000b464 <find_vma+0xd4>
      mm->mmap_cache = vma;
900000000000b458:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000b45c:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000b460:	29c0418d 	st.d	$r13,$r12,16(0x10)
    }
  }
  return vma;
900000000000b464:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
}
900000000000b468:	00150184 	move	$r4,$r12
900000000000b46c:	28c12076 	ld.d	$r22,$r3,72(0x48)
900000000000b470:	02c14063 	addi.d	$r3,$r3,80(0x50)
900000000000b474:	4c000020 	jirl	$r0,$r1,0

900000000000b478 <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
900000000000b478:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000b47c:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000000b480:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000000b484:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000000b488:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000000b48c:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
  assert(prev->vm_start < prev->vm_end);
900000000000b490:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000b494:	28c0218d 	ld.d	$r13,$r12,8(0x8)
900000000000b498:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000b49c:	28c0418c 	ld.d	$r12,$r12,16(0x10)
900000000000b4a0:	68001dac 	bltu	$r13,$r12,28(0x1c) # 900000000000b4bc <check_vma_overlap+0x44>
900000000000b4a4:	1c0002a6 	pcaddu12i	$r6,21(0x15)
900000000000b4a8:	02cb50c6 	addi.d	$r6,$r6,724(0x2d4)
900000000000b4ac:	02819c05 	addi.w	$r5,$r0,103(0x67)
900000000000b4b0:	1c0002a4 	pcaddu12i	$r4,21(0x15)
900000000000b4b4:	02cbe084 	addi.d	$r4,$r4,760(0x2f8)
900000000000b4b8:	5417c800 	bl	6088(0x17c8) # 900000000000cc80 <__panic>
  assert(prev->vm_end <= next->vm_start);
900000000000b4bc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000b4c0:	28c0418d 	ld.d	$r13,$r12,16(0x10)
900000000000b4c4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000b4c8:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000000b4cc:	6c001d8d 	bgeu	$r12,$r13,28(0x1c) # 900000000000b4e8 <check_vma_overlap+0x70>
900000000000b4d0:	1c0002a6 	pcaddu12i	$r6,21(0x15)
900000000000b4d4:	02cba0c6 	addi.d	$r6,$r6,744(0x2e8)
900000000000b4d8:	0281a005 	addi.w	$r5,$r0,104(0x68)
900000000000b4dc:	1c0002a4 	pcaddu12i	$r4,21(0x15)
900000000000b4e0:	02cb3084 	addi.d	$r4,$r4,716(0x2cc)
900000000000b4e4:	54179c00 	bl	6044(0x179c) # 900000000000cc80 <__panic>
  assert(next->vm_start < next->vm_end);
900000000000b4e8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000b4ec:	28c0218d 	ld.d	$r13,$r12,8(0x8)
900000000000b4f0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000b4f4:	28c0418c 	ld.d	$r12,$r12,16(0x10)
900000000000b4f8:	68001dac 	bltu	$r13,$r12,28(0x1c) # 900000000000b514 <check_vma_overlap+0x9c>
900000000000b4fc:	1c0002a6 	pcaddu12i	$r6,21(0x15)
900000000000b500:	02cbd0c6 	addi.d	$r6,$r6,756(0x2f4)
900000000000b504:	0281a405 	addi.w	$r5,$r0,105(0x69)
900000000000b508:	1c0002a4 	pcaddu12i	$r4,21(0x15)
900000000000b50c:	02ca8084 	addi.d	$r4,$r4,672(0x2a0)
900000000000b510:	54177000 	bl	6000(0x1770) # 900000000000cc80 <__panic>
}
900000000000b514:	03400000 	andi	$r0,$r0,0x0
900000000000b518:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000000b51c:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000000b520:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000000b524:	4c000020 	jirl	$r0,$r1,0

900000000000b528 <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
900000000000b528:	02fe0063 	addi.d	$r3,$r3,-128(0xf80)
900000000000b52c:	29c1e061 	st.d	$r1,$r3,120(0x78)
900000000000b530:	29c1c076 	st.d	$r22,$r3,112(0x70)
900000000000b534:	02c20076 	addi.d	$r22,$r3,128(0x80)
900000000000b538:	29fe22c4 	st.d	$r4,$r22,-120(0xf88)
900000000000b53c:	29fe02c5 	st.d	$r5,$r22,-128(0xf80)
  assert(vma->vm_start < vma->vm_end);
900000000000b540:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
900000000000b544:	28c0218d 	ld.d	$r13,$r12,8(0x8)
900000000000b548:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
900000000000b54c:	28c0418c 	ld.d	$r12,$r12,16(0x10)
900000000000b550:	68001dac 	bltu	$r13,$r12,28(0x1c) # 900000000000b56c <insert_vma_struct+0x44>
900000000000b554:	1c0002a6 	pcaddu12i	$r6,21(0x15)
900000000000b558:	02cb30c6 	addi.d	$r6,$r6,716(0x2cc)
900000000000b55c:	0281c005 	addi.w	$r5,$r0,112(0x70)
900000000000b560:	1c0002a4 	pcaddu12i	$r4,21(0x15)
900000000000b564:	02c92084 	addi.d	$r4,$r4,584(0x248)
900000000000b568:	54171800 	bl	5912(0x1718) # 900000000000cc80 <__panic>
  list_entry_t *list = &(mm->mmap_list);
900000000000b56c:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
900000000000b570:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
  list_entry_t *le_prev = list, *le_next;
900000000000b574:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000b578:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)

  list_entry_t *le = list;
900000000000b57c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000b580:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
  while ((le = list_next(le)) != list) {
900000000000b584:	50002c00 	b	44(0x2c) # 900000000000b5b0 <insert_vma_struct+0x88>
    struct vma_struct *mmap_prev = le2vma(le, list_link);
900000000000b588:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000b58c:	02ff818c 	addi.d	$r12,$r12,-32(0xfe0)
900000000000b590:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    if (mmap_prev->vm_start > vma->vm_start) {
900000000000b594:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000b598:	28c0218d 	ld.d	$r13,$r12,8(0x8)
900000000000b59c:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
900000000000b5a0:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000000b5a4:	6800318d 	bltu	$r12,$r13,48(0x30) # 900000000000b5d4 <insert_vma_struct+0xac>
      break;
    }
    le_prev = le;
900000000000b5a8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000b5ac:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000000b5b0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000b5b4:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
900000000000b5b8:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000b5bc:	28c0218c 	ld.d	$r12,$r12,8(0x8)
  while ((le = list_next(le)) != list) {
900000000000b5c0:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
900000000000b5c4:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
900000000000b5c8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000b5cc:	5fffbdac 	bne	$r13,$r12,-68(0x3ffbc) # 900000000000b588 <insert_vma_struct+0x60>
900000000000b5d0:	50000800 	b	8(0x8) # 900000000000b5d8 <insert_vma_struct+0xb0>
      break;
900000000000b5d4:	03400000 	andi	$r0,$r0,0x0
900000000000b5d8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000b5dc:	29fee2cc 	st.d	$r12,$r22,-72(0xfb8)
900000000000b5e0:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000b5e4:	28c0218c 	ld.d	$r12,$r12,8(0x8)
  }

  le_next = list_next(le_prev);
900000000000b5e8:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)

  /* check overlap */
  if (le_prev != list) {
900000000000b5ec:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000b5f0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000b5f4:	580019ac 	beq	$r13,$r12,24(0x18) # 900000000000b60c <insert_vma_struct+0xe4>
    check_vma_overlap(le2vma(le_prev, list_link), vma);
900000000000b5f8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000b5fc:	02ff818c 	addi.d	$r12,$r12,-32(0xfe0)
900000000000b600:	28fe02c5 	ld.d	$r5,$r22,-128(0xf80)
900000000000b604:	00150184 	move	$r4,$r12
900000000000b608:	57fe73ff 	bl	-400(0xffffe70) # 900000000000b478 <check_vma_overlap>
  }
  if (le_next != list) {
900000000000b60c:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
900000000000b610:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000b614:	580019ac 	beq	$r13,$r12,24(0x18) # 900000000000b62c <insert_vma_struct+0x104>
    check_vma_overlap(vma, le2vma(le_next, list_link));
900000000000b618:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000b61c:	02ff818c 	addi.d	$r12,$r12,-32(0xfe0)
900000000000b620:	00150185 	move	$r5,$r12
900000000000b624:	28fe02c4 	ld.d	$r4,$r22,-128(0xf80)
900000000000b628:	57fe53ff 	bl	-432(0xffffe50) # 900000000000b478 <check_vma_overlap>
  }

  vma->vm_mm = mm;
900000000000b62c:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
900000000000b630:	28fe22cd 	ld.d	$r13,$r22,-120(0xf88)
900000000000b634:	29c0018d 	st.d	$r13,$r12,0
  list_add_after(le_prev, &(vma->list_link));
900000000000b638:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
900000000000b63c:	02c0818c 	addi.d	$r12,$r12,32(0x20)
900000000000b640:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000b644:	29fec2cd 	st.d	$r13,$r22,-80(0xfb0)
900000000000b648:	29fea2cc 	st.d	$r12,$r22,-88(0xfa8)
    __list_add(elm, listelm, listelm->next);
900000000000b64c:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000000b650:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000000b654:	28fea2cd 	ld.d	$r13,$r22,-88(0xfa8)
900000000000b658:	29fe82cd 	st.d	$r13,$r22,-96(0xfa0)
900000000000b65c:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
900000000000b660:	29fe62cd 	st.d	$r13,$r22,-104(0xf98)
900000000000b664:	29fe42cc 	st.d	$r12,$r22,-112(0xf90)
    prev->next = next->prev = elm;
900000000000b668:	28fe42cc 	ld.d	$r12,$r22,-112(0xf90)
900000000000b66c:	28fe82cd 	ld.d	$r13,$r22,-96(0xfa0)
900000000000b670:	29c0018d 	st.d	$r13,$r12,0
900000000000b674:	28fe42cc 	ld.d	$r12,$r22,-112(0xf90)
900000000000b678:	28c0018d 	ld.d	$r13,$r12,0
900000000000b67c:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
900000000000b680:	29c0218d 	st.d	$r13,$r12,8(0x8)
    elm->next = next;
900000000000b684:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
900000000000b688:	28fe42cd 	ld.d	$r13,$r22,-112(0xf90)
900000000000b68c:	29c0218d 	st.d	$r13,$r12,8(0x8)
    elm->prev = prev;
900000000000b690:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
900000000000b694:	28fe62cd 	ld.d	$r13,$r22,-104(0xf98)
900000000000b698:	29c0018d 	st.d	$r13,$r12,0

  mm->map_count ++;
900000000000b69c:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
900000000000b6a0:	2880818c 	ld.w	$r12,$r12,32(0x20)
900000000000b6a4:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000000b6a8:	0015018d 	move	$r13,$r12
900000000000b6ac:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
900000000000b6b0:	2980818d 	st.w	$r13,$r12,32(0x20)
}
900000000000b6b4:	03400000 	andi	$r0,$r0,0x0
900000000000b6b8:	28c1e061 	ld.d	$r1,$r3,120(0x78)
900000000000b6bc:	28c1c076 	ld.d	$r22,$r3,112(0x70)
900000000000b6c0:	02c20063 	addi.d	$r3,$r3,128(0x80)
900000000000b6c4:	4c000020 	jirl	$r0,$r1,0

900000000000b6c8 <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
900000000000b6c8:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
900000000000b6cc:	29c12061 	st.d	$r1,$r3,72(0x48)
900000000000b6d0:	29c10076 	st.d	$r22,$r3,64(0x40)
900000000000b6d4:	02c14076 	addi.d	$r22,$r3,80(0x50)
900000000000b6d8:	29fee2c4 	st.d	$r4,$r22,-72(0xfb8)
  assert(mm_count(mm) == 0);
900000000000b6dc:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
900000000000b6e0:	57fa9fff 	bl	-1380(0xffffa9c) # 900000000000b17c <mm_count>
900000000000b6e4:	0015008c 	move	$r12,$r4
900000000000b6e8:	40001d80 	beqz	$r12,28(0x1c) # 900000000000b704 <mm_destroy+0x3c>
900000000000b6ec:	1c0002a6 	pcaddu12i	$r6,21(0x15)
900000000000b6f0:	02c590c6 	addi.d	$r6,$r6,356(0x164)
900000000000b6f4:	02824005 	addi.w	$r5,$r0,144(0x90)
900000000000b6f8:	1c0002a4 	pcaddu12i	$r4,21(0x15)
900000000000b6fc:	02c2c084 	addi.d	$r4,$r4,176(0xb0)
900000000000b700:	54158000 	bl	5504(0x1580) # 900000000000cc80 <__panic>

  list_entry_t *list = &(mm->mmap_list), *le;
900000000000b704:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000b708:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
  while ((le = list_next(list)) != list) {
900000000000b70c:	50004c00 	b	76(0x4c) # 900000000000b758 <mm_destroy+0x90>
900000000000b710:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000b714:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    __list_del(listelm->prev, listelm->next);
900000000000b718:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000b71c:	28c0018d 	ld.d	$r13,$r12,0
900000000000b720:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000b724:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000000b728:	29ff42cd 	st.d	$r13,$r22,-48(0xfd0)
900000000000b72c:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
    prev->next = next;
900000000000b730:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000b734:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
900000000000b738:	29c0218d 	st.d	$r13,$r12,8(0x8)
    next->prev = prev;
900000000000b73c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000b740:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000000b744:	29c0018d 	st.d	$r13,$r12,0
    list_del(le);
    kfree(le2vma(le, list_link));  //kfree vma		
900000000000b748:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000b74c:	02ff818c 	addi.d	$r12,$r12,-32(0xfe0)
900000000000b750:	00150184 	move	$r4,$r12
900000000000b754:	57c3c3ff 	bl	-15424(0xfffc3c0) # 9000000000007b14 <kfree>
900000000000b758:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000b75c:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
    return listelm->next;
900000000000b760:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000b764:	28c0218c 	ld.d	$r12,$r12,8(0x8)
  while ((le = list_next(list)) != list) {
900000000000b768:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
900000000000b76c:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
900000000000b770:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000b774:	5fff9dac 	bne	$r13,$r12,-100(0x3ff9c) # 900000000000b710 <mm_destroy+0x48>
  }
  kfree(mm); //kfree mm
900000000000b778:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
900000000000b77c:	57c39bff 	bl	-15464(0xfffc398) # 9000000000007b14 <kfree>
  mm=NULL;
900000000000b780:	29fee2c0 	st.d	$r0,$r22,-72(0xfb8)
}
900000000000b784:	03400000 	andi	$r0,$r0,0x0
900000000000b788:	28c12061 	ld.d	$r1,$r3,72(0x48)
900000000000b78c:	28c10076 	ld.d	$r22,$r3,64(0x40)
900000000000b790:	02c14063 	addi.d	$r3,$r3,80(0x50)
900000000000b794:	4c000020 	jirl	$r0,$r1,0

900000000000b798 <mm_map>:


int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
    struct vma_struct **vma_store) {
900000000000b798:	02fe4063 	addi.d	$r3,$r3,-112(0xf90)
900000000000b79c:	29c1a061 	st.d	$r1,$r3,104(0x68)
900000000000b7a0:	29c18076 	st.d	$r22,$r3,96(0x60)
900000000000b7a4:	02c1c076 	addi.d	$r22,$r3,112(0x70)
900000000000b7a8:	29fee2c4 	st.d	$r4,$r22,-72(0xfb8)
900000000000b7ac:	29fec2c5 	st.d	$r5,$r22,-80(0xfb0)
900000000000b7b0:	29fea2c6 	st.d	$r6,$r22,-88(0xfa8)
900000000000b7b4:	001500ec 	move	$r12,$r7
900000000000b7b8:	29fe62c8 	st.d	$r8,$r22,-104(0xf98)
900000000000b7bc:	0040818c 	slli.w	$r12,$r12,0x0
900000000000b7c0:	29be92cc 	st.w	$r12,$r22,-92(0xfa4)
  uintptr_t start = ROUNDDOWN_2N(addr, PGSHIFT), end = ROUNDUP_2N(addr + len, PGSHIFT);
900000000000b7c4:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
900000000000b7c8:	15ffffec 	lu12i.w	$r12,-1(0xfffff)
900000000000b7cc:	0014b1ac 	and	$r12,$r13,$r12
900000000000b7d0:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
900000000000b7d4:	0280300c 	addi.w	$r12,$r0,12(0xc)
900000000000b7d8:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
900000000000b7dc:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
900000000000b7e0:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000000b7e4:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000b7e8:	28bf62cd 	ld.w	$r13,$r22,-40(0xfd8)
900000000000b7ec:	004081ae 	slli.w	$r14,$r13,0x0
900000000000b7f0:	0280040d 	addi.w	$r13,$r0,1(0x1)
900000000000b7f4:	001739ad 	sll.w	$r13,$r13,$r14
900000000000b7f8:	0010b58c 	add.d	$r12,$r12,$r13
900000000000b7fc:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
900000000000b800:	28bf62cd 	ld.w	$r13,$r22,-40(0xfd8)
900000000000b804:	004081ad 	slli.w	$r13,$r13,0x0
900000000000b808:	0019358c 	srl.d	$r12,$r12,$r13
900000000000b80c:	28bf62cd 	ld.w	$r13,$r22,-40(0xfd8)
900000000000b810:	004081ad 	slli.w	$r13,$r13,0x0
900000000000b814:	0018b58c 	sll.d	$r12,$r12,$r13
900000000000b818:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
  if (!USER_ACCESS(start, end)) {
900000000000b81c:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
900000000000b820:	1420000c 	lu12i.w	$r12,65536(0x10000)
900000000000b824:	680021ac 	bltu	$r13,$r12,32(0x20) # 900000000000b844 <mm_map+0xac>
900000000000b828:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
900000000000b82c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000b830:	6c0015ac 	bgeu	$r13,$r12,20(0x14) # 900000000000b844 <mm_map+0xac>
900000000000b834:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000000b838:	1500000c 	lu12i.w	$r12,-524288(0x80000)
900000000000b83c:	1600000c 	lu32i.d	$r12,0
900000000000b840:	6c000d8d 	bgeu	$r12,$r13,12(0xc) # 900000000000b84c <mm_map+0xb4>
    return -E_INVAL;
900000000000b844:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
900000000000b848:	5000b400 	b	180(0xb4) # 900000000000b8fc <mm_map+0x164>
  }

  assert(mm != NULL);
900000000000b84c:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000b850:	44001d80 	bnez	$r12,28(0x1c) # 900000000000b86c <mm_map+0xd4>
900000000000b854:	1c0002a6 	pcaddu12i	$r6,21(0x15)
900000000000b858:	02c090c6 	addi.d	$r6,$r6,36(0x24)
900000000000b85c:	02829005 	addi.w	$r5,$r0,164(0xa4)
900000000000b860:	1c0002a4 	pcaddu12i	$r4,21(0x15)
900000000000b864:	02fd2084 	addi.d	$r4,$r4,-184(0xf48)
900000000000b868:	54141800 	bl	5144(0x1418) # 900000000000cc80 <__panic>

  int ret = -E_INVAL;
900000000000b86c:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
900000000000b870:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)

  struct vma_struct *vma;
  if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
900000000000b874:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
900000000000b878:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
900000000000b87c:	57fb17ff 	bl	-1260(0xffffb14) # 900000000000b390 <find_vma>
900000000000b880:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
900000000000b884:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000b888:	40001580 	beqz	$r12,20(0x14) # 900000000000b89c <mm_map+0x104>
900000000000b88c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000b890:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000000b894:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000000b898:	6800558d 	bltu	$r12,$r13,84(0x54) # 900000000000b8ec <mm_map+0x154>
    goto out;
  }
  ret = -E_NO_MEM;
900000000000b89c:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
900000000000b8a0:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)

  if ((vma = vma_create(start, end, vm_flags)) == NULL) {
900000000000b8a4:	28be92cc 	ld.w	$r12,$r22,-92(0xfa4)
900000000000b8a8:	00150186 	move	$r6,$r12
900000000000b8ac:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
900000000000b8b0:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
900000000000b8b4:	57fa6bff 	bl	-1432(0xffffa68) # 900000000000b31c <vma_create>
900000000000b8b8:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
900000000000b8bc:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000b8c0:	40003580 	beqz	$r12,52(0x34) # 900000000000b8f4 <mm_map+0x15c>
    goto out;
  }
  insert_vma_struct(mm, vma);
900000000000b8c4:	28ff22c5 	ld.d	$r5,$r22,-56(0xfc8)
900000000000b8c8:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
900000000000b8cc:	57fc5fff 	bl	-932(0xffffc5c) # 900000000000b528 <insert_vma_struct>
  if (vma_store != NULL) {
900000000000b8d0:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
900000000000b8d4:	40001180 	beqz	$r12,16(0x10) # 900000000000b8e4 <mm_map+0x14c>
    *vma_store = vma;
900000000000b8d8:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
900000000000b8dc:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
900000000000b8e0:	29c0018d 	st.d	$r13,$r12,0
  }
  ret = 0;
900000000000b8e4:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
900000000000b8e8:	50001000 	b	16(0x10) # 900000000000b8f8 <mm_map+0x160>
    goto out;
900000000000b8ec:	03400000 	andi	$r0,$r0,0x0
900000000000b8f0:	50000800 	b	8(0x8) # 900000000000b8f8 <mm_map+0x160>
    goto out;
900000000000b8f4:	03400000 	andi	$r0,$r0,0x0

out:
  return ret;
900000000000b8f8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
900000000000b8fc:	00150184 	move	$r4,$r12
900000000000b900:	28c1a061 	ld.d	$r1,$r3,104(0x68)
900000000000b904:	28c18076 	ld.d	$r22,$r3,96(0x60)
900000000000b908:	02c1c063 	addi.d	$r3,$r3,112(0x70)
900000000000b90c:	4c000020 	jirl	$r0,$r1,0

900000000000b910 <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
900000000000b910:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
900000000000b914:	29c12061 	st.d	$r1,$r3,72(0x48)
900000000000b918:	29c10076 	st.d	$r22,$r3,64(0x40)
900000000000b91c:	02c14076 	addi.d	$r22,$r3,80(0x50)
900000000000b920:	29fee2c4 	st.d	$r4,$r22,-72(0xfb8)
900000000000b924:	29fec2c5 	st.d	$r5,$r22,-80(0xfb0)
  assert(to != NULL && from != NULL);
900000000000b928:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000b92c:	40000d80 	beqz	$r12,12(0xc) # 900000000000b938 <dup_mmap+0x28>
900000000000b930:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000000b934:	44001d80 	bnez	$r12,28(0x1c) # 900000000000b950 <dup_mmap+0x40>
900000000000b938:	1c0002a6 	pcaddu12i	$r6,21(0x15)
900000000000b93c:	02fd80c6 	addi.d	$r6,$r6,-160(0xf60)
900000000000b940:	0282f405 	addi.w	$r5,$r0,189(0xbd)
900000000000b944:	1c0002a4 	pcaddu12i	$r4,21(0x15)
900000000000b948:	02f99084 	addi.d	$r4,$r4,-412(0xe64)
900000000000b94c:	54133400 	bl	4916(0x1334) # 900000000000cc80 <__panic>
  list_entry_t *list = &(from->mmap_list), *le = list;
900000000000b950:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000000b954:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
900000000000b958:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000b95c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
  while ((le = list_prev(le)) != list) {
900000000000b960:	5000a800 	b	168(0xa8) # 900000000000ba08 <dup_mmap+0xf8>
    struct vma_struct *vma, *nvma;
    vma = le2vma(le, list_link);
900000000000b964:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000b968:	02ff818c 	addi.d	$r12,$r12,-32(0xfe0)
900000000000b96c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
900000000000b970:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000b974:	28c0218d 	ld.d	$r13,$r12,8(0x8)
900000000000b978:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000b97c:	28c0418e 	ld.d	$r14,$r12,16(0x10)
900000000000b980:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000b984:	2880618c 	ld.w	$r12,$r12,24(0x18)
900000000000b988:	00150186 	move	$r6,$r12
900000000000b98c:	001501c5 	move	$r5,$r14
900000000000b990:	001501a4 	move	$r4,$r13
900000000000b994:	57f98bff 	bl	-1656(0xffff988) # 900000000000b31c <vma_create>
900000000000b998:	29ff42c4 	st.d	$r4,$r22,-48(0xfd0)
    if (nvma == NULL) {
900000000000b99c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000b9a0:	44000d80 	bnez	$r12,12(0xc) # 900000000000b9ac <dup_mmap+0x9c>
      return -E_NO_MEM;
900000000000b9a4:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
900000000000b9a8:	50008400 	b	132(0x84) # 900000000000ba2c <dup_mmap+0x11c>
    }

    insert_vma_struct(to, nvma);
900000000000b9ac:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
900000000000b9b0:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
900000000000b9b4:	57fb77ff 	bl	-1164(0xffffb74) # 900000000000b528 <insert_vma_struct>

    bool share = 0;
900000000000b9b8:	29bf32c0 	st.w	$r0,$r22,-52(0xfcc)
    if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
900000000000b9bc:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000b9c0:	28c0618d 	ld.d	$r13,$r12,24(0x18)
900000000000b9c4:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000000b9c8:	28c0618e 	ld.d	$r14,$r12,24(0x18)
900000000000b9cc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000b9d0:	28c0218f 	ld.d	$r15,$r12,8(0x8)
900000000000b9d4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000b9d8:	28c0418c 	ld.d	$r12,$r12,16(0x10)
900000000000b9dc:	28bf32d0 	ld.w	$r16,$r22,-52(0xfcc)
900000000000b9e0:	00150208 	move	$r8,$r16
900000000000b9e4:	00150187 	move	$r7,$r12
900000000000b9e8:	001501e6 	move	$r6,$r15
900000000000b9ec:	001501c5 	move	$r5,$r14
900000000000b9f0:	001501a4 	move	$r4,$r13
900000000000b9f4:	57f447ff 	bl	-3004(0xffff444) # 900000000000ae38 <copy_range>
900000000000b9f8:	0015008c 	move	$r12,$r4
900000000000b9fc:	40000d80 	beqz	$r12,12(0xc) # 900000000000ba08 <dup_mmap+0xf8>
      return -E_NO_MEM;
900000000000ba00:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
900000000000ba04:	50002800 	b	40(0x28) # 900000000000ba2c <dup_mmap+0x11c>
900000000000ba08:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ba0c:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
    return listelm->prev;
900000000000ba10:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000ba14:	28c0018c 	ld.d	$r12,$r12,0
  while ((le = list_prev(le)) != list) {
900000000000ba18:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000000ba1c:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000ba20:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000ba24:	5fff41ac 	bne	$r13,$r12,-192(0x3ff40) # 900000000000b964 <dup_mmap+0x54>
    }
  }
  return 0;
900000000000ba28:	0015000c 	move	$r12,$r0
}
900000000000ba2c:	00150184 	move	$r4,$r12
900000000000ba30:	28c12061 	ld.d	$r1,$r3,72(0x48)
900000000000ba34:	28c10076 	ld.d	$r22,$r3,64(0x40)
900000000000ba38:	02c14063 	addi.d	$r3,$r3,80(0x50)
900000000000ba3c:	4c000020 	jirl	$r0,$r1,0

900000000000ba40 <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
900000000000ba40:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
900000000000ba44:	29c16061 	st.d	$r1,$r3,88(0x58)
900000000000ba48:	29c14076 	st.d	$r22,$r3,80(0x50)
900000000000ba4c:	02c18076 	addi.d	$r22,$r3,96(0x60)
900000000000ba50:	29fea2c4 	st.d	$r4,$r22,-88(0xfa8)
  assert(mm != NULL && mm_count(mm) == 0);
900000000000ba54:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000000ba58:	40001580 	beqz	$r12,20(0x14) # 900000000000ba6c <exit_mmap+0x2c>
900000000000ba5c:	28fea2c4 	ld.d	$r4,$r22,-88(0xfa8)
900000000000ba60:	57f71fff 	bl	-2276(0xffff71c) # 900000000000b17c <mm_count>
900000000000ba64:	0015008c 	move	$r12,$r4
900000000000ba68:	40001d80 	beqz	$r12,28(0x1c) # 900000000000ba84 <exit_mmap+0x44>
900000000000ba6c:	1c0002a6 	pcaddu12i	$r6,21(0x15)
900000000000ba70:	02f970c6 	addi.d	$r6,$r6,-420(0xe5c)
900000000000ba74:	02834c05 	addi.w	$r5,$r0,211(0xd3)
900000000000ba78:	1c0002a4 	pcaddu12i	$r4,21(0x15)
900000000000ba7c:	02f4c084 	addi.d	$r4,$r4,-720(0xd30)
900000000000ba80:	54120000 	bl	4608(0x1200) # 900000000000cc80 <__panic>
  pde_t *pgdir = mm->pgdir;
900000000000ba84:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000000ba88:	28c0618c 	ld.d	$r12,$r12,24(0x18)
900000000000ba8c:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
  list_entry_t *list = &(mm->mmap_list), *le = list;
900000000000ba90:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000000ba94:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
900000000000ba98:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000ba9c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
  while ((le = list_next(le)) != list) {
900000000000baa0:	50003000 	b	48(0x30) # 900000000000bad0 <exit_mmap+0x90>
    struct vma_struct *vma = le2vma(le, list_link);
900000000000baa4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000baa8:	02ff818c 	addi.d	$r12,$r12,-32(0xfe0)
900000000000baac:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    unmap_range(pgdir, vma->vm_start, vma->vm_end);
900000000000bab0:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000bab4:	28c0218d 	ld.d	$r13,$r12,8(0x8)
900000000000bab8:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000babc:	28c0418c 	ld.d	$r12,$r12,16(0x10)
900000000000bac0:	00150186 	move	$r6,$r12
900000000000bac4:	001501a5 	move	$r5,$r13
900000000000bac8:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
900000000000bacc:	57f113ff 	bl	-3824(0xffff110) # 900000000000abdc <unmap_range>
900000000000bad0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000bad4:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
    return listelm->next;
900000000000bad8:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000badc:	28c0218c 	ld.d	$r12,$r12,8(0x8)
  while ((le = list_next(le)) != list) {
900000000000bae0:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000000bae4:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000bae8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000baec:	5fffb9ac 	bne	$r13,$r12,-72(0x3ffb8) # 900000000000baa4 <exit_mmap+0x64>
  }
  while ((le = list_next(le)) != list) {
900000000000baf0:	50003000 	b	48(0x30) # 900000000000bb20 <exit_mmap+0xe0>
    struct vma_struct *vma = le2vma(le, list_link);
900000000000baf4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000baf8:	02ff818c 	addi.d	$r12,$r12,-32(0xfe0)
900000000000bafc:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
    exit_range(pgdir, vma->vm_start, vma->vm_end);
900000000000bb00:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000bb04:	28c0218d 	ld.d	$r13,$r12,8(0x8)
900000000000bb08:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000bb0c:	28c0418c 	ld.d	$r12,$r12,16(0x10)
900000000000bb10:	00150186 	move	$r6,$r12
900000000000bb14:	001501a5 	move	$r5,$r13
900000000000bb18:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
900000000000bb1c:	57f1dbff 	bl	-3624(0xffff1d8) # 900000000000acf4 <exit_range>
900000000000bb20:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000bb24:	29fee2cc 	st.d	$r12,$r22,-72(0xfb8)
900000000000bb28:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000bb2c:	28c0218c 	ld.d	$r12,$r12,8(0x8)
  while ((le = list_next(le)) != list) {
900000000000bb30:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000000bb34:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000bb38:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000bb3c:	5fffb9ac 	bne	$r13,$r12,-72(0x3ffb8) # 900000000000baf4 <exit_mmap+0xb4>
  }
}
900000000000bb40:	03400000 	andi	$r0,$r0,0x0
900000000000bb44:	28c16061 	ld.d	$r1,$r3,88(0x58)
900000000000bb48:	28c14076 	ld.d	$r22,$r3,80(0x50)
900000000000bb4c:	02c18063 	addi.d	$r3,$r3,96(0x60)
900000000000bb50:	4c000020 	jirl	$r0,$r1,0

900000000000bb54 <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
900000000000bb54:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000000bb58:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000000bb5c:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000000bb60:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000000bb64:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000000bb68:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
900000000000bb6c:	29ff62c6 	st.d	$r6,$r22,-40(0xfd8)
900000000000bb70:	29ff42c7 	st.d	$r7,$r22,-48(0xfd0)
900000000000bb74:	0015010c 	move	$r12,$r8
900000000000bb78:	0040818c 	slli.w	$r12,$r12,0x0
900000000000bb7c:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
  if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
900000000000bb80:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000bb84:	28bf32cd 	ld.w	$r13,$r22,-52(0xfcc)
900000000000bb88:	001501a7 	move	$r7,$r13
900000000000bb8c:	28ff42c6 	ld.d	$r6,$r22,-48(0xfd0)
900000000000bb90:	00150185 	move	$r5,$r12
900000000000bb94:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000bb98:	5408e800 	bl	2280(0x8e8) # 900000000000c480 <user_mem_check>
900000000000bb9c:	0015008c 	move	$r12,$r4
900000000000bba0:	44000d80 	bnez	$r12,12(0xc) # 900000000000bbac <copy_from_user+0x58>
    return 0;
900000000000bba4:	0015000c 	move	$r12,$r0
900000000000bba8:	50001800 	b	24(0x18) # 900000000000bbc0 <copy_from_user+0x6c>
  }
  memcpy(dst, src, len);
900000000000bbac:	28ff42c6 	ld.d	$r6,$r22,-48(0xfd0)
900000000000bbb0:	28ff62c5 	ld.d	$r5,$r22,-40(0xfd8)
900000000000bbb4:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
900000000000bbb8:	5789cfff 	bl	-30260(0xfff89cc) # 9000000000004584 <memcpy>
  return 1;
900000000000bbbc:	0280040c 	addi.w	$r12,$r0,1(0x1)
}
900000000000bbc0:	00150184 	move	$r4,$r12
900000000000bbc4:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000000bbc8:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000000bbcc:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000000bbd0:	4c000020 	jirl	$r0,$r1,0

900000000000bbd4 <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
900000000000bbd4:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000bbd8:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000000bbdc:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000000bbe0:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000bbe4:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000000bbe8:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
900000000000bbec:	29ff62c6 	st.d	$r6,$r22,-40(0xfd8)
900000000000bbf0:	29ff42c7 	st.d	$r7,$r22,-48(0xfd0)
  if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
900000000000bbf4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000bbf8:	02800407 	addi.w	$r7,$r0,1(0x1)
900000000000bbfc:	28ff42c6 	ld.d	$r6,$r22,-48(0xfd0)
900000000000bc00:	00150185 	move	$r5,$r12
900000000000bc04:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000bc08:	54087800 	bl	2168(0x878) # 900000000000c480 <user_mem_check>
900000000000bc0c:	0015008c 	move	$r12,$r4
900000000000bc10:	44000d80 	bnez	$r12,12(0xc) # 900000000000bc1c <copy_to_user+0x48>
    return 0;
900000000000bc14:	0015000c 	move	$r12,$r0
900000000000bc18:	50001800 	b	24(0x18) # 900000000000bc30 <copy_to_user+0x5c>
  }
  memcpy(dst, src, len);
900000000000bc1c:	28ff42c6 	ld.d	$r6,$r22,-48(0xfd0)
900000000000bc20:	28ff62c5 	ld.d	$r5,$r22,-40(0xfd8)
900000000000bc24:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
900000000000bc28:	57895fff 	bl	-30372(0xfff895c) # 9000000000004584 <memcpy>
  return 1;
900000000000bc2c:	0280040c 	addi.w	$r12,$r0,1(0x1)
}
900000000000bc30:	00150184 	move	$r4,$r12
900000000000bc34:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000000bc38:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000000bc3c:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000bc40:	4c000020 	jirl	$r0,$r1,0

900000000000bc44 <vmm_init>:


// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
900000000000bc44:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000000bc48:	29c02061 	st.d	$r1,$r3,8(0x8)
900000000000bc4c:	29c00076 	st.d	$r22,$r3,0
900000000000bc50:	02c04076 	addi.d	$r22,$r3,16(0x10)
  check_vmm();
900000000000bc54:	54001800 	bl	24(0x18) # 900000000000bc6c <check_vmm>
}
900000000000bc58:	03400000 	andi	$r0,$r0,0x0
900000000000bc5c:	28c02061 	ld.d	$r1,$r3,8(0x8)
900000000000bc60:	28c00076 	ld.d	$r22,$r3,0
900000000000bc64:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000000bc68:	4c000020 	jirl	$r0,$r1,0

900000000000bc6c <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
900000000000bc6c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000bc70:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000000bc74:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000000bc78:	02c08076 	addi.d	$r22,$r3,32(0x20)
  size_t nr_free_pages_store = nr_free_pages();
900000000000bc7c:	57d6e3ff 	bl	-10528(0xfffd6e0) # 900000000000935c <nr_free_pages>
900000000000bc80:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)

  check_vma_struct();
900000000000bc84:	54005000 	bl	80(0x50) # 900000000000bcd4 <check_vma_struct>
  check_pgfault();
900000000000bc88:	5403ac00 	bl	940(0x3ac) # 900000000000c034 <check_pgfault>

  assert(nr_free_pages_store == nr_free_pages());
900000000000bc8c:	57d6d3ff 	bl	-10544(0xfffd6d0) # 900000000000935c <nr_free_pages>
900000000000bc90:	0015008d 	move	$r13,$r4
900000000000bc94:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000bc98:	58001d8d 	beq	$r12,$r13,28(0x1c) # 900000000000bcb4 <check_vmm+0x48>
900000000000bc9c:	1c0002a6 	pcaddu12i	$r6,21(0x15)
900000000000bca0:	02f190c6 	addi.d	$r6,$r6,-924(0xc64)
900000000000bca4:	02840805 	addi.w	$r5,$r0,258(0x102)
900000000000bca8:	1c0002a4 	pcaddu12i	$r4,21(0x15)
900000000000bcac:	02ec0084 	addi.d	$r4,$r4,-1280(0xb00)
900000000000bcb0:	540fd000 	bl	4048(0xfd0) # 900000000000cc80 <__panic>

  kprintf("check_vmm() succeeded.\n");
900000000000bcb4:	1c0002a4 	pcaddu12i	$r4,21(0x15)
900000000000bcb8:	02f23084 	addi.d	$r4,$r4,-884(0xc8c)
900000000000bcbc:	578163ff 	bl	-32416(0xfff8160) # 9000000000003e1c <kprintf>
}
900000000000bcc0:	03400000 	andi	$r0,$r0,0x0
900000000000bcc4:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000000bcc8:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000000bccc:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000000bcd0:	4c000020 	jirl	$r0,$r1,0

900000000000bcd4 <check_vma_struct>:

static void
check_vma_struct(void) {
900000000000bcd4:	02fe4063 	addi.d	$r3,$r3,-112(0xf90)
900000000000bcd8:	29c1a061 	st.d	$r1,$r3,104(0x68)
900000000000bcdc:	29c18076 	st.d	$r22,$r3,96(0x60)
900000000000bce0:	02c1c076 	addi.d	$r22,$r3,112(0x70)
  size_t nr_free_pages_store = nr_free_pages();
900000000000bce4:	57d67bff 	bl	-10632(0xfffd678) # 900000000000935c <nr_free_pages>
900000000000bce8:	29ff42c4 	st.d	$r4,$r22,-48(0xfd0)
  struct mm_struct *mm = mm_create();
900000000000bcec:	57f59bff 	bl	-2664(0xffff598) # 900000000000b284 <mm_create>
900000000000bcf0:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
  assert(mm != NULL);
900000000000bcf4:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000bcf8:	44001d80 	bnez	$r12,28(0x1c) # 900000000000bd14 <check_vma_struct+0x40>
900000000000bcfc:	1c0002a6 	pcaddu12i	$r6,21(0x15)
900000000000bd00:	02edf0c6 	addi.d	$r6,$r6,-1156(0xb7c)
900000000000bd04:	02842c05 	addi.w	$r5,$r0,267(0x10b)
900000000000bd08:	1c0002a4 	pcaddu12i	$r4,21(0x15)
900000000000bd0c:	02ea8084 	addi.d	$r4,$r4,-1376(0xaa0)
900000000000bd10:	540f7000 	bl	3952(0xf70) # 900000000000cc80 <__panic>

  int step1 = 10, step2 = step1 * 10;
900000000000bd14:	0280280c 	addi.w	$r12,$r0,10(0xa)
900000000000bd18:	29bf12cc 	st.w	$r12,$r22,-60(0xfc4)
900000000000bd1c:	28bf12cd 	ld.w	$r13,$r22,-60(0xfc4)
900000000000bd20:	0280280c 	addi.w	$r12,$r0,10(0xa)
900000000000bd24:	001c31ac 	mul.w	$r12,$r13,$r12
900000000000bd28:	29bf02cc 	st.w	$r12,$r22,-64(0xfc0)

  int i;
  for (i = step1; i >= 0; i --) {
900000000000bd2c:	28bf12cc 	ld.w	$r12,$r22,-60(0xfc4)
900000000000bd30:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000000bd34:	50007000 	b	112(0x70) # 900000000000bda4 <check_vma_struct+0xd0>
    struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
900000000000bd38:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
900000000000bd3c:	0280140c 	addi.w	$r12,$r0,5(0x5)
900000000000bd40:	001c31ac 	mul.w	$r12,$r13,$r12
900000000000bd44:	0015018e 	move	$r14,$r12
900000000000bd48:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
900000000000bd4c:	0280140c 	addi.w	$r12,$r0,5(0x5)
900000000000bd50:	001c31ac 	mul.w	$r12,$r13,$r12
900000000000bd54:	0280098c 	addi.w	$r12,$r12,2(0x2)
900000000000bd58:	00150006 	move	$r6,$r0
900000000000bd5c:	00150185 	move	$r5,$r12
900000000000bd60:	001501c4 	move	$r4,$r14
900000000000bd64:	57f5bbff 	bl	-2632(0xffff5b8) # 900000000000b31c <vma_create>
900000000000bd68:	29fee2c4 	st.d	$r4,$r22,-72(0xfb8)
    assert(vma != NULL);
900000000000bd6c:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000bd70:	44001d80 	bnez	$r12,28(0x1c) # 900000000000bd8c <check_vma_struct+0xb8>
900000000000bd74:	1c0002a6 	pcaddu12i	$r6,21(0x15)
900000000000bd78:	02ef90c6 	addi.d	$r6,$r6,-1052(0xbe4)
900000000000bd7c:	02844805 	addi.w	$r5,$r0,274(0x112)
900000000000bd80:	1c0002a4 	pcaddu12i	$r4,21(0x15)
900000000000bd84:	02e8a084 	addi.d	$r4,$r4,-1496(0xa28)
900000000000bd88:	540ef800 	bl	3832(0xef8) # 900000000000cc80 <__panic>
    insert_vma_struct(mm, vma);
900000000000bd8c:	28fee2c5 	ld.d	$r5,$r22,-72(0xfb8)
900000000000bd90:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
900000000000bd94:	57f797ff 	bl	-2156(0xffff794) # 900000000000b528 <insert_vma_struct>
  for (i = step1; i >= 0; i --) {
900000000000bd98:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000bd9c:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
900000000000bda0:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000000bda4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000bda8:	67ff9180 	bge	$r12,$r0,-112(0x3ff90) # 900000000000bd38 <check_vma_struct+0x64>
  }
  for (i = step1 + 1; i <= step2; i ++) {
900000000000bdac:	28bf12cc 	ld.w	$r12,$r22,-60(0xfc4)
900000000000bdb0:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000000bdb4:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000000bdb8:	50007000 	b	112(0x70) # 900000000000be28 <check_vma_struct+0x154>
    struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
900000000000bdbc:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
900000000000bdc0:	0280140c 	addi.w	$r12,$r0,5(0x5)
900000000000bdc4:	001c31ac 	mul.w	$r12,$r13,$r12
900000000000bdc8:	0015018e 	move	$r14,$r12
900000000000bdcc:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
900000000000bdd0:	0280140c 	addi.w	$r12,$r0,5(0x5)
900000000000bdd4:	001c31ac 	mul.w	$r12,$r13,$r12
900000000000bdd8:	0280098c 	addi.w	$r12,$r12,2(0x2)
900000000000bddc:	00150006 	move	$r6,$r0
900000000000bde0:	00150185 	move	$r5,$r12
900000000000bde4:	001501c4 	move	$r4,$r14
900000000000bde8:	57f537ff 	bl	-2764(0xffff534) # 900000000000b31c <vma_create>
900000000000bdec:	29fec2c4 	st.d	$r4,$r22,-80(0xfb0)
    assert(vma != NULL);
900000000000bdf0:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000000bdf4:	44001d80 	bnez	$r12,28(0x1c) # 900000000000be10 <check_vma_struct+0x13c>
900000000000bdf8:	1c0002a6 	pcaddu12i	$r6,21(0x15)
900000000000bdfc:	02ed80c6 	addi.d	$r6,$r6,-1184(0xb60)
900000000000be00:	02845c05 	addi.w	$r5,$r0,279(0x117)
900000000000be04:	1c0002a4 	pcaddu12i	$r4,21(0x15)
900000000000be08:	02e69084 	addi.d	$r4,$r4,-1628(0x9a4)
900000000000be0c:	540e7400 	bl	3700(0xe74) # 900000000000cc80 <__panic>
    insert_vma_struct(mm, vma);
900000000000be10:	28fec2c5 	ld.d	$r5,$r22,-80(0xfb0)
900000000000be14:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
900000000000be18:	57f713ff 	bl	-2288(0xffff710) # 900000000000b528 <insert_vma_struct>
  for (i = step1 + 1; i <= step2; i ++) {
900000000000be1c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000be20:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000000be24:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000000be28:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
900000000000be2c:	28bf02cc 	ld.w	$r12,$r22,-64(0xfc0)
900000000000be30:	67ff8d8d 	bge	$r12,$r13,-116(0x3ff8c) # 900000000000bdbc <check_vma_struct+0xe8>
  }
  list_entry_t *le = list_next(&(mm->mmap_list));
900000000000be34:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000be38:	29fe62cc 	st.d	$r12,$r22,-104(0xf98)
900000000000be3c:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
900000000000be40:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000000be44:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)

  for (i = 0; i <= step2; i ++) {
900000000000be48:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
900000000000be4c:	5000a000 	b	160(0xa0) # 900000000000beec <check_vma_struct+0x218>
    assert(le != &(mm->mmap_list));
900000000000be50:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000be54:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
900000000000be58:	5c001dac 	bne	$r13,$r12,28(0x1c) # 900000000000be74 <check_vma_struct+0x1a0>
900000000000be5c:	1c0002a6 	pcaddu12i	$r6,21(0x15)
900000000000be60:	02ec70c6 	addi.d	$r6,$r6,-1252(0xb1c)
900000000000be64:	02847405 	addi.w	$r5,$r0,285(0x11d)
900000000000be68:	1c0002a4 	pcaddu12i	$r4,21(0x15)
900000000000be6c:	02e50084 	addi.d	$r4,$r4,-1728(0x940)
900000000000be70:	540e1000 	bl	3600(0xe10) # 900000000000cc80 <__panic>
    struct vma_struct *mmap = le2vma(le, list_link);
900000000000be74:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000be78:	02ff818c 	addi.d	$r12,$r12,-32(0xfe0)
900000000000be7c:	29fea2cc 	st.d	$r12,$r22,-88(0xfa8)
    assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
900000000000be80:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000000be84:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000000be88:	28bfb2ce 	ld.w	$r14,$r22,-20(0xfec)
900000000000be8c:	0280140d 	addi.w	$r13,$r0,5(0x5)
900000000000be90:	001c35cd 	mul.w	$r13,$r14,$r13
900000000000be94:	5c00218d 	bne	$r12,$r13,32(0x20) # 900000000000beb4 <check_vma_struct+0x1e0>
900000000000be98:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000000be9c:	28c0418c 	ld.d	$r12,$r12,16(0x10)
900000000000bea0:	28bfb2ce 	ld.w	$r14,$r22,-20(0xfec)
900000000000bea4:	0280140d 	addi.w	$r13,$r0,5(0x5)
900000000000bea8:	001c35cd 	mul.w	$r13,$r14,$r13
900000000000beac:	028009ad 	addi.w	$r13,$r13,2(0x2)
900000000000beb0:	58001d8d 	beq	$r12,$r13,28(0x1c) # 900000000000becc <check_vma_struct+0x1f8>
900000000000beb4:	1c0002a6 	pcaddu12i	$r6,21(0x15)
900000000000beb8:	02ebd0c6 	addi.d	$r6,$r6,-1292(0xaf4)
900000000000bebc:	02847c05 	addi.w	$r5,$r0,287(0x11f)
900000000000bec0:	1c0002a4 	pcaddu12i	$r4,21(0x15)
900000000000bec4:	02e3a084 	addi.d	$r4,$r4,-1816(0x8e8)
900000000000bec8:	540db800 	bl	3512(0xdb8) # 900000000000cc80 <__panic>
900000000000becc:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000bed0:	29fe42cc 	st.d	$r12,$r22,-112(0xf90)
900000000000bed4:	28fe42cc 	ld.d	$r12,$r22,-112(0xf90)
900000000000bed8:	28c0218c 	ld.d	$r12,$r12,8(0x8)
    le = list_next(le);
900000000000bedc:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
  for (i = 0; i <= step2; i ++) {
900000000000bee0:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000bee4:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000000bee8:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000000beec:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
900000000000bef0:	28bf02cc 	ld.w	$r12,$r22,-64(0xfc0)
900000000000bef4:	67ff5d8d 	bge	$r12,$r13,-164(0x3ff5c) # 900000000000be50 <check_vma_struct+0x17c>
  }
  for (i = 0; i < 5 * step2 + 2; i ++) {
900000000000bef8:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
900000000000befc:	5000cc00 	b	204(0xcc) # 900000000000bfc8 <check_vma_struct+0x2f4>
    struct vma_struct *vma = find_vma(mm, i);
900000000000bf00:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000bf04:	00150185 	move	$r5,$r12
900000000000bf08:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
900000000000bf0c:	57f487ff 	bl	-2940(0xffff484) # 900000000000b390 <find_vma>
900000000000bf10:	29fe82c4 	st.d	$r4,$r22,-96(0xfa0)
    assert(vma != NULL);
900000000000bf14:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
900000000000bf18:	44001d80 	bnez	$r12,28(0x1c) # 900000000000bf34 <check_vma_struct+0x260>
900000000000bf1c:	1c0002a6 	pcaddu12i	$r6,21(0x15)
900000000000bf20:	02e8f0c6 	addi.d	$r6,$r6,-1476(0xa3c)
900000000000bf24:	02849005 	addi.w	$r5,$r0,292(0x124)
900000000000bf28:	1c0002a4 	pcaddu12i	$r4,21(0x15)
900000000000bf2c:	02e20084 	addi.d	$r4,$r4,-1920(0x880)
900000000000bf30:	540d5000 	bl	3408(0xd50) # 900000000000cc80 <__panic>
    int j = __divu5(i);
900000000000bf34:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000bf38:	00150184 	move	$r4,$r12
900000000000bf3c:	57f123ff 	bl	-3808(0xffff120) # 900000000000b05c <__divu5>
900000000000bf40:	0015008c 	move	$r12,$r4
900000000000bf44:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
    if (i >= 5 * j + 2) {
900000000000bf48:	28bf72cd 	ld.w	$r13,$r22,-36(0xfdc)
900000000000bf4c:	0280140c 	addi.w	$r12,$r0,5(0x5)
900000000000bf50:	001c31ac 	mul.w	$r12,$r13,$r12
900000000000bf54:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000000bf58:	0015018d 	move	$r13,$r12
900000000000bf5c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000bf60:	640011ac 	bge	$r13,$r12,16(0x10) # 900000000000bf70 <check_vma_struct+0x29c>
      j ++;
900000000000bf64:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
900000000000bf68:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000000bf6c:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
    }
    assert(vma->vm_start == j * 5 && vma->vm_end == j * 5 + 2);
900000000000bf70:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
900000000000bf74:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000000bf78:	28bf72ce 	ld.w	$r14,$r22,-36(0xfdc)
900000000000bf7c:	0280140d 	addi.w	$r13,$r0,5(0x5)
900000000000bf80:	001c35cd 	mul.w	$r13,$r14,$r13
900000000000bf84:	5c00218d 	bne	$r12,$r13,32(0x20) # 900000000000bfa4 <check_vma_struct+0x2d0>
900000000000bf88:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
900000000000bf8c:	28c0418c 	ld.d	$r12,$r12,16(0x10)
900000000000bf90:	28bf72ce 	ld.w	$r14,$r22,-36(0xfdc)
900000000000bf94:	0280140d 	addi.w	$r13,$r0,5(0x5)
900000000000bf98:	001c35cd 	mul.w	$r13,$r14,$r13
900000000000bf9c:	028009ad 	addi.w	$r13,$r13,2(0x2)
900000000000bfa0:	58001d8d 	beq	$r12,$r13,28(0x1c) # 900000000000bfbc <check_vma_struct+0x2e8>
900000000000bfa4:	1c0002a6 	pcaddu12i	$r6,21(0x15)
900000000000bfa8:	02e930c6 	addi.d	$r6,$r6,-1460(0xa4c)
900000000000bfac:	0284a405 	addi.w	$r5,$r0,297(0x129)
900000000000bfb0:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000bfb4:	02dfe084 	addi.d	$r4,$r4,2040(0x7f8)
900000000000bfb8:	540cc800 	bl	3272(0xcc8) # 900000000000cc80 <__panic>
  for (i = 0; i < 5 * step2 + 2; i ++) {
900000000000bfbc:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000bfc0:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000000bfc4:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000000bfc8:	28bf02cd 	ld.w	$r13,$r22,-64(0xfc0)
900000000000bfcc:	0280140c 	addi.w	$r12,$r0,5(0x5)
900000000000bfd0:	001c31ac 	mul.w	$r12,$r13,$r12
900000000000bfd4:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000000bfd8:	0015018d 	move	$r13,$r12
900000000000bfdc:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000bfe0:	67ff21ac 	bge	$r13,$r12,-224(0x3ff20) # 900000000000bf00 <check_vma_struct+0x22c>
  }
  mm_destroy(mm);
900000000000bfe4:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
900000000000bfe8:	57f6e3ff 	bl	-2336(0xffff6e0) # 900000000000b6c8 <mm_destroy>
  assert(nr_free_pages_store == nr_free_pages());
900000000000bfec:	57d373ff 	bl	-11408(0xfffd370) # 900000000000935c <nr_free_pages>
900000000000bff0:	0015008d 	move	$r13,$r4
900000000000bff4:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000bff8:	58001d8d 	beq	$r12,$r13,28(0x1c) # 900000000000c014 <check_vma_struct+0x340>
900000000000bffc:	1c0002a6 	pcaddu12i	$r6,21(0x15)
900000000000c000:	02e410c6 	addi.d	$r6,$r6,-1788(0x904)
900000000000c004:	0284b005 	addi.w	$r5,$r0,300(0x12c)
900000000000c008:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000c00c:	02de8084 	addi.d	$r4,$r4,1952(0x7a0)
900000000000c010:	540c7000 	bl	3184(0xc70) # 900000000000cc80 <__panic>

  kprintf("check_vma_struct() succeeded!\n");
900000000000c014:	1c0002a4 	pcaddu12i	$r4,21(0x15)
900000000000c018:	02e89084 	addi.d	$r4,$r4,-1500(0xa24)
900000000000c01c:	577e03ff 	bl	-33280(0xfff7e00) # 9000000000003e1c <kprintf>
}
900000000000c020:	03400000 	andi	$r0,$r0,0x0
900000000000c024:	28c1a061 	ld.d	$r1,$r3,104(0x68)
900000000000c028:	28c18076 	ld.d	$r22,$r3,96(0x60)
900000000000c02c:	02c1c063 	addi.d	$r3,$r3,112(0x70)
900000000000c030:	4c000020 	jirl	$r0,$r1,0

900000000000c034 <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
900000000000c034:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000000c038:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000000c03c:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000000c040:	02c10076 	addi.d	$r22,$r3,64(0x40)
  size_t nr_free_pages_store = nr_free_pages();
900000000000c044:	57d31bff 	bl	-11496(0xfffd318) # 900000000000935c <nr_free_pages>
900000000000c048:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)

  check_mm_struct = mm_create();
900000000000c04c:	57f23bff 	bl	-3528(0xffff238) # 900000000000b284 <mm_create>
900000000000c050:	0015008d 	move	$r13,$r4
900000000000c054:	1c0042ac 	pcaddu12i	$r12,533(0x215)
900000000000c058:	28deb18c 	ld.d	$r12,$r12,1964(0x7ac)
900000000000c05c:	29c0018d 	st.d	$r13,$r12,0
  assert(check_mm_struct != NULL);
900000000000c060:	1c0042ac 	pcaddu12i	$r12,533(0x215)
900000000000c064:	28de818c 	ld.d	$r12,$r12,1952(0x7a0)
900000000000c068:	28c0018c 	ld.d	$r12,$r12,0
900000000000c06c:	44001d80 	bnez	$r12,28(0x1c) # 900000000000c088 <check_pgfault+0x54>
900000000000c070:	1c0002a6 	pcaddu12i	$r6,21(0x15)
900000000000c074:	02e7a0c6 	addi.d	$r6,$r6,-1560(0x9e8)
900000000000c078:	0284e405 	addi.w	$r5,$r0,313(0x139)
900000000000c07c:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000c080:	02dcb084 	addi.d	$r4,$r4,1836(0x72c)
900000000000c084:	540bfc00 	bl	3068(0xbfc) # 900000000000cc80 <__panic>

  struct mm_struct *mm = check_mm_struct;
900000000000c088:	1c0042ac 	pcaddu12i	$r12,533(0x215)
900000000000c08c:	28dde18c 	ld.d	$r12,$r12,1912(0x778)
900000000000c090:	28c0018c 	ld.d	$r12,$r12,0
900000000000c094:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
  pde_t *pgdir = mm->pgdir = boot_pgdir;
900000000000c098:	1c0042ac 	pcaddu12i	$r12,533(0x215)
900000000000c09c:	28db818c 	ld.d	$r12,$r12,1760(0x6e0)
900000000000c0a0:	28c0018d 	ld.d	$r13,$r12,0
900000000000c0a4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000c0a8:	29c0618d 	st.d	$r13,$r12,24(0x18)
900000000000c0ac:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000c0b0:	28c0618c 	ld.d	$r12,$r12,24(0x18)
900000000000c0b4:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
  assert(pgdir[0] == 0);
900000000000c0b8:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000c0bc:	28c0018c 	ld.d	$r12,$r12,0
900000000000c0c0:	40001d80 	beqz	$r12,28(0x1c) # 900000000000c0dc <check_pgfault+0xa8>
900000000000c0c4:	1c0002a6 	pcaddu12i	$r6,21(0x15)
900000000000c0c8:	02e710c6 	addi.d	$r6,$r6,-1596(0x9c4)
900000000000c0cc:	0284f405 	addi.w	$r5,$r0,317(0x13d)
900000000000c0d0:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000c0d4:	02db6084 	addi.d	$r4,$r4,1752(0x6d8)
900000000000c0d8:	540ba800 	bl	2984(0xba8) # 900000000000cc80 <__panic>

  struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
900000000000c0dc:	02800806 	addi.w	$r6,$r0,2(0x2)
900000000000c0e0:	14008005 	lu12i.w	$r5,1024(0x400)
900000000000c0e4:	00150004 	move	$r4,$r0
900000000000c0e8:	57f237ff 	bl	-3532(0xffff234) # 900000000000b31c <vma_create>
900000000000c0ec:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
  assert(vma != NULL);
900000000000c0f0:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000c0f4:	44001d80 	bnez	$r12,28(0x1c) # 900000000000c110 <check_pgfault+0xdc>
900000000000c0f8:	1c0002a6 	pcaddu12i	$r6,21(0x15)
900000000000c0fc:	02e180c6 	addi.d	$r6,$r6,-1952(0x860)
900000000000c100:	02850005 	addi.w	$r5,$r0,320(0x140)
900000000000c104:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000c108:	02da9084 	addi.d	$r4,$r4,1700(0x6a4)
900000000000c10c:	540b7400 	bl	2932(0xb74) # 900000000000cc80 <__panic>

  insert_vma_struct(mm, vma);
900000000000c110:	28ff22c5 	ld.d	$r5,$r22,-56(0xfc8)
900000000000c114:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000000c118:	57f413ff 	bl	-3056(0xffff410) # 900000000000b528 <insert_vma_struct>
  uintptr_t addr = 0x100100;
900000000000c11c:	1400200c 	lu12i.w	$r12,256(0x100)
900000000000c120:	0384018c 	ori	$r12,$r12,0x100
900000000000c124:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
  assert(find_vma(mm, addr) == vma);
900000000000c128:	28ff02c5 	ld.d	$r5,$r22,-64(0xfc0)
900000000000c12c:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000000c130:	57f263ff 	bl	-3488(0xffff260) # 900000000000b390 <find_vma>
900000000000c134:	0015008d 	move	$r13,$r4
900000000000c138:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000c13c:	58001d8d 	beq	$r12,$r13,28(0x1c) # 900000000000c158 <check_pgfault+0x124>
900000000000c140:	1c0002a6 	pcaddu12i	$r6,21(0x15)
900000000000c144:	02e5a0c6 	addi.d	$r6,$r6,-1688(0x968)
900000000000c148:	02851005 	addi.w	$r5,$r0,324(0x144)
900000000000c14c:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000c150:	02d97084 	addi.d	$r4,$r4,1628(0x65c)
900000000000c154:	540b2c00 	bl	2860(0xb2c) # 900000000000cc80 <__panic>

  int i, sum = 0;
900000000000c158:	29bfa2c0 	st.w	$r0,$r22,-24(0xfe8)
  for (i = 0; i < 100; i ++) {
900000000000c15c:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
900000000000c160:	50003c00 	b	60(0x3c) # 900000000000c19c <check_pgfault+0x168>
    *(char *)(addr + i) = i;
900000000000c164:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
900000000000c168:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000c16c:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000c170:	0015018d 	move	$r13,$r12
900000000000c174:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000c178:	00005d8c 	ext.w.b	$r12,$r12
900000000000c17c:	290001ac 	st.b	$r12,$r13,0
    sum += i;
900000000000c180:	28bfa2cd 	ld.w	$r13,$r22,-24(0xfe8)
900000000000c184:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000c188:	001031ac 	add.w	$r12,$r13,$r12
900000000000c18c:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
  for (i = 0; i < 100; i ++) {
900000000000c190:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000c194:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000000c198:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000000c19c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000c1a0:	0015018d 	move	$r13,$r12
900000000000c1a4:	02818c0c 	addi.w	$r12,$r0,99(0x63)
900000000000c1a8:	67ffbd8d 	bge	$r12,$r13,-68(0x3ffbc) # 900000000000c164 <check_pgfault+0x130>
  }
  for (i = 0; i <99; i ++) {
900000000000c1ac:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
900000000000c1b0:	50002c00 	b	44(0x2c) # 900000000000c1dc <check_pgfault+0x1a8>
    sum -= *(char *)(addr + i);
900000000000c1b4:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
900000000000c1b8:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000c1bc:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000c1c0:	2800018c 	ld.b	$r12,$r12,0
900000000000c1c4:	28bfa2cd 	ld.w	$r13,$r22,-24(0xfe8)
900000000000c1c8:	001131ac 	sub.w	$r12,$r13,$r12
900000000000c1cc:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
  for (i = 0; i <99; i ++) {
900000000000c1d0:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000c1d4:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000000c1d8:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000000c1dc:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000c1e0:	0015018d 	move	$r13,$r12
900000000000c1e4:	0281880c 	addi.w	$r12,$r0,98(0x62)
900000000000c1e8:	67ffcd8d 	bge	$r12,$r13,-52(0x3ffcc) # 900000000000c1b4 <check_pgfault+0x180>
  }
  assert(sum == 99);
900000000000c1ec:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000000c1f0:	0015018d 	move	$r13,$r12
900000000000c1f4:	02818c0c 	addi.w	$r12,$r0,99(0x63)
900000000000c1f8:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000000c214 <check_pgfault+0x1e0>
900000000000c1fc:	1c0002a6 	pcaddu12i	$r6,21(0x15)
900000000000c200:	02e370c6 	addi.d	$r6,$r6,-1828(0x8dc)
900000000000c204:	02853805 	addi.w	$r5,$r0,334(0x14e)
900000000000c208:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000c20c:	02d68084 	addi.d	$r4,$r4,1440(0x5a0)
900000000000c210:	540a7000 	bl	2672(0xa70) # 900000000000cc80 <__panic>

  page_remove(pgdir, ROUNDDOWN_2N(addr, PGSHIFT));
900000000000c214:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
900000000000c218:	15ffffec 	lu12i.w	$r12,-1(0xfffff)
900000000000c21c:	0014b1ac 	and	$r12,$r13,$r12
900000000000c220:	00150185 	move	$r5,$r12
900000000000c224:	28ff42c4 	ld.d	$r4,$r22,-48(0xfd0)
900000000000c228:	57d9f3ff 	bl	-9744(0xfffd9f0) # 9000000000009c18 <page_remove>
  free_pages(pa2page(pgdir[0]),2);
900000000000c22c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000c230:	28c0018c 	ld.d	$r12,$r12,0
900000000000c234:	00150184 	move	$r4,$r12
900000000000c238:	57efc7ff 	bl	-4156(0xfffefc4) # 900000000000b1fc <pa2page>
900000000000c23c:	0015008c 	move	$r12,$r4
900000000000c240:	02800805 	addi.w	$r5,$r0,2(0x2)
900000000000c244:	00150184 	move	$r4,$r12
900000000000c248:	57d0b7ff 	bl	-12108(0xfffd0b4) # 90000000000092fc <free_pages>
  pgdir[0] = 0;
900000000000c24c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000c250:	29c00180 	st.d	$r0,$r12,0

  mm->pgdir = NULL;
900000000000c254:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000c258:	29c06180 	st.d	$r0,$r12,24(0x18)
  mm_destroy(mm);
900000000000c25c:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000000c260:	57f46bff 	bl	-2968(0xffff468) # 900000000000b6c8 <mm_destroy>
  check_mm_struct = NULL;
900000000000c264:	1c0042ac 	pcaddu12i	$r12,533(0x215)
900000000000c268:	28d6718c 	ld.d	$r12,$r12,1436(0x59c)
900000000000c26c:	29c00180 	st.d	$r0,$r12,0

  assert(nr_free_pages_store == nr_free_pages());
900000000000c270:	57d0efff 	bl	-12052(0xfffd0ec) # 900000000000935c <nr_free_pages>
900000000000c274:	0015008d 	move	$r13,$r4
900000000000c278:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000c27c:	58001d8d 	beq	$r12,$r13,28(0x1c) # 900000000000c298 <check_pgfault+0x264>
900000000000c280:	1c000286 	pcaddu12i	$r6,20(0x14)
900000000000c284:	02da00c6 	addi.d	$r6,$r6,1664(0x680)
900000000000c288:	02856005 	addi.w	$r5,$r0,344(0x158)
900000000000c28c:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000c290:	02d47084 	addi.d	$r4,$r4,1308(0x51c)
900000000000c294:	5409ec00 	bl	2540(0x9ec) # 900000000000cc80 <__panic>

  kprintf("check_pgfault() succeeded!\n");
900000000000c298:	1c0002a4 	pcaddu12i	$r4,21(0x15)
900000000000c29c:	02e18084 	addi.d	$r4,$r4,-1952(0x860)
900000000000c2a0:	577b7fff 	bl	-33924(0xfff7b7c) # 9000000000003e1c <kprintf>

}
900000000000c2a4:	03400000 	andi	$r0,$r0,0x0
900000000000c2a8:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000000c2ac:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000000c2b0:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000000c2b4:	4c000020 	jirl	$r0,$r1,0

900000000000c2b8 <do_pgfault>:

//page fault number
volatile unsigned int pgfault_num=0;
// do_pgfault - interrupt handler to process the page fault execption
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
900000000000c2b8:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
900000000000c2bc:	29c12061 	st.d	$r1,$r3,72(0x48)
900000000000c2c0:	29c10076 	st.d	$r22,$r3,64(0x40)
900000000000c2c4:	02c14076 	addi.d	$r22,$r3,80(0x50)
900000000000c2c8:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
900000000000c2cc:	001500ac 	move	$r12,$r5
900000000000c2d0:	29fee2c6 	st.d	$r6,$r22,-72(0xfb8)
900000000000c2d4:	0040818c 	slli.w	$r12,$r12,0x0
900000000000c2d8:	29bf12cc 	st.w	$r12,$r22,-60(0xfc4)
  int ret = -E_INVAL;
900000000000c2dc:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
900000000000c2e0:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
  struct vma_struct *vma = find_vma(mm, addr);
900000000000c2e4:	28fee2c5 	ld.d	$r5,$r22,-72(0xfb8)
900000000000c2e8:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
900000000000c2ec:	57f0a7ff 	bl	-3932(0xffff0a4) # 900000000000b390 <find_vma>
900000000000c2f0:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)
  //kprintf("## %08x %08x\n", error_code, addr);

  pgfault_num++;
900000000000c2f4:	1c0042cc 	pcaddu12i	$r12,534(0x216)
900000000000c2f8:	02c5218c 	addi.d	$r12,$r12,328(0x148)
900000000000c2fc:	2880018c 	ld.w	$r12,$r12,0
900000000000c300:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000000c304:	0015018d 	move	$r13,$r12
900000000000c308:	1c0042cc 	pcaddu12i	$r12,534(0x216)
900000000000c30c:	02c4d18c 	addi.d	$r12,$r12,308(0x134)
900000000000c310:	2980018d 	st.w	$r13,$r12,0
  if (vma == NULL || vma->vm_start > addr) {
900000000000c314:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000c318:	40001580 	beqz	$r12,20(0x14) # 900000000000c32c <do_pgfault+0x74>
900000000000c31c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000c320:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000000c324:	28fee2cd 	ld.d	$r13,$r22,-72(0xfb8)
900000000000c328:	6c0019ac 	bgeu	$r13,$r12,24(0x18) # 900000000000c340 <do_pgfault+0x88>
    kprintf("not valid addr %x, and  can not find it in vma\n", addr);
900000000000c32c:	28fee2c5 	ld.d	$r5,$r22,-72(0xfb8)
900000000000c330:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000c334:	02dfa084 	addi.d	$r4,$r4,2024(0x7e8)
900000000000c338:	577ae7ff 	bl	-34076(0xfff7ae4) # 9000000000003e1c <kprintf>
    goto failed;
900000000000c33c:	50012c00 	b	300(0x12c) # 900000000000c468 <do_pgfault+0x1b0>
  }

  switch (error_code & 3) {
900000000000c340:	28bf12cc 	ld.w	$r12,$r22,-60(0xfc4)
900000000000c344:	03400d8c 	andi	$r12,$r12,0x3
900000000000c348:	40004180 	beqz	$r12,64(0x40) # 900000000000c388 <do_pgfault+0xd0>
900000000000c34c:	0015018d 	move	$r13,$r12
900000000000c350:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000000c354:	580025ac 	beq	$r13,$r12,36(0x24) # 900000000000c378 <do_pgfault+0xc0>
    default:
      /* default is 3: write, present */
    case 2: /* write, not present */
      if (!(vma->vm_flags & VM_WRITE)) {
900000000000c358:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000c35c:	2880618c 	ld.w	$r12,$r12,24(0x18)
900000000000c360:	0340098c 	andi	$r12,$r12,0x2
900000000000c364:	44004580 	bnez	$r12,68(0x44) # 900000000000c3a8 <do_pgfault+0xf0>
        kprintf("write, not present in do_pgfault failed\n");
900000000000c368:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000c36c:	02df8084 	addi.d	$r4,$r4,2016(0x7e0)
900000000000c370:	577aafff 	bl	-34132(0xfff7aac) # 9000000000003e1c <kprintf>
        goto failed;
900000000000c374:	5000f400 	b	244(0xf4) # 900000000000c468 <do_pgfault+0x1b0>
      }
      break;
    case 1: /* read, present */
      kprintf("read, present in do_pgfault failed\n");
900000000000c378:	1c0002a4 	pcaddu12i	$r4,21(0x15)
900000000000c37c:	02e00084 	addi.d	$r4,$r4,-2048(0x800)
900000000000c380:	577a9fff 	bl	-34148(0xfff7a9c) # 9000000000003e1c <kprintf>
      goto failed;
900000000000c384:	5000e400 	b	228(0xe4) # 900000000000c468 <do_pgfault+0x1b0>
    case 0: /* read, not present */
      if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
900000000000c388:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000c38c:	2880618c 	ld.w	$r12,$r12,24(0x18)
900000000000c390:	0340158c 	andi	$r12,$r12,0x5
900000000000c394:	44001980 	bnez	$r12,24(0x18) # 900000000000c3ac <do_pgfault+0xf4>
        kprintf("read, not present in do_pgfault failed\n");
900000000000c398:	1c0002a4 	pcaddu12i	$r4,21(0x15)
900000000000c39c:	02e02084 	addi.d	$r4,$r4,-2040(0x808)
900000000000c3a0:	577a7fff 	bl	-34180(0xfff7a7c) # 9000000000003e1c <kprintf>
        goto failed;
900000000000c3a4:	5000c400 	b	196(0xc4) # 900000000000c468 <do_pgfault+0x1b0>
      break;
900000000000c3a8:	03400000 	andi	$r0,$r0,0x0
      }
  }

  //kprintf("## check OK\n");

  uint32_t perm = PTE_U;
900000000000c3ac:	0280100c 	addi.w	$r12,$r0,4(0x4)
900000000000c3b0:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
  if (vma->vm_flags & VM_WRITE) {
900000000000c3b4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000c3b8:	2880618c 	ld.w	$r12,$r12,24(0x18)
900000000000c3bc:	0340098c 	andi	$r12,$r12,0x2
900000000000c3c0:	40001180 	beqz	$r12,16(0x10) # 900000000000c3d0 <do_pgfault+0x118>
    perm |= PTE_W;
900000000000c3c4:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000000c3c8:	0380098c 	ori	$r12,$r12,0x2
900000000000c3cc:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
  }
  addr = ROUNDDOWN_2N(addr, PGSHIFT);
900000000000c3d0:	28fee2cd 	ld.d	$r13,$r22,-72(0xfb8)
900000000000c3d4:	15ffffec 	lu12i.w	$r12,-1(0xfffff)
900000000000c3d8:	0014b1ac 	and	$r12,$r13,$r12
900000000000c3dc:	29fee2cc 	st.d	$r12,$r22,-72(0xfb8)

  ret = -E_NO_MEM;
900000000000c3e0:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
900000000000c3e4:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)

  pte_t *ptep=NULL;
900000000000c3e8:	29ff62c0 	st.d	$r0,$r22,-40(0xfd8)
#ifdef LAB3_EX2
  if ((ptep = get_pte(mm->pgdir, addr, 1)) == NULL) {
900000000000c3ec:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000c3f0:	28c0618c 	ld.d	$r12,$r12,24(0x18)
900000000000c3f4:	02800406 	addi.w	$r6,$r0,1(0x1)
900000000000c3f8:	28fee2c5 	ld.d	$r5,$r22,-72(0xfb8)
900000000000c3fc:	00150184 	move	$r4,$r12
900000000000c400:	57d577ff 	bl	-10892(0xfffd574) # 9000000000009974 <get_pte>
900000000000c404:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000000c408:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000c40c:	40005980 	beqz	$r12,88(0x58) # 900000000000c464 <do_pgfault+0x1ac>
    goto failed;
  }

  if (*ptep == 0) { // if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
900000000000c410:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000c414:	28c0018c 	ld.d	$r12,$r12,0
900000000000c418:	44002d80 	bnez	$r12,44(0x2c) # 900000000000c444 <do_pgfault+0x18c>
    if (pgdir_alloc_page(mm->pgdir, addr, perm) == NULL) {
900000000000c41c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000c420:	28c0618c 	ld.d	$r12,$r12,24(0x18)
900000000000c424:	28bfa2cd 	ld.w	$r13,$r22,-24(0xfe8)
900000000000c428:	001501a6 	move	$r6,$r13
900000000000c42c:	28fee2c5 	ld.d	$r5,$r22,-72(0xfb8)
900000000000c430:	00150184 	move	$r4,$r12
900000000000c434:	57d923ff 	bl	-9952(0xfffd920) # 9000000000009d54 <pgdir_alloc_page>
900000000000c438:	0015008c 	move	$r12,$r4
900000000000c43c:	44002180 	bnez	$r12,32(0x20) # 900000000000c45c <do_pgfault+0x1a4>
      goto failed;
900000000000c440:	50002800 	b	40(0x28) # 900000000000c468 <do_pgfault+0x1b0>
    }
  }
  else { // if this pte is a swap entry, then load data from disk to a page with phy addr, 
      kprintf("no swap in ucore-la64 but ptep is %x, failed\n",*ptep);
900000000000c444:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000c448:	28c0018c 	ld.d	$r12,$r12,0
900000000000c44c:	00150185 	move	$r5,$r12
900000000000c450:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000c454:	02dde084 	addi.d	$r4,$r4,1912(0x778)
900000000000c458:	5779c7ff 	bl	-34364(0xfff79c4) # 9000000000003e1c <kprintf>
  }
  else {
    kprintf("no swap in ucore-la64 but ptep is %x, failed\n",*ptep);
  }
#endif
  ret = 0;
900000000000c45c:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
900000000000c460:	50000800 	b	8(0x8) # 900000000000c468 <do_pgfault+0x1b0>
    goto failed;
900000000000c464:	03400000 	andi	$r0,$r0,0x0
failed:
  return ret;
900000000000c468:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
900000000000c46c:	00150184 	move	$r4,$r12
900000000000c470:	28c12061 	ld.d	$r1,$r3,72(0x48)
900000000000c474:	28c10076 	ld.d	$r22,$r3,64(0x40)
900000000000c478:	02c14063 	addi.d	$r3,$r3,80(0x50)
900000000000c47c:	4c000020 	jirl	$r0,$r1,0

900000000000c480 <user_mem_check>:


bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
900000000000c480:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
900000000000c484:	29c12061 	st.d	$r1,$r3,72(0x48)
900000000000c488:	29c10076 	st.d	$r22,$r3,64(0x40)
900000000000c48c:	02c14076 	addi.d	$r22,$r3,80(0x50)
900000000000c490:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
900000000000c494:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
900000000000c498:	29fee2c6 	st.d	$r6,$r22,-72(0xfb8)
900000000000c49c:	001500ec 	move	$r12,$r7
900000000000c4a0:	0040818c 	slli.w	$r12,$r12,0x0
900000000000c4a4:	29bed2cc 	st.w	$r12,$r22,-76(0xfb4)
  if (mm != NULL) {
900000000000c4a8:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000c4ac:	40011580 	beqz	$r12,276(0x114) # 900000000000c5c0 <user_mem_check+0x140>
    if (!USER_ACCESS(addr, addr + len)) {
900000000000c4b0:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
900000000000c4b4:	1420000c 	lu12i.w	$r12,65536(0x10000)
900000000000c4b8:	680031ac 	bltu	$r13,$r12,48(0x30) # 900000000000c4e8 <user_mem_check+0x68>
900000000000c4bc:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
900000000000c4c0:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000c4c4:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000c4c8:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
900000000000c4cc:	6c001dac 	bgeu	$r13,$r12,28(0x1c) # 900000000000c4e8 <user_mem_check+0x68>
900000000000c4d0:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
900000000000c4d4:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000c4d8:	0010b1ad 	add.d	$r13,$r13,$r12
900000000000c4dc:	1500000c 	lu12i.w	$r12,-524288(0x80000)
900000000000c4e0:	1600000c 	lu32i.d	$r12,0
900000000000c4e4:	6c000d8d 	bgeu	$r12,$r13,12(0xc) # 900000000000c4f0 <user_mem_check+0x70>
      return 0;
900000000000c4e8:	0015000c 	move	$r12,$r0
900000000000c4ec:	50015000 	b	336(0x150) # 900000000000c63c <user_mem_check+0x1bc>
    }
    struct vma_struct *vma;
    uintptr_t start = addr, end = addr + len;
900000000000c4f0:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000c4f4:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000000c4f8:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
900000000000c4fc:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000c500:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000c504:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    while (start < end) {
900000000000c508:	5000a400 	b	164(0xa4) # 900000000000c5ac <user_mem_check+0x12c>
      if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
900000000000c50c:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
900000000000c510:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
900000000000c514:	57ee7fff 	bl	-4484(0xfffee7c) # 900000000000b390 <find_vma>
900000000000c518:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000000c51c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000c520:	40001580 	beqz	$r12,20(0x14) # 900000000000c534 <user_mem_check+0xb4>
900000000000c524:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000c528:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000000c52c:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000c530:	6c000dac 	bgeu	$r13,$r12,12(0xc) # 900000000000c53c <user_mem_check+0xbc>
        return 0;
900000000000c534:	0015000c 	move	$r12,$r0
900000000000c538:	50010400 	b	260(0x104) # 900000000000c63c <user_mem_check+0x1bc>
      }
      if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
900000000000c53c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000c540:	2880618d 	ld.w	$r13,$r12,24(0x18)
900000000000c544:	28bed2cc 	ld.w	$r12,$r22,-76(0xfb4)
900000000000c548:	40000d80 	beqz	$r12,12(0xc) # 900000000000c554 <user_mem_check+0xd4>
900000000000c54c:	0280080c 	addi.w	$r12,$r0,2(0x2)
900000000000c550:	50000800 	b	8(0x8) # 900000000000c558 <user_mem_check+0xd8>
900000000000c554:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000000c558:	0014b58c 	and	$r12,$r12,$r13
900000000000c55c:	44000d80 	bnez	$r12,12(0xc) # 900000000000c568 <user_mem_check+0xe8>
        return 0;
900000000000c560:	0015000c 	move	$r12,$r0
900000000000c564:	5000d800 	b	216(0xd8) # 900000000000c63c <user_mem_check+0x1bc>
      }
      if (write && (vma->vm_flags & VM_STACK)) {
900000000000c568:	28bed2cc 	ld.w	$r12,$r22,-76(0xfb4)
900000000000c56c:	40003580 	beqz	$r12,52(0x34) # 900000000000c5a0 <user_mem_check+0x120>
900000000000c570:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000c574:	2880618c 	ld.w	$r12,$r12,24(0x18)
900000000000c578:	0340218c 	andi	$r12,$r12,0x8
900000000000c57c:	40002580 	beqz	$r12,36(0x24) # 900000000000c5a0 <user_mem_check+0x120>
        if (start < vma->vm_start + PGSIZE) { //check stack start & size
900000000000c580:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000c584:	28c0218d 	ld.d	$r13,$r12,8(0x8)
900000000000c588:	1400002c 	lu12i.w	$r12,1(0x1)
900000000000c58c:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000c590:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000c594:	6c000dac 	bgeu	$r13,$r12,12(0xc) # 900000000000c5a0 <user_mem_check+0x120>
          return 0;
900000000000c598:	0015000c 	move	$r12,$r0
900000000000c59c:	5000a000 	b	160(0xa0) # 900000000000c63c <user_mem_check+0x1bc>
        }
      }
      start = vma->vm_end;
900000000000c5a0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000c5a4:	28c0418c 	ld.d	$r12,$r12,16(0x10)
900000000000c5a8:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (start < end) {
900000000000c5ac:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000c5b0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000c5b4:	6bff59ac 	bltu	$r13,$r12,-168(0x3ff58) # 900000000000c50c <user_mem_check+0x8c>
    }
    return 1;
900000000000c5b8:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000000c5bc:	50008000 	b	128(0x80) # 900000000000c63c <user_mem_check+0x1bc>
  }
  return KERN_ACCESS(addr, addr + len);
900000000000c5c0:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
900000000000c5c4:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
900000000000c5c8:	0323fd8c 	lu52i.d	$r12,$r12,-1793(0x8ff)
900000000000c5cc:	6c00318d 	bgeu	$r12,$r13,48(0x30) # 900000000000c5fc <user_mem_check+0x17c>
900000000000c5d0:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
900000000000c5d4:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000c5d8:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000c5dc:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
900000000000c5e0:	6c001dac 	bgeu	$r13,$r12,28(0x1c) # 900000000000c5fc <user_mem_check+0x17c>
900000000000c5e4:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
900000000000c5e8:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000c5ec:	0010b1ad 	add.d	$r13,$r13,$r12
900000000000c5f0:	1410000c 	lu12i.w	$r12,32768(0x8000)
900000000000c5f4:	0324018c 	lu52i.d	$r12,$r12,-1792(0x900)
900000000000c5f8:	6c00398d 	bgeu	$r12,$r13,56(0x38) # 900000000000c630 <user_mem_check+0x1b0>
900000000000c5fc:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000c600:	64003980 	bge	$r12,$r0,56(0x38) # 900000000000c638 <user_mem_check+0x1b8>
900000000000c604:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
900000000000c608:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000c60c:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000c610:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
900000000000c614:	6c0025ac 	bgeu	$r13,$r12,36(0x24) # 900000000000c638 <user_mem_check+0x1b8>
900000000000c618:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
900000000000c61c:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000c620:	0010b1ad 	add.d	$r13,$r13,$r12
900000000000c624:	1410000c 	lu12i.w	$r12,32768(0x8000)
900000000000c628:	0320018c 	lu52i.d	$r12,$r12,-2048(0x800)
900000000000c62c:	68000d8d 	bltu	$r12,$r13,12(0xc) # 900000000000c638 <user_mem_check+0x1b8>
900000000000c630:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000000c634:	50000800 	b	8(0x8) # 900000000000c63c <user_mem_check+0x1bc>
900000000000c638:	0015000c 	move	$r12,$r0
}
900000000000c63c:	00150184 	move	$r4,$r12
900000000000c640:	28c12061 	ld.d	$r1,$r3,72(0x48)
900000000000c644:	28c10076 	ld.d	$r22,$r3,64(0x40)
900000000000c648:	02c14063 	addi.d	$r3,$r3,80(0x50)
900000000000c64c:	4c000020 	jirl	$r0,$r1,0

900000000000c650 <copy_string>:

bool
copy_string(struct mm_struct *mm, char *dst, const char *src, size_t maxn) 
{
900000000000c650:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000000c654:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000000c658:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000000c65c:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000000c660:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000000c664:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
900000000000c668:	29ff22c6 	st.d	$r6,$r22,-56(0xfc8)
900000000000c66c:	29ff02c7 	st.d	$r7,$r22,-64(0xfc0)
  size_t alen, part = ROUNDDOWN_2N((uintptr_t)src + PGSIZE, PGSHIFT) - (uintptr_t)src;
900000000000c670:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
900000000000c674:	1400002c 	lu12i.w	$r12,1(0x1)
900000000000c678:	0010b1ad 	add.d	$r13,$r13,$r12
900000000000c67c:	15ffffec 	lu12i.w	$r12,-1(0xfffff)
900000000000c680:	0014b1ad 	and	$r13,$r13,$r12
900000000000c684:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000c688:	0011b1ac 	sub.d	$r12,$r13,$r12
900000000000c68c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
  while (1) {
    if (part > maxn) {
900000000000c690:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000c694:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000c698:	6c000d8d 	bgeu	$r12,$r13,12(0xc) # 900000000000c6a4 <copy_string+0x54>
      part = maxn;
900000000000c69c:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000c6a0:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    }
    if (!user_mem_check(mm, (uintptr_t)src, part, 0)) {
900000000000c6a4:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000c6a8:	00150007 	move	$r7,$r0
900000000000c6ac:	28ffa2c6 	ld.d	$r6,$r22,-24(0xfe8)
900000000000c6b0:	00150185 	move	$r5,$r12
900000000000c6b4:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000000c6b8:	57fdcbff 	bl	-568(0xffffdc8) # 900000000000c480 <user_mem_check>
900000000000c6bc:	0015008c 	move	$r12,$r4
900000000000c6c0:	44000d80 	bnez	$r12,12(0xc) # 900000000000c6cc <copy_string+0x7c>
      return 0;
900000000000c6c4:	0015000c 	move	$r12,$r0
900000000000c6c8:	5000a000 	b	160(0xa0) # 900000000000c768 <copy_string+0x118>
    }
    if ((alen = strnlen(src, part)) < part) {
900000000000c6cc:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
900000000000c6d0:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
900000000000c6d4:	577b27ff 	bl	-34012(0xfff7b24) # 90000000000041f8 <strnlen>
900000000000c6d8:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)
900000000000c6dc:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
900000000000c6e0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000c6e4:	6c0025ac 	bgeu	$r13,$r12,36(0x24) # 900000000000c708 <copy_string+0xb8>
      memcpy(dst, src, alen + 1);
900000000000c6e8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000c6ec:	02c0058c 	addi.d	$r12,$r12,1(0x1)
900000000000c6f0:	00150186 	move	$r6,$r12
900000000000c6f4:	28ff22c5 	ld.d	$r5,$r22,-56(0xfc8)
900000000000c6f8:	28ff42c4 	ld.d	$r4,$r22,-48(0xfd0)
900000000000c6fc:	577e8bff 	bl	-33144(0xfff7e88) # 9000000000004584 <memcpy>
      return 1;
900000000000c700:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000000c704:	50006400 	b	100(0x64) # 900000000000c768 <copy_string+0x118>
    }
    if (part == maxn) {
900000000000c708:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000c70c:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000c710:	5c000dac 	bne	$r13,$r12,12(0xc) # 900000000000c71c <copy_string+0xcc>
      return 0;
900000000000c714:	0015000c 	move	$r12,$r0
900000000000c718:	50005000 	b	80(0x50) # 900000000000c768 <copy_string+0x118>
    }
    memcpy(dst, src, part);
900000000000c71c:	28ffa2c6 	ld.d	$r6,$r22,-24(0xfe8)
900000000000c720:	28ff22c5 	ld.d	$r5,$r22,-56(0xfc8)
900000000000c724:	28ff42c4 	ld.d	$r4,$r22,-48(0xfd0)
900000000000c728:	577e5fff 	bl	-33188(0xfff7e5c) # 9000000000004584 <memcpy>
    dst += part, src += part, maxn -= part;
900000000000c72c:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000000c730:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000c734:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000c738:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
900000000000c73c:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
900000000000c740:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000c744:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000c748:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
900000000000c74c:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
900000000000c750:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000c754:	0011b1ac 	sub.d	$r12,$r13,$r12
900000000000c758:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
    part = PGSIZE;
900000000000c75c:	1400002c 	lu12i.w	$r12,1(0x1)
900000000000c760:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    if (part > maxn) {
900000000000c764:	53ff2fff 	b	-212(0xfffff2c) # 900000000000c690 <copy_string+0x40>
  }
}
900000000000c768:	00150184 	move	$r4,$r12
900000000000c76c:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000000c770:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000000c774:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000000c778:	4c000020 	jirl	$r0,$r1,0

900000000000c77c <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
900000000000c77c:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000000c780:	29c02061 	st.d	$r1,$r3,8(0x8)
900000000000c784:	29c00076 	st.d	$r22,$r3,0
900000000000c788:	02c04076 	addi.d	$r22,$r3,16(0x10)
    extern char etext[], edata[], end[], kern_init[];
    kprintf("Special kernel symbols:\n");
900000000000c78c:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000c790:	02d1b084 	addi.d	$r4,$r4,1132(0x46c)
900000000000c794:	57768bff 	bl	-35192(0xfff7688) # 9000000000003e1c <kprintf>
    kprintf("  entry  0x");
900000000000c798:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000c79c:	02d20084 	addi.d	$r4,$r4,1152(0x480)
900000000000c7a0:	57767fff 	bl	-35204(0xfff767c) # 9000000000003e1c <kprintf>
    printhex((unsigned long long)kern_init);
900000000000c7a4:	1c0042ac 	pcaddu12i	$r12,533(0x215)
900000000000c7a8:	28fd918c 	ld.d	$r12,$r12,-156(0xf64)
900000000000c7ac:	00150184 	move	$r4,$r12
900000000000c7b0:	5776dbff 	bl	-35112(0xfff76d8) # 9000000000003e88 <printhex>
    kprintf(" (phys)\n");
900000000000c7b4:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000c7b8:	02d1d084 	addi.d	$r4,$r4,1140(0x474)
900000000000c7bc:	577663ff 	bl	-35232(0xfff7660) # 9000000000003e1c <kprintf>
    kprintf("  etext\t0x");
900000000000c7c0:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000c7c4:	02d1e084 	addi.d	$r4,$r4,1144(0x478)
900000000000c7c8:	577657ff 	bl	-35244(0xfff7654) # 9000000000003e1c <kprintf>
    printhex((unsigned long long)etext);
900000000000c7cc:	1c0042ac 	pcaddu12i	$r12,533(0x215)
900000000000c7d0:	28fe918c 	ld.d	$r12,$r12,-92(0xfa4)
900000000000c7d4:	00150184 	move	$r4,$r12
900000000000c7d8:	5776b3ff 	bl	-35152(0xfff76b0) # 9000000000003e88 <printhex>
    kprintf(" (phys)\n");
900000000000c7dc:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000c7e0:	02d13084 	addi.d	$r4,$r4,1100(0x44c)
900000000000c7e4:	57763bff 	bl	-35272(0xfff7638) # 9000000000003e1c <kprintf>
    kprintf("  edata\t0x");
900000000000c7e8:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000c7ec:	02d18084 	addi.d	$r4,$r4,1120(0x460)
900000000000c7f0:	57762fff 	bl	-35284(0xfff762c) # 9000000000003e1c <kprintf>
    printhex((unsigned long long)edata);
900000000000c7f4:	1c0042ac 	pcaddu12i	$r12,533(0x215)
900000000000c7f8:	28fc718c 	ld.d	$r12,$r12,-228(0xf1c)
900000000000c7fc:	00150184 	move	$r4,$r12
900000000000c800:	57768bff 	bl	-35192(0xfff7688) # 9000000000003e88 <printhex>
    kprintf(" (phys)\n");
900000000000c804:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000c808:	02d09084 	addi.d	$r4,$r4,1060(0x424)
900000000000c80c:	577613ff 	bl	-35312(0xfff7610) # 9000000000003e1c <kprintf>
    kprintf("  end\t0x");
900000000000c810:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000c814:	02d12084 	addi.d	$r4,$r4,1096(0x448)
900000000000c818:	577607ff 	bl	-35324(0xfff7604) # 9000000000003e1c <kprintf>
    printhex((unsigned long long)end);
900000000000c81c:	1c0042ac 	pcaddu12i	$r12,533(0x215)
900000000000c820:	28fd118c 	ld.d	$r12,$r12,-188(0xf44)
900000000000c824:	00150184 	move	$r4,$r12
900000000000c828:	577663ff 	bl	-35232(0xfff7660) # 9000000000003e88 <printhex>
    kprintf(" (phys)\n");
900000000000c82c:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000c830:	02cff084 	addi.d	$r4,$r4,1020(0x3fc)
900000000000c834:	5775ebff 	bl	-35352(0xfff75e8) # 9000000000003e1c <kprintf>
    kprintf("Kernel executable memory footprint: ");
900000000000c838:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000c83c:	02d0c084 	addi.d	$r4,$r4,1072(0x430)
900000000000c840:	5775dfff 	bl	-35364(0xfff75dc) # 9000000000003e1c <kprintf>
    printbase10( (end - etext + 1023)>>10 );
900000000000c844:	1c0042ad 	pcaddu12i	$r13,533(0x215)
900000000000c848:	28fc71ad 	ld.d	$r13,$r13,-228(0xf1c)
900000000000c84c:	1c0042ac 	pcaddu12i	$r12,533(0x215)
900000000000c850:	28fc918c 	ld.d	$r12,$r12,-220(0xf24)
900000000000c854:	0011b1ac 	sub.d	$r12,$r13,$r12
900000000000c858:	02cffd8c 	addi.d	$r12,$r12,1023(0x3ff)
900000000000c85c:	0049298c 	srai.d	$r12,$r12,0xa
900000000000c860:	0040818c 	slli.w	$r12,$r12,0x0
900000000000c864:	00150184 	move	$r4,$r12
900000000000c868:	5776b7ff 	bl	-35148(0xfff76b4) # 9000000000003f1c <printbase10>
    kprintf("KB\n");
900000000000c86c:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000c870:	02d09084 	addi.d	$r4,$r4,1060(0x424)
900000000000c874:	5775abff 	bl	-35416(0xfff75a8) # 9000000000003e1c <kprintf>
}
900000000000c878:	03400000 	andi	$r0,$r0,0x0
900000000000c87c:	28c02061 	ld.d	$r1,$r3,8(0x8)
900000000000c880:	28c00076 	ld.d	$r22,$r3,0
900000000000c884:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000000c888:	4c000020 	jirl	$r0,$r1,0

900000000000c88c <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
900000000000c88c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000c890:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000000c894:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000000c898:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000000c89c:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
  panic("Unimpl");
900000000000c8a0:	1c000286 	pcaddu12i	$r6,20(0x14)
900000000000c8a4:	02cfe0c6 	addi.d	$r6,$r6,1016(0x3f8)
900000000000c8a8:	0280b005 	addi.w	$r5,$r0,44(0x2c)
900000000000c8ac:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000c8b0:	02cfd084 	addi.d	$r4,$r4,1012(0x3f4)
900000000000c8b4:	5403cc00 	bl	972(0x3cc) # 900000000000cc80 <__panic>

900000000000c8b8 <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
900000000000c8b8:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000000c8bc:	29c02061 	st.d	$r1,$r3,8(0x8)
900000000000c8c0:	29c00076 	st.d	$r22,$r3,0
900000000000c8c4:	02c04076 	addi.d	$r22,$r3,16(0x10)
  panic("Unimpl");
900000000000c8c8:	1c000286 	pcaddu12i	$r6,20(0x14)
900000000000c8cc:	02cf40c6 	addi.d	$r6,$r6,976(0x3d0)
900000000000c8d0:	02815005 	addi.w	$r5,$r0,84(0x54)
900000000000c8d4:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000c8d8:	02cf3084 	addi.d	$r4,$r4,972(0x3cc)
900000000000c8dc:	5403a400 	bl	932(0x3a4) # 900000000000cc80 <__panic>

900000000000c8e0 <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
900000000000c8e0:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000c8e4:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000000c8e8:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000000c8ec:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000c8f0:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000000c8f4:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
    int argc = 0;
900000000000c8f8:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
900000000000c8fc:	50001400 	b	20(0x14) # 900000000000c910 <parse+0x30>
            *buf ++ = '\0';
900000000000c900:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000c904:	02c0058d 	addi.d	$r13,$r12,1(0x1)
900000000000c908:	29ff62cd 	st.d	$r13,$r22,-40(0xfd8)
900000000000c90c:	29000180 	st.b	$r0,$r12,0
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
900000000000c910:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000c914:	2800018c 	ld.b	$r12,$r12,0
900000000000c918:	40002580 	beqz	$r12,36(0x24) # 900000000000c93c <parse+0x5c>
900000000000c91c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000c920:	2800018c 	ld.b	$r12,$r12,0
900000000000c924:	00150185 	move	$r5,$r12
900000000000c928:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000c92c:	02cfc084 	addi.d	$r4,$r4,1008(0x3f0)
900000000000c930:	577b2bff 	bl	-34008(0xfff7b28) # 9000000000004458 <strchr>
900000000000c934:	0015008c 	move	$r12,$r4
900000000000c938:	47ffc99f 	bnez	$r12,-56(0x7fffc8) # 900000000000c900 <parse+0x20>
        }
        if (*buf == '\0') {
900000000000c93c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000c940:	2800018c 	ld.b	$r12,$r12,0
900000000000c944:	40008180 	beqz	$r12,128(0x80) # 900000000000c9c4 <parse+0xe4>
            break;
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
900000000000c948:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000c94c:	0015018d 	move	$r13,$r12
900000000000c950:	02803c0c 	addi.w	$r12,$r0,15(0xf)
900000000000c954:	5c0011ac 	bne	$r13,$r12,16(0x10) # 900000000000c964 <parse+0x84>
            kprintf("Too many arguments.\n" );
900000000000c958:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000c95c:	02cf2084 	addi.d	$r4,$r4,968(0x3c8)
900000000000c960:	5774bfff 	bl	-35652(0xfff74bc) # 9000000000003e1c <kprintf>
        }
        argv[argc ++] = buf;
900000000000c964:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000c968:	0280058d 	addi.w	$r13,$r12,1(0x1)
900000000000c96c:	29bfb2cd 	st.w	$r13,$r22,-20(0xfec)
900000000000c970:	00410d8c 	slli.d	$r12,$r12,0x3
900000000000c974:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000000c978:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000c97c:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000c980:	29c0018d 	st.d	$r13,$r12,0
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
900000000000c984:	50001000 	b	16(0x10) # 900000000000c994 <parse+0xb4>
            buf ++;
900000000000c988:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000c98c:	02c0058c 	addi.d	$r12,$r12,1(0x1)
900000000000c990:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
900000000000c994:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000c998:	2800018c 	ld.b	$r12,$r12,0
900000000000c99c:	43ff759f 	beqz	$r12,-140(0x7fff74) # 900000000000c910 <parse+0x30>
900000000000c9a0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000c9a4:	2800018c 	ld.b	$r12,$r12,0
900000000000c9a8:	00150185 	move	$r5,$r12
900000000000c9ac:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000c9b0:	02cdb084 	addi.d	$r4,$r4,876(0x36c)
900000000000c9b4:	577aa7ff 	bl	-34140(0xfff7aa4) # 9000000000004458 <strchr>
900000000000c9b8:	0015008c 	move	$r12,$r4
900000000000c9bc:	43ffcd9f 	beqz	$r12,-52(0x7fffcc) # 900000000000c988 <parse+0xa8>
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
900000000000c9c0:	53ff53ff 	b	-176(0xfffff50) # 900000000000c910 <parse+0x30>
            break;
900000000000c9c4:	03400000 	andi	$r0,$r0,0x0
        }
    }
    return argc;
900000000000c9c8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
900000000000c9cc:	00150184 	move	$r4,$r12
900000000000c9d0:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000000c9d4:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000000c9d8:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000c9dc:	4c000020 	jirl	$r0,$r1,0

900000000000c9e0 <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
900000000000c9e0:	02fd4063 	addi.d	$r3,$r3,-176(0xf50)
900000000000c9e4:	29c2a061 	st.d	$r1,$r3,168(0xa8)
900000000000c9e8:	29c28076 	st.d	$r22,$r3,160(0xa0)
900000000000c9ec:	02c2c076 	addi.d	$r22,$r3,176(0xb0)
900000000000c9f0:	29fd62c4 	st.d	$r4,$r22,-168(0xf58)
900000000000c9f4:	29fd42c5 	st.d	$r5,$r22,-176(0xf50)
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
900000000000c9f8:	02fda2cc 	addi.d	$r12,$r22,-152(0xf68)
900000000000c9fc:	00150185 	move	$r5,$r12
900000000000ca00:	28fd62c4 	ld.d	$r4,$r22,-168(0xf58)
900000000000ca04:	57fedfff 	bl	-292(0xffffedc) # 900000000000c8e0 <parse>
900000000000ca08:	0015008c 	move	$r12,$r4
900000000000ca0c:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
    if (!argc) {
900000000000ca10:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000000ca14:	44000d80 	bnez	$r12,12(0xc) # 900000000000ca20 <runcmd+0x40>
        return 0;
900000000000ca18:	0015000c 	move	$r12,$r0
900000000000ca1c:	5000cc00 	b	204(0xcc) # 900000000000cae8 <runcmd+0x108>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
900000000000ca20:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
900000000000ca24:	50008c00 	b	140(0x8c) # 900000000000cab0 <runcmd+0xd0>
        if (!strcmp(commands[i].name, argv[0])) {
900000000000ca28:	1c0002ed 	pcaddu12i	$r13,23(0x17)
900000000000ca2c:	02d861ad 	addi.d	$r13,$r13,1560(0x618)
900000000000ca30:	28bfb2ce 	ld.w	$r14,$r22,-20(0xfec)
900000000000ca34:	0280600c 	addi.w	$r12,$r0,24(0x18)
900000000000ca38:	001db1cc 	mul.d	$r12,$r14,$r12
900000000000ca3c:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000ca40:	28c0018c 	ld.d	$r12,$r12,0
900000000000ca44:	28fda2cd 	ld.d	$r13,$r22,-152(0xf68)
900000000000ca48:	001501a5 	move	$r5,$r13
900000000000ca4c:	00150184 	move	$r4,$r12
900000000000ca50:	5778e3ff 	bl	-34592(0xfff78e0) # 9000000000004330 <strcmp>
900000000000ca54:	0015008c 	move	$r12,$r4
900000000000ca58:	44004d80 	bnez	$r12,76(0x4c) # 900000000000caa4 <runcmd+0xc4>
            return commands[i].func(argc - 1, argv + 1, tf);
900000000000ca5c:	1c0002ed 	pcaddu12i	$r13,23(0x17)
900000000000ca60:	02d791ad 	addi.d	$r13,$r13,1508(0x5e4)
900000000000ca64:	28bfb2ce 	ld.w	$r14,$r22,-20(0xfec)
900000000000ca68:	0280600c 	addi.w	$r12,$r0,24(0x18)
900000000000ca6c:	001db1cc 	mul.d	$r12,$r14,$r12
900000000000ca70:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000ca74:	28c0418d 	ld.d	$r13,$r12,16(0x10)
900000000000ca78:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000000ca7c:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
900000000000ca80:	0015018e 	move	$r14,$r12
900000000000ca84:	02fda2cc 	addi.d	$r12,$r22,-152(0xf68)
900000000000ca88:	02c0218c 	addi.d	$r12,$r12,8(0x8)
900000000000ca8c:	28fd42c6 	ld.d	$r6,$r22,-176(0xf50)
900000000000ca90:	00150185 	move	$r5,$r12
900000000000ca94:	001501c4 	move	$r4,$r14
900000000000ca98:	4c0001a1 	jirl	$r1,$r13,0
900000000000ca9c:	0015008c 	move	$r12,$r4
900000000000caa0:	50004800 	b	72(0x48) # 900000000000cae8 <runcmd+0x108>
    for (i = 0; i < NCOMMANDS; i ++) {
900000000000caa4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000caa8:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000000caac:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000000cab0:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000cab4:	0015018d 	move	$r13,$r12
900000000000cab8:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000000cabc:	6fff6d8d 	bgeu	$r12,$r13,-148(0x3ff6c) # 900000000000ca28 <runcmd+0x48>
        }
    }
    kprintf("Unknown command '");
900000000000cac0:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000cac4:	02c9e084 	addi.d	$r4,$r4,632(0x278)
900000000000cac8:	577357ff 	bl	-36012(0xfff7354) # 9000000000003e1c <kprintf>
    kprintf(argv[0]);
900000000000cacc:	28fda2cc 	ld.d	$r12,$r22,-152(0xf68)
900000000000cad0:	00150184 	move	$r4,$r12
900000000000cad4:	57734bff 	bl	-36024(0xfff7348) # 9000000000003e1c <kprintf>
    kprintf("'\n");
900000000000cad8:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000cadc:	02c9e084 	addi.d	$r4,$r4,632(0x278)
900000000000cae0:	57733fff 	bl	-36036(0xfff733c) # 9000000000003e1c <kprintf>
    return 0;
900000000000cae4:	0015000c 	move	$r12,$r0
}
900000000000cae8:	00150184 	move	$r4,$r12
900000000000caec:	28c2a061 	ld.d	$r1,$r3,168(0xa8)
900000000000caf0:	28c28076 	ld.d	$r22,$r3,160(0xa0)
900000000000caf4:	02c2c063 	addi.d	$r3,$r3,176(0xb0)
900000000000caf8:	4c000020 	jirl	$r0,$r1,0

900000000000cafc <monitor>:

/***** Implementations of basic kernel monitor commands *****/

void
monitor(struct trapframe *tf) {
900000000000cafc:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000cb00:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000000cb04:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000000cb08:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000cb0c:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    kprintf("Welcome to the kernel debug monitor!!\n");
900000000000cb10:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000cb14:	02c92084 	addi.d	$r4,$r4,584(0x248)
900000000000cb18:	577307ff 	bl	-36092(0xfff7304) # 9000000000003e1c <kprintf>
    kprintf("Type 'help' for a list of commands.\n");
900000000000cb1c:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000cb20:	02c99084 	addi.d	$r4,$r4,612(0x264)
900000000000cb24:	5772fbff 	bl	-36104(0xfff72f8) # 9000000000003e1c <kprintf>

    if (tf != NULL) {
900000000000cb28:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000cb2c:	40000d80 	beqz	$r12,12(0xc) # 900000000000cb38 <monitor+0x3c>
        print_trapframe(tf);
900000000000cb30:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000000cb34:	578143ff 	bl	-32448(0xfff8140) # 9000000000004c74 <print_trapframe>
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
900000000000cb38:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000cb3c:	02c9c084 	addi.d	$r4,$r4,624(0x270)
900000000000cb40:	576f8bff 	bl	-36984(0xfff6f88) # 9000000000003ac8 <readline>
900000000000cb44:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000000cb48:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000cb4c:	43ffed9f 	beqz	$r12,-20(0x7fffec) # 900000000000cb38 <monitor+0x3c>
            if (runcmd(buf, tf) < 0) {
900000000000cb50:	28ff62c5 	ld.d	$r5,$r22,-40(0xfd8)
900000000000cb54:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000cb58:	57fe8bff 	bl	-376(0xffffe88) # 900000000000c9e0 <runcmd>
900000000000cb5c:	0015008c 	move	$r12,$r4
900000000000cb60:	60000980 	blt	$r12,$r0,8(0x8) # 900000000000cb68 <monitor+0x6c>
        if ((buf = readline("K> ")) != NULL) {
900000000000cb64:	53ffd7ff 	b	-44(0xfffffd4) # 900000000000cb38 <monitor+0x3c>
                break;
900000000000cb68:	03400000 	andi	$r0,$r0,0x0
            }
        }
    }
}
900000000000cb6c:	03400000 	andi	$r0,$r0,0x0
900000000000cb70:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000000cb74:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000000cb78:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000cb7c:	4c000020 	jirl	$r0,$r1,0

900000000000cb80 <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
900000000000cb80:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000000cb84:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000000cb88:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000000cb8c:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000000cb90:	0015008c 	move	$r12,$r4
900000000000cb94:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
900000000000cb98:	29ff22c6 	st.d	$r6,$r22,-56(0xfc8)
900000000000cb9c:	0040818c 	slli.w	$r12,$r12,0x0
900000000000cba0:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
900000000000cba4:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
900000000000cba8:	50007000 	b	112(0x70) # 900000000000cc18 <mon_help+0x98>
        kprintf(commands[i].name);
900000000000cbac:	1c0002ed 	pcaddu12i	$r13,23(0x17)
900000000000cbb0:	02d251ad 	addi.d	$r13,$r13,1172(0x494)
900000000000cbb4:	28bfb2ce 	ld.w	$r14,$r22,-20(0xfec)
900000000000cbb8:	0280600c 	addi.w	$r12,$r0,24(0x18)
900000000000cbbc:	001db1cc 	mul.d	$r12,$r14,$r12
900000000000cbc0:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000cbc4:	28c0018c 	ld.d	$r12,$r12,0
900000000000cbc8:	00150184 	move	$r4,$r12
900000000000cbcc:	577253ff 	bl	-36272(0xfff7250) # 9000000000003e1c <kprintf>
        kprintf(" - ");
900000000000cbd0:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000cbd4:	02c78084 	addi.d	$r4,$r4,480(0x1e0)
900000000000cbd8:	577247ff 	bl	-36284(0xfff7244) # 9000000000003e1c <kprintf>
        kprintf(commands[i].desc);
900000000000cbdc:	1c0002ed 	pcaddu12i	$r13,23(0x17)
900000000000cbe0:	02d191ad 	addi.d	$r13,$r13,1124(0x464)
900000000000cbe4:	28bfb2ce 	ld.w	$r14,$r22,-20(0xfec)
900000000000cbe8:	0280600c 	addi.w	$r12,$r0,24(0x18)
900000000000cbec:	001db1cc 	mul.d	$r12,$r14,$r12
900000000000cbf0:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000cbf4:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000000cbf8:	00150184 	move	$r4,$r12
900000000000cbfc:	577223ff 	bl	-36320(0xfff7220) # 9000000000003e1c <kprintf>
        kprintf("\n");
900000000000cc00:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000cc04:	02c6e084 	addi.d	$r4,$r4,440(0x1b8)
900000000000cc08:	577217ff 	bl	-36332(0xfff7214) # 9000000000003e1c <kprintf>
    for (i = 0; i < NCOMMANDS; i ++) {
900000000000cc0c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000cc10:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000000cc14:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000000cc18:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000cc1c:	0015018d 	move	$r13,$r12
900000000000cc20:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000000cc24:	6fff898d 	bgeu	$r12,$r13,-120(0x3ff88) # 900000000000cbac <mon_help+0x2c>
    }
    return 0;
900000000000cc28:	0015000c 	move	$r12,$r0
}
900000000000cc2c:	00150184 	move	$r4,$r12
900000000000cc30:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000000cc34:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000000cc38:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000000cc3c:	4c000020 	jirl	$r0,$r1,0

900000000000cc40 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
900000000000cc40:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000cc44:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000000cc48:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000000cc4c:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000cc50:	0015008c 	move	$r12,$r4
900000000000cc54:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
900000000000cc58:	29ff62c6 	st.d	$r6,$r22,-40(0xfd8)
900000000000cc5c:	0040818c 	slli.w	$r12,$r12,0x0
900000000000cc60:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    print_kerninfo();
900000000000cc64:	57fb1bff 	bl	-1256(0xffffb18) # 900000000000c77c <print_kerninfo>
    return 0;
900000000000cc68:	0015000c 	move	$r12,$r0
}
900000000000cc6c:	00150184 	move	$r4,$r12
900000000000cc70:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000000cc74:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000000cc78:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000cc7c:	4c000020 	jirl	$r0,$r1,0

900000000000cc80 <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
900000000000cc80:	02fe4063 	addi.d	$r3,$r3,-112(0xf90)
900000000000cc84:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000000cc88:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000000cc8c:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000000cc90:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000000cc94:	001500ac 	move	$r12,$r5
900000000000cc98:	29ff22c6 	st.d	$r6,$r22,-56(0xfc8)
900000000000cc9c:	29c022c7 	st.d	$r7,$r22,8(0x8)
900000000000cca0:	29c042c8 	st.d	$r8,$r22,16(0x10)
900000000000cca4:	29c062c9 	st.d	$r9,$r22,24(0x18)
900000000000cca8:	29c082ca 	st.d	$r10,$r22,32(0x20)
900000000000ccac:	29c0a2cb 	st.d	$r11,$r22,40(0x28)
900000000000ccb0:	0040818c 	slli.w	$r12,$r12,0x0
900000000000ccb4:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
    if (is_panic) {
900000000000ccb8:	1c0042ac 	pcaddu12i	$r12,533(0x215)
900000000000ccbc:	02de218c 	addi.d	$r12,$r12,1928(0x788)
900000000000ccc0:	2880018c 	ld.w	$r12,$r12,0
900000000000ccc4:	44005980 	bnez	$r12,88(0x58) # 900000000000cd1c <__panic+0x9c>
        goto panic_dead;
    }
    is_panic = 1;
900000000000ccc8:	1c0042ac 	pcaddu12i	$r12,533(0x215)
900000000000cccc:	02dde18c 	addi.d	$r12,$r12,1912(0x778)
900000000000ccd0:	0280040d 	addi.w	$r13,$r0,1(0x1)
900000000000ccd4:	2980018d 	st.w	$r13,$r12,0

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
900000000000ccd8:	02c0c2cc 	addi.d	$r12,$r22,48(0x30)
900000000000ccdc:	02ff618c 	addi.d	$r12,$r12,-40(0xfd8)
900000000000cce0:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    kprintf("kernel panic at %s:%d:\n    ", file, line);
900000000000cce4:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
900000000000cce8:	00150186 	move	$r6,$r12
900000000000ccec:	28ff62c5 	ld.d	$r5,$r22,-40(0xfd8)
900000000000ccf0:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000ccf4:	02c34084 	addi.d	$r4,$r4,208(0xd0)
900000000000ccf8:	577127ff 	bl	-36572(0xfff7124) # 9000000000003e1c <kprintf>
    vkprintf(fmt, ap);
900000000000ccfc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000cd00:	00150185 	move	$r5,$r12
900000000000cd04:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
900000000000cd08:	5770bfff 	bl	-36676(0xfff70bc) # 9000000000003dc4 <vkprintf>
    kprintf("\n");
900000000000cd0c:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000cd10:	02c35084 	addi.d	$r4,$r4,212(0xd4)
900000000000cd14:	57710bff 	bl	-36600(0xfff7108) # 9000000000003e1c <kprintf>
900000000000cd18:	50000800 	b	8(0x8) # 900000000000cd20 <__panic+0xa0>
        goto panic_dead;
900000000000cd1c:	03400000 	andi	$r0,$r0,0x0
    va_end(ap);

panic_dead:
    intr_disable();
900000000000cd20:	574153ff 	bl	-48816(0xfff4150) # 9000000000000e70 <intr_disable>
    while (1) {
        monitor(NULL);
900000000000cd24:	00150004 	move	$r4,$r0
900000000000cd28:	57fdd7ff 	bl	-556(0xffffdd4) # 900000000000cafc <monitor>
900000000000cd2c:	53fffbff 	b	-8(0xffffff8) # 900000000000cd24 <__panic+0xa4>

900000000000cd30 <__warn>:
    }
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
900000000000cd30:	02fe4063 	addi.d	$r3,$r3,-112(0xf90)
900000000000cd34:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000000cd38:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000000cd3c:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000000cd40:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000000cd44:	001500ac 	move	$r12,$r5
900000000000cd48:	29ff22c6 	st.d	$r6,$r22,-56(0xfc8)
900000000000cd4c:	29c022c7 	st.d	$r7,$r22,8(0x8)
900000000000cd50:	29c042c8 	st.d	$r8,$r22,16(0x10)
900000000000cd54:	29c062c9 	st.d	$r9,$r22,24(0x18)
900000000000cd58:	29c082ca 	st.d	$r10,$r22,32(0x20)
900000000000cd5c:	29c0a2cb 	st.d	$r11,$r22,40(0x28)
900000000000cd60:	0040818c 	slli.w	$r12,$r12,0x0
900000000000cd64:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
    va_list ap;
    va_start(ap, fmt);
900000000000cd68:	02c0c2cc 	addi.d	$r12,$r22,48(0x30)
900000000000cd6c:	02ff618c 	addi.d	$r12,$r12,-40(0xfd8)
900000000000cd70:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    kprintf("kernel warning at %s:%d:\n    ", file, line);
900000000000cd74:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
900000000000cd78:	00150186 	move	$r6,$r12
900000000000cd7c:	28ff62c5 	ld.d	$r5,$r22,-40(0xfd8)
900000000000cd80:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000cd84:	02c1a084 	addi.d	$r4,$r4,104(0x68)
900000000000cd88:	577097ff 	bl	-36716(0xfff7094) # 9000000000003e1c <kprintf>
    vkprintf(fmt, ap);
900000000000cd8c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000cd90:	00150185 	move	$r5,$r12
900000000000cd94:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
900000000000cd98:	57702fff 	bl	-36820(0xfff702c) # 9000000000003dc4 <vkprintf>
    kprintf("\n");
900000000000cd9c:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000cda0:	02c11084 	addi.d	$r4,$r4,68(0x44)
900000000000cda4:	57707bff 	bl	-36744(0xfff7078) # 9000000000003e1c <kprintf>
    va_end(ap);
}
900000000000cda8:	03400000 	andi	$r0,$r0,0x0
900000000000cdac:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000000cdb0:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000000cdb4:	02c1c063 	addi.d	$r3,$r3,112(0x70)
900000000000cdb8:	4c000020 	jirl	$r0,$r1,0

900000000000cdbc <is_kernel_panic>:

bool
is_kernel_panic(void) {
900000000000cdbc:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000000cdc0:	29c02076 	st.d	$r22,$r3,8(0x8)
900000000000cdc4:	02c04076 	addi.d	$r22,$r3,16(0x10)
    return is_panic;
900000000000cdc8:	1c0042ac 	pcaddu12i	$r12,533(0x215)
900000000000cdcc:	02d9e18c 	addi.d	$r12,$r12,1656(0x678)
900000000000cdd0:	2880018c 	ld.w	$r12,$r12,0
}
900000000000cdd4:	00150184 	move	$r4,$r12
900000000000cdd8:	28c02076 	ld.d	$r22,$r3,8(0x8)
900000000000cddc:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000000cde0:	4c000020 	jirl	$r0,$r1,0

900000000000cde4 <fence_i>:
static void fence_i(void *va_start, int size) {
900000000000cde4:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000cde8:	29c0a076 	st.d	$r22,$r3,40(0x28)
900000000000cdec:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000cdf0:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000000cdf4:	001500ac 	move	$r12,$r5
900000000000cdf8:	0040818c 	slli.w	$r12,$r12,0x0
900000000000cdfc:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
900000000000ce00:	38720000 	dbar	0x0
    void *va_end = va_start + size;
900000000000ce04:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
900000000000ce08:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000ce0c:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000ce10:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
900000000000ce14:	50002000 	b	32(0x20) # 900000000000ce34 <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
900000000000ce18:	06000189 	cacop	0x9,$r12,0
900000000000ce1c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
900000000000ce20:	06000188 	cacop	0x8,$r12,0
900000000000ce24:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
900000000000ce28:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000ce2c:	02c0418c 	addi.d	$r12,$r12,16(0x10)
900000000000ce30:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
900000000000ce34:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000ce38:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ce3c:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 900000000000ce18 <fence_i+0x34>
900000000000ce40:	38728000 	ibar	0x0
}
900000000000ce44:	03400000 	andi	$r0,$r0,0x0
900000000000ce48:	28c0a076 	ld.d	$r22,$r3,40(0x28)
900000000000ce4c:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000ce50:	4c000020 	jirl	$r0,$r1,0

900000000000ce54 <phi_test_sema>:
semaphore_t s[N]; /* 每个哲学家一个信号量 */

struct proc_struct *philosopher_proc_sema[N];

void phi_test_sema(i) /* i：哲学家号码从0到N-1 */
{ 
900000000000ce54:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000ce58:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000000ce5c:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000000ce60:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000000ce64:	0015008c 	move	$r12,$r4
900000000000ce68:	0040818c 	slli.w	$r12,$r12,0x0
900000000000ce6c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    if(state_sema[i]==HUNGRY&&state_sema[LEFT]!=EATING
900000000000ce70:	1c0042ad 	pcaddu12i	$r13,533(0x215)
900000000000ce74:	28e2c1ad 	ld.d	$r13,$r13,-1872(0x8b0)
900000000000ce78:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000ce7c:	0041098c 	slli.d	$r12,$r12,0x2
900000000000ce80:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000ce84:	2880018c 	ld.w	$r12,$r12,0
900000000000ce88:	0015018d 	move	$r13,$r12
900000000000ce8c:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000000ce90:	5c00c1ac 	bne	$r13,$r12,192(0xc0) # 900000000000cf50 <phi_test_sema+0xfc>
900000000000ce94:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000ce98:	0280118c 	addi.w	$r12,$r12,4(0x4)
900000000000ce9c:	0015018d 	move	$r13,$r12
900000000000cea0:	0280140c 	addi.w	$r12,$r0,5(0x5)
900000000000cea4:	0020b1ae 	mod.w	$r14,$r13,$r12
900000000000cea8:	5c000980 	bne	$r12,$r0,8(0x8) # 900000000000ceb0 <phi_test_sema+0x5c>
900000000000ceac:	002a0007 	break	0x7
900000000000ceb0:	001501cc 	move	$r12,$r14
900000000000ceb4:	1c0042ad 	pcaddu12i	$r13,533(0x215)
900000000000ceb8:	28e1b1ad 	ld.d	$r13,$r13,-1940(0x86c)
900000000000cebc:	0041098c 	slli.d	$r12,$r12,0x2
900000000000cec0:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000cec4:	2880018c 	ld.w	$r12,$r12,0
900000000000cec8:	0015018d 	move	$r13,$r12
900000000000cecc:	0280080c 	addi.w	$r12,$r0,2(0x2)
900000000000ced0:	580081ac 	beq	$r13,$r12,128(0x80) # 900000000000cf50 <phi_test_sema+0xfc>
            &&state_sema[RIGHT]!=EATING)
900000000000ced4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000ced8:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000000cedc:	0015018d 	move	$r13,$r12
900000000000cee0:	0280140c 	addi.w	$r12,$r0,5(0x5)
900000000000cee4:	0020b1ae 	mod.w	$r14,$r13,$r12
900000000000cee8:	5c000980 	bne	$r12,$r0,8(0x8) # 900000000000cef0 <phi_test_sema+0x9c>
900000000000ceec:	002a0007 	break	0x7
900000000000cef0:	001501cc 	move	$r12,$r14
900000000000cef4:	1c0042ad 	pcaddu12i	$r13,533(0x215)
900000000000cef8:	28e0b1ad 	ld.d	$r13,$r13,-2004(0x82c)
900000000000cefc:	0041098c 	slli.d	$r12,$r12,0x2
900000000000cf00:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000cf04:	2880018c 	ld.w	$r12,$r12,0
900000000000cf08:	0015018d 	move	$r13,$r12
900000000000cf0c:	0280080c 	addi.w	$r12,$r0,2(0x2)
900000000000cf10:	580041ac 	beq	$r13,$r12,64(0x40) # 900000000000cf50 <phi_test_sema+0xfc>
    {
        state_sema[i]=EATING;
900000000000cf14:	1c0042ad 	pcaddu12i	$r13,533(0x215)
900000000000cf18:	28e031ad 	ld.d	$r13,$r13,-2036(0x80c)
900000000000cf1c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000cf20:	0041098c 	slli.d	$r12,$r12,0x2
900000000000cf24:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000cf28:	0280080d 	addi.w	$r13,$r0,2(0x2)
900000000000cf2c:	2980018d 	st.w	$r13,$r12,0
        up(&s[i]);
900000000000cf30:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
900000000000cf34:	0280600c 	addi.w	$r12,$r0,24(0x18)
900000000000cf38:	001db1ad 	mul.d	$r13,$r13,$r12
900000000000cf3c:	1c0042ac 	pcaddu12i	$r12,533(0x215)
900000000000cf40:	28e1d18c 	ld.d	$r12,$r12,-1932(0x874)
900000000000cf44:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000cf48:	00150184 	move	$r4,$r12
900000000000cf4c:	540ea800 	bl	3752(0xea8) # 900000000000ddf4 <up>
    }
}
900000000000cf50:	03400000 	andi	$r0,$r0,0x0
900000000000cf54:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000000cf58:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000000cf5c:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000000cf60:	4c000020 	jirl	$r0,$r1,0

900000000000cf64 <phi_take_forks_sema>:

void phi_take_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
900000000000cf64:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000cf68:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000000cf6c:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000000cf70:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000000cf74:	0015008c 	move	$r12,$r4
900000000000cf78:	0040818c 	slli.w	$r12,$r12,0x0
900000000000cf7c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
        down(&mutex); /* 进入临界区 */
900000000000cf80:	1c004284 	pcaddu12i	$r4,532(0x214)
900000000000cf84:	28df6084 	ld.d	$r4,$r4,2008(0x7d8)
900000000000cf88:	540ea000 	bl	3744(0xea0) # 900000000000de28 <down>
        state_sema[i]=HUNGRY; /* 记录下哲学家i饥饿的事实 */
900000000000cf8c:	1c00428d 	pcaddu12i	$r13,532(0x214)
900000000000cf90:	28de51ad 	ld.d	$r13,$r13,1940(0x794)
900000000000cf94:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000cf98:	0041098c 	slli.d	$r12,$r12,0x2
900000000000cf9c:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000cfa0:	0280040d 	addi.w	$r13,$r0,1(0x1)
900000000000cfa4:	2980018d 	st.w	$r13,$r12,0
        phi_test_sema(i); /* 试图得到两只叉子 */
900000000000cfa8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000cfac:	00150184 	move	$r4,$r12
900000000000cfb0:	57fea7ff 	bl	-348(0xffffea4) # 900000000000ce54 <phi_test_sema>
        up(&mutex); /* 离开临界区 */
900000000000cfb4:	1c004284 	pcaddu12i	$r4,532(0x214)
900000000000cfb8:	28de9084 	ld.d	$r4,$r4,1956(0x7a4)
900000000000cfbc:	540e3800 	bl	3640(0xe38) # 900000000000ddf4 <up>
        down(&s[i]); /* 如果得不到叉子就阻塞 */
900000000000cfc0:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
900000000000cfc4:	0280600c 	addi.w	$r12,$r0,24(0x18)
900000000000cfc8:	001db1ad 	mul.d	$r13,$r13,$r12
900000000000cfcc:	1c00428c 	pcaddu12i	$r12,532(0x214)
900000000000cfd0:	28df918c 	ld.d	$r12,$r12,2020(0x7e4)
900000000000cfd4:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000cfd8:	00150184 	move	$r4,$r12
900000000000cfdc:	540e4c00 	bl	3660(0xe4c) # 900000000000de28 <down>
}
900000000000cfe0:	03400000 	andi	$r0,$r0,0x0
900000000000cfe4:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000000cfe8:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000000cfec:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000000cff0:	4c000020 	jirl	$r0,$r1,0

900000000000cff4 <phi_put_forks_sema>:

void phi_put_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
900000000000cff4:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000cff8:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000000cffc:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000000d000:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000000d004:	0015008c 	move	$r12,$r4
900000000000d008:	0040818c 	slli.w	$r12,$r12,0x0
900000000000d00c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
        down(&mutex); /* 进入临界区 */
900000000000d010:	1c004284 	pcaddu12i	$r4,532(0x214)
900000000000d014:	28dd2084 	ld.d	$r4,$r4,1864(0x748)
900000000000d018:	540e1000 	bl	3600(0xe10) # 900000000000de28 <down>
        state_sema[i]=THINKING; /* 哲学家进餐结束 */
900000000000d01c:	1c00428d 	pcaddu12i	$r13,532(0x214)
900000000000d020:	28dc11ad 	ld.d	$r13,$r13,1796(0x704)
900000000000d024:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d028:	0041098c 	slli.d	$r12,$r12,0x2
900000000000d02c:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000d030:	29800180 	st.w	$r0,$r12,0
        phi_test_sema(LEFT); /* 看一下左邻居现在是否能进餐 */
900000000000d034:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d038:	0280118c 	addi.w	$r12,$r12,4(0x4)
900000000000d03c:	0015018d 	move	$r13,$r12
900000000000d040:	0280140c 	addi.w	$r12,$r0,5(0x5)
900000000000d044:	0020b1ae 	mod.w	$r14,$r13,$r12
900000000000d048:	5c000980 	bne	$r12,$r0,8(0x8) # 900000000000d050 <phi_put_forks_sema+0x5c>
900000000000d04c:	002a0007 	break	0x7
900000000000d050:	001501cc 	move	$r12,$r14
900000000000d054:	00150184 	move	$r4,$r12
900000000000d058:	57fdffff 	bl	-516(0xffffdfc) # 900000000000ce54 <phi_test_sema>
        phi_test_sema(RIGHT); /* 看一下右邻居现在是否能进餐 */
900000000000d05c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d060:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000000d064:	0015018d 	move	$r13,$r12
900000000000d068:	0280140c 	addi.w	$r12,$r0,5(0x5)
900000000000d06c:	0020b1ae 	mod.w	$r14,$r13,$r12
900000000000d070:	5c000980 	bne	$r12,$r0,8(0x8) # 900000000000d078 <phi_put_forks_sema+0x84>
900000000000d074:	002a0007 	break	0x7
900000000000d078:	001501cc 	move	$r12,$r14
900000000000d07c:	00150184 	move	$r4,$r12
900000000000d080:	57fdd7ff 	bl	-556(0xffffdd4) # 900000000000ce54 <phi_test_sema>
        up(&mutex); /* 离开临界区 */
900000000000d084:	1c004284 	pcaddu12i	$r4,532(0x214)
900000000000d088:	28db5084 	ld.d	$r4,$r4,1748(0x6d4)
900000000000d08c:	540d6800 	bl	3432(0xd68) # 900000000000ddf4 <up>
}
900000000000d090:	03400000 	andi	$r0,$r0,0x0
900000000000d094:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000000d098:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000000d09c:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000000d0a0:	4c000020 	jirl	$r0,$r1,0

900000000000d0a4 <philosopher_using_semaphore>:

int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
900000000000d0a4:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000d0a8:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000000d0ac:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000000d0b0:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000d0b4:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    int i, iter=0;
900000000000d0b8:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
    i=(int)arg;
900000000000d0bc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000d0c0:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
    kprintf("I am No.%d philosopher_sema\n",i);
900000000000d0c4:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000000d0c8:	00150185 	move	$r5,$r12
900000000000d0cc:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000d0d0:	02f4f084 	addi.d	$r4,$r4,-708(0xd3c)
900000000000d0d4:	576d4bff 	bl	-37560(0xfff6d48) # 9000000000003e1c <kprintf>
    while(iter++<TIMES)
900000000000d0d8:	50006400 	b	100(0x64) # 900000000000d13c <philosopher_using_semaphore+0x98>
    { /* 无限循环 */
        kprintf("Iter %d, No.%d philosopher_sema is thinking\n",iter,i); /* 哲学家正在思考 */
900000000000d0dc:	28bfa2cd 	ld.w	$r13,$r22,-24(0xfe8)
900000000000d0e0:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d0e4:	001501a6 	move	$r6,$r13
900000000000d0e8:	00150185 	move	$r5,$r12
900000000000d0ec:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000d0f0:	02f4f084 	addi.d	$r4,$r4,-708(0xd3c)
900000000000d0f4:	576d2bff 	bl	-37592(0xfff6d28) # 9000000000003e1c <kprintf>
        do_sleep(SLEEP_TIME);
900000000000d0f8:	02802804 	addi.w	$r4,$r0,10(0xa)
900000000000d0fc:	5447fc00 	bl	18428(0x47fc) # 90000000000118f8 <do_sleep>
        phi_take_forks_sema(i); 
900000000000d100:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000000d104:	00150184 	move	$r4,$r12
900000000000d108:	57fe5fff 	bl	-420(0xffffe5c) # 900000000000cf64 <phi_take_forks_sema>
        /* 需要两只叉子，或者阻塞 */
        kprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
900000000000d10c:	28bfa2cd 	ld.w	$r13,$r22,-24(0xfe8)
900000000000d110:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d114:	001501a6 	move	$r6,$r13
900000000000d118:	00150185 	move	$r5,$r12
900000000000d11c:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000d120:	02f4f084 	addi.d	$r4,$r4,-708(0xd3c)
900000000000d124:	576cfbff 	bl	-37640(0xfff6cf8) # 9000000000003e1c <kprintf>
        do_sleep(SLEEP_TIME);
900000000000d128:	02802804 	addi.w	$r4,$r0,10(0xa)
900000000000d12c:	5447cc00 	bl	18380(0x47cc) # 90000000000118f8 <do_sleep>
        phi_put_forks_sema(i); 
900000000000d130:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000000d134:	00150184 	move	$r4,$r12
900000000000d138:	57febfff 	bl	-324(0xffffebc) # 900000000000cff4 <phi_put_forks_sema>
    while(iter++<TIMES)
900000000000d13c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d140:	0280058d 	addi.w	$r13,$r12,1(0x1)
900000000000d144:	29bfb2cd 	st.w	$r13,$r22,-20(0xfec)
900000000000d148:	0015018d 	move	$r13,$r12
900000000000d14c:	02800c0c 	addi.w	$r12,$r0,3(0x3)
900000000000d150:	67ff8d8d 	bge	$r12,$r13,-116(0x3ff8c) # 900000000000d0dc <philosopher_using_semaphore+0x38>
        /* 把两把叉子同时放回桌子 */
    }
    kprintf("No.%d philosopher_sema quit\n",i);
900000000000d154:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000000d158:	00150185 	move	$r5,$r12
900000000000d15c:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000d160:	02f4b084 	addi.d	$r4,$r4,-724(0xd2c)
900000000000d164:	576cbbff 	bl	-37704(0xfff6cb8) # 9000000000003e1c <kprintf>
    return 0;    
900000000000d168:	0015000c 	move	$r12,$r0
}
900000000000d16c:	00150184 	move	$r4,$r12
900000000000d170:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000000d174:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000000d178:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000d17c:	4c000020 	jirl	$r0,$r1,0

900000000000d180 <phi_test_condvar>:

struct proc_struct *philosopher_proc_condvar[N]; // N philosopher
int state_condvar[N];                            // the philosopher's state: EATING, HUNGARY, THINKING  
monitor_t mt, *mtp=&mt;                          // monitor

void phi_test_condvar (i) { 
900000000000d180:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000d184:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000000d188:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000000d18c:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000000d190:	0015008c 	move	$r12,$r4
900000000000d194:	0040818c 	slli.w	$r12,$r12,0x0
900000000000d198:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    if(state_condvar[i]==HUNGRY&&state_condvar[LEFT]!=EATING
900000000000d19c:	1c00428d 	pcaddu12i	$r13,532(0x214)
900000000000d1a0:	28d7d1ad 	ld.d	$r13,$r13,1524(0x5f4)
900000000000d1a4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d1a8:	0041098c 	slli.d	$r12,$r12,0x2
900000000000d1ac:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000d1b0:	2880018c 	ld.w	$r12,$r12,0
900000000000d1b4:	0015018d 	move	$r13,$r12
900000000000d1b8:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000000d1bc:	5c00f1ac 	bne	$r13,$r12,240(0xf0) # 900000000000d2ac <phi_test_condvar+0x12c>
900000000000d1c0:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d1c4:	0280118c 	addi.w	$r12,$r12,4(0x4)
900000000000d1c8:	0015018d 	move	$r13,$r12
900000000000d1cc:	0280140c 	addi.w	$r12,$r0,5(0x5)
900000000000d1d0:	0020b1ae 	mod.w	$r14,$r13,$r12
900000000000d1d4:	5c000980 	bne	$r12,$r0,8(0x8) # 900000000000d1dc <phi_test_condvar+0x5c>
900000000000d1d8:	002a0007 	break	0x7
900000000000d1dc:	001501cc 	move	$r12,$r14
900000000000d1e0:	1c00428d 	pcaddu12i	$r13,532(0x214)
900000000000d1e4:	28d6c1ad 	ld.d	$r13,$r13,1456(0x5b0)
900000000000d1e8:	0041098c 	slli.d	$r12,$r12,0x2
900000000000d1ec:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000d1f0:	2880018c 	ld.w	$r12,$r12,0
900000000000d1f4:	0015018d 	move	$r13,$r12
900000000000d1f8:	0280080c 	addi.w	$r12,$r0,2(0x2)
900000000000d1fc:	5800b1ac 	beq	$r13,$r12,176(0xb0) # 900000000000d2ac <phi_test_condvar+0x12c>
            &&state_condvar[RIGHT]!=EATING) {
900000000000d200:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d204:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000000d208:	0015018d 	move	$r13,$r12
900000000000d20c:	0280140c 	addi.w	$r12,$r0,5(0x5)
900000000000d210:	0020b1ae 	mod.w	$r14,$r13,$r12
900000000000d214:	5c000980 	bne	$r12,$r0,8(0x8) # 900000000000d21c <phi_test_condvar+0x9c>
900000000000d218:	002a0007 	break	0x7
900000000000d21c:	001501cc 	move	$r12,$r14
900000000000d220:	1c00428d 	pcaddu12i	$r13,532(0x214)
900000000000d224:	28d5c1ad 	ld.d	$r13,$r13,1392(0x570)
900000000000d228:	0041098c 	slli.d	$r12,$r12,0x2
900000000000d22c:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000d230:	2880018c 	ld.w	$r12,$r12,0
900000000000d234:	0015018d 	move	$r13,$r12
900000000000d238:	0280080c 	addi.w	$r12,$r0,2(0x2)
900000000000d23c:	580071ac 	beq	$r13,$r12,112(0x70) # 900000000000d2ac <phi_test_condvar+0x12c>
        kprintf("phi_test_condvar: state_condvar[%d] will eating\n",i);
900000000000d240:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d244:	00150185 	move	$r5,$r12
900000000000d248:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000d24c:	02f18084 	addi.d	$r4,$r4,-928(0xc60)
900000000000d250:	576bcfff 	bl	-37940(0xfff6bcc) # 9000000000003e1c <kprintf>
        state_condvar[i] = EATING ;
900000000000d254:	1c00428d 	pcaddu12i	$r13,532(0x214)
900000000000d258:	28d4f1ad 	ld.d	$r13,$r13,1340(0x53c)
900000000000d25c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d260:	0041098c 	slli.d	$r12,$r12,0x2
900000000000d264:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000d268:	0280080d 	addi.w	$r13,$r0,2(0x2)
900000000000d26c:	2980018d 	st.w	$r13,$r12,0
        kprintf("phi_test_condvar: signal self_cv[%d] \n",i);
900000000000d270:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d274:	00150185 	move	$r5,$r12
900000000000d278:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000d27c:	02f1a084 	addi.d	$r4,$r4,-920(0xc68)
900000000000d280:	576b9fff 	bl	-37988(0xfff6b9c) # 9000000000003e1c <kprintf>
        cond_signal(&mtp->cv[i]) ;
900000000000d284:	1c0002ec 	pcaddu12i	$r12,23(0x17)
900000000000d288:	02f7b18c 	addi.d	$r12,$r12,-532(0xdec)
900000000000d28c:	28c0018c 	ld.d	$r12,$r12,0
900000000000d290:	28c0e18d 	ld.d	$r13,$r12,56(0x38)
900000000000d294:	28bfb2ce 	ld.w	$r14,$r22,-20(0xfec)
900000000000d298:	0280a00c 	addi.w	$r12,$r0,40(0x28)
900000000000d29c:	001db1cc 	mul.d	$r12,$r14,$r12
900000000000d2a0:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000d2a4:	00150184 	move	$r4,$r12
900000000000d2a8:	54069000 	bl	1680(0x690) # 900000000000d938 <cond_signal>
    }
}
900000000000d2ac:	03400000 	andi	$r0,$r0,0x0
900000000000d2b0:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000000d2b4:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000000d2b8:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000000d2bc:	4c000020 	jirl	$r0,$r1,0

900000000000d2c0 <phi_take_forks_condvar>:


void phi_take_forks_condvar(int i) {
900000000000d2c0:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000d2c4:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000000d2c8:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000000d2cc:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000000d2d0:	0015008c 	move	$r12,$r4
900000000000d2d4:	0040818c 	slli.w	$r12,$r12,0x0
900000000000d2d8:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
     down(&(mtp->mutex));
900000000000d2dc:	1c0002ec 	pcaddu12i	$r12,23(0x17)
900000000000d2e0:	02f6518c 	addi.d	$r12,$r12,-620(0xd94)
900000000000d2e4:	28c0018c 	ld.d	$r12,$r12,0
900000000000d2e8:	00150184 	move	$r4,$r12
900000000000d2ec:	540b3c00 	bl	2876(0xb3c) # 900000000000de28 <down>
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I am hungry
     // try to get fork
      // I am hungry
      state_condvar[i]=HUNGRY; 
900000000000d2f0:	1c00428d 	pcaddu12i	$r13,532(0x214)
900000000000d2f4:	28d281ad 	ld.d	$r13,$r13,1184(0x4a0)
900000000000d2f8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d2fc:	0041098c 	slli.d	$r12,$r12,0x2
900000000000d300:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000d304:	0280040d 	addi.w	$r13,$r0,1(0x1)
900000000000d308:	2980018d 	st.w	$r13,$r12,0
      // try to get fork
      phi_test_condvar(i); 
900000000000d30c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d310:	00150184 	move	$r4,$r12
900000000000d314:	57fe6fff 	bl	-404(0xffffe6c) # 900000000000d180 <phi_test_condvar>
      if (state_condvar[i] != EATING) {
900000000000d318:	1c00428d 	pcaddu12i	$r13,532(0x214)
900000000000d31c:	28d1e1ad 	ld.d	$r13,$r13,1144(0x478)
900000000000d320:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d324:	0041098c 	slli.d	$r12,$r12,0x2
900000000000d328:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000d32c:	2880018c 	ld.w	$r12,$r12,0
900000000000d330:	0015018d 	move	$r13,$r12
900000000000d334:	0280080c 	addi.w	$r12,$r0,2(0x2)
900000000000d338:	580041ac 	beq	$r13,$r12,64(0x40) # 900000000000d378 <phi_take_forks_condvar+0xb8>
          kprintf("phi_take_forks_condvar: %d didn't get fork and will wait\n",i);
900000000000d33c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d340:	00150185 	move	$r5,$r12
900000000000d344:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000d348:	02ef1084 	addi.d	$r4,$r4,-1084(0xbc4)
900000000000d34c:	576ad3ff 	bl	-38192(0xfff6ad0) # 9000000000003e1c <kprintf>
          cond_wait(&mtp->cv[i]);
900000000000d350:	1c0002ec 	pcaddu12i	$r12,23(0x17)
900000000000d354:	02f4818c 	addi.d	$r12,$r12,-736(0xd20)
900000000000d358:	28c0018c 	ld.d	$r12,$r12,0
900000000000d35c:	28c0e18d 	ld.d	$r13,$r12,56(0x38)
900000000000d360:	28bfb2ce 	ld.w	$r14,$r22,-20(0xfec)
900000000000d364:	0280a00c 	addi.w	$r12,$r0,40(0x28)
900000000000d368:	001db1cc 	mul.d	$r12,$r14,$r12
900000000000d36c:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000d370:	00150184 	move	$r4,$r12
900000000000d374:	54069800 	bl	1688(0x698) # 900000000000da0c <cond_wait>
      }
//--------leave routine in monitor--------------
#endif
      if(mtp->next_count>0)
900000000000d378:	1c0002ec 	pcaddu12i	$r12,23(0x17)
900000000000d37c:	02f3e18c 	addi.d	$r12,$r12,-776(0xcf8)
900000000000d380:	28c0018c 	ld.d	$r12,$r12,0
900000000000d384:	2880c18c 	ld.w	$r12,$r12,48(0x30)
900000000000d388:	6400200c 	bge	$r0,$r12,32(0x20) # 900000000000d3a8 <phi_take_forks_condvar+0xe8>
         up(&(mtp->next));
900000000000d38c:	1c0002ec 	pcaddu12i	$r12,23(0x17)
900000000000d390:	02f3918c 	addi.d	$r12,$r12,-796(0xce4)
900000000000d394:	28c0018c 	ld.d	$r12,$r12,0
900000000000d398:	02c0618c 	addi.d	$r12,$r12,24(0x18)
900000000000d39c:	00150184 	move	$r4,$r12
900000000000d3a0:	540a5400 	bl	2644(0xa54) # 900000000000ddf4 <up>
      else
         up(&(mtp->mutex));
}
900000000000d3a4:	50001800 	b	24(0x18) # 900000000000d3bc <phi_take_forks_condvar+0xfc>
         up(&(mtp->mutex));
900000000000d3a8:	1c0002ec 	pcaddu12i	$r12,23(0x17)
900000000000d3ac:	02f3218c 	addi.d	$r12,$r12,-824(0xcc8)
900000000000d3b0:	28c0018c 	ld.d	$r12,$r12,0
900000000000d3b4:	00150184 	move	$r4,$r12
900000000000d3b8:	540a3c00 	bl	2620(0xa3c) # 900000000000ddf4 <up>
}
900000000000d3bc:	03400000 	andi	$r0,$r0,0x0
900000000000d3c0:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000000d3c4:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000000d3c8:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000000d3cc:	4c000020 	jirl	$r0,$r1,0

900000000000d3d0 <phi_put_forks_condvar>:

void phi_put_forks_condvar(int i) {
900000000000d3d0:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000d3d4:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000000d3d8:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000000d3dc:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000000d3e0:	0015008c 	move	$r12,$r4
900000000000d3e4:	0040818c 	slli.w	$r12,$r12,0x0
900000000000d3e8:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
     down(&(mtp->mutex));
900000000000d3ec:	1c0002ec 	pcaddu12i	$r12,23(0x17)
900000000000d3f0:	02f2118c 	addi.d	$r12,$r12,-892(0xc84)
900000000000d3f4:	28c0018c 	ld.d	$r12,$r12,0
900000000000d3f8:	00150184 	move	$r4,$r12
900000000000d3fc:	540a2c00 	bl	2604(0xa2c) # 900000000000de28 <down>
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I ate over
     // test left and right neighbors
      // I ate over 
      state_condvar[i]=THINKING;
900000000000d400:	1c00428d 	pcaddu12i	$r13,532(0x214)
900000000000d404:	28ce41ad 	ld.d	$r13,$r13,912(0x390)
900000000000d408:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d40c:	0041098c 	slli.d	$r12,$r12,0x2
900000000000d410:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000d414:	29800180 	st.w	$r0,$r12,0
      // test left and right neighbors
      phi_test_condvar(LEFT);
900000000000d418:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d41c:	0280118c 	addi.w	$r12,$r12,4(0x4)
900000000000d420:	0015018d 	move	$r13,$r12
900000000000d424:	0280140c 	addi.w	$r12,$r0,5(0x5)
900000000000d428:	0020b1ae 	mod.w	$r14,$r13,$r12
900000000000d42c:	5c000980 	bne	$r12,$r0,8(0x8) # 900000000000d434 <phi_put_forks_condvar+0x64>
900000000000d430:	002a0007 	break	0x7
900000000000d434:	001501cc 	move	$r12,$r14
900000000000d438:	00150184 	move	$r4,$r12
900000000000d43c:	57fd47ff 	bl	-700(0xffffd44) # 900000000000d180 <phi_test_condvar>
      phi_test_condvar(RIGHT);
900000000000d440:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d444:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000000d448:	0015018d 	move	$r13,$r12
900000000000d44c:	0280140c 	addi.w	$r12,$r0,5(0x5)
900000000000d450:	0020b1ae 	mod.w	$r14,$r13,$r12
900000000000d454:	5c000980 	bne	$r12,$r0,8(0x8) # 900000000000d45c <phi_put_forks_condvar+0x8c>
900000000000d458:	002a0007 	break	0x7
900000000000d45c:	001501cc 	move	$r12,$r14
900000000000d460:	00150184 	move	$r4,$r12
900000000000d464:	57fd1fff 	bl	-740(0xffffd1c) # 900000000000d180 <phi_test_condvar>
//--------leave routine in monitor--------------
#endif
     if(mtp->next_count>0)
900000000000d468:	1c0002ec 	pcaddu12i	$r12,23(0x17)
900000000000d46c:	02f0218c 	addi.d	$r12,$r12,-1016(0xc08)
900000000000d470:	28c0018c 	ld.d	$r12,$r12,0
900000000000d474:	2880c18c 	ld.w	$r12,$r12,48(0x30)
900000000000d478:	6400200c 	bge	$r0,$r12,32(0x20) # 900000000000d498 <phi_put_forks_condvar+0xc8>
        up(&(mtp->next));
900000000000d47c:	1c0002ec 	pcaddu12i	$r12,23(0x17)
900000000000d480:	02efd18c 	addi.d	$r12,$r12,-1036(0xbf4)
900000000000d484:	28c0018c 	ld.d	$r12,$r12,0
900000000000d488:	02c0618c 	addi.d	$r12,$r12,24(0x18)
900000000000d48c:	00150184 	move	$r4,$r12
900000000000d490:	54096400 	bl	2404(0x964) # 900000000000ddf4 <up>
     else
        up(&(mtp->mutex));
}
900000000000d494:	50001800 	b	24(0x18) # 900000000000d4ac <phi_put_forks_condvar+0xdc>
        up(&(mtp->mutex));
900000000000d498:	1c0002ec 	pcaddu12i	$r12,23(0x17)
900000000000d49c:	02ef618c 	addi.d	$r12,$r12,-1064(0xbd8)
900000000000d4a0:	28c0018c 	ld.d	$r12,$r12,0
900000000000d4a4:	00150184 	move	$r4,$r12
900000000000d4a8:	54094c00 	bl	2380(0x94c) # 900000000000ddf4 <up>
}
900000000000d4ac:	03400000 	andi	$r0,$r0,0x0
900000000000d4b0:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000000d4b4:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000000d4b8:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000000d4bc:	4c000020 	jirl	$r0,$r1,0

900000000000d4c0 <philosopher_using_condvar>:

//---------- philosophers using monitor (condition variable) ----------------------
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
900000000000d4c0:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000d4c4:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000000d4c8:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000000d4cc:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000d4d0:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
  
    int i, iter=0;
900000000000d4d4:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
    i=(int)arg;
900000000000d4d8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000d4dc:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
    kprintf("I am No.%d philosopher_condvar\n",i);
900000000000d4e0:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000000d4e4:	00150185 	move	$r5,$r12
900000000000d4e8:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000d4ec:	02e98084 	addi.d	$r4,$r4,-1440(0xa60)
900000000000d4f0:	57692fff 	bl	-38612(0xfff692c) # 9000000000003e1c <kprintf>
    while(iter++<TIMES)
900000000000d4f4:	50006400 	b	100(0x64) # 900000000000d558 <philosopher_using_condvar+0x98>
    { /* iterate*/
        kprintf("Iter %d, No.%d philosopher_condvar is thinking\n",iter,i); /* thinking*/
900000000000d4f8:	28bfa2cd 	ld.w	$r13,$r22,-24(0xfe8)
900000000000d4fc:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d500:	001501a6 	move	$r6,$r13
900000000000d504:	00150185 	move	$r5,$r12
900000000000d508:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000d50c:	02e98084 	addi.d	$r4,$r4,-1440(0xa60)
900000000000d510:	57690fff 	bl	-38644(0xfff690c) # 9000000000003e1c <kprintf>
        do_sleep(SLEEP_TIME);
900000000000d514:	02802804 	addi.w	$r4,$r0,10(0xa)
900000000000d518:	5443e000 	bl	17376(0x43e0) # 90000000000118f8 <do_sleep>
        phi_take_forks_condvar(i); 
900000000000d51c:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000000d520:	00150184 	move	$r4,$r12
900000000000d524:	57fd9fff 	bl	-612(0xffffd9c) # 900000000000d2c0 <phi_take_forks_condvar>
        /* need two forks, maybe blocked */
        kprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
900000000000d528:	28bfa2cd 	ld.w	$r13,$r22,-24(0xfe8)
900000000000d52c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d530:	001501a6 	move	$r6,$r13
900000000000d534:	00150185 	move	$r5,$r12
900000000000d538:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000d53c:	02e98084 	addi.d	$r4,$r4,-1440(0xa60)
900000000000d540:	5768dfff 	bl	-38692(0xfff68dc) # 9000000000003e1c <kprintf>
        do_sleep(SLEEP_TIME);
900000000000d544:	02802804 	addi.w	$r4,$r0,10(0xa)
900000000000d548:	5443b000 	bl	17328(0x43b0) # 90000000000118f8 <do_sleep>
        phi_put_forks_condvar(i); 
900000000000d54c:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000000d550:	00150184 	move	$r4,$r12
900000000000d554:	57fe7fff 	bl	-388(0xffffe7c) # 900000000000d3d0 <phi_put_forks_condvar>
    while(iter++<TIMES)
900000000000d558:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d55c:	0280058d 	addi.w	$r13,$r12,1(0x1)
900000000000d560:	29bfb2cd 	st.w	$r13,$r22,-20(0xfec)
900000000000d564:	0015018d 	move	$r13,$r12
900000000000d568:	02800c0c 	addi.w	$r12,$r0,3(0x3)
900000000000d56c:	67ff8d8d 	bge	$r12,$r13,-116(0x3ff8c) # 900000000000d4f8 <philosopher_using_condvar+0x38>
        /* return two forks back*/
    }
    kprintf("No.%d philosopher_condvar quit\n",i);
900000000000d570:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000000d574:	00150185 	move	$r5,$r12
900000000000d578:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000d57c:	02e94084 	addi.d	$r4,$r4,-1456(0xa50)
900000000000d580:	57689fff 	bl	-38756(0xfff689c) # 9000000000003e1c <kprintf>
    return 0;    
900000000000d584:	0015000c 	move	$r12,$r0
}
900000000000d588:	00150184 	move	$r4,$r12
900000000000d58c:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000000d590:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000000d594:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000d598:	4c000020 	jirl	$r0,$r1,0

900000000000d59c <check_sync>:

void check_sync(void){
900000000000d59c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000d5a0:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000000d5a4:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000000d5a8:	02c08076 	addi.d	$r22,$r3,32(0x20)
#ifdef LAB7_EX1
    int i;

    //check semaphore
    sem_init(&mutex, 1);
900000000000d5ac:	02800405 	addi.w	$r5,$r0,1(0x1)
900000000000d5b0:	1c004284 	pcaddu12i	$r4,532(0x214)
900000000000d5b4:	28c6a084 	ld.d	$r4,$r4,424(0x1a8)
900000000000d5b8:	54061400 	bl	1556(0x614) # 900000000000dbcc <sem_init>
    for(i=0;i<N;i++){
900000000000d5bc:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
900000000000d5c0:	5000c400 	b	196(0xc4) # 900000000000d684 <check_sync+0xe8>
        sem_init(&s[i], 0);
900000000000d5c4:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
900000000000d5c8:	0280600c 	addi.w	$r12,$r0,24(0x18)
900000000000d5cc:	001db1ad 	mul.d	$r13,$r13,$r12
900000000000d5d0:	1c00428c 	pcaddu12i	$r12,532(0x214)
900000000000d5d4:	28c7818c 	ld.d	$r12,$r12,480(0x1e0)
900000000000d5d8:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000d5dc:	00150005 	move	$r5,$r0
900000000000d5e0:	00150184 	move	$r4,$r12
900000000000d5e4:	5405e800 	bl	1512(0x5e8) # 900000000000dbcc <sem_init>
        int pid = kernel_thread(philosopher_using_semaphore, (void *)i, 0);
900000000000d5e8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d5ec:	00150006 	move	$r6,$r0
900000000000d5f0:	00150185 	move	$r5,$r12
900000000000d5f4:	1c000004 	pcaddu12i	$r4,0
900000000000d5f8:	02eac084 	addi.d	$r4,$r4,-1360(0xab0)
900000000000d5fc:	5420c800 	bl	8392(0x20c8) # 900000000000f6c4 <kernel_thread>
900000000000d600:	0015008c 	move	$r12,$r4
900000000000d604:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
        if (pid <= 0) {
900000000000d608:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000000d60c:	60001c0c 	blt	$r0,$r12,28(0x1c) # 900000000000d628 <check_sync+0x8c>
            panic("create No.%d philosopher_using_semaphore failed.\n");
900000000000d610:	1c000286 	pcaddu12i	$r6,20(0x14)
900000000000d614:	02e760c6 	addi.d	$r6,$r6,-1576(0x9d8)
900000000000d618:	02840405 	addi.w	$r5,$r0,257(0x101)
900000000000d61c:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000d620:	02e81084 	addi.d	$r4,$r4,-1532(0xa04)
900000000000d624:	57f65fff 	bl	-2468(0xffff65c) # 900000000000cc80 <__panic>
        }
        philosopher_proc_sema[i] = find_proc(pid);
900000000000d628:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000000d62c:	00150184 	move	$r4,$r12
900000000000d630:	541fcc00 	bl	8140(0x1fcc) # 900000000000f5fc <find_proc>
900000000000d634:	0015008e 	move	$r14,$r4
900000000000d638:	1c00428d 	pcaddu12i	$r13,532(0x214)
900000000000d63c:	28c5c1ad 	ld.d	$r13,$r13,368(0x170)
900000000000d640:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d644:	00410d8c 	slli.d	$r12,$r12,0x3
900000000000d648:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000d64c:	29c0018e 	st.d	$r14,$r12,0
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
900000000000d650:	1c00428d 	pcaddu12i	$r13,532(0x214)
900000000000d654:	28c561ad 	ld.d	$r13,$r13,344(0x158)
900000000000d658:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d65c:	00410d8c 	slli.d	$r12,$r12,0x3
900000000000d660:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000d664:	28c0018c 	ld.d	$r12,$r12,0
900000000000d668:	1c000285 	pcaddu12i	$r5,20(0x14)
900000000000d66c:	02e740a5 	addi.d	$r5,$r5,-1584(0x9d0)
900000000000d670:	00150184 	move	$r4,$r12
900000000000d674:	54193400 	bl	6452(0x1934) # 900000000000efa8 <set_proc_name>
    for(i=0;i<N;i++){
900000000000d678:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d67c:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000000d680:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000000d684:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d688:	0015018d 	move	$r13,$r12
900000000000d68c:	0280100c 	addi.w	$r12,$r0,4(0x4)
900000000000d690:	67ff358d 	bge	$r12,$r13,-204(0x3ff34) # 900000000000d5c4 <check_sync+0x28>
    }

    //check condition variable
    monitor_init(&mt, N);
900000000000d694:	02801405 	addi.w	$r5,$r0,5(0x5)
900000000000d698:	1c004284 	pcaddu12i	$r4,532(0x214)
900000000000d69c:	28c34084 	ld.d	$r4,$r4,208(0xd0)
900000000000d6a0:	54015400 	bl	340(0x154) # 900000000000d7f4 <monitor_init>
    for(i=0;i<N;i++){
900000000000d6a4:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
900000000000d6a8:	5000b800 	b	184(0xb8) # 900000000000d760 <check_sync+0x1c4>
        state_condvar[i]=THINKING;
900000000000d6ac:	1c00428d 	pcaddu12i	$r13,532(0x214)
900000000000d6b0:	28c391ad 	ld.d	$r13,$r13,228(0xe4)
900000000000d6b4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d6b8:	0041098c 	slli.d	$r12,$r12,0x2
900000000000d6bc:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000d6c0:	29800180 	st.w	$r0,$r12,0
        int pid = kernel_thread(philosopher_using_condvar, (void *)i, 0);
900000000000d6c4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d6c8:	00150006 	move	$r6,$r0
900000000000d6cc:	00150185 	move	$r5,$r12
900000000000d6d0:	1c000004 	pcaddu12i	$r4,0
900000000000d6d4:	02f7c084 	addi.d	$r4,$r4,-528(0xdf0)
900000000000d6d8:	541fec00 	bl	8172(0x1fec) # 900000000000f6c4 <kernel_thread>
900000000000d6dc:	0015008c 	move	$r12,$r4
900000000000d6e0:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
        if (pid <= 0) {
900000000000d6e4:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000000d6e8:	60001c0c 	blt	$r0,$r12,28(0x1c) # 900000000000d704 <check_sync+0x168>
            panic("create No.%d philosopher_using_condvar failed.\n");
900000000000d6ec:	1c000286 	pcaddu12i	$r6,20(0x14)
900000000000d6f0:	02e590c6 	addi.d	$r6,$r6,-1692(0x964)
900000000000d6f4:	02843405 	addi.w	$r5,$r0,269(0x10d)
900000000000d6f8:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000d6fc:	02e4a084 	addi.d	$r4,$r4,-1752(0x928)
900000000000d700:	57f583ff 	bl	-2688(0xffff580) # 900000000000cc80 <__panic>
        }
        philosopher_proc_condvar[i] = find_proc(pid);
900000000000d704:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000000d708:	00150184 	move	$r4,$r12
900000000000d70c:	541ef000 	bl	7920(0x1ef0) # 900000000000f5fc <find_proc>
900000000000d710:	0015008e 	move	$r14,$r4
900000000000d714:	1c00428d 	pcaddu12i	$r13,532(0x214)
900000000000d718:	28c071ad 	ld.d	$r13,$r13,28(0x1c)
900000000000d71c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d720:	00410d8c 	slli.d	$r12,$r12,0x3
900000000000d724:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000d728:	29c0018e 	st.d	$r14,$r12,0
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
900000000000d72c:	1c00428d 	pcaddu12i	$r13,532(0x214)
900000000000d730:	28c011ad 	ld.d	$r13,$r13,4(0x4)
900000000000d734:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d738:	00410d8c 	slli.d	$r12,$r12,0x3
900000000000d73c:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000d740:	28c0018c 	ld.d	$r12,$r12,0
900000000000d744:	1c000285 	pcaddu12i	$r5,20(0x14)
900000000000d748:	02e4f0a5 	addi.d	$r5,$r5,-1732(0x93c)
900000000000d74c:	00150184 	move	$r4,$r12
900000000000d750:	54185800 	bl	6232(0x1858) # 900000000000efa8 <set_proc_name>
    for(i=0;i<N;i++){
900000000000d754:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d758:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000000d75c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000000d760:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d764:	0015018d 	move	$r13,$r12
900000000000d768:	0280100c 	addi.w	$r12,$r0,4(0x4)
900000000000d76c:	67ff418d 	bge	$r12,$r13,-192(0x3ff40) # 900000000000d6ac <check_sync+0x110>
    }
#endif
}
900000000000d770:	03400000 	andi	$r0,$r0,0x0
900000000000d774:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000000d778:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000000d77c:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000000d780:	4c000020 	jirl	$r0,$r1,0

900000000000d784 <fence_i>:
static void fence_i(void *va_start, int size) {
900000000000d784:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000d788:	29c0a076 	st.d	$r22,$r3,40(0x28)
900000000000d78c:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000d790:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000000d794:	001500ac 	move	$r12,$r5
900000000000d798:	0040818c 	slli.w	$r12,$r12,0x0
900000000000d79c:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
900000000000d7a0:	38720000 	dbar	0x0
    void *va_end = va_start + size;
900000000000d7a4:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
900000000000d7a8:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000d7ac:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000d7b0:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
900000000000d7b4:	50002000 	b	32(0x20) # 900000000000d7d4 <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
900000000000d7b8:	06000189 	cacop	0x9,$r12,0
900000000000d7bc:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
900000000000d7c0:	06000188 	cacop	0x8,$r12,0
900000000000d7c4:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
900000000000d7c8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000d7cc:	02c0418c 	addi.d	$r12,$r12,16(0x10)
900000000000d7d0:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
900000000000d7d4:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000d7d8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000d7dc:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 900000000000d7b8 <fence_i+0x34>
900000000000d7e0:	38728000 	ibar	0x0
}
900000000000d7e4:	03400000 	andi	$r0,$r0,0x0
900000000000d7e8:	28c0a076 	ld.d	$r22,$r3,40(0x28)
900000000000d7ec:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000d7f0:	4c000020 	jirl	$r0,$r1,0

900000000000d7f4 <monitor_init>:
#include <assert.h>


// Initialize monitor.
void     
monitor_init (monitor_t * mtp, size_t num_cv) {
900000000000d7f4:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000d7f8:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000000d7fc:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000000d800:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000d804:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000000d808:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
    int i;
    assert(num_cv>0);
900000000000d80c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000d810:	44001d80 	bnez	$r12,28(0x1c) # 900000000000d82c <monitor_init+0x38>
900000000000d814:	1c000286 	pcaddu12i	$r6,20(0x14)
900000000000d818:	02e230c6 	addi.d	$r6,$r6,-1908(0x88c)
900000000000d81c:	02802c05 	addi.w	$r5,$r0,11(0xb)
900000000000d820:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000d824:	02e28084 	addi.d	$r4,$r4,-1888(0x8a0)
900000000000d828:	57f45bff 	bl	-2984(0xffff458) # 900000000000cc80 <__panic>
    mtp->next_count = 0;
900000000000d82c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000d830:	2980c180 	st.w	$r0,$r12,48(0x30)
    mtp->cv = NULL;
900000000000d834:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000d838:	29c0e180 	st.d	$r0,$r12,56(0x38)
    sem_init(&(mtp->mutex), 1); //unlocked
900000000000d83c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000d840:	02800405 	addi.w	$r5,$r0,1(0x1)
900000000000d844:	00150184 	move	$r4,$r12
900000000000d848:	54038400 	bl	900(0x384) # 900000000000dbcc <sem_init>
    sem_init(&(mtp->next), 0);
900000000000d84c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000d850:	02c0618c 	addi.d	$r12,$r12,24(0x18)
900000000000d854:	00150005 	move	$r5,$r0
900000000000d858:	00150184 	move	$r4,$r12
900000000000d85c:	54037000 	bl	880(0x370) # 900000000000dbcc <sem_init>
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
900000000000d860:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000000d864:	0280a00c 	addi.w	$r12,$r0,40(0x28)
900000000000d868:	001db1ac 	mul.d	$r12,$r13,$r12
900000000000d86c:	00150184 	move	$r4,$r12
900000000000d870:	579dcbff 	bl	-25144(0xfff9dc8) # 9000000000007638 <kmalloc>
900000000000d874:	0015008d 	move	$r13,$r4
900000000000d878:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000d87c:	29c0e18d 	st.d	$r13,$r12,56(0x38)
    assert(mtp->cv!=NULL);
900000000000d880:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000d884:	28c0e18c 	ld.d	$r12,$r12,56(0x38)
900000000000d888:	44001d80 	bnez	$r12,28(0x1c) # 900000000000d8a4 <monitor_init+0xb0>
900000000000d88c:	1c000286 	pcaddu12i	$r6,20(0x14)
900000000000d890:	02e130c6 	addi.d	$r6,$r6,-1972(0x84c)
900000000000d894:	02804405 	addi.w	$r5,$r0,17(0x11)
900000000000d898:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000000d89c:	02e0a084 	addi.d	$r4,$r4,-2008(0x828)
900000000000d8a0:	57f3e3ff 	bl	-3104(0xffff3e0) # 900000000000cc80 <__panic>
    for(i=0; i<num_cv; i++){
900000000000d8a4:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
900000000000d8a8:	50007000 	b	112(0x70) # 900000000000d918 <monitor_init+0x124>
        mtp->cv[i].count=0;
900000000000d8ac:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000d8b0:	28c0e18d 	ld.d	$r13,$r12,56(0x38)
900000000000d8b4:	28bfb2ce 	ld.w	$r14,$r22,-20(0xfec)
900000000000d8b8:	0280a00c 	addi.w	$r12,$r0,40(0x28)
900000000000d8bc:	001db1cc 	mul.d	$r12,$r14,$r12
900000000000d8c0:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000d8c4:	29806180 	st.w	$r0,$r12,24(0x18)
        sem_init(&(mtp->cv[i].sem),0);
900000000000d8c8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000d8cc:	28c0e18d 	ld.d	$r13,$r12,56(0x38)
900000000000d8d0:	28bfb2ce 	ld.w	$r14,$r22,-20(0xfec)
900000000000d8d4:	0280a00c 	addi.w	$r12,$r0,40(0x28)
900000000000d8d8:	001db1cc 	mul.d	$r12,$r14,$r12
900000000000d8dc:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000d8e0:	00150005 	move	$r5,$r0
900000000000d8e4:	00150184 	move	$r4,$r12
900000000000d8e8:	5402e400 	bl	740(0x2e4) # 900000000000dbcc <sem_init>
        mtp->cv[i].owner=mtp;
900000000000d8ec:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000d8f0:	28c0e18d 	ld.d	$r13,$r12,56(0x38)
900000000000d8f4:	28bfb2ce 	ld.w	$r14,$r22,-20(0xfec)
900000000000d8f8:	0280a00c 	addi.w	$r12,$r0,40(0x28)
900000000000d8fc:	001db1cc 	mul.d	$r12,$r14,$r12
900000000000d900:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000d904:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000d908:	29c0818d 	st.d	$r13,$r12,32(0x20)
    for(i=0; i<num_cv; i++){
900000000000d90c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d910:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000000d914:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000000d918:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000d91c:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000000d920:	6bff8d8d 	bltu	$r12,$r13,-116(0x3ff8c) # 900000000000d8ac <monitor_init+0xb8>
    }
}
900000000000d924:	03400000 	andi	$r0,$r0,0x0
900000000000d928:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000000d92c:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000000d930:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000d934:	4c000020 	jirl	$r0,$r1,0

900000000000d938 <cond_signal>:

// Unlock one of threads waiting on the condition variable. 
void 
cond_signal (condvar_t *cvp) {
900000000000d938:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000d93c:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000000d940:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000000d944:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000000d948:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
#ifdef LAB7_EX1
   //LAB7 EXERCISE1: YOUR CODE
   kprintf("cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);  
900000000000d94c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000d950:	2880618d 	ld.w	$r13,$r12,24(0x18)
900000000000d954:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000d958:	28c0818c 	ld.d	$r12,$r12,32(0x20)
900000000000d95c:	2880c18c 	ld.w	$r12,$r12,48(0x30)
900000000000d960:	00150187 	move	$r7,$r12
900000000000d964:	001501a6 	move	$r6,$r13
900000000000d968:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
900000000000d96c:	1c000264 	pcaddu12i	$r4,19(0x13)
900000000000d970:	02de3084 	addi.d	$r4,$r4,1932(0x78c)
900000000000d974:	5764abff 	bl	-39768(0xfff64a8) # 9000000000003e1c <kprintf>
   *             mt.next_count--;
   *          }
   *       }
   */
#endif
     if(cvp->count>0) {
900000000000d978:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000d97c:	2880618c 	ld.w	$r12,$r12,24(0x18)
900000000000d980:	64004c0c 	bge	$r0,$r12,76(0x4c) # 900000000000d9cc <cond_signal+0x94>
        cvp->owner->next_count ++;
900000000000d984:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000d988:	28c0818c 	ld.d	$r12,$r12,32(0x20)
900000000000d98c:	2880c18d 	ld.w	$r13,$r12,48(0x30)
900000000000d990:	028005ad 	addi.w	$r13,$r13,1(0x1)
900000000000d994:	2980c18d 	st.w	$r13,$r12,48(0x30)
        up(&(cvp->sem));
900000000000d998:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000d99c:	00150184 	move	$r4,$r12
900000000000d9a0:	54045400 	bl	1108(0x454) # 900000000000ddf4 <up>
        down(&(cvp->owner->next));
900000000000d9a4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000d9a8:	28c0818c 	ld.d	$r12,$r12,32(0x20)
900000000000d9ac:	02c0618c 	addi.d	$r12,$r12,24(0x18)
900000000000d9b0:	00150184 	move	$r4,$r12
900000000000d9b4:	54047400 	bl	1140(0x474) # 900000000000de28 <down>
        cvp->owner->next_count --;
900000000000d9b8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000d9bc:	28c0818c 	ld.d	$r12,$r12,32(0x20)
900000000000d9c0:	2880c18d 	ld.w	$r13,$r12,48(0x30)
900000000000d9c4:	02bffdad 	addi.w	$r13,$r13,-1(0xfff)
900000000000d9c8:	2980c18d 	st.w	$r13,$r12,48(0x30)
      }
   kprintf("cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
900000000000d9cc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000d9d0:	2880618d 	ld.w	$r13,$r12,24(0x18)
900000000000d9d4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000d9d8:	28c0818c 	ld.d	$r12,$r12,32(0x20)
900000000000d9dc:	2880c18c 	ld.w	$r12,$r12,48(0x30)
900000000000d9e0:	00150187 	move	$r7,$r12
900000000000d9e4:	001501a6 	move	$r6,$r13
900000000000d9e8:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
900000000000d9ec:	1c000264 	pcaddu12i	$r4,19(0x13)
900000000000d9f0:	02dd5084 	addi.d	$r4,$r4,1876(0x754)
900000000000d9f4:	57642bff 	bl	-39896(0xfff6428) # 9000000000003e1c <kprintf>
}
900000000000d9f8:	03400000 	andi	$r0,$r0,0x0
900000000000d9fc:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000000da00:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000000da04:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000000da08:	4c000020 	jirl	$r0,$r1,0

900000000000da0c <cond_wait>:

// Suspend calling thread on a condition variable waiting for condition Atomically unlocks 
// mutex and suspends calling thread on conditional variable after waking up locks mutex. Notice: mp is mutex semaphore for monitor's procedures
void
cond_wait (condvar_t *cvp) {
900000000000da0c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000da10:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000000da14:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000000da18:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000000da1c:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
#ifdef LAB7_EX1
    //LAB7 EXERCISE1: YOUR CODE
    kprintf("cond_wait begin:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
900000000000da20:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000da24:	2880618d 	ld.w	$r13,$r12,24(0x18)
900000000000da28:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000da2c:	28c0818c 	ld.d	$r12,$r12,32(0x20)
900000000000da30:	2880c18c 	ld.w	$r12,$r12,48(0x30)
900000000000da34:	00150187 	move	$r7,$r12
900000000000da38:	001501a6 	move	$r6,$r13
900000000000da3c:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
900000000000da40:	1c000264 	pcaddu12i	$r4,19(0x13)
900000000000da44:	02dd2084 	addi.d	$r4,$r4,1864(0x748)
900000000000da48:	5763d7ff 	bl	-39980(0xfff63d4) # 9000000000003e1c <kprintf>
    *            signal(mt.mutex);
    *         wait(cv.sem);
    *         cv.count --;
    */
#endif
      cvp->count++;
900000000000da4c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000da50:	2880618c 	ld.w	$r12,$r12,24(0x18)
900000000000da54:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000000da58:	0015018d 	move	$r13,$r12
900000000000da5c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000da60:	2980618d 	st.w	$r13,$r12,24(0x18)
      if(cvp->owner->next_count > 0)
900000000000da64:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000da68:	28c0818c 	ld.d	$r12,$r12,32(0x20)
900000000000da6c:	2880c18c 	ld.w	$r12,$r12,48(0x30)
900000000000da70:	64001c0c 	bge	$r0,$r12,28(0x1c) # 900000000000da8c <cond_wait+0x80>
         up(&(cvp->owner->next));
900000000000da74:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000da78:	28c0818c 	ld.d	$r12,$r12,32(0x20)
900000000000da7c:	02c0618c 	addi.d	$r12,$r12,24(0x18)
900000000000da80:	00150184 	move	$r4,$r12
900000000000da84:	54037000 	bl	880(0x370) # 900000000000ddf4 <up>
900000000000da88:	50001400 	b	20(0x14) # 900000000000da9c <cond_wait+0x90>
      else
         up(&(cvp->owner->mutex));
900000000000da8c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000da90:	28c0818c 	ld.d	$r12,$r12,32(0x20)
900000000000da94:	00150184 	move	$r4,$r12
900000000000da98:	54035c00 	bl	860(0x35c) # 900000000000ddf4 <up>
      down(&(cvp->sem));
900000000000da9c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000daa0:	00150184 	move	$r4,$r12
900000000000daa4:	54038400 	bl	900(0x384) # 900000000000de28 <down>
      cvp->count --;
900000000000daa8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000daac:	2880618c 	ld.w	$r12,$r12,24(0x18)
900000000000dab0:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
900000000000dab4:	0015018d 	move	$r13,$r12
900000000000dab8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000dabc:	2980618d 	st.w	$r13,$r12,24(0x18)
    kprintf("cond_wait end:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
900000000000dac0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000dac4:	2880618d 	ld.w	$r13,$r12,24(0x18)
900000000000dac8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000dacc:	28c0818c 	ld.d	$r12,$r12,32(0x20)
900000000000dad0:	2880c18c 	ld.w	$r12,$r12,48(0x30)
900000000000dad4:	00150187 	move	$r7,$r12
900000000000dad8:	001501a6 	move	$r6,$r13
900000000000dadc:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
900000000000dae0:	1c000264 	pcaddu12i	$r4,19(0x13)
900000000000dae4:	02dbc084 	addi.d	$r4,$r4,1776(0x6f0)
900000000000dae8:	576337ff 	bl	-40140(0xfff6334) # 9000000000003e1c <kprintf>
}
900000000000daec:	03400000 	andi	$r0,$r0,0x0
900000000000daf0:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000000daf4:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000000daf8:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000000dafc:	4c000020 	jirl	$r0,$r1,0

900000000000db00 <fence_i>:
static void fence_i(void *va_start, int size) {
900000000000db00:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000db04:	29c0a076 	st.d	$r22,$r3,40(0x28)
900000000000db08:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000db0c:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000000db10:	001500ac 	move	$r12,$r5
900000000000db14:	0040818c 	slli.w	$r12,$r12,0x0
900000000000db18:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
900000000000db1c:	38720000 	dbar	0x0
    void *va_end = va_start + size;
900000000000db20:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
900000000000db24:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000db28:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000db2c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
900000000000db30:	50002000 	b	32(0x20) # 900000000000db50 <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
900000000000db34:	06000189 	cacop	0x9,$r12,0
900000000000db38:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
900000000000db3c:	06000188 	cacop	0x8,$r12,0
900000000000db40:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
900000000000db44:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000db48:	02c0418c 	addi.d	$r12,$r12,16(0x10)
900000000000db4c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
900000000000db50:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000db54:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000db58:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 900000000000db34 <fence_i+0x34>
900000000000db5c:	38728000 	ibar	0x0
}
900000000000db60:	03400000 	andi	$r0,$r0,0x0
900000000000db64:	28c0a076 	ld.d	$r22,$r3,40(0x28)
900000000000db68:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000db6c:	4c000020 	jirl	$r0,$r1,0

900000000000db70 <__intr_save>:
{
900000000000db70:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000000db74:	29c02076 	st.d	$r22,$r3,8(0x8)
900000000000db78:	02c04076 	addi.d	$r22,$r3,16(0x10)
	return __csrxchg(0, LISA_CSR_CRMD_IE, LISA_CSR_CRMD);
900000000000db7c:	0015000d 	move	$r13,$r0
900000000000db80:	0280100c 	addi.w	$r12,$r0,4(0x4)
900000000000db84:	0400018d 	csrxchg	$r13,$r12,0x0
900000000000db88:	001501ac 	move	$r12,$r13
900000000000db8c:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
}
900000000000db90:	00150184 	move	$r4,$r12
900000000000db94:	28c02076 	ld.d	$r22,$r3,8(0x8)
900000000000db98:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000000db9c:	4c000020 	jirl	$r0,$r1,0

900000000000dba0 <__intr_restore>:
{
900000000000dba0:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000dba4:	29c06076 	st.d	$r22,$r3,24(0x18)
900000000000dba8:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000000dbac:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
	__csrxchg(flags, LISA_CSR_CRMD_IE, LISA_CSR_CRMD);
900000000000dbb0:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000000dbb4:	0280100d 	addi.w	$r13,$r0,4(0x4)
900000000000dbb8:	040001ac 	csrxchg	$r12,$r13,0x0
}
900000000000dbbc:	03400000 	andi	$r0,$r0,0x0
900000000000dbc0:	28c06076 	ld.d	$r22,$r3,24(0x18)
900000000000dbc4:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000000dbc8:	4c000020 	jirl	$r0,$r1,0

900000000000dbcc <sem_init>:
#include <proc.h>
#include <sync.h>
#include <assert.h>

void
sem_init(semaphore_t *sem, int value) {
900000000000dbcc:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000dbd0:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000000dbd4:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000000dbd8:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000000dbdc:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000000dbe0:	001500ac 	move	$r12,$r5
900000000000dbe4:	0040818c 	slli.w	$r12,$r12,0x0
900000000000dbe8:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
    sem->value = value;
900000000000dbec:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000dbf0:	28bf92cd 	ld.w	$r13,$r22,-28(0xfe4)
900000000000dbf4:	2980018d 	st.w	$r13,$r12,0
    wait_queue_init(&(sem->wait_queue));
900000000000dbf8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000dbfc:	02c0218c 	addi.d	$r12,$r12,8(0x8)
900000000000dc00:	00150184 	move	$r4,$r12
900000000000dc04:	5403c800 	bl	968(0x3c8) # 900000000000dfcc <wait_queue_init>
}
900000000000dc08:	03400000 	andi	$r0,$r0,0x0
900000000000dc0c:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000000dc10:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000000dc14:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000000dc18:	4c000020 	jirl	$r0,$r1,0

900000000000dc1c <__up>:

static __noinline void __up(semaphore_t *sem, uint32_t wait_state) {
900000000000dc1c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000dc20:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000000dc24:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000000dc28:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000dc2c:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000000dc30:	001500ac 	move	$r12,$r5
900000000000dc34:	0040818c 	slli.w	$r12,$r12,0x0
900000000000dc38:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
    bool intr_flag;
    local_intr_save(intr_flag);
900000000000dc3c:	57ff37ff 	bl	-204(0xfffff34) # 900000000000db70 <__intr_save>
900000000000dc40:	0015008c 	move	$r12,$r4
900000000000dc44:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    {
        wait_t *wait;
        if ((wait = wait_queue_first(&(sem->wait_queue))) == NULL) {
900000000000dc48:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000dc4c:	02c0218c 	addi.d	$r12,$r12,8(0x8)
900000000000dc50:	00150184 	move	$r4,$r12
900000000000dc54:	5406e800 	bl	1768(0x6e8) # 900000000000e33c <wait_queue_first>
900000000000dc58:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)
900000000000dc5c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000dc60:	44002180 	bnez	$r12,32(0x20) # 900000000000dc80 <__up+0x64>
            sem->value ++;
900000000000dc64:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000dc68:	2880018c 	ld.w	$r12,$r12,0
900000000000dc6c:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000000dc70:	0015018d 	move	$r13,$r12
900000000000dc74:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000dc78:	2980018d 	st.w	$r13,$r12,0
900000000000dc7c:	50005000 	b	80(0x50) # 900000000000dccc <__up+0xb0>
        }
        else {
            assert(wait->proc->wait_state == wait_state);
900000000000dc80:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000dc84:	28c0018c 	ld.d	$r12,$r12,0
900000000000dc88:	2883d18d 	ld.w	$r13,$r12,244(0xf4)
900000000000dc8c:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
900000000000dc90:	58001d8d 	beq	$r12,$r13,28(0x1c) # 900000000000dcac <__up+0x90>
900000000000dc94:	1c000266 	pcaddu12i	$r6,19(0x13)
900000000000dc98:	02d610c6 	addi.d	$r6,$r6,1412(0x584)
900000000000dc9c:	02806405 	addi.w	$r5,$r0,25(0x19)
900000000000dca0:	1c000264 	pcaddu12i	$r4,19(0x13)
900000000000dca4:	02d6c084 	addi.d	$r4,$r4,1456(0x5b0)
900000000000dca8:	57efdbff 	bl	-4136(0xfffefd8) # 900000000000cc80 <__panic>
            wakeup_wait(&(sem->wait_queue), wait, wait_state, 1);
900000000000dcac:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000dcb0:	02c0218c 	addi.d	$r12,$r12,8(0x8)
900000000000dcb4:	28bf52cd 	ld.w	$r13,$r22,-44(0xfd4)
900000000000dcb8:	02800407 	addi.w	$r7,$r0,1(0x1)
900000000000dcbc:	001501a6 	move	$r6,$r13
900000000000dcc0:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
900000000000dcc4:	00150184 	move	$r4,$r12
900000000000dcc8:	5407a000 	bl	1952(0x7a0) # 900000000000e468 <wakeup_wait>
        }
    }
    local_intr_restore(intr_flag);
900000000000dccc:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000dcd0:	00150184 	move	$r4,$r12
900000000000dcd4:	57fecfff 	bl	-308(0xffffecc) # 900000000000dba0 <__intr_restore>
}
900000000000dcd8:	03400000 	andi	$r0,$r0,0x0
900000000000dcdc:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000000dce0:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000000dce4:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000dce8:	4c000020 	jirl	$r0,$r1,0

900000000000dcec <__down>:

static __noinline uint32_t __down(semaphore_t *sem, uint32_t wait_state) {
900000000000dcec:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
900000000000dcf0:	29c16061 	st.d	$r1,$r3,88(0x58)
900000000000dcf4:	29c14076 	st.d	$r22,$r3,80(0x50)
900000000000dcf8:	02c18076 	addi.d	$r22,$r3,96(0x60)
900000000000dcfc:	29fea2c4 	st.d	$r4,$r22,-88(0xfa8)
900000000000dd00:	001500ac 	move	$r12,$r5
900000000000dd04:	0040818c 	slli.w	$r12,$r12,0x0
900000000000dd08:	29be92cc 	st.w	$r12,$r22,-92(0xfa4)
    bool intr_flag;
    local_intr_save(intr_flag);
900000000000dd0c:	57fe67ff 	bl	-412(0xffffe64) # 900000000000db70 <__intr_save>
900000000000dd10:	0015008c 	move	$r12,$r4
900000000000dd14:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    if (sem->value > 0) {
900000000000dd18:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000000dd1c:	2880018c 	ld.w	$r12,$r12,0
900000000000dd20:	6400300c 	bge	$r0,$r12,48(0x30) # 900000000000dd50 <__down+0x64>
        sem->value --;
900000000000dd24:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000000dd28:	2880018c 	ld.w	$r12,$r12,0
900000000000dd2c:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
900000000000dd30:	0015018d 	move	$r13,$r12
900000000000dd34:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000000dd38:	2980018d 	st.w	$r13,$r12,0
        local_intr_restore(intr_flag);
900000000000dd3c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000dd40:	00150184 	move	$r4,$r12
900000000000dd44:	57fe5fff 	bl	-420(0xffffe5c) # 900000000000dba0 <__intr_restore>
        return 0;
900000000000dd48:	0015000c 	move	$r12,$r0
900000000000dd4c:	50009400 	b	148(0x94) # 900000000000dde0 <__down+0xf4>
    }
    wait_t __wait, *wait = &__wait;
900000000000dd50:	02fee2cc 	addi.d	$r12,$r22,-72(0xfb8)
900000000000dd54:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    wait_current_set(&(sem->wait_queue), wait, wait_state);
900000000000dd58:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000000dd5c:	02c0218c 	addi.d	$r12,$r12,8(0x8)
900000000000dd60:	28be92cd 	ld.w	$r13,$r22,-92(0xfa4)
900000000000dd64:	001501a6 	move	$r6,$r13
900000000000dd68:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
900000000000dd6c:	00150184 	move	$r4,$r12
900000000000dd70:	54089800 	bl	2200(0x898) # 900000000000e608 <wait_current_set>
    local_intr_restore(intr_flag);
900000000000dd74:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000dd78:	00150184 	move	$r4,$r12
900000000000dd7c:	57fe27ff 	bl	-476(0xffffe24) # 900000000000dba0 <__intr_restore>

    schedule(); 
900000000000dd80:	54457000 	bl	17776(0x4570) # 90000000000122f0 <schedule>

    local_intr_save(intr_flag);
900000000000dd84:	57fdefff 	bl	-532(0xffffdec) # 900000000000db70 <__intr_save>
900000000000dd88:	0015008c 	move	$r12,$r4
900000000000dd8c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    wait_current_del(&(sem->wait_queue), wait);
900000000000dd90:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
900000000000dd94:	54068800 	bl	1672(0x688) # 900000000000e41c <wait_in_queue>
900000000000dd98:	0015008c 	move	$r12,$r4
900000000000dd9c:	40001980 	beqz	$r12,24(0x18) # 900000000000ddb4 <__down+0xc8>
900000000000dda0:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000000dda4:	02c0218c 	addi.d	$r12,$r12,8(0x8)
900000000000dda8:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
900000000000ddac:	00150184 	move	$r4,$r12
900000000000ddb0:	54034800 	bl	840(0x348) # 900000000000e0f8 <wait_queue_del>
    local_intr_restore(intr_flag);
900000000000ddb4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000ddb8:	00150184 	move	$r4,$r12
900000000000ddbc:	57fde7ff 	bl	-540(0xffffde4) # 900000000000dba0 <__intr_restore>

    if (wait->wakeup_flags != wait_state) {
900000000000ddc0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000ddc4:	2880218d 	ld.w	$r13,$r12,8(0x8)
900000000000ddc8:	28be92cc 	ld.w	$r12,$r22,-92(0xfa4)
900000000000ddcc:	5800118d 	beq	$r12,$r13,16(0x10) # 900000000000dddc <__down+0xf0>
        return wait->wakeup_flags;
900000000000ddd0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000ddd4:	2880218c 	ld.w	$r12,$r12,8(0x8)
900000000000ddd8:	50000800 	b	8(0x8) # 900000000000dde0 <__down+0xf4>
    }
    return 0;
900000000000dddc:	0015000c 	move	$r12,$r0
}
900000000000dde0:	00150184 	move	$r4,$r12
900000000000dde4:	28c16061 	ld.d	$r1,$r3,88(0x58)
900000000000dde8:	28c14076 	ld.d	$r22,$r3,80(0x50)
900000000000ddec:	02c18063 	addi.d	$r3,$r3,96(0x60)
900000000000ddf0:	4c000020 	jirl	$r0,$r1,0

900000000000ddf4 <up>:

void
up(semaphore_t *sem) {
900000000000ddf4:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000ddf8:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000000ddfc:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000000de00:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000000de04:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    __up(sem, WT_KSEM);
900000000000de08:	02840005 	addi.w	$r5,$r0,256(0x100)
900000000000de0c:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000de10:	57fe0fff 	bl	-500(0xffffe0c) # 900000000000dc1c <__up>
}
900000000000de14:	03400000 	andi	$r0,$r0,0x0
900000000000de18:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000000de1c:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000000de20:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000000de24:	4c000020 	jirl	$r0,$r1,0

900000000000de28 <down>:

void
down(semaphore_t *sem) {
900000000000de28:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000de2c:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000000de30:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000000de34:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000de38:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    uint32_t flags = __down(sem, WT_KSEM);
900000000000de3c:	02840005 	addi.w	$r5,$r0,256(0x100)
900000000000de40:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000000de44:	57feabff 	bl	-344(0xffffea8) # 900000000000dcec <__down>
900000000000de48:	0015008c 	move	$r12,$r4
900000000000de4c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    assert(flags == 0);
900000000000de50:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000de54:	40001d80 	beqz	$r12,28(0x1c) # 900000000000de70 <down+0x48>
900000000000de58:	1c000266 	pcaddu12i	$r6,19(0x13)
900000000000de5c:	02d020c6 	addi.d	$r6,$r6,1032(0x408)
900000000000de60:	02810005 	addi.w	$r5,$r0,64(0x40)
900000000000de64:	1c000264 	pcaddu12i	$r4,19(0x13)
900000000000de68:	02cfb084 	addi.d	$r4,$r4,1004(0x3ec)
900000000000de6c:	57ee17ff 	bl	-4588(0xfffee14) # 900000000000cc80 <__panic>
}
900000000000de70:	03400000 	andi	$r0,$r0,0x0
900000000000de74:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000000de78:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000000de7c:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000de80:	4c000020 	jirl	$r0,$r1,0

900000000000de84 <try_down>:

bool
try_down(semaphore_t *sem) {
900000000000de84:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000de88:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000000de8c:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000000de90:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000de94:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    bool intr_flag, ret = 0;
900000000000de98:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
    local_intr_save(intr_flag);
900000000000de9c:	57fcd7ff 	bl	-812(0xffffcd4) # 900000000000db70 <__intr_save>
900000000000dea0:	0015008c 	move	$r12,$r4
900000000000dea4:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
    if (sem->value > 0) {
900000000000dea8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000deac:	2880018c 	ld.w	$r12,$r12,0
900000000000deb0:	6400240c 	bge	$r0,$r12,36(0x24) # 900000000000ded4 <try_down+0x50>
        sem->value --, ret = 1;
900000000000deb4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000deb8:	2880018c 	ld.w	$r12,$r12,0
900000000000debc:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
900000000000dec0:	0015018d 	move	$r13,$r12
900000000000dec4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000dec8:	2980018d 	st.w	$r13,$r12,0
900000000000decc:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000000ded0:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    }
    local_intr_restore(intr_flag);
900000000000ded4:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000000ded8:	00150184 	move	$r4,$r12
900000000000dedc:	57fcc7ff 	bl	-828(0xffffcc4) # 900000000000dba0 <__intr_restore>
    return ret;
900000000000dee0:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
900000000000dee4:	00150184 	move	$r4,$r12
900000000000dee8:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000000deec:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000000def0:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000def4:	4c000020 	jirl	$r0,$r1,0

900000000000def8 <fence_i>:
static void fence_i(void *va_start, int size) {
900000000000def8:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000defc:	29c0a076 	st.d	$r22,$r3,40(0x28)
900000000000df00:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000df04:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000000df08:	001500ac 	move	$r12,$r5
900000000000df0c:	0040818c 	slli.w	$r12,$r12,0x0
900000000000df10:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
900000000000df14:	38720000 	dbar	0x0
    void *va_end = va_start + size;
900000000000df18:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
900000000000df1c:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000df20:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000df24:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
900000000000df28:	50002000 	b	32(0x20) # 900000000000df48 <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
900000000000df2c:	06000189 	cacop	0x9,$r12,0
900000000000df30:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
900000000000df34:	06000188 	cacop	0x8,$r12,0
900000000000df38:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
900000000000df3c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000df40:	02c0418c 	addi.d	$r12,$r12,16(0x10)
900000000000df44:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
900000000000df48:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000df4c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000df50:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 900000000000df2c <fence_i+0x34>
900000000000df54:	38728000 	ibar	0x0
}
900000000000df58:	03400000 	andi	$r0,$r0,0x0
900000000000df5c:	28c0a076 	ld.d	$r22,$r3,40(0x28)
900000000000df60:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000df64:	4c000020 	jirl	$r0,$r1,0

900000000000df68 <wait_init>:
#include <sync.h>
#include <wait.h>
#include <proc.h>

void
wait_init(wait_t *wait, struct proc_struct *proc) {
900000000000df68:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000df6c:	29c0a076 	st.d	$r22,$r3,40(0x28)
900000000000df70:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000df74:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000000df78:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
    wait->proc = proc;
900000000000df7c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000df80:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000000df84:	29c0018d 	st.d	$r13,$r12,0
    wait->wakeup_flags = WT_INTERRUPTED;
900000000000df88:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000df8c:	1500000d 	lu12i.w	$r13,-524288(0x80000)
900000000000df90:	2980218d 	st.w	$r13,$r12,8(0x8)
    list_init(&(wait->wait_link));
900000000000df94:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000df98:	02c0618c 	addi.d	$r12,$r12,24(0x18)
900000000000df9c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    elm->prev = elm->next = elm;
900000000000dfa0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000dfa4:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000dfa8:	29c0218d 	st.d	$r13,$r12,8(0x8)
900000000000dfac:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000dfb0:	28c0218d 	ld.d	$r13,$r12,8(0x8)
900000000000dfb4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000dfb8:	29c0018d 	st.d	$r13,$r12,0
}
900000000000dfbc:	03400000 	andi	$r0,$r0,0x0
900000000000dfc0:	28c0a076 	ld.d	$r22,$r3,40(0x28)
900000000000dfc4:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000dfc8:	4c000020 	jirl	$r0,$r1,0

900000000000dfcc <wait_queue_init>:

void
wait_queue_init(wait_queue_t *queue) {
900000000000dfcc:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000dfd0:	29c0a076 	st.d	$r22,$r3,40(0x28)
900000000000dfd4:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000dfd8:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    list_init(&(queue->wait_head));
900000000000dfdc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000dfe0:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000000dfe4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000dfe8:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000dfec:	29c0218d 	st.d	$r13,$r12,8(0x8)
900000000000dff0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000dff4:	28c0218d 	ld.d	$r13,$r12,8(0x8)
900000000000dff8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000dffc:	29c0018d 	st.d	$r13,$r12,0
}
900000000000e000:	03400000 	andi	$r0,$r0,0x0
900000000000e004:	28c0a076 	ld.d	$r22,$r3,40(0x28)
900000000000e008:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000e00c:	4c000020 	jirl	$r0,$r1,0

900000000000e010 <wait_queue_add>:

void
wait_queue_add(wait_queue_t *queue, wait_t *wait) {
900000000000e010:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
900000000000e014:	29c12061 	st.d	$r1,$r3,72(0x48)
900000000000e018:	29c10076 	st.d	$r22,$r3,64(0x40)
900000000000e01c:	02c14076 	addi.d	$r22,$r3,80(0x50)
900000000000e020:	29fee2c4 	st.d	$r4,$r22,-72(0xfb8)
900000000000e024:	29fec2c5 	st.d	$r5,$r22,-80(0xfb0)
    assert(list_empty(&(wait->wait_link)) && wait->proc != NULL);
900000000000e028:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000000e02c:	02c0618c 	addi.d	$r12,$r12,24(0x18)
900000000000e030:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    return list->next == list;
900000000000e034:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000e038:	28c0218d 	ld.d	$r13,$r12,8(0x8)
900000000000e03c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000e040:	0015b1ac 	xor	$r12,$r13,$r12
900000000000e044:	0240058c 	sltui	$r12,$r12,1(0x1)
900000000000e048:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
900000000000e04c:	40001180 	beqz	$r12,16(0x10) # 900000000000e05c <wait_queue_add+0x4c>
900000000000e050:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000000e054:	28c0018c 	ld.d	$r12,$r12,0
900000000000e058:	44001d80 	bnez	$r12,28(0x1c) # 900000000000e074 <wait_queue_add+0x64>
900000000000e05c:	1c000266 	pcaddu12i	$r6,19(0x13)
900000000000e060:	02c890c6 	addi.d	$r6,$r6,548(0x224)
900000000000e064:	02805405 	addi.w	$r5,$r0,21(0x15)
900000000000e068:	1c000264 	pcaddu12i	$r4,19(0x13)
900000000000e06c:	02c98084 	addi.d	$r4,$r4,608(0x260)
900000000000e070:	57ec13ff 	bl	-5104(0xfffec10) # 900000000000cc80 <__panic>
    wait->wait_queue = queue;
900000000000e074:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000000e078:	28fee2cd 	ld.d	$r13,$r22,-72(0xfb8)
900000000000e07c:	29c0418d 	st.d	$r13,$r12,16(0x10)
    list_add_before(&(queue->wait_head), &(wait->wait_link));
900000000000e080:	28fee2cd 	ld.d	$r13,$r22,-72(0xfb8)
900000000000e084:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000000e088:	02c0618c 	addi.d	$r12,$r12,24(0x18)
900000000000e08c:	29ff82cd 	st.d	$r13,$r22,-32(0xfe0)
900000000000e090:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    __list_add(elm, listelm->prev, listelm);
900000000000e094:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000e098:	28c0018c 	ld.d	$r12,$r12,0
900000000000e09c:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000e0a0:	29ff42cd 	st.d	$r13,$r22,-48(0xfd0)
900000000000e0a4:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
900000000000e0a8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000e0ac:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
    prev->next = next->prev = elm;
900000000000e0b0:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000e0b4:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000000e0b8:	29c0018d 	st.d	$r13,$r12,0
900000000000e0bc:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000e0c0:	28c0018d 	ld.d	$r13,$r12,0
900000000000e0c4:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000e0c8:	29c0218d 	st.d	$r13,$r12,8(0x8)
    elm->next = next;
900000000000e0cc:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000e0d0:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
900000000000e0d4:	29c0218d 	st.d	$r13,$r12,8(0x8)
    elm->prev = prev;
900000000000e0d8:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000e0dc:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
900000000000e0e0:	29c0018d 	st.d	$r13,$r12,0
}
900000000000e0e4:	03400000 	andi	$r0,$r0,0x0
900000000000e0e8:	28c12061 	ld.d	$r1,$r3,72(0x48)
900000000000e0ec:	28c10076 	ld.d	$r22,$r3,64(0x40)
900000000000e0f0:	02c14063 	addi.d	$r3,$r3,80(0x50)
900000000000e0f4:	4c000020 	jirl	$r0,$r1,0

900000000000e0f8 <wait_queue_del>:

void
wait_queue_del(wait_queue_t *queue, wait_t *wait) {
900000000000e0f8:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
900000000000e0fc:	29c12061 	st.d	$r1,$r3,72(0x48)
900000000000e100:	29c10076 	st.d	$r22,$r3,64(0x40)
900000000000e104:	02c14076 	addi.d	$r22,$r3,80(0x50)
900000000000e108:	29fee2c4 	st.d	$r4,$r22,-72(0xfb8)
900000000000e10c:	29fec2c5 	st.d	$r5,$r22,-80(0xfb0)
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
900000000000e110:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000000e114:	02c0618c 	addi.d	$r12,$r12,24(0x18)
900000000000e118:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    return list->next == list;
900000000000e11c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000e120:	28c0218d 	ld.d	$r13,$r12,8(0x8)
900000000000e124:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000e128:	0015b1ac 	xor	$r12,$r13,$r12
900000000000e12c:	0240058c 	sltui	$r12,$r12,1(0x1)
900000000000e130:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
900000000000e134:	44001580 	bnez	$r12,20(0x14) # 900000000000e148 <wait_queue_del+0x50>
900000000000e138:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000000e13c:	28c0418c 	ld.d	$r12,$r12,16(0x10)
900000000000e140:	28fee2cd 	ld.d	$r13,$r22,-72(0xfb8)
900000000000e144:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000000e160 <wait_queue_del+0x68>
900000000000e148:	1c000266 	pcaddu12i	$r6,19(0x13)
900000000000e14c:	02c660c6 	addi.d	$r6,$r6,408(0x198)
900000000000e150:	02807005 	addi.w	$r5,$r0,28(0x1c)
900000000000e154:	1c000264 	pcaddu12i	$r4,19(0x13)
900000000000e158:	02c5d084 	addi.d	$r4,$r4,372(0x174)
900000000000e15c:	57eb27ff 	bl	-5340(0xfffeb24) # 900000000000cc80 <__panic>
    list_del_init(&(wait->wait_link));
900000000000e160:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000000e164:	02c0618c 	addi.d	$r12,$r12,24(0x18)
900000000000e168:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
900000000000e16c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000e170:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    __list_del(listelm->prev, listelm->next);
900000000000e174:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000e178:	28c0018d 	ld.d	$r13,$r12,0
900000000000e17c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000e180:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000000e184:	29ff42cd 	st.d	$r13,$r22,-48(0xfd0)
900000000000e188:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
    prev->next = next;
900000000000e18c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000e190:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
900000000000e194:	29c0218d 	st.d	$r13,$r12,8(0x8)
    next->prev = prev;
900000000000e198:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000e19c:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000000e1a0:	29c0018d 	st.d	$r13,$r12,0
900000000000e1a4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000e1a8:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
    elm->prev = elm->next = elm;
900000000000e1ac:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000e1b0:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
900000000000e1b4:	29c0218d 	st.d	$r13,$r12,8(0x8)
900000000000e1b8:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000e1bc:	28c0218d 	ld.d	$r13,$r12,8(0x8)
900000000000e1c0:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000e1c4:	29c0018d 	st.d	$r13,$r12,0
}
900000000000e1c8:	03400000 	andi	$r0,$r0,0x0
900000000000e1cc:	28c12061 	ld.d	$r1,$r3,72(0x48)
900000000000e1d0:	28c10076 	ld.d	$r22,$r3,64(0x40)
900000000000e1d4:	02c14063 	addi.d	$r3,$r3,80(0x50)
900000000000e1d8:	4c000020 	jirl	$r0,$r1,0

900000000000e1dc <wait_queue_next>:

wait_t *
wait_queue_next(wait_queue_t *queue, wait_t *wait) {
900000000000e1dc:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000000e1e0:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000000e1e4:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000000e1e8:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000000e1ec:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
900000000000e1f0:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
900000000000e1f4:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000e1f8:	02c0618c 	addi.d	$r12,$r12,24(0x18)
900000000000e1fc:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    return list->next == list;
900000000000e200:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000e204:	28c0218d 	ld.d	$r13,$r12,8(0x8)
900000000000e208:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000e20c:	0015b1ac 	xor	$r12,$r13,$r12
900000000000e210:	0240058c 	sltui	$r12,$r12,1(0x1)
900000000000e214:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
900000000000e218:	44001580 	bnez	$r12,20(0x14) # 900000000000e22c <wait_queue_next+0x50>
900000000000e21c:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000e220:	28c0418c 	ld.d	$r12,$r12,16(0x10)
900000000000e224:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
900000000000e228:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000000e244 <wait_queue_next+0x68>
900000000000e22c:	1c000266 	pcaddu12i	$r6,19(0x13)
900000000000e230:	02c2d0c6 	addi.d	$r6,$r6,180(0xb4)
900000000000e234:	02808805 	addi.w	$r5,$r0,34(0x22)
900000000000e238:	1c000264 	pcaddu12i	$r4,19(0x13)
900000000000e23c:	02c24084 	addi.d	$r4,$r4,144(0x90)
900000000000e240:	57ea43ff 	bl	-5568(0xfffea40) # 900000000000cc80 <__panic>
    list_entry_t *le = list_next(&(wait->wait_link));
900000000000e244:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000e248:	02c0618c 	addi.d	$r12,$r12,24(0x18)
900000000000e24c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    return listelm->next;
900000000000e250:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000e254:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000000e258:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    if (le != &(queue->wait_head)) {
900000000000e25c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000e260:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000e264:	580011ac 	beq	$r13,$r12,16(0x10) # 900000000000e274 <wait_queue_next+0x98>
        return le2wait(le, wait_link);
900000000000e268:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000e26c:	02ffa18c 	addi.d	$r12,$r12,-24(0xfe8)
900000000000e270:	50000800 	b	8(0x8) # 900000000000e278 <wait_queue_next+0x9c>
    }
    return NULL;
900000000000e274:	0015000c 	move	$r12,$r0
}
900000000000e278:	00150184 	move	$r4,$r12
900000000000e27c:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000000e280:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000000e284:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000000e288:	4c000020 	jirl	$r0,$r1,0

900000000000e28c <wait_queue_prev>:

wait_t *
wait_queue_prev(wait_queue_t *queue, wait_t *wait) {
900000000000e28c:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000000e290:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000000e294:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000000e298:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000000e29c:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
900000000000e2a0:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
900000000000e2a4:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000e2a8:	02c0618c 	addi.d	$r12,$r12,24(0x18)
900000000000e2ac:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    return list->next == list;
900000000000e2b0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000e2b4:	28c0218d 	ld.d	$r13,$r12,8(0x8)
900000000000e2b8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000e2bc:	0015b1ac 	xor	$r12,$r13,$r12
900000000000e2c0:	0240058c 	sltui	$r12,$r12,1(0x1)
900000000000e2c4:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
900000000000e2c8:	44001580 	bnez	$r12,20(0x14) # 900000000000e2dc <wait_queue_prev+0x50>
900000000000e2cc:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000e2d0:	28c0418c 	ld.d	$r12,$r12,16(0x10)
900000000000e2d4:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
900000000000e2d8:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000000e2f4 <wait_queue_prev+0x68>
900000000000e2dc:	1c000266 	pcaddu12i	$r6,19(0x13)
900000000000e2e0:	02c010c6 	addi.d	$r6,$r6,4(0x4)
900000000000e2e4:	0280b005 	addi.w	$r5,$r0,44(0x2c)
900000000000e2e8:	1c000264 	pcaddu12i	$r4,19(0x13)
900000000000e2ec:	02ff8084 	addi.d	$r4,$r4,-32(0xfe0)
900000000000e2f0:	57e993ff 	bl	-5744(0xfffe990) # 900000000000cc80 <__panic>
    list_entry_t *le = list_prev(&(wait->wait_link));
900000000000e2f4:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000e2f8:	02c0618c 	addi.d	$r12,$r12,24(0x18)
900000000000e2fc:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    return listelm->prev;
900000000000e300:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000e304:	28c0018c 	ld.d	$r12,$r12,0
900000000000e308:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    if (le != &(queue->wait_head)) {
900000000000e30c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000e310:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000e314:	580011ac 	beq	$r13,$r12,16(0x10) # 900000000000e324 <wait_queue_prev+0x98>
        return le2wait(le, wait_link);
900000000000e318:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000e31c:	02ffa18c 	addi.d	$r12,$r12,-24(0xfe8)
900000000000e320:	50000800 	b	8(0x8) # 900000000000e328 <wait_queue_prev+0x9c>
    }
    return NULL;
900000000000e324:	0015000c 	move	$r12,$r0
}
900000000000e328:	00150184 	move	$r4,$r12
900000000000e32c:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000000e330:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000000e334:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000000e338:	4c000020 	jirl	$r0,$r1,0

900000000000e33c <wait_queue_first>:

wait_t *
wait_queue_first(wait_queue_t *queue) {
900000000000e33c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000e340:	29c0a076 	st.d	$r22,$r3,40(0x28)
900000000000e344:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000e348:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    list_entry_t *le = list_next(&(queue->wait_head));
900000000000e34c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000e350:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    return listelm->next;
900000000000e354:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000e358:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000000e35c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    if (le != &(queue->wait_head)) {
900000000000e360:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000e364:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000e368:	580011ac 	beq	$r13,$r12,16(0x10) # 900000000000e378 <wait_queue_first+0x3c>
        return le2wait(le, wait_link);
900000000000e36c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000e370:	02ffa18c 	addi.d	$r12,$r12,-24(0xfe8)
900000000000e374:	50000800 	b	8(0x8) # 900000000000e37c <wait_queue_first+0x40>
    }
    return NULL;
900000000000e378:	0015000c 	move	$r12,$r0
}
900000000000e37c:	00150184 	move	$r4,$r12
900000000000e380:	28c0a076 	ld.d	$r22,$r3,40(0x28)
900000000000e384:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000e388:	4c000020 	jirl	$r0,$r1,0

900000000000e38c <wait_queue_last>:

wait_t *
wait_queue_last(wait_queue_t *queue) {
900000000000e38c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000e390:	29c0a076 	st.d	$r22,$r3,40(0x28)
900000000000e394:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000e398:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    list_entry_t *le = list_prev(&(queue->wait_head));
900000000000e39c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000e3a0:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    return listelm->prev;
900000000000e3a4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000e3a8:	28c0018c 	ld.d	$r12,$r12,0
900000000000e3ac:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    if (le != &(queue->wait_head)) {
900000000000e3b0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000e3b4:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000e3b8:	580011ac 	beq	$r13,$r12,16(0x10) # 900000000000e3c8 <wait_queue_last+0x3c>
        return le2wait(le, wait_link);
900000000000e3bc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000e3c0:	02ffa18c 	addi.d	$r12,$r12,-24(0xfe8)
900000000000e3c4:	50000800 	b	8(0x8) # 900000000000e3cc <wait_queue_last+0x40>
    }
    return NULL;
900000000000e3c8:	0015000c 	move	$r12,$r0
}
900000000000e3cc:	00150184 	move	$r4,$r12
900000000000e3d0:	28c0a076 	ld.d	$r22,$r3,40(0x28)
900000000000e3d4:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000e3d8:	4c000020 	jirl	$r0,$r1,0

900000000000e3dc <wait_queue_empty>:

bool
wait_queue_empty(wait_queue_t *queue) {
900000000000e3dc:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000e3e0:	29c0a076 	st.d	$r22,$r3,40(0x28)
900000000000e3e4:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000e3e8:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    return list_empty(&(queue->wait_head));
900000000000e3ec:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000e3f0:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    return list->next == list;
900000000000e3f4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000e3f8:	28c0218d 	ld.d	$r13,$r12,8(0x8)
900000000000e3fc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000e400:	0015b1ac 	xor	$r12,$r13,$r12
900000000000e404:	0240058c 	sltui	$r12,$r12,1(0x1)
900000000000e408:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
}
900000000000e40c:	00150184 	move	$r4,$r12
900000000000e410:	28c0a076 	ld.d	$r22,$r3,40(0x28)
900000000000e414:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000e418:	4c000020 	jirl	$r0,$r1,0

900000000000e41c <wait_in_queue>:

bool
wait_in_queue(wait_t *wait) {
900000000000e41c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000e420:	29c0a076 	st.d	$r22,$r3,40(0x28)
900000000000e424:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000e428:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    return !list_empty(&(wait->wait_link));
900000000000e42c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000e430:	02c0618c 	addi.d	$r12,$r12,24(0x18)
900000000000e434:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000000e438:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000e43c:	28c0218d 	ld.d	$r13,$r12,8(0x8)
900000000000e440:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000e444:	0015b1ac 	xor	$r12,$r13,$r12
900000000000e448:	0240058c 	sltui	$r12,$r12,1(0x1)
900000000000e44c:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
900000000000e450:	0240058c 	sltui	$r12,$r12,1(0x1)
900000000000e454:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
}
900000000000e458:	00150184 	move	$r4,$r12
900000000000e45c:	28c0a076 	ld.d	$r22,$r3,40(0x28)
900000000000e460:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000e464:	4c000020 	jirl	$r0,$r1,0

900000000000e468 <wakeup_wait>:

void
wakeup_wait(wait_queue_t *queue, wait_t *wait, uint32_t wakeup_flags, bool del) {
900000000000e468:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000e46c:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000000e470:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000000e474:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000e478:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000000e47c:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
900000000000e480:	001500cd 	move	$r13,$r6
900000000000e484:	001500ec 	move	$r12,$r7
900000000000e488:	004081ad 	slli.w	$r13,$r13,0x0
900000000000e48c:	29bf72cd 	st.w	$r13,$r22,-36(0xfdc)
900000000000e490:	0040818c 	slli.w	$r12,$r12,0x0
900000000000e494:	29bf62cc 	st.w	$r12,$r22,-40(0xfd8)
    if (del) {
900000000000e498:	28bf62cc 	ld.w	$r12,$r22,-40(0xfd8)
900000000000e49c:	40001180 	beqz	$r12,16(0x10) # 900000000000e4ac <wakeup_wait+0x44>
        wait_queue_del(queue, wait);
900000000000e4a0:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
900000000000e4a4:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000e4a8:	57fc53ff 	bl	-944(0xffffc50) # 900000000000e0f8 <wait_queue_del>
    }
    wait->wakeup_flags = wakeup_flags;
900000000000e4ac:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000e4b0:	28bf72cd 	ld.w	$r13,$r22,-36(0xfdc)
900000000000e4b4:	2980218d 	st.w	$r13,$r12,8(0x8)
    wakeup_proc(wait->proc);
900000000000e4b8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000e4bc:	28c0018c 	ld.d	$r12,$r12,0
900000000000e4c0:	00150184 	move	$r4,$r12
900000000000e4c4:	543d6000 	bl	15712(0x3d60) # 9000000000012224 <wakeup_proc>
}
900000000000e4c8:	03400000 	andi	$r0,$r0,0x0
900000000000e4cc:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000000e4d0:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000000e4d4:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000e4d8:	4c000020 	jirl	$r0,$r1,0

900000000000e4dc <wakeup_first>:

void
wakeup_first(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
900000000000e4dc:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000e4e0:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000000e4e4:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000000e4e8:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000e4ec:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000000e4f0:	001500ad 	move	$r13,$r5
900000000000e4f4:	001500cc 	move	$r12,$r6
900000000000e4f8:	004081ad 	slli.w	$r13,$r13,0x0
900000000000e4fc:	29bf52cd 	st.w	$r13,$r22,-44(0xfd4)
900000000000e500:	0040818c 	slli.w	$r12,$r12,0x0
900000000000e504:	29bf42cc 	st.w	$r12,$r22,-48(0xfd0)
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
900000000000e508:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000000e50c:	57fe33ff 	bl	-464(0xffffe30) # 900000000000e33c <wait_queue_first>
900000000000e510:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000000e514:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000e518:	40002180 	beqz	$r12,32(0x20) # 900000000000e538 <wakeup_first+0x5c>
        wakeup_wait(queue, wait, wakeup_flags, del);
900000000000e51c:	28bf42cd 	ld.w	$r13,$r22,-48(0xfd0)
900000000000e520:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
900000000000e524:	001501a7 	move	$r7,$r13
900000000000e528:	00150186 	move	$r6,$r12
900000000000e52c:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
900000000000e530:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000000e534:	57ff37ff 	bl	-204(0xfffff34) # 900000000000e468 <wakeup_wait>
    }
}
900000000000e538:	03400000 	andi	$r0,$r0,0x0
900000000000e53c:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000000e540:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000000e544:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000e548:	4c000020 	jirl	$r0,$r1,0

900000000000e54c <wakeup_queue>:

void
wakeup_queue(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
900000000000e54c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000e550:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000000e554:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000000e558:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000e55c:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000000e560:	001500ad 	move	$r13,$r5
900000000000e564:	001500cc 	move	$r12,$r6
900000000000e568:	004081ad 	slli.w	$r13,$r13,0x0
900000000000e56c:	29bf52cd 	st.w	$r13,$r22,-44(0xfd4)
900000000000e570:	0040818c 	slli.w	$r12,$r12,0x0
900000000000e574:	29bf42cc 	st.w	$r12,$r22,-48(0xfd0)
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
900000000000e578:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000000e57c:	57fdc3ff 	bl	-576(0xffffdc0) # 900000000000e33c <wait_queue_first>
900000000000e580:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000000e584:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000e588:	40006d80 	beqz	$r12,108(0x6c) # 900000000000e5f4 <wakeup_queue+0xa8>
        if (del) {
900000000000e58c:	28bf42cc 	ld.w	$r12,$r22,-48(0xfd0)
900000000000e590:	40003580 	beqz	$r12,52(0x34) # 900000000000e5c4 <wakeup_queue+0x78>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 1);
900000000000e594:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
900000000000e598:	02800407 	addi.w	$r7,$r0,1(0x1)
900000000000e59c:	00150186 	move	$r6,$r12
900000000000e5a0:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
900000000000e5a4:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000000e5a8:	57fec3ff 	bl	-320(0xffffec0) # 900000000000e468 <wakeup_wait>
            } while ((wait = wait_queue_first(queue)) != NULL);
900000000000e5ac:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000000e5b0:	57fd8fff 	bl	-628(0xffffd8c) # 900000000000e33c <wait_queue_first>
900000000000e5b4:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000000e5b8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000e5bc:	47ffd99f 	bnez	$r12,-40(0x7fffd8) # 900000000000e594 <wakeup_queue+0x48>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 0);
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
        }
    }
}
900000000000e5c0:	50003400 	b	52(0x34) # 900000000000e5f4 <wakeup_queue+0xa8>
                wakeup_wait(queue, wait, wakeup_flags, 0);
900000000000e5c4:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
900000000000e5c8:	00150007 	move	$r7,$r0
900000000000e5cc:	00150186 	move	$r6,$r12
900000000000e5d0:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
900000000000e5d4:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000000e5d8:	57fe93ff 	bl	-368(0xffffe90) # 900000000000e468 <wakeup_wait>
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
900000000000e5dc:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
900000000000e5e0:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000000e5e4:	57fbfbff 	bl	-1032(0xffffbf8) # 900000000000e1dc <wait_queue_next>
900000000000e5e8:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000000e5ec:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000e5f0:	47ffd59f 	bnez	$r12,-44(0x7fffd4) # 900000000000e5c4 <wakeup_queue+0x78>
}
900000000000e5f4:	03400000 	andi	$r0,$r0,0x0
900000000000e5f8:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000000e5fc:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000000e600:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000e604:	4c000020 	jirl	$r0,$r1,0

900000000000e608 <wait_current_set>:

void
wait_current_set(wait_queue_t *queue, wait_t *wait, uint32_t wait_state) {
900000000000e608:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000e60c:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000000e610:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000000e614:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000e618:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000000e61c:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
900000000000e620:	001500cc 	move	$r12,$r6
900000000000e624:	0040818c 	slli.w	$r12,$r12,0x0
900000000000e628:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
    assert(current != NULL);
900000000000e62c:	1c00426c 	pcaddu12i	$r12,531(0x213)
900000000000e630:	28c5518c 	ld.d	$r12,$r12,340(0x154)
900000000000e634:	28c0018c 	ld.d	$r12,$r12,0
900000000000e638:	44001d80 	bnez	$r12,28(0x1c) # 900000000000e654 <wait_current_set+0x4c>
900000000000e63c:	1c000266 	pcaddu12i	$r6,19(0x13)
900000000000e640:	02f3d0c6 	addi.d	$r6,$r6,-780(0xcf4)
900000000000e644:	0281d005 	addi.w	$r5,$r0,116(0x74)
900000000000e648:	1c000264 	pcaddu12i	$r4,19(0x13)
900000000000e64c:	02f20084 	addi.d	$r4,$r4,-896(0xc80)
900000000000e650:	57e633ff 	bl	-6608(0xfffe630) # 900000000000cc80 <__panic>
    wait_init(wait, current);
900000000000e654:	1c00426c 	pcaddu12i	$r12,531(0x213)
900000000000e658:	28c4b18c 	ld.d	$r12,$r12,300(0x12c)
900000000000e65c:	28c0018c 	ld.d	$r12,$r12,0
900000000000e660:	00150185 	move	$r5,$r12
900000000000e664:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
900000000000e668:	57f903ff 	bl	-1792(0xffff900) # 900000000000df68 <wait_init>
    current->state = PROC_SLEEPING;
900000000000e66c:	1c00426c 	pcaddu12i	$r12,531(0x213)
900000000000e670:	28c4518c 	ld.d	$r12,$r12,276(0x114)
900000000000e674:	28c0018c 	ld.d	$r12,$r12,0
900000000000e678:	0280040d 	addi.w	$r13,$r0,1(0x1)
900000000000e67c:	2980018d 	st.w	$r13,$r12,0
    current->wait_state = wait_state;
900000000000e680:	1c00426c 	pcaddu12i	$r12,531(0x213)
900000000000e684:	28c4018c 	ld.d	$r12,$r12,256(0x100)
900000000000e688:	28c0018c 	ld.d	$r12,$r12,0
900000000000e68c:	28bf72cd 	ld.w	$r13,$r22,-36(0xfdc)
900000000000e690:	2983d18d 	st.w	$r13,$r12,244(0xf4)
    wait_queue_add(queue, wait);
900000000000e694:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
900000000000e698:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000e69c:	57f977ff 	bl	-1676(0xffff974) # 900000000000e010 <wait_queue_add>
}
900000000000e6a0:	03400000 	andi	$r0,$r0,0x0
900000000000e6a4:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000000e6a8:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000000e6ac:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000e6b0:	4c000020 	jirl	$r0,$r1,0

900000000000e6b4 <fence_i>:
static void fence_i(void *va_start, int size) {
900000000000e6b4:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000e6b8:	29c0a076 	st.d	$r22,$r3,40(0x28)
900000000000e6bc:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000e6c0:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000000e6c4:	001500ac 	move	$r12,$r5
900000000000e6c8:	0040818c 	slli.w	$r12,$r12,0x0
900000000000e6cc:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
900000000000e6d0:	38720000 	dbar	0x0
    void *va_end = va_start + size;
900000000000e6d4:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
900000000000e6d8:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000e6dc:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000e6e0:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
900000000000e6e4:	50002000 	b	32(0x20) # 900000000000e704 <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
900000000000e6e8:	06000189 	cacop	0x9,$r12,0
900000000000e6ec:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
900000000000e6f0:	06000188 	cacop	0x8,$r12,0
900000000000e6f4:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
900000000000e6f8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000e6fc:	02c0418c 	addi.d	$r12,$r12,16(0x10)
900000000000e700:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
900000000000e704:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000e708:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000e70c:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 900000000000e6e8 <fence_i+0x34>
900000000000e710:	38728000 	ibar	0x0
}
900000000000e714:	03400000 	andi	$r0,$r0,0x0
900000000000e718:	28c0a076 	ld.d	$r22,$r3,40(0x28)
900000000000e71c:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000e720:	4c000020 	jirl	$r0,$r1,0

900000000000e724 <__intr_save>:
{
900000000000e724:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000000e728:	29c02076 	st.d	$r22,$r3,8(0x8)
900000000000e72c:	02c04076 	addi.d	$r22,$r3,16(0x10)
	return __csrxchg(0, LISA_CSR_CRMD_IE, LISA_CSR_CRMD);
900000000000e730:	0015000d 	move	$r13,$r0
900000000000e734:	0280100c 	addi.w	$r12,$r0,4(0x4)
900000000000e738:	0400018d 	csrxchg	$r13,$r12,0x0
900000000000e73c:	001501ac 	move	$r12,$r13
900000000000e740:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
}
900000000000e744:	00150184 	move	$r4,$r12
900000000000e748:	28c02076 	ld.d	$r22,$r3,8(0x8)
900000000000e74c:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000000e750:	4c000020 	jirl	$r0,$r1,0

900000000000e754 <__intr_restore>:
{
900000000000e754:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000e758:	29c06076 	st.d	$r22,$r3,24(0x18)
900000000000e75c:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000000e760:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
	__csrxchg(flags, LISA_CSR_CRMD_IE, LISA_CSR_CRMD);
900000000000e764:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000000e768:	0280100d 	addi.w	$r13,$r0,4(0x4)
900000000000e76c:	040001ac 	csrxchg	$r12,$r13,0x0
}
900000000000e770:	03400000 	andi	$r0,$r0,0x0
900000000000e774:	28c06076 	ld.d	$r22,$r3,24(0x18)
900000000000e778:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000000e77c:	4c000020 	jirl	$r0,$r1,0

900000000000e780 <page2ppn>:
page2ppn(struct Page *page) {
900000000000e780:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000e784:	29c06076 	st.d	$r22,$r3,24(0x18)
900000000000e788:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000000e78c:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    return page - pages;
900000000000e790:	1c00426c 	pcaddu12i	$r12,531(0x213)
900000000000e794:	28c1e18c 	ld.d	$r12,$r12,120(0x78)
900000000000e798:	28c0018c 	ld.d	$r12,$r12,0
900000000000e79c:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000e7a0:	0011b1ac 	sub.d	$r12,$r13,$r12
900000000000e7a4:	0049118d 	srai.d	$r13,$r12,0x4
900000000000e7a8:	1555554c 	lu12i.w	$r12,-349526(0xaaaaa)
900000000000e7ac:	03aaad8c 	ori	$r12,$r12,0xaab
900000000000e7b0:	1755554c 	lu32i.d	$r12,-349526(0xaaaaa)
900000000000e7b4:	032aa98c 	lu52i.d	$r12,$r12,-1366(0xaaa)
900000000000e7b8:	001db1ac 	mul.d	$r12,$r13,$r12
}
900000000000e7bc:	00150184 	move	$r4,$r12
900000000000e7c0:	28c06076 	ld.d	$r22,$r3,24(0x18)
900000000000e7c4:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000000e7c8:	4c000020 	jirl	$r0,$r1,0

900000000000e7cc <page2pa>:
page2pa(struct Page *page) {
900000000000e7cc:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000e7d0:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000000e7d4:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000000e7d8:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000000e7dc:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    return KERNBASE + (page2ppn(page) << PGSHIFT);
900000000000e7e0:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000e7e4:	57ff9fff 	bl	-100(0xfffff9c) # 900000000000e780 <page2ppn>
900000000000e7e8:	0015008c 	move	$r12,$r4
900000000000e7ec:	0041318d 	slli.d	$r13,$r12,0xc
900000000000e7f0:	0324000c 	lu52i.d	$r12,$r0,-1792(0x900)
900000000000e7f4:	0010b1ac 	add.d	$r12,$r13,$r12
}
900000000000e7f8:	00150184 	move	$r4,$r12
900000000000e7fc:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000000e800:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000000e804:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000000e808:	4c000020 	jirl	$r0,$r1,0

900000000000e80c <pa2page>:
pa2page(uintptr_t pa) {
900000000000e80c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000e810:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000000e814:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000000e818:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000000e81c:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    if (PPN(pa) >= npage) {
900000000000e820:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000e824:	031c000c 	lu52i.d	$r12,$r0,1792(0x700)
900000000000e828:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000e82c:	0045318d 	srli.d	$r13,$r12,0xc
900000000000e830:	1c00426c 	pcaddu12i	$r12,531(0x213)
900000000000e834:	28fc618c 	ld.d	$r12,$r12,-232(0xf18)
900000000000e838:	28c0018c 	ld.d	$r12,$r12,0
900000000000e83c:	68001dac 	bltu	$r13,$r12,28(0x1c) # 900000000000e858 <pa2page+0x4c>
        panic("pa2page called with invalid pa");
900000000000e840:	1c000266 	pcaddu12i	$r6,19(0x13)
900000000000e844:	02ec60c6 	addi.d	$r6,$r6,-1256(0xb18)
900000000000e848:	02819c05 	addi.w	$r5,$r0,103(0x67)
900000000000e84c:	1c000264 	pcaddu12i	$r4,19(0x13)
900000000000e850:	02ecb084 	addi.d	$r4,$r4,-1236(0xb2c)
900000000000e854:	57e42fff 	bl	-7124(0xfffe42c) # 900000000000cc80 <__panic>
    return &pages[PPN(pa)];
900000000000e858:	1c00426c 	pcaddu12i	$r12,531(0x213)
900000000000e85c:	28fec18c 	ld.d	$r12,$r12,-80(0xfb0)
900000000000e860:	28c0018d 	ld.d	$r13,$r12,0
900000000000e864:	28ffa2ce 	ld.d	$r14,$r22,-24(0xfe8)
900000000000e868:	031c000c 	lu52i.d	$r12,$r0,1792(0x700)
900000000000e86c:	0010b1cc 	add.d	$r12,$r14,$r12
900000000000e870:	0045318e 	srli.d	$r14,$r12,0xc
900000000000e874:	0280c00c 	addi.w	$r12,$r0,48(0x30)
900000000000e878:	001db1cc 	mul.d	$r12,$r14,$r12
900000000000e87c:	0010b1ac 	add.d	$r12,$r13,$r12
}
900000000000e880:	00150184 	move	$r4,$r12
900000000000e884:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000000e888:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000000e88c:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000000e890:	4c000020 	jirl	$r0,$r1,0

900000000000e894 <page2kva>:
page2kva(struct Page *page) {
900000000000e894:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000e898:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000000e89c:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000000e8a0:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000e8a4:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    return KADDR(page2pa(page));
900000000000e8a8:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000000e8ac:	57ff23ff 	bl	-224(0xfffff20) # 900000000000e7cc <page2pa>
900000000000e8b0:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000000e8b4:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000e8b8:	031c000c 	lu52i.d	$r12,$r0,1792(0x700)
900000000000e8bc:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000e8c0:	0045318c 	srli.d	$r12,$r12,0xc
900000000000e8c4:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
900000000000e8c8:	1c00426c 	pcaddu12i	$r12,531(0x213)
900000000000e8cc:	28fa018c 	ld.d	$r12,$r12,-384(0xe80)
900000000000e8d0:	28c0018c 	ld.d	$r12,$r12,0
900000000000e8d4:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
900000000000e8d8:	680021ac 	bltu	$r13,$r12,32(0x20) # 900000000000e8f8 <page2kva+0x64>
900000000000e8dc:	28ffa2c7 	ld.d	$r7,$r22,-24(0xfe8)
900000000000e8e0:	1c000266 	pcaddu12i	$r6,19(0x13)
900000000000e8e4:	02eaa0c6 	addi.d	$r6,$r6,-1368(0xaa8)
900000000000e8e8:	0281b805 	addi.w	$r5,$r0,110(0x6e)
900000000000e8ec:	1c000264 	pcaddu12i	$r4,19(0x13)
900000000000e8f0:	02ea3084 	addi.d	$r4,$r4,-1396(0xa8c)
900000000000e8f4:	57e38fff 	bl	-7284(0xfffe38c) # 900000000000cc80 <__panic>
900000000000e8f8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
}
900000000000e8fc:	00150184 	move	$r4,$r12
900000000000e900:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000000e904:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000000e908:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000e90c:	4c000020 	jirl	$r0,$r1,0

900000000000e910 <kva2page>:
kva2page(void *kva) {
900000000000e910:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000e914:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000000e918:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000000e91c:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000e920:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    return pa2page(PADDR(kva));
900000000000e924:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000e928:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000000e92c:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000e930:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
900000000000e934:	0323fd8c 	lu52i.d	$r12,$r12,-1793(0x8ff)
900000000000e938:	6800218d 	bltu	$r12,$r13,32(0x20) # 900000000000e958 <kva2page+0x48>
900000000000e93c:	28ffa2c7 	ld.d	$r7,$r22,-24(0xfe8)
900000000000e940:	1c000266 	pcaddu12i	$r6,19(0x13)
900000000000e944:	02e9c0c6 	addi.d	$r6,$r6,-1424(0xa70)
900000000000e948:	0281cc05 	addi.w	$r5,$r0,115(0x73)
900000000000e94c:	1c000264 	pcaddu12i	$r4,19(0x13)
900000000000e950:	02e8b084 	addi.d	$r4,$r4,-1492(0xa2c)
900000000000e954:	57e32fff 	bl	-7380(0xfffe32c) # 900000000000cc80 <__panic>
900000000000e958:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000e95c:	00150184 	move	$r4,$r12
900000000000e960:	57feafff 	bl	-340(0xffffeac) # 900000000000e80c <pa2page>
900000000000e964:	0015008c 	move	$r12,$r4
}
900000000000e968:	00150184 	move	$r4,$r12
900000000000e96c:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000000e970:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000000e974:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000e978:	4c000020 	jirl	$r0,$r1,0

900000000000e97c <timer_init>:

#define le2timer(le, member)            \
to_struct((le), timer_t, member)

static inline timer_t *
timer_init(timer_t *timer, struct proc_struct *proc, int expires) {
900000000000e97c:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000000e980:	29c0e076 	st.d	$r22,$r3,56(0x38)
900000000000e984:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000000e988:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000000e98c:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
900000000000e990:	001500cc 	move	$r12,$r6
900000000000e994:	0040818c 	slli.w	$r12,$r12,0x0
900000000000e998:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
    timer->expires = expires;
900000000000e99c:	28bf32cd 	ld.w	$r13,$r22,-52(0xfcc)
900000000000e9a0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000e9a4:	2980018d 	st.w	$r13,$r12,0
    timer->proc = proc;
900000000000e9a8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000e9ac:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000000e9b0:	29c0218d 	st.d	$r13,$r12,8(0x8)
    list_init(&(timer->timer_link));
900000000000e9b4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000e9b8:	02c0418c 	addi.d	$r12,$r12,16(0x10)
900000000000e9bc:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    elm->prev = elm->next = elm;
900000000000e9c0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000e9c4:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000e9c8:	29c0218d 	st.d	$r13,$r12,8(0x8)
900000000000e9cc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000e9d0:	28c0218d 	ld.d	$r13,$r12,8(0x8)
900000000000e9d4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000e9d8:	29c0018d 	st.d	$r13,$r12,0
    return timer;
900000000000e9dc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
}
900000000000e9e0:	00150184 	move	$r4,$r12
900000000000e9e4:	28c0e076 	ld.d	$r22,$r3,56(0x38)
900000000000e9e8:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000000e9ec:	4c000020 	jirl	$r0,$r1,0

900000000000e9f0 <_load_elfhdr>:
  Elf64_Word	e_shstrndx;		/* Section header string table index */
};


static inline void _load_elfhdr(unsigned char* base, struct elfhdr64 *hdr)
{
900000000000e9f0:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000e9f4:	29c0a076 	st.d	$r22,$r3,40(0x28)
900000000000e9f8:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000e9fc:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000000ea00:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
  struct __elfhdr *eh = (struct __elfhdr*)base;
900000000000ea04:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000ea08:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
  hdr->e_magic = eh->e_magic;
900000000000ea0c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ea10:	2880018d 	ld.w	$r13,$r12,0
900000000000ea14:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000ea18:	2980018d 	st.w	$r13,$r12,0
  hdr->e_version = eh->e_version;
900000000000ea1c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ea20:	2880518d 	ld.w	$r13,$r12,20(0x14)
900000000000ea24:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000ea28:	2980618d 	st.w	$r13,$r12,24(0x18)
  hdr->e_entry = eh->e_entry;
900000000000ea2c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ea30:	28c0618d 	ld.d	$r13,$r12,24(0x18)
900000000000ea34:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000ea38:	29c0818d 	st.d	$r13,$r12,32(0x20)
  hdr->e_phoff = eh->e_phoff;
900000000000ea3c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ea40:	28c0818d 	ld.d	$r13,$r12,32(0x20)
900000000000ea44:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000ea48:	29c0a18d 	st.d	$r13,$r12,40(0x28)
  hdr->e_shoff = eh->e_shoff;
900000000000ea4c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ea50:	28c0a18d 	ld.d	$r13,$r12,40(0x28)
900000000000ea54:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000ea58:	29c0c18d 	st.d	$r13,$r12,48(0x30)
  hdr->e_flags = eh->e_flags;
900000000000ea5c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ea60:	2880c18d 	ld.w	$r13,$r12,48(0x30)
900000000000ea64:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000ea68:	2980e18d 	st.w	$r13,$r12,56(0x38)

  Elf64_Word t = *(Elf64_Word*)(&eh->e_type);
900000000000ea6c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ea70:	02c0418c 	addi.d	$r12,$r12,16(0x10)
900000000000ea74:	2880018c 	ld.w	$r12,$r12,0
900000000000ea78:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
  hdr->e_type = t & 0xFFFF;
900000000000ea7c:	28bf92cd 	ld.w	$r13,$r22,-28(0xfe4)
900000000000ea80:	140001ec 	lu12i.w	$r12,15(0xf)
900000000000ea84:	03bffd8c 	ori	$r12,$r12,0xfff
900000000000ea88:	0014b1ac 	and	$r12,$r13,$r12
900000000000ea8c:	0015018d 	move	$r13,$r12
900000000000ea90:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000ea94:	2980418d 	st.w	$r13,$r12,16(0x10)
  hdr->e_machine = t >> 16;
900000000000ea98:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000000ea9c:	0044c18c 	srli.w	$r12,$r12,0x10
900000000000eaa0:	0015018d 	move	$r13,$r12
900000000000eaa4:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000eaa8:	2980518d 	st.w	$r13,$r12,20(0x14)

  t = *(Elf64_Word*)(&eh->e_ehsize);
900000000000eaac:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000eab0:	02c0d18c 	addi.d	$r12,$r12,52(0x34)
900000000000eab4:	2880018c 	ld.w	$r12,$r12,0
900000000000eab8:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
  hdr->e_ehsize = t & 0xFFFF;
900000000000eabc:	28bf92cd 	ld.w	$r13,$r22,-28(0xfe4)
900000000000eac0:	140001ec 	lu12i.w	$r12,15(0xf)
900000000000eac4:	03bffd8c 	ori	$r12,$r12,0xfff
900000000000eac8:	0014b1ac 	and	$r12,$r13,$r12
900000000000eacc:	0015018d 	move	$r13,$r12
900000000000ead0:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000ead4:	2980f18d 	st.w	$r13,$r12,60(0x3c)
  hdr->e_phentsize = t >> 16;
900000000000ead8:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000000eadc:	0044c18c 	srli.w	$r12,$r12,0x10
900000000000eae0:	0015018d 	move	$r13,$r12
900000000000eae4:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000eae8:	2981018d 	st.w	$r13,$r12,64(0x40)

  t = *(Elf64_Word*)(&eh->e_phnum);
900000000000eaec:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000eaf0:	02c0e18c 	addi.d	$r12,$r12,56(0x38)
900000000000eaf4:	2880018c 	ld.w	$r12,$r12,0
900000000000eaf8:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
  hdr->e_phnum = t & 0xFFFF;
900000000000eafc:	28bf92cd 	ld.w	$r13,$r22,-28(0xfe4)
900000000000eb00:	140001ec 	lu12i.w	$r12,15(0xf)
900000000000eb04:	03bffd8c 	ori	$r12,$r12,0xfff
900000000000eb08:	0014b1ac 	and	$r12,$r13,$r12
900000000000eb0c:	0015018d 	move	$r13,$r12
900000000000eb10:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000eb14:	2981118d 	st.w	$r13,$r12,68(0x44)
  hdr->e_shentsize = t >> 16;
900000000000eb18:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000000eb1c:	0044c18c 	srli.w	$r12,$r12,0x10
900000000000eb20:	0015018d 	move	$r13,$r12
900000000000eb24:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000eb28:	2981218d 	st.w	$r13,$r12,72(0x48)

  t = *(Elf64_Word*)(&eh->e_shnum);
900000000000eb2c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000eb30:	02c0f18c 	addi.d	$r12,$r12,60(0x3c)
900000000000eb34:	2880018c 	ld.w	$r12,$r12,0
900000000000eb38:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
  hdr->e_shnum = t & 0xFFFF;
900000000000eb3c:	28bf92cd 	ld.w	$r13,$r22,-28(0xfe4)
900000000000eb40:	140001ec 	lu12i.w	$r12,15(0xf)
900000000000eb44:	03bffd8c 	ori	$r12,$r12,0xfff
900000000000eb48:	0014b1ac 	and	$r12,$r13,$r12
900000000000eb4c:	0015018d 	move	$r13,$r12
900000000000eb50:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000eb54:	2981318d 	st.w	$r13,$r12,76(0x4c)
  hdr->e_shstrndx = t >> 16;
900000000000eb58:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000000eb5c:	0044c18c 	srli.w	$r12,$r12,0x10
900000000000eb60:	0015018d 	move	$r13,$r12
900000000000eb64:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000eb68:	2981418d 	st.w	$r13,$r12,80(0x50)
}
900000000000eb6c:	03400000 	andi	$r0,$r0,0x0
900000000000eb70:	28c0a076 	ld.d	$r22,$r3,40(0x28)
900000000000eb74:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000eb78:	4c000020 	jirl	$r0,$r1,0

900000000000eb7c <mm_count_inc>:

static inline int
mm_count_inc(struct mm_struct *mm) {
900000000000eb7c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000eb80:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000000eb84:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000000eb88:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000eb8c:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    return atomic_add_return(&(mm->mm_count), 1);
900000000000eb90:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000eb94:	02c0918c 	addi.d	$r12,$r12,36(0x24)
900000000000eb98:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000000eb9c:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000000eba0:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
  local_intr_save (intr_flag);
900000000000eba4:	57fb83ff 	bl	-1152(0xffffb80) # 900000000000e724 <__intr_save>
900000000000eba8:	0015008c 	move	$r12,$r4
900000000000ebac:	29bf82cc 	st.w	$r12,$r22,-32(0xfe0)
  v->counter += i;
900000000000ebb0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ebb4:	2880018c 	ld.w	$r12,$r12,0
900000000000ebb8:	28bf92cd 	ld.w	$r13,$r22,-28(0xfe4)
900000000000ebbc:	001031ac 	add.w	$r12,$r13,$r12
900000000000ebc0:	0015018d 	move	$r13,$r12
900000000000ebc4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ebc8:	2980018d 	st.w	$r13,$r12,0
  local_intr_restore (intr_flag);
900000000000ebcc:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
900000000000ebd0:	00150184 	move	$r4,$r12
900000000000ebd4:	57fb83ff 	bl	-1152(0xffffb80) # 900000000000e754 <__intr_restore>
  return v->counter;
900000000000ebd8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ebdc:	2880018c 	ld.w	$r12,$r12,0
}
900000000000ebe0:	00150184 	move	$r4,$r12
900000000000ebe4:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000000ebe8:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000000ebec:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000ebf0:	4c000020 	jirl	$r0,$r1,0

900000000000ebf4 <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
900000000000ebf4:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000000ebf8:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000000ebfc:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000000ec00:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000000ec04:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
    return atomic_sub_return(&(mm->mm_count), 1);
900000000000ec08:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000ec0c:	02c0918c 	addi.d	$r12,$r12,36(0x24)
900000000000ec10:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000000ec14:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000000ec18:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
  return atomic_add_return(v, -i);
900000000000ec1c:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000000ec20:	0011300c 	sub.w	$r12,$r0,$r12
900000000000ec24:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000ec28:	29ff62cd 	st.d	$r13,$r22,-40(0xfd8)
900000000000ec2c:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
  local_intr_save (intr_flag);
900000000000ec30:	57faf7ff 	bl	-1292(0xffffaf4) # 900000000000e724 <__intr_save>
900000000000ec34:	0015008c 	move	$r12,$r4
900000000000ec38:	29bf42cc 	st.w	$r12,$r22,-48(0xfd0)
  v->counter += i;
900000000000ec3c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000ec40:	2880018c 	ld.w	$r12,$r12,0
900000000000ec44:	28bf52cd 	ld.w	$r13,$r22,-44(0xfd4)
900000000000ec48:	001031ac 	add.w	$r12,$r13,$r12
900000000000ec4c:	0015018d 	move	$r13,$r12
900000000000ec50:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000ec54:	2980018d 	st.w	$r13,$r12,0
  local_intr_restore (intr_flag);
900000000000ec58:	28bf42cc 	ld.w	$r12,$r22,-48(0xfd0)
900000000000ec5c:	00150184 	move	$r4,$r12
900000000000ec60:	57faf7ff 	bl	-1292(0xffffaf4) # 900000000000e754 <__intr_restore>
  return v->counter;
900000000000ec64:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000ec68:	2880018c 	ld.w	$r12,$r12,0
}
900000000000ec6c:	00150184 	move	$r4,$r12
900000000000ec70:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000000ec74:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000000ec78:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000000ec7c:	4c000020 	jirl	$r0,$r1,0

900000000000ec80 <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
900000000000ec80:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000ec84:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000000ec88:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000000ec8c:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000000ec90:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    if (mm != NULL) {
900000000000ec94:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ec98:	40003d80 	beqz	$r12,60(0x3c) # 900000000000ecd4 <lock_mm+0x54>
        down(&(mm->mm_sem));
900000000000ec9c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000eca0:	02c0a18c 	addi.d	$r12,$r12,40(0x28)
900000000000eca4:	00150184 	move	$r4,$r12
900000000000eca8:	57f183ff 	bl	-3712(0xffff180) # 900000000000de28 <down>
        if (current != NULL) {
900000000000ecac:	1c00426c 	pcaddu12i	$r12,531(0x213)
900000000000ecb0:	02deb18c 	addi.d	$r12,$r12,1964(0x7ac)
900000000000ecb4:	28c0018c 	ld.d	$r12,$r12,0
900000000000ecb8:	40001d80 	beqz	$r12,28(0x1c) # 900000000000ecd4 <lock_mm+0x54>
            mm->locked_by = current->pid;
900000000000ecbc:	1c00426c 	pcaddu12i	$r12,531(0x213)
900000000000ecc0:	02de718c 	addi.d	$r12,$r12,1948(0x79c)
900000000000ecc4:	28c0018c 	ld.d	$r12,$r12,0
900000000000ecc8:	2880118d 	ld.w	$r13,$r12,4(0x4)
900000000000eccc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ecd0:	2981018d 	st.w	$r13,$r12,64(0x40)
        }
    }
}
900000000000ecd4:	03400000 	andi	$r0,$r0,0x0
900000000000ecd8:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000000ecdc:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000000ece0:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000000ece4:	4c000020 	jirl	$r0,$r1,0

900000000000ece8 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
900000000000ece8:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000ecec:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000000ecf0:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000000ecf4:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000000ecf8:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    if (mm != NULL) {
900000000000ecfc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ed00:	40001d80 	beqz	$r12,28(0x1c) # 900000000000ed1c <unlock_mm+0x34>
        up(&(mm->mm_sem));
900000000000ed04:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ed08:	02c0a18c 	addi.d	$r12,$r12,40(0x28)
900000000000ed0c:	00150184 	move	$r4,$r12
900000000000ed10:	57f0e7ff 	bl	-3868(0xffff0e4) # 900000000000ddf4 <up>
        mm->locked_by = 0;
900000000000ed14:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ed18:	29810180 	st.w	$r0,$r12,64(0x40)
    }
}
900000000000ed1c:	03400000 	andi	$r0,$r0,0x0
900000000000ed20:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000000ed24:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000000ed28:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000000ed2c:	4c000020 	jirl	$r0,$r1,0

900000000000ed30 <fs_count_inc>:
fs_count(struct fs_struct *fs_struct) {
    return atomic_read(&(fs_struct->fs_count));
}

static inline int
fs_count_inc(struct fs_struct *fs_struct) {
900000000000ed30:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000ed34:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000000ed38:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000000ed3c:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000ed40:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    return atomic_add_return(&(fs_struct->fs_count), 1);
900000000000ed44:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000ed48:	02c0418c 	addi.d	$r12,$r12,16(0x10)
900000000000ed4c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000000ed50:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000000ed54:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
  local_intr_save (intr_flag);
900000000000ed58:	57f9cfff 	bl	-1588(0xffff9cc) # 900000000000e724 <__intr_save>
900000000000ed5c:	0015008c 	move	$r12,$r4
900000000000ed60:	29bf82cc 	st.w	$r12,$r22,-32(0xfe0)
  v->counter += i;
900000000000ed64:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ed68:	2880018c 	ld.w	$r12,$r12,0
900000000000ed6c:	28bf92cd 	ld.w	$r13,$r22,-28(0xfe4)
900000000000ed70:	001031ac 	add.w	$r12,$r13,$r12
900000000000ed74:	0015018d 	move	$r13,$r12
900000000000ed78:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ed7c:	2980018d 	st.w	$r13,$r12,0
  local_intr_restore (intr_flag);
900000000000ed80:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
900000000000ed84:	00150184 	move	$r4,$r12
900000000000ed88:	57f9cfff 	bl	-1588(0xffff9cc) # 900000000000e754 <__intr_restore>
  return v->counter;
900000000000ed8c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ed90:	2880018c 	ld.w	$r12,$r12,0
}
900000000000ed94:	00150184 	move	$r4,$r12
900000000000ed98:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000000ed9c:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000000eda0:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000eda4:	4c000020 	jirl	$r0,$r1,0

900000000000eda8 <fs_count_dec>:

static inline int
fs_count_dec(struct fs_struct *fs_struct) {
900000000000eda8:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000000edac:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000000edb0:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000000edb4:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000000edb8:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
    return atomic_sub_return(&(fs_struct->fs_count), 1);
900000000000edbc:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000edc0:	02c0418c 	addi.d	$r12,$r12,16(0x10)
900000000000edc4:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000000edc8:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000000edcc:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
  return atomic_add_return(v, -i);
900000000000edd0:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000000edd4:	0011300c 	sub.w	$r12,$r0,$r12
900000000000edd8:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000eddc:	29ff62cd 	st.d	$r13,$r22,-40(0xfd8)
900000000000ede0:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
  local_intr_save (intr_flag);
900000000000ede4:	57f943ff 	bl	-1728(0xffff940) # 900000000000e724 <__intr_save>
900000000000ede8:	0015008c 	move	$r12,$r4
900000000000edec:	29bf42cc 	st.w	$r12,$r22,-48(0xfd0)
  v->counter += i;
900000000000edf0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000edf4:	2880018c 	ld.w	$r12,$r12,0
900000000000edf8:	28bf52cd 	ld.w	$r13,$r22,-44(0xfd4)
900000000000edfc:	001031ac 	add.w	$r12,$r13,$r12
900000000000ee00:	0015018d 	move	$r13,$r12
900000000000ee04:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000ee08:	2980018d 	st.w	$r13,$r12,0
  local_intr_restore (intr_flag);
900000000000ee0c:	28bf42cc 	ld.w	$r12,$r22,-48(0xfd0)
900000000000ee10:	00150184 	move	$r4,$r12
900000000000ee14:	57f943ff 	bl	-1728(0xffff940) # 900000000000e754 <__intr_restore>
  return v->counter;
900000000000ee18:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000ee1c:	2880018c 	ld.w	$r12,$r12,0
}
900000000000ee20:	00150184 	move	$r4,$r12
900000000000ee24:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000000ee28:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000000ee2c:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000000ee30:	4c000020 	jirl	$r0,$r1,0

900000000000ee34 <alloc_proc>:
void kernel_thread_entry(void);
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);
// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
900000000000ee34:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000ee38:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000000ee3c:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000000ee40:	02c0c076 	addi.d	$r22,$r3,48(0x30)
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
900000000000ee44:	02856004 	addi.w	$r4,$r0,344(0x158)
900000000000ee48:	5787f3ff 	bl	-30736(0xfff87f0) # 9000000000007638 <kmalloc>
900000000000ee4c:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    if (proc != NULL) {
900000000000ee50:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ee54:	40013d80 	beqz	$r12,316(0x13c) # 900000000000ef90 <alloc_proc+0x15c>
        * struct run_queue *rq;                       // running queue contains Process
        * list_entry_t run_link;                      // the entry linked in run queue
        * int time_slice;                             // time slice for occupying the CPU
        * struct fs_struct *fs_struct;                // the file related info(pwd, files_count, files_array, fs_semaphore) of process
        */
        proc->state = PROC_UNINIT;
900000000000ee58:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ee5c:	29800180 	st.w	$r0,$r12,0
        proc->pid = -1;
900000000000ee60:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ee64:	02bffc0d 	addi.w	$r13,$r0,-1(0xfff)
900000000000ee68:	2980118d 	st.w	$r13,$r12,4(0x4)
        proc->runs = 0;
900000000000ee6c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ee70:	29802180 	st.w	$r0,$r12,8(0x8)
        proc->kstack = 0;
900000000000ee74:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ee78:	29c04180 	st.d	$r0,$r12,16(0x10)
        proc->need_resched = 0;
900000000000ee7c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ee80:	29806180 	st.w	$r0,$r12,24(0x18)
        proc->parent = NULL;
900000000000ee84:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ee88:	29c08180 	st.d	$r0,$r12,32(0x20)
        proc->mm = NULL;
900000000000ee8c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ee90:	29c0a180 	st.d	$r0,$r12,40(0x28)
        proc->tf = NULL;
900000000000ee94:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ee98:	29c26180 	st.d	$r0,$r12,152(0x98)
        proc->flags = 0;
900000000000ee9c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000eea0:	2982a180 	st.w	$r0,$r12,168(0xa8)
        proc->need_resched = 0;
900000000000eea4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000eea8:	29806180 	st.w	$r0,$r12,24(0x18)
        proc->cr3 = boot_cr3;
900000000000eeac:	1c00426c 	pcaddu12i	$r12,531(0x213)
900000000000eeb0:	28e2918c 	ld.d	$r12,$r12,-1884(0x8a4)
900000000000eeb4:	28c0018d 	ld.d	$r13,$r12,0
900000000000eeb8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000eebc:	29c2818d 	st.d	$r13,$r12,160(0xa0)
        memset(&(proc->context), 0, sizeof(struct context));
900000000000eec0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000eec4:	02c0c18c 	addi.d	$r12,$r12,48(0x30)
900000000000eec8:	0281a006 	addi.w	$r6,$r0,104(0x68)
900000000000eecc:	00150005 	move	$r5,$r0
900000000000eed0:	00150184 	move	$r4,$r12
900000000000eed4:	57564fff 	bl	-43444(0xfff564c) # 9000000000004520 <memset>
        memset(proc->name, 0, PROC_NAME_LEN);
900000000000eed8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000eedc:	02c2b18c 	addi.d	$r12,$r12,172(0xac)
900000000000eee0:	02807806 	addi.w	$r6,$r0,30(0x1e)
900000000000eee4:	00150005 	move	$r5,$r0
900000000000eee8:	00150184 	move	$r4,$r12
900000000000eeec:	575637ff 	bl	-43468(0xfff5634) # 9000000000004520 <memset>
        proc->exit_code = 0;
900000000000eef0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000eef4:	2983c180 	st.w	$r0,$r12,240(0xf0)
        proc->wait_state = 0;
900000000000eef8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000eefc:	2983d180 	st.w	$r0,$r12,244(0xf4)
        list_init(&(proc->list_link));
900000000000ef00:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ef04:	02c3418c 	addi.d	$r12,$r12,208(0xd0)
900000000000ef08:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
900000000000ef0c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000ef10:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000ef14:	29c0218d 	st.d	$r13,$r12,8(0x8)
900000000000ef18:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000ef1c:	28c0218d 	ld.d	$r13,$r12,8(0x8)
900000000000ef20:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000ef24:	29c0018d 	st.d	$r13,$r12,0
        proc->cptr = proc->yptr = proc->optr = NULL;
900000000000ef28:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ef2c:	29c42180 	st.d	$r0,$r12,264(0x108)
900000000000ef30:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ef34:	28c4218d 	ld.d	$r13,$r12,264(0x108)
900000000000ef38:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ef3c:	29c4018d 	st.d	$r13,$r12,256(0x100)
900000000000ef40:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ef44:	28c4018d 	ld.d	$r13,$r12,256(0x100)
900000000000ef48:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ef4c:	29c3e18d 	st.d	$r13,$r12,248(0xf8)
        proc->fs_struct = NULL;
900000000000ef50:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ef54:	29c4c180 	st.d	$r0,$r12,304(0x130)
        proc->rq = NULL;
900000000000ef58:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ef5c:	29c44180 	st.d	$r0,$r12,272(0x110)
        list_init(&(proc->run_link));
900000000000ef60:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ef64:	02c4618c 	addi.d	$r12,$r12,280(0x118)
900000000000ef68:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
900000000000ef6c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000ef70:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
900000000000ef74:	29c0218d 	st.d	$r13,$r12,8(0x8)
900000000000ef78:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000ef7c:	28c0218d 	ld.d	$r13,$r12,8(0x8)
900000000000ef80:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000ef84:	29c0018d 	st.d	$r13,$r12,0
        proc->time_slice = 0;
900000000000ef88:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000ef8c:	2984a180 	st.w	$r0,$r12,296(0x128)
    #endif
    }
    return proc;
900000000000ef90:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
   
}
900000000000ef94:	00150184 	move	$r4,$r12
900000000000ef98:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000000ef9c:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000000efa0:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000efa4:	4c000020 	jirl	$r0,$r1,0

900000000000efa8 <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
900000000000efa8:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000efac:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000000efb0:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000000efb4:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000000efb8:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000000efbc:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
  memset(proc->name, 0, sizeof(proc->name));
900000000000efc0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000efc4:	02c2b18c 	addi.d	$r12,$r12,172(0xac)
900000000000efc8:	02807c06 	addi.w	$r6,$r0,31(0x1f)
900000000000efcc:	00150005 	move	$r5,$r0
900000000000efd0:	00150184 	move	$r4,$r12
900000000000efd4:	57554fff 	bl	-43700(0xfff554c) # 9000000000004520 <memset>
    return memcpy(proc->name, name, PROC_NAME_LEN);
900000000000efd8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000efdc:	02c2b18c 	addi.d	$r12,$r12,172(0xac)
900000000000efe0:	02807806 	addi.w	$r6,$r0,30(0x1e)
900000000000efe4:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
900000000000efe8:	00150184 	move	$r4,$r12
900000000000efec:	57559bff 	bl	-43624(0xfff5598) # 9000000000004584 <memcpy>
900000000000eff0:	0015008c 	move	$r12,$r4
}
900000000000eff4:	00150184 	move	$r4,$r12
900000000000eff8:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000000effc:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000000f000:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000000f004:	4c000020 	jirl	$r0,$r1,0

900000000000f008 <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
900000000000f008:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000f00c:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000000f010:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000000f014:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000000f018:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
900000000000f01c:	02807c06 	addi.w	$r6,$r0,31(0x1f)
900000000000f020:	00150005 	move	$r5,$r0
900000000000f024:	1c0042e4 	pcaddu12i	$r4,535(0x217)
900000000000f028:	02d11084 	addi.d	$r4,$r4,1092(0x444)
900000000000f02c:	5754f7ff 	bl	-43788(0xfff54f4) # 9000000000004520 <memset>
    return memcpy(name, proc->name, PROC_NAME_LEN);
900000000000f030:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000f034:	02c2b18c 	addi.d	$r12,$r12,172(0xac)
900000000000f038:	02807806 	addi.w	$r6,$r0,30(0x1e)
900000000000f03c:	00150185 	move	$r5,$r12
900000000000f040:	1c0042e4 	pcaddu12i	$r4,535(0x217)
900000000000f044:	02d0a084 	addi.d	$r4,$r4,1064(0x428)
900000000000f048:	57553fff 	bl	-43716(0xfff553c) # 9000000000004584 <memcpy>
900000000000f04c:	0015008c 	move	$r12,$r4
}
900000000000f050:	00150184 	move	$r4,$r12
900000000000f054:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000000f058:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000000f05c:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000000f060:	4c000020 	jirl	$r0,$r1,0

900000000000f064 <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
900000000000f064:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
900000000000f068:	29c16076 	st.d	$r22,$r3,88(0x58)
900000000000f06c:	02c18076 	addi.d	$r22,$r3,96(0x60)
900000000000f070:	29fea2c4 	st.d	$r4,$r22,-88(0xfa8)
    list_add(&proc_list, &(proc->list_link));
900000000000f074:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000000f078:	02c3418c 	addi.d	$r12,$r12,208(0xd0)
900000000000f07c:	1c00424d 	pcaddu12i	$r13,530(0x212)
900000000000f080:	28d9f1ad 	ld.d	$r13,$r13,1660(0x67c)
900000000000f084:	29ffa2cd 	st.d	$r13,$r22,-24(0xfe8)
900000000000f088:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
900000000000f08c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000f090:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
900000000000f094:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000f098:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    __list_add(elm, listelm, listelm->next);
900000000000f09c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000f0a0:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000000f0a4:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000000f0a8:	29ff22cd 	st.d	$r13,$r22,-56(0xfc8)
900000000000f0ac:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000f0b0:	29ff02cd 	st.d	$r13,$r22,-64(0xfc0)
900000000000f0b4:	29fee2cc 	st.d	$r12,$r22,-72(0xfb8)
    prev->next = next->prev = elm;
900000000000f0b8:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000f0bc:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
900000000000f0c0:	29c0018d 	st.d	$r13,$r12,0
900000000000f0c4:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000f0c8:	28c0018d 	ld.d	$r13,$r12,0
900000000000f0cc:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000f0d0:	29c0218d 	st.d	$r13,$r12,8(0x8)
    elm->next = next;
900000000000f0d4:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000f0d8:	28fee2cd 	ld.d	$r13,$r22,-72(0xfb8)
900000000000f0dc:	29c0218d 	st.d	$r13,$r12,8(0x8)
    elm->prev = prev;
900000000000f0e0:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000f0e4:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
900000000000f0e8:	29c0018d 	st.d	$r13,$r12,0
    proc->yptr = NULL;
900000000000f0ec:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000000f0f0:	29c40180 	st.d	$r0,$r12,256(0x100)
    if ((proc->optr = proc->parent->cptr) != NULL) {
900000000000f0f4:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000000f0f8:	28c0818c 	ld.d	$r12,$r12,32(0x20)
900000000000f0fc:	28c3e18d 	ld.d	$r13,$r12,248(0xf8)
900000000000f100:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000000f104:	29c4218d 	st.d	$r13,$r12,264(0x108)
900000000000f108:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000000f10c:	28c4218c 	ld.d	$r12,$r12,264(0x108)
900000000000f110:	40001580 	beqz	$r12,20(0x14) # 900000000000f124 <set_links+0xc0>
        proc->optr->yptr = proc;
900000000000f114:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000000f118:	28c4218c 	ld.d	$r12,$r12,264(0x108)
900000000000f11c:	28fea2cd 	ld.d	$r13,$r22,-88(0xfa8)
900000000000f120:	29c4018d 	st.d	$r13,$r12,256(0x100)
    }
    proc->parent->cptr = proc;
900000000000f124:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000000f128:	28c0818c 	ld.d	$r12,$r12,32(0x20)
900000000000f12c:	28fea2cd 	ld.d	$r13,$r22,-88(0xfa8)
900000000000f130:	29c3e18d 	st.d	$r13,$r12,248(0xf8)
    nr_process ++;
900000000000f134:	1c0042ec 	pcaddu12i	$r12,535(0x217)
900000000000f138:	02ccb18c 	addi.d	$r12,$r12,812(0x32c)
900000000000f13c:	2880018c 	ld.w	$r12,$r12,0
900000000000f140:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000000f144:	0015018d 	move	$r13,$r12
900000000000f148:	1c0042ec 	pcaddu12i	$r12,535(0x217)
900000000000f14c:	02cc618c 	addi.d	$r12,$r12,792(0x318)
900000000000f150:	2980018d 	st.w	$r13,$r12,0
}
900000000000f154:	03400000 	andi	$r0,$r0,0x0
900000000000f158:	28c16076 	ld.d	$r22,$r3,88(0x58)
900000000000f15c:	02c18063 	addi.d	$r3,$r3,96(0x60)
900000000000f160:	4c000020 	jirl	$r0,$r1,0

900000000000f164 <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
900000000000f164:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000000f168:	29c0e076 	st.d	$r22,$r3,56(0x38)
900000000000f16c:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000000f170:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
    list_del(&(proc->list_link));
900000000000f174:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000f178:	02c3418c 	addi.d	$r12,$r12,208(0xd0)
900000000000f17c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    __list_del(listelm->prev, listelm->next);
900000000000f180:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000f184:	28c0018d 	ld.d	$r13,$r12,0
900000000000f188:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000f18c:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000000f190:	29ff82cd 	st.d	$r13,$r22,-32(0xfe0)
900000000000f194:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    prev->next = next;
900000000000f198:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000f19c:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000f1a0:	29c0218d 	st.d	$r13,$r12,8(0x8)
    next->prev = prev;
900000000000f1a4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000f1a8:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
900000000000f1ac:	29c0018d 	st.d	$r13,$r12,0
    if (proc->optr != NULL) {
900000000000f1b0:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000f1b4:	28c4218c 	ld.d	$r12,$r12,264(0x108)
900000000000f1b8:	40001980 	beqz	$r12,24(0x18) # 900000000000f1d0 <remove_links+0x6c>
        proc->optr->yptr = proc->yptr;
900000000000f1bc:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000f1c0:	28c4218c 	ld.d	$r12,$r12,264(0x108)
900000000000f1c4:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
900000000000f1c8:	28c401ad 	ld.d	$r13,$r13,256(0x100)
900000000000f1cc:	29c4018d 	st.d	$r13,$r12,256(0x100)
    }
    if (proc->yptr != NULL) {
900000000000f1d0:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000f1d4:	28c4018c 	ld.d	$r12,$r12,256(0x100)
900000000000f1d8:	40001d80 	beqz	$r12,28(0x1c) # 900000000000f1f4 <remove_links+0x90>
        proc->yptr->optr = proc->optr;
900000000000f1dc:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000f1e0:	28c4018c 	ld.d	$r12,$r12,256(0x100)
900000000000f1e4:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
900000000000f1e8:	28c421ad 	ld.d	$r13,$r13,264(0x108)
900000000000f1ec:	29c4218d 	st.d	$r13,$r12,264(0x108)
900000000000f1f0:	50001800 	b	24(0x18) # 900000000000f208 <remove_links+0xa4>
    }
    else {
       proc->parent->cptr = proc->optr;
900000000000f1f4:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000f1f8:	28c0818c 	ld.d	$r12,$r12,32(0x20)
900000000000f1fc:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
900000000000f200:	28c421ad 	ld.d	$r13,$r13,264(0x108)
900000000000f204:	29c3e18d 	st.d	$r13,$r12,248(0xf8)
    }
    nr_process --;
900000000000f208:	1c0042ec 	pcaddu12i	$r12,535(0x217)
900000000000f20c:	02c9618c 	addi.d	$r12,$r12,600(0x258)
900000000000f210:	2880018c 	ld.w	$r12,$r12,0
900000000000f214:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
900000000000f218:	0015018d 	move	$r13,$r12
900000000000f21c:	1c0042ec 	pcaddu12i	$r12,535(0x217)
900000000000f220:	02c9118c 	addi.d	$r12,$r12,580(0x244)
900000000000f224:	2980018d 	st.w	$r13,$r12,0
}
900000000000f228:	03400000 	andi	$r0,$r0,0x0
900000000000f22c:	28c0e076 	ld.d	$r22,$r3,56(0x38)
900000000000f230:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000000f234:	4c000020 	jirl	$r0,$r1,0

900000000000f238 <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
900000000000f238:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000f23c:	29c0a076 	st.d	$r22,$r3,40(0x28)
900000000000f240:	02c0c076 	addi.d	$r22,$r3,48(0x30)
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
900000000000f244:	1c00424c 	pcaddu12i	$r12,530(0x212)
900000000000f248:	28d2d18c 	ld.d	$r12,$r12,1204(0x4b4)
900000000000f24c:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
900000000000f250:	1c0002ac 	pcaddu12i	$r12,21(0x15)
900000000000f254:	02f8a18c 	addi.d	$r12,$r12,-472(0xe28)
900000000000f258:	2880018c 	ld.w	$r12,$r12,0
900000000000f25c:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000000f260:	0015018d 	move	$r13,$r12
900000000000f264:	1c0002ac 	pcaddu12i	$r12,21(0x15)
900000000000f268:	02f8518c 	addi.d	$r12,$r12,-492(0xe14)
900000000000f26c:	2980018d 	st.w	$r13,$r12,0
900000000000f270:	1c0002ac 	pcaddu12i	$r12,21(0x15)
900000000000f274:	02f8218c 	addi.d	$r12,$r12,-504(0xe08)
900000000000f278:	2880018c 	ld.w	$r12,$r12,0
900000000000f27c:	0015018d 	move	$r13,$r12
900000000000f280:	1400004c 	lu12i.w	$r12,2(0x2)
900000000000f284:	600019ac 	blt	$r13,$r12,24(0x18) # 900000000000f29c <get_pid+0x64>
        last_pid = 1;
900000000000f288:	1c0002ac 	pcaddu12i	$r12,21(0x15)
900000000000f28c:	02f7c18c 	addi.d	$r12,$r12,-528(0xdf0)
900000000000f290:	0280040d 	addi.w	$r13,$r0,1(0x1)
900000000000f294:	2980018d 	st.w	$r13,$r12,0
        goto inside;
900000000000f298:	50002400 	b	36(0x24) # 900000000000f2bc <get_pid+0x84>
    }
    if (last_pid >= next_safe) {
900000000000f29c:	1c0002ac 	pcaddu12i	$r12,21(0x15)
900000000000f2a0:	02f7718c 	addi.d	$r12,$r12,-548(0xddc)
900000000000f2a4:	2880018d 	ld.w	$r13,$r12,0
900000000000f2a8:	1c0002ac 	pcaddu12i	$r12,21(0x15)
900000000000f2ac:	02f7518c 	addi.d	$r12,$r12,-556(0xdd4)
900000000000f2b0:	2880018c 	ld.w	$r12,$r12,0
900000000000f2b4:	600125ac 	blt	$r13,$r12,292(0x124) # 900000000000f3d8 <get_pid+0x1a0>
    inside:
900000000000f2b8:	03400000 	andi	$r0,$r0,0x0
        next_safe = MAX_PID;
900000000000f2bc:	1c0002ac 	pcaddu12i	$r12,21(0x15)
900000000000f2c0:	02f7018c 	addi.d	$r12,$r12,-576(0xdc0)
900000000000f2c4:	1400004d 	lu12i.w	$r13,2(0x2)
900000000000f2c8:	2980018d 	st.w	$r13,$r12,0
    repeat:
        le = list;
900000000000f2cc:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000f2d0:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
        while ((le = list_next(le)) != list) {
900000000000f2d4:	5000e400 	b	228(0xe4) # 900000000000f3b8 <get_pid+0x180>
            proc = le2proc(le, list_link);
900000000000f2d8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000f2dc:	02fcc18c 	addi.d	$r12,$r12,-208(0xf30)
900000000000f2e0:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
            if (proc->pid == last_pid) {
900000000000f2e4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000f2e8:	2880118d 	ld.w	$r13,$r12,4(0x4)
900000000000f2ec:	1c0002ac 	pcaddu12i	$r12,21(0x15)
900000000000f2f0:	02f6318c 	addi.d	$r12,$r12,-628(0xd8c)
900000000000f2f4:	2880018c 	ld.w	$r12,$r12,0
900000000000f2f8:	5c007dac 	bne	$r13,$r12,124(0x7c) # 900000000000f374 <get_pid+0x13c>
                if (++ last_pid >= next_safe) {
900000000000f2fc:	1c0002ac 	pcaddu12i	$r12,21(0x15)
900000000000f300:	02f5f18c 	addi.d	$r12,$r12,-644(0xd7c)
900000000000f304:	2880018c 	ld.w	$r12,$r12,0
900000000000f308:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000000f30c:	0015018d 	move	$r13,$r12
900000000000f310:	1c0002ac 	pcaddu12i	$r12,21(0x15)
900000000000f314:	02f5a18c 	addi.d	$r12,$r12,-664(0xd68)
900000000000f318:	2980018d 	st.w	$r13,$r12,0
900000000000f31c:	1c0002ac 	pcaddu12i	$r12,21(0x15)
900000000000f320:	02f5718c 	addi.d	$r12,$r12,-676(0xd5c)
900000000000f324:	2880018d 	ld.w	$r13,$r12,0
900000000000f328:	1c0002ac 	pcaddu12i	$r12,21(0x15)
900000000000f32c:	02f5518c 	addi.d	$r12,$r12,-684(0xd54)
900000000000f330:	2880018c 	ld.w	$r12,$r12,0
900000000000f334:	600085ac 	blt	$r13,$r12,132(0x84) # 900000000000f3b8 <get_pid+0x180>
                    if (last_pid >= MAX_PID) {
900000000000f338:	1c0002ac 	pcaddu12i	$r12,21(0x15)
900000000000f33c:	02f5018c 	addi.d	$r12,$r12,-704(0xd40)
900000000000f340:	2880018c 	ld.w	$r12,$r12,0
900000000000f344:	0015018d 	move	$r13,$r12
900000000000f348:	1400004c 	lu12i.w	$r12,2(0x2)
900000000000f34c:	600015ac 	blt	$r13,$r12,20(0x14) # 900000000000f360 <get_pid+0x128>
                        last_pid = 1;
900000000000f350:	1c0002ac 	pcaddu12i	$r12,21(0x15)
900000000000f354:	02f4a18c 	addi.d	$r12,$r12,-728(0xd28)
900000000000f358:	0280040d 	addi.w	$r13,$r0,1(0x1)
900000000000f35c:	2980018d 	st.w	$r13,$r12,0
                    }
                    next_safe = MAX_PID;
900000000000f360:	1c0002ac 	pcaddu12i	$r12,21(0x15)
900000000000f364:	02f4718c 	addi.d	$r12,$r12,-740(0xd1c)
900000000000f368:	1400004d 	lu12i.w	$r13,2(0x2)
900000000000f36c:	2980018d 	st.w	$r13,$r12,0
                    goto repeat;
900000000000f370:	53ff5fff 	b	-164(0xfffff5c) # 900000000000f2cc <get_pid+0x94>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
900000000000f374:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000f378:	2880118d 	ld.w	$r13,$r12,4(0x4)
900000000000f37c:	1c0002ac 	pcaddu12i	$r12,21(0x15)
900000000000f380:	02f3f18c 	addi.d	$r12,$r12,-772(0xcfc)
900000000000f384:	2880018c 	ld.w	$r12,$r12,0
900000000000f388:	6400318d 	bge	$r12,$r13,48(0x30) # 900000000000f3b8 <get_pid+0x180>
900000000000f38c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000f390:	2880118d 	ld.w	$r13,$r12,4(0x4)
900000000000f394:	1c0002ac 	pcaddu12i	$r12,21(0x15)
900000000000f398:	02f3a18c 	addi.d	$r12,$r12,-792(0xce8)
900000000000f39c:	2880018c 	ld.w	$r12,$r12,0
900000000000f3a0:	640019ac 	bge	$r13,$r12,24(0x18) # 900000000000f3b8 <get_pid+0x180>
                next_safe = proc->pid;
900000000000f3a4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000f3a8:	2880118d 	ld.w	$r13,$r12,4(0x4)
900000000000f3ac:	1c0002ac 	pcaddu12i	$r12,21(0x15)
900000000000f3b0:	02f3418c 	addi.d	$r12,$r12,-816(0xcd0)
900000000000f3b4:	2980018d 	st.w	$r13,$r12,0
900000000000f3b8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000f3bc:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    return listelm->next;
900000000000f3c0:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000f3c4:	28c0218c 	ld.d	$r12,$r12,8(0x8)
        while ((le = list_next(le)) != list) {
900000000000f3c8:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000000f3cc:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000f3d0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000f3d4:	5fff05ac 	bne	$r13,$r12,-252(0x3ff04) # 900000000000f2d8 <get_pid+0xa0>
            }
        }
    }
    return last_pid;
900000000000f3d8:	1c0002ac 	pcaddu12i	$r12,21(0x15)
900000000000f3dc:	02f2818c 	addi.d	$r12,$r12,-864(0xca0)
900000000000f3e0:	2880018c 	ld.w	$r12,$r12,0
}
900000000000f3e4:	00150184 	move	$r4,$r12
900000000000f3e8:	28c0a076 	ld.d	$r22,$r3,40(0x28)
900000000000f3ec:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000f3f0:	4c000020 	jirl	$r0,$r1,0

900000000000f3f4 <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
900000000000f3f4:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000000f3f8:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000000f3fc:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000000f400:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000000f404:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
    if (proc != current) {
900000000000f408:	1c00426c 	pcaddu12i	$r12,531(0x213)
900000000000f40c:	02c1418c 	addi.d	$r12,$r12,80(0x50)
900000000000f410:	28c0018c 	ld.d	$r12,$r12,0
900000000000f414:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
900000000000f418:	580075ac 	beq	$r13,$r12,116(0x74) # 900000000000f48c <proc_run+0x98>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
900000000000f41c:	1c00426c 	pcaddu12i	$r12,531(0x213)
900000000000f420:	02c0f18c 	addi.d	$r12,$r12,60(0x3c)
900000000000f424:	28c0018c 	ld.d	$r12,$r12,0
900000000000f428:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000000f42c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000f430:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
        local_intr_save(intr_flag);
900000000000f434:	57f2f3ff 	bl	-3344(0xffff2f0) # 900000000000e724 <__intr_save>
900000000000f438:	0015008c 	move	$r12,$r4
900000000000f43c:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
        {
          //panic("unimpl");
            current = proc;
900000000000f440:	1c00426c 	pcaddu12i	$r12,531(0x213)
900000000000f444:	02c0618c 	addi.d	$r12,$r12,24(0x18)
900000000000f448:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
900000000000f44c:	29c0018d 	st.d	$r13,$r12,0
            //load_sp(next->kstack + KSTACKSIZE);
            lcr3(next->cr3);
900000000000f450:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000f454:	28c2818c 	ld.d	$r12,$r12,160(0xa0)
900000000000f458:	00150184 	move	$r4,$r12
900000000000f45c:	579d4fff 	bl	-25268(0xfff9d4c) # 90000000000091a8 <lcr3>
            tlb_invalidate_all();
900000000000f460:	579737ff 	bl	-26828(0xfff9734) # 9000000000008b94 <tlb_invalidate_all>
            // print_context(&(prev->context));
            // print_context(&(next->context));
            switch_to(&(prev->context), &(next->context));
900000000000f464:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000f468:	02c0c18d 	addi.d	$r13,$r12,48(0x30)
900000000000f46c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000f470:	02c0c18c 	addi.d	$r12,$r12,48(0x30)
900000000000f474:	00150185 	move	$r5,$r12
900000000000f478:	001501a4 	move	$r4,$r13
900000000000f47c:	54ebec00 	bl	60396(0xebec) # 900000000001e068 <switch_to>
        }
        local_intr_restore(intr_flag);
900000000000f480:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
900000000000f484:	00150184 	move	$r4,$r12
900000000000f488:	57f2cfff 	bl	-3380(0xffff2cc) # 900000000000e754 <__intr_restore>
    }
}
900000000000f48c:	03400000 	andi	$r0,$r0,0x0
900000000000f490:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000000f494:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000000f498:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000000f49c:	4c000020 	jirl	$r0,$r1,0

900000000000f4a0 <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
900000000000f4a0:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000000f4a4:	29c02061 	st.d	$r1,$r3,8(0x8)
900000000000f4a8:	29c00076 	st.d	$r22,$r3,0
900000000000f4ac:	02c04076 	addi.d	$r22,$r3,16(0x10)
    //print_trapframe(current->tf);
    forkrets(current->tf);
900000000000f4b0:	1c00426c 	pcaddu12i	$r12,531(0x213)
900000000000f4b4:	02fea18c 	addi.d	$r12,$r12,-88(0xfa8)
900000000000f4b8:	28c0018c 	ld.d	$r12,$r12,0
900000000000f4bc:	28c2618c 	ld.d	$r12,$r12,152(0x98)
900000000000f4c0:	00150184 	move	$r4,$r12
900000000000f4c4:	54eb9c00 	bl	60316(0xeb9c) # 900000000001e060 <forkrets>
}
900000000000f4c8:	03400000 	andi	$r0,$r0,0x0
900000000000f4cc:	28c02061 	ld.d	$r1,$r3,8(0x8)
900000000000f4d0:	28c00076 	ld.d	$r22,$r3,0
900000000000f4d4:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000000f4d8:	4c000020 	jirl	$r0,$r1,0

900000000000f4dc <hash_proc>:


// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
900000000000f4dc:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
900000000000f4e0:	29c16061 	st.d	$r1,$r3,88(0x58)
900000000000f4e4:	29c14076 	st.d	$r22,$r3,80(0x50)
900000000000f4e8:	02c18076 	addi.d	$r22,$r3,96(0x60)
900000000000f4ec:	29fea2c4 	st.d	$r4,$r22,-88(0xfa8)
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
900000000000f4f0:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000000f4f4:	2880118c 	ld.w	$r12,$r12,4(0x4)
900000000000f4f8:	02802805 	addi.w	$r5,$r0,10(0xa)
900000000000f4fc:	00150184 	move	$r4,$r12
900000000000f500:	571ecbff 	bl	-57656(0xfff1ec8) # 90000000000013c8 <hash32>
900000000000f504:	0015008c 	move	$r12,$r4
900000000000f508:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
900000000000f50c:	0041118d 	slli.d	$r13,$r12,0x4
900000000000f510:	1c00426c 	pcaddu12i	$r12,531(0x213)
900000000000f514:	02fd418c 	addi.d	$r12,$r12,-176(0xf50)
900000000000f518:	0010b1ad 	add.d	$r13,$r13,$r12
900000000000f51c:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000000f520:	02c3818c 	addi.d	$r12,$r12,224(0xe0)
900000000000f524:	29ffa2cd 	st.d	$r13,$r22,-24(0xfe8)
900000000000f528:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
900000000000f52c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000f530:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
900000000000f534:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000f538:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    __list_add(elm, listelm, listelm->next);
900000000000f53c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000f540:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000000f544:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000000f548:	29ff22cd 	st.d	$r13,$r22,-56(0xfc8)
900000000000f54c:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000f550:	29ff02cd 	st.d	$r13,$r22,-64(0xfc0)
900000000000f554:	29fee2cc 	st.d	$r12,$r22,-72(0xfb8)
    prev->next = next->prev = elm;
900000000000f558:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000f55c:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
900000000000f560:	29c0018d 	st.d	$r13,$r12,0
900000000000f564:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000000f568:	28c0018d 	ld.d	$r13,$r12,0
900000000000f56c:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000f570:	29c0218d 	st.d	$r13,$r12,8(0x8)
    elm->next = next;
900000000000f574:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000f578:	28fee2cd 	ld.d	$r13,$r22,-72(0xfb8)
900000000000f57c:	29c0218d 	st.d	$r13,$r12,8(0x8)
    elm->prev = prev;
900000000000f580:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000f584:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
900000000000f588:	29c0018d 	st.d	$r13,$r12,0
}
900000000000f58c:	03400000 	andi	$r0,$r0,0x0
900000000000f590:	28c16061 	ld.d	$r1,$r3,88(0x58)
900000000000f594:	28c14076 	ld.d	$r22,$r3,80(0x50)
900000000000f598:	02c18063 	addi.d	$r3,$r3,96(0x60)
900000000000f59c:	4c000020 	jirl	$r0,$r1,0

900000000000f5a0 <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
900000000000f5a0:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000000f5a4:	29c0e076 	st.d	$r22,$r3,56(0x38)
900000000000f5a8:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000000f5ac:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
    list_del(&(proc->hash_link));
900000000000f5b0:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000000f5b4:	02c3818c 	addi.d	$r12,$r12,224(0xe0)
900000000000f5b8:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    __list_del(listelm->prev, listelm->next);
900000000000f5bc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000f5c0:	28c0018d 	ld.d	$r13,$r12,0
900000000000f5c4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000f5c8:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000000f5cc:	29ff82cd 	st.d	$r13,$r22,-32(0xfe0)
900000000000f5d0:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    prev->next = next;
900000000000f5d4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000f5d8:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000f5dc:	29c0218d 	st.d	$r13,$r12,8(0x8)
    next->prev = prev;
900000000000f5e0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000f5e4:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
900000000000f5e8:	29c0018d 	st.d	$r13,$r12,0
}
900000000000f5ec:	03400000 	andi	$r0,$r0,0x0
900000000000f5f0:	28c0e076 	ld.d	$r22,$r3,56(0x38)
900000000000f5f4:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000000f5f8:	4c000020 	jirl	$r0,$r1,0

900000000000f5fc <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
900000000000f5fc:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000000f600:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000000f604:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000000f608:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000000f60c:	0015008c 	move	$r12,$r4
900000000000f610:	0040818c 	slli.w	$r12,$r12,0x0
900000000000f614:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
    if (0 < pid && pid < MAX_PID) {
900000000000f618:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
900000000000f61c:	6400900c 	bge	$r0,$r12,144(0x90) # 900000000000f6ac <find_proc+0xb0>
900000000000f620:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
900000000000f624:	0015018d 	move	$r13,$r12
900000000000f628:	1400004c 	lu12i.w	$r12,2(0x2)
900000000000f62c:	640081ac 	bge	$r13,$r12,128(0x80) # 900000000000f6ac <find_proc+0xb0>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
900000000000f630:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
900000000000f634:	02802805 	addi.w	$r5,$r0,10(0xa)
900000000000f638:	00150184 	move	$r4,$r12
900000000000f63c:	571d8fff 	bl	-57972(0xfff1d8c) # 90000000000013c8 <hash32>
900000000000f640:	0015008c 	move	$r12,$r4
900000000000f644:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
900000000000f648:	0041118d 	slli.d	$r13,$r12,0x4
900000000000f64c:	1c00426c 	pcaddu12i	$r12,531(0x213)
900000000000f650:	02f8518c 	addi.d	$r12,$r12,-492(0xe14)
900000000000f654:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000f658:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
900000000000f65c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000f660:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
        while ((le = list_next(le)) != list) {
900000000000f664:	50002800 	b	40(0x28) # 900000000000f68c <find_proc+0x90>
            struct proc_struct *proc = le2proc(le, hash_link);
900000000000f668:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000f66c:	02fc818c 	addi.d	$r12,$r12,-224(0xf20)
900000000000f670:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
            if (proc->pid == pid) {
900000000000f674:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000f678:	2880118d 	ld.w	$r13,$r12,4(0x4)
900000000000f67c:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
900000000000f680:	5c000d8d 	bne	$r12,$r13,12(0xc) # 900000000000f68c <find_proc+0x90>
                return proc;
900000000000f684:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000f688:	50002800 	b	40(0x28) # 900000000000f6b0 <find_proc+0xb4>
900000000000f68c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000f690:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    return listelm->next;
900000000000f694:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000000f698:	28c0218c 	ld.d	$r12,$r12,8(0x8)
        while ((le = list_next(le)) != list) {
900000000000f69c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000000f6a0:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000f6a4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000f6a8:	5fffc1ac 	bne	$r13,$r12,-64(0x3ffc0) # 900000000000f668 <find_proc+0x6c>
            }
        }
    }
    return NULL;
900000000000f6ac:	0015000c 	move	$r12,$r0
}
900000000000f6b0:	00150184 	move	$r4,$r12
900000000000f6b4:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000000f6b8:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000000f6bc:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000000f6c0:	4c000020 	jirl	$r0,$r1,0

900000000000f6c4 <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
900000000000f6c4:	02fb0063 	addi.d	$r3,$r3,-320(0xec0)
900000000000f6c8:	29c4e061 	st.d	$r1,$r3,312(0x138)
900000000000f6cc:	29c4c076 	st.d	$r22,$r3,304(0x130)
900000000000f6d0:	02c50076 	addi.d	$r22,$r3,320(0x140)
900000000000f6d4:	29fb62c4 	st.d	$r4,$r22,-296(0xed8)
900000000000f6d8:	29fb42c5 	st.d	$r5,$r22,-304(0xed0)
900000000000f6dc:	001500cc 	move	$r12,$r6
900000000000f6e0:	0040818c 	slli.w	$r12,$r12,0x0
900000000000f6e4:	29bb32cc 	st.w	$r12,$r22,-308(0xecc)
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
900000000000f6e8:	02fb82cc 	addi.d	$r12,$r22,-288(0xee0)
900000000000f6ec:	02844006 	addi.w	$r6,$r0,272(0x110)
900000000000f6f0:	00150005 	move	$r5,$r0
900000000000f6f4:	00150184 	move	$r4,$r12
900000000000f6f8:	574e2bff 	bl	-45528(0xfff4e28) # 9000000000004520 <memset>
    tf.tf_regs.reg_r[LOONGARCH_REG_A0] = (uint64_t)arg;
900000000000f6fc:	28fb42cc 	ld.d	$r12,$r22,-304(0xed0)
900000000000f700:	29fc22cc 	st.d	$r12,$r22,-248(0xf08)
    tf.tf_regs.reg_r[LOONGARCH_REG_A1] = (uint64_t)fn;
900000000000f704:	28fb62cc 	ld.d	$r12,$r22,-296(0xed8)
900000000000f708:	29fc42cc 	st.d	$r12,$r22,-240(0xf10)
    tf.tf_regs.reg_r[LOONGARCH_REG_A7] = 0; // use A7 as syscall result register
900000000000f70c:	29fd02c0 	st.d	$r0,$r22,-192(0xf40)
    tf.tf_prmd = read_csr_crmd();
900000000000f710:	0400000c 	csrrd	$r12,0x0
900000000000f714:	29bbb2cc 	st.w	$r12,$r22,-276(0xeec)
    tf.tf_prmd &= ~CSR_CRMD_PLV; // clear plv to set kernel mode (PLV=0)
900000000000f718:	28bbb2cd 	ld.w	$r13,$r22,-276(0xeec)
900000000000f71c:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
900000000000f720:	0014b1ac 	and	$r12,$r13,$r12
900000000000f724:	29bbb2cc 	st.w	$r12,$r22,-276(0xeec)
    tf.tf_estat |= CSR_CRMD_IE;
900000000000f728:	28bba2cc 	ld.w	$r12,$r22,-280(0xee8)
900000000000f72c:	0380118c 	ori	$r12,$r12,0x4
900000000000f730:	29bba2cc 	st.w	$r12,$r22,-280(0xee8)
    // no need exl for Loongarch64
    tf.tf_era = (uint64_t)kernel_thread_entry;
900000000000f734:	1c00424c 	pcaddu12i	$r12,530(0x212)
900000000000f738:	28ff318c 	ld.d	$r12,$r12,-52(0xfcc)
900000000000f73c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
900000000000f740:	28bb32cc 	ld.w	$r12,$r22,-308(0xecc)
900000000000f744:	0384018c 	ori	$r12,$r12,0x100
900000000000f748:	02fb82cd 	addi.d	$r13,$r22,-288(0xee0)
900000000000f74c:	001501a6 	move	$r6,$r13
900000000000f750:	00150005 	move	$r5,$r0
900000000000f754:	00150184 	move	$r4,$r12
900000000000f758:	5404ec00 	bl	1260(0x4ec) # 900000000000fc44 <do_fork>
900000000000f75c:	0015008c 	move	$r12,$r4
}
900000000000f760:	00150184 	move	$r4,$r12
900000000000f764:	28c4e061 	ld.d	$r1,$r3,312(0x138)
900000000000f768:	28c4c076 	ld.d	$r22,$r3,304(0x130)
900000000000f76c:	02c50063 	addi.d	$r3,$r3,320(0x140)
900000000000f770:	4c000020 	jirl	$r0,$r1,0

900000000000f774 <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
900000000000f774:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000f778:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000000f77c:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000000f780:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000f784:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    struct Page *page = alloc_pages(KSTACKPAGE);
900000000000f788:	02801004 	addi.w	$r4,$r0,4(0x4)
900000000000f78c:	579b13ff 	bl	-25840(0xfff9b10) # 900000000000929c <alloc_pages>
900000000000f790:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    if (page != NULL) {
900000000000f794:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000f798:	40002580 	beqz	$r12,36(0x24) # 900000000000f7bc <setup_kstack+0x48>
        proc->kstack = (uintptr_t)page2kva(page);
900000000000f79c:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000f7a0:	57f0f7ff 	bl	-3852(0xffff0f4) # 900000000000e894 <page2kva>
900000000000f7a4:	0015008c 	move	$r12,$r4
900000000000f7a8:	0015018d 	move	$r13,$r12
900000000000f7ac:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000f7b0:	29c0418d 	st.d	$r13,$r12,16(0x10)
        return 0;
900000000000f7b4:	0015000c 	move	$r12,$r0
900000000000f7b8:	50000800 	b	8(0x8) # 900000000000f7c0 <setup_kstack+0x4c>
    }
    return -E_NO_MEM;
900000000000f7bc:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
}
900000000000f7c0:	00150184 	move	$r4,$r12
900000000000f7c4:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000000f7c8:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000000f7cc:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000f7d0:	4c000020 	jirl	$r0,$r1,0

900000000000f7d4 <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
900000000000f7d4:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000f7d8:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000000f7dc:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000000f7e0:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000000f7e4:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
900000000000f7e8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000f7ec:	28c0418c 	ld.d	$r12,$r12,16(0x10)
900000000000f7f0:	00150184 	move	$r4,$r12
900000000000f7f4:	57f11fff 	bl	-3812(0xffff11c) # 900000000000e910 <kva2page>
900000000000f7f8:	0015008c 	move	$r12,$r4
900000000000f7fc:	02801005 	addi.w	$r5,$r0,4(0x4)
900000000000f800:	00150184 	move	$r4,$r12
900000000000f804:	579afbff 	bl	-25864(0xfff9af8) # 90000000000092fc <free_pages>
}
900000000000f808:	03400000 	andi	$r0,$r0,0x0
900000000000f80c:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000000f810:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000000f814:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000000f818:	4c000020 	jirl	$r0,$r1,0

900000000000f81c <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
900000000000f81c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000f820:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000000f824:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000000f828:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000f82c:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    struct Page *page;
    if ((page = alloc_pages(2)) == NULL) {
900000000000f830:	02800804 	addi.w	$r4,$r0,2(0x2)
900000000000f834:	579a6bff 	bl	-26008(0xfff9a68) # 900000000000929c <alloc_pages>
900000000000f838:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000000f83c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000f840:	44000d80 	bnez	$r12,12(0xc) # 900000000000f84c <setup_pgdir+0x30>
        return -E_NO_MEM;
900000000000f844:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
900000000000f848:	50003c00 	b	60(0x3c) # 900000000000f884 <setup_pgdir+0x68>
    }
    pde_t *pgdir = page2kva(page);
900000000000f84c:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000f850:	57f047ff 	bl	-4028(0xffff044) # 900000000000e894 <page2kva>
900000000000f854:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)
    memcpy(pgdir, boot_pgdir, PGSIZE*2);
900000000000f858:	1c00424c 	pcaddu12i	$r12,530(0x212)
900000000000f85c:	28fc818c 	ld.d	$r12,$r12,-224(0xf20)
900000000000f860:	28c0018c 	ld.d	$r12,$r12,0
900000000000f864:	14000046 	lu12i.w	$r6,2(0x2)
900000000000f868:	00150185 	move	$r5,$r12
900000000000f86c:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
900000000000f870:	574d17ff 	bl	-45804(0xfff4d14) # 9000000000004584 <memcpy>
    //panic("unimpl");
    //pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
    mm->pgdir = pgdir;
900000000000f874:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000f878:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
900000000000f87c:	29c0618d 	st.d	$r13,$r12,24(0x18)
    return 0;
900000000000f880:	0015000c 	move	$r12,$r0
}
900000000000f884:	00150184 	move	$r4,$r12
900000000000f888:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000000f88c:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000000f890:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000f894:	4c000020 	jirl	$r0,$r1,0

900000000000f898 <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
900000000000f898:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000000f89c:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000000f8a0:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000000f8a4:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000000f8a8:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    free_pages(kva2page(mm->pgdir),2);
900000000000f8ac:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000f8b0:	28c0618c 	ld.d	$r12,$r12,24(0x18)
900000000000f8b4:	00150184 	move	$r4,$r12
900000000000f8b8:	57f05bff 	bl	-4008(0xffff058) # 900000000000e910 <kva2page>
900000000000f8bc:	0015008c 	move	$r12,$r4
900000000000f8c0:	02800805 	addi.w	$r5,$r0,2(0x2)
900000000000f8c4:	00150184 	move	$r4,$r12
900000000000f8c8:	579a37ff 	bl	-26060(0xfff9a34) # 90000000000092fc <free_pages>
}
900000000000f8cc:	03400000 	andi	$r0,$r0,0x0
900000000000f8d0:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000000f8d4:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000000f8d8:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000000f8dc:	4c000020 	jirl	$r0,$r1,0

900000000000f8e0 <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
900000000000f8e0:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000000f8e4:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000000f8e8:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000000f8ec:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000000f8f0:	0015008c 	move	$r12,$r4
900000000000f8f4:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
900000000000f8f8:	0040818c 	slli.w	$r12,$r12,0x0
900000000000f8fc:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
    struct mm_struct *mm, *oldmm = current->mm;
900000000000f900:	1c00426c 	pcaddu12i	$r12,531(0x213)
900000000000f904:	02ed618c 	addi.d	$r12,$r12,-1192(0xb58)
900000000000f908:	28c0018c 	ld.d	$r12,$r12,0
900000000000f90c:	28c0a18c 	ld.d	$r12,$r12,40(0x28)
900000000000f910:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)

    /* current is a kernel thread */
    if (oldmm == NULL) {
900000000000f914:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000f918:	44000d80 	bnez	$r12,12(0xc) # 900000000000f924 <copy_mm+0x44>
        return 0;
900000000000f91c:	0015000c 	move	$r12,$r0
900000000000f920:	50010400 	b	260(0x104) # 900000000000fa24 <copy_mm+0x144>
    }
    if (clone_flags & CLONE_VM) {
900000000000f924:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
900000000000f928:	0344018c 	andi	$r12,$r12,0x100
900000000000f92c:	40001180 	beqz	$r12,16(0x10) # 900000000000f93c <copy_mm+0x5c>
        mm = oldmm;
900000000000f930:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000f934:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
        goto good_mm;
900000000000f938:	50005c00 	b	92(0x5c) # 900000000000f994 <copy_mm+0xb4>
    }

    int ret = -E_NO_MEM;
900000000000f93c:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
900000000000f940:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
    if ((mm = mm_create()) == NULL) {
900000000000f944:	57b943ff 	bl	-18112(0xfffb940) # 900000000000b284 <mm_create>
900000000000f948:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000000f94c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000f950:	4000cd80 	beqz	$r12,204(0xcc) # 900000000000fa1c <copy_mm+0x13c>
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
900000000000f954:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000f958:	57fec7ff 	bl	-316(0xffffec4) # 900000000000f81c <setup_pgdir>
900000000000f95c:	0015008c 	move	$r12,$r4
900000000000f960:	4400ad80 	bnez	$r12,172(0xac) # 900000000000fa0c <copy_mm+0x12c>
        goto bad_pgdir_cleanup_mm;
    }

    lock_mm(oldmm);
900000000000f964:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000000f968:	57f31bff 	bl	-3304(0xffff318) # 900000000000ec80 <lock_mm>
    {
        ret = dup_mmap(mm, oldmm);
900000000000f96c:	28ff62c5 	ld.d	$r5,$r22,-40(0xfd8)
900000000000f970:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000f974:	57bf9fff 	bl	-16484(0xfffbf9c) # 900000000000b910 <dup_mmap>
900000000000f978:	0015008c 	move	$r12,$r4
900000000000f97c:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
    }
    unlock_mm(oldmm);
900000000000f980:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000000f984:	57f367ff 	bl	-3228(0xffff364) # 900000000000ece8 <unlock_mm>

    if (ret != 0) {
900000000000f988:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000000f98c:	44006980 	bnez	$r12,104(0x68) # 900000000000f9f4 <copy_mm+0x114>
        goto bad_dup_cleanup_mmap;
    }

good_mm:
900000000000f990:	03400000 	andi	$r0,$r0,0x0
    mm_count_inc(mm);
900000000000f994:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000f998:	57f1e7ff 	bl	-3612(0xffff1e4) # 900000000000eb7c <mm_count_inc>
    proc->mm = mm;
900000000000f99c:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000f9a0:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000f9a4:	29c0a18d 	st.d	$r13,$r12,40(0x28)
    proc->cr3 = PADDR(mm->pgdir);
900000000000f9a8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000f9ac:	28c0618c 	ld.d	$r12,$r12,24(0x18)
900000000000f9b0:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
900000000000f9b4:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000000f9b8:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
900000000000f9bc:	0323fd8c 	lu52i.d	$r12,$r12,-1793(0x8ff)
900000000000f9c0:	6800218d 	bltu	$r12,$r13,32(0x20) # 900000000000f9e0 <copy_mm+0x100>
900000000000f9c4:	28ff42c7 	ld.d	$r7,$r22,-48(0xfd0)
900000000000f9c8:	1c000246 	pcaddu12i	$r6,18(0x12)
900000000000f9cc:	02e7a0c6 	addi.d	$r6,$r6,-1560(0x9e8)
900000000000f9d0:	0285e005 	addi.w	$r5,$r0,376(0x178)
900000000000f9d4:	1c000244 	pcaddu12i	$r4,18(0x12)
900000000000f9d8:	02e81084 	addi.d	$r4,$r4,-1532(0xa04)
900000000000f9dc:	57d2a7ff 	bl	-11612(0xfffd2a4) # 900000000000cc80 <__panic>
900000000000f9e0:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000000f9e4:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000f9e8:	29c2818d 	st.d	$r13,$r12,160(0xa0)
    return 0;
900000000000f9ec:	0015000c 	move	$r12,$r0
900000000000f9f0:	50003400 	b	52(0x34) # 900000000000fa24 <copy_mm+0x144>
        goto bad_dup_cleanup_mmap;
900000000000f9f4:	03400000 	andi	$r0,$r0,0x0
bad_dup_cleanup_mmap:
    exit_mmap(mm);
900000000000f9f8:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000f9fc:	57c047ff 	bl	-16316(0xfffc044) # 900000000000ba40 <exit_mmap>
    put_pgdir(mm);
900000000000fa00:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000fa04:	57fe97ff 	bl	-364(0xffffe94) # 900000000000f898 <put_pgdir>
900000000000fa08:	50000800 	b	8(0x8) # 900000000000fa10 <copy_mm+0x130>
        goto bad_pgdir_cleanup_mm;
900000000000fa0c:	03400000 	andi	$r0,$r0,0x0
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
900000000000fa10:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000fa14:	57bcb7ff 	bl	-17228(0xfffbcb4) # 900000000000b6c8 <mm_destroy>
900000000000fa18:	50000800 	b	8(0x8) # 900000000000fa20 <copy_mm+0x140>
        goto bad_mm;
900000000000fa1c:	03400000 	andi	$r0,$r0,0x0
bad_mm:
    return ret;
900000000000fa20:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
}
900000000000fa24:	00150184 	move	$r4,$r12
900000000000fa28:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000000fa2c:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000000fa30:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000000fa34:	4c000020 	jirl	$r0,$r1,0

900000000000fa38 <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
900000000000fa38:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000fa3c:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000000fa40:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000000fa44:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000fa48:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000000fa4c:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
900000000000fa50:	29ff62c6 	st.d	$r6,$r22,-40(0xfd8)
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
900000000000fa54:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000fa58:	28c0418d 	ld.d	$r13,$r12,16(0x10)
900000000000fa5c:	1400006c 	lu12i.w	$r12,3(0x3)
900000000000fa60:	03bbc18c 	ori	$r12,$r12,0xef0
900000000000fa64:	0010b1ac 	add.d	$r12,$r13,$r12
900000000000fa68:	0015018d 	move	$r13,$r12
900000000000fa6c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000fa70:	29c2618d 	st.d	$r13,$r12,152(0x98)
    *(proc->tf) = *tf;
900000000000fa74:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000fa78:	28c2618d 	ld.d	$r13,$r12,152(0x98)
900000000000fa7c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000fa80:	0015018e 	move	$r14,$r12
900000000000fa84:	0284400c 	addi.w	$r12,$r0,272(0x110)
900000000000fa88:	00150186 	move	$r6,$r12
900000000000fa8c:	001501c5 	move	$r5,$r14
900000000000fa90:	001501a4 	move	$r4,$r13
900000000000fa94:	574af3ff 	bl	-46352(0xfff4af0) # 9000000000004584 <memcpy>
    proc->tf->tf_regs.reg_r[LOONGARCH_REG_A7] = 0; // use A7 as syscall result register
900000000000fa98:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000fa9c:	28c2618c 	ld.d	$r12,$r12,152(0x98)
900000000000faa0:	29c18180 	st.d	$r0,$r12,96(0x60)
    if(esp == 0) //a kernel thread
900000000000faa4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000faa8:	44001580 	bnez	$r12,20(0x14) # 900000000000fabc <copy_thread+0x84>
      esp = (uintptr_t)proc->tf - 64;
900000000000faac:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000fab0:	28c2618c 	ld.d	$r12,$r12,152(0x98)
900000000000fab4:	02ff018c 	addi.d	$r12,$r12,-64(0xfc0)
900000000000fab8:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    proc->tf->tf_regs.reg_r[LOONGARCH_REG_SP] = esp;
900000000000fabc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000fac0:	28c2618c 	ld.d	$r12,$r12,152(0x98)
900000000000fac4:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
900000000000fac8:	29c0818d 	st.d	$r13,$r12,32(0x20)
    proc->context.sf_ra = (uintptr_t)forkret;
900000000000facc:	1c00000d 	pcaddu12i	$r13,0
900000000000fad0:	02e751ad 	addi.d	$r13,$r13,-1580(0x9d4)
900000000000fad4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000fad8:	29c2018d 	st.d	$r13,$r12,128(0x80)
    proc->context.sf_sp = (uintptr_t)(proc->tf) - 64;
900000000000fadc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000fae0:	28c2618c 	ld.d	$r12,$r12,152(0x98)
900000000000fae4:	02ff018d 	addi.d	$r13,$r12,-64(0xfc0)
900000000000fae8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000faec:	29c2418d 	st.d	$r13,$r12,144(0x90)
}//modified
900000000000faf0:	03400000 	andi	$r0,$r0,0x0
900000000000faf4:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000000faf8:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000000fafc:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000fb00:	4c000020 	jirl	$r0,$r1,0

900000000000fb04 <copy_fs>:


static int
copy_fs(uint32_t clone_flags, struct proc_struct *proc) {
900000000000fb04:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000000fb08:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000000fb0c:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000000fb10:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000000fb14:	0015008c 	move	$r12,$r4
900000000000fb18:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
900000000000fb1c:	0040818c 	slli.w	$r12,$r12,0x0
900000000000fb20:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
    struct fs_struct *fs_struct, *old_fs_struct = current->fs_struct;
900000000000fb24:	1c00426c 	pcaddu12i	$r12,531(0x213)
900000000000fb28:	02e4d18c 	addi.d	$r12,$r12,-1740(0x934)
900000000000fb2c:	28c0018c 	ld.d	$r12,$r12,0
900000000000fb30:	28c4c18c 	ld.d	$r12,$r12,304(0x130)
900000000000fb34:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    assert(old_fs_struct != NULL);
900000000000fb38:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000fb3c:	44001d80 	bnez	$r12,28(0x1c) # 900000000000fb58 <copy_fs+0x54>
900000000000fb40:	1c000246 	pcaddu12i	$r6,18(0x12)
900000000000fb44:	02e2c0c6 	addi.d	$r6,$r6,-1872(0x8b0)
900000000000fb48:	02865405 	addi.w	$r5,$r0,405(0x195)
900000000000fb4c:	1c000244 	pcaddu12i	$r4,18(0x12)
900000000000fb50:	02e23084 	addi.d	$r4,$r4,-1908(0x88c)
900000000000fb54:	57d12fff 	bl	-11988(0xfffd12c) # 900000000000cc80 <__panic>

    if (clone_flags & CLONE_FS) {
900000000000fb58:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
900000000000fb5c:	0360018c 	andi	$r12,$r12,0x800
900000000000fb60:	40001180 	beqz	$r12,16(0x10) # 900000000000fb70 <copy_fs+0x6c>
        fs_struct = old_fs_struct;
900000000000fb64:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000fb68:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
        goto good_fs_struct;
900000000000fb6c:	50003c00 	b	60(0x3c) # 900000000000fba8 <copy_fs+0xa4>
    }

    int ret = -E_NO_MEM;
900000000000fb70:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
900000000000fb74:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
    if ((fs_struct = fs_create()) == NULL) {
900000000000fb78:	544bd000 	bl	19408(0x4bd0) # 9000000000014748 <fs_create>
900000000000fb7c:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000000fb80:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000fb84:	40005180 	beqz	$r12,80(0x50) # 900000000000fbd4 <copy_fs+0xd0>
        goto bad_fs_struct;
    }

    if ((ret = dup_fs(fs_struct, old_fs_struct)) != 0) {
900000000000fb88:	28ff62c5 	ld.d	$r5,$r22,-40(0xfd8)
900000000000fb8c:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000fb90:	544e0400 	bl	19972(0x4e04) # 9000000000014994 <dup_fs>
900000000000fb94:	0015008c 	move	$r12,$r4
900000000000fb98:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
900000000000fb9c:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000000fba0:	44002580 	bnez	$r12,36(0x24) # 900000000000fbc4 <copy_fs+0xc0>
        goto bad_dup_cleanup_fs;
    }

good_fs_struct:
900000000000fba4:	03400000 	andi	$r0,$r0,0x0
    fs_count_inc(fs_struct);
900000000000fba8:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000fbac:	57f187ff 	bl	-3708(0xffff184) # 900000000000ed30 <fs_count_inc>
    proc->fs_struct = fs_struct;
900000000000fbb0:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000000fbb4:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000000fbb8:	29c4c18d 	st.d	$r13,$r12,304(0x130)
    return 0;
900000000000fbbc:	0015000c 	move	$r12,$r0
900000000000fbc0:	50001c00 	b	28(0x1c) # 900000000000fbdc <copy_fs+0xd8>
        goto bad_dup_cleanup_fs;
900000000000fbc4:	03400000 	andi	$r0,$r0,0x0

bad_dup_cleanup_fs:
    fs_destroy(fs_struct);
900000000000fbc8:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000fbcc:	544c1000 	bl	19472(0x4c10) # 90000000000147dc <fs_destroy>
900000000000fbd0:	50000800 	b	8(0x8) # 900000000000fbd8 <copy_fs+0xd4>
        goto bad_fs_struct;
900000000000fbd4:	03400000 	andi	$r0,$r0,0x0
bad_fs_struct:
    return ret;
900000000000fbd8:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
}
900000000000fbdc:	00150184 	move	$r4,$r12
900000000000fbe0:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000000fbe4:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000000fbe8:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000000fbec:	4c000020 	jirl	$r0,$r1,0

900000000000fbf0 <put_fs>:

static void
put_fs(struct proc_struct *proc) {
900000000000fbf0:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000000fbf4:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000000fbf8:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000000fbfc:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000000fc00:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    struct fs_struct *fs_struct = proc->fs_struct;
900000000000fc04:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000fc08:	28c4c18c 	ld.d	$r12,$r12,304(0x130)
900000000000fc0c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    if (fs_struct != NULL) {
900000000000fc10:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000fc14:	40001d80 	beqz	$r12,28(0x1c) # 900000000000fc30 <put_fs+0x40>
        if (fs_count_dec(fs_struct) == 0) {
900000000000fc18:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000fc1c:	57f18fff 	bl	-3700(0xffff18c) # 900000000000eda8 <fs_count_dec>
900000000000fc20:	0015008c 	move	$r12,$r4
900000000000fc24:	44000d80 	bnez	$r12,12(0xc) # 900000000000fc30 <put_fs+0x40>
            fs_destroy(fs_struct);
900000000000fc28:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000fc2c:	544bb000 	bl	19376(0x4bb0) # 90000000000147dc <fs_destroy>
        }
    }
}
900000000000fc30:	03400000 	andi	$r0,$r0,0x0
900000000000fc34:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000000fc38:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000000fc3c:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000000fc40:	4c000020 	jirl	$r0,$r1,0

900000000000fc44 <do_fork>:
//    4. call copy_thread to setup tf & context in proc_struct
//    5. insert proc_struct into hash_list && proc_list
//    6. call wakup_proc to make the new child process RUNNABLE 
//    7. set the 
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
900000000000fc44:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000000fc48:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000000fc4c:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000000fc50:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000000fc54:	0015008c 	move	$r12,$r4
900000000000fc58:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
900000000000fc5c:	29ff22c6 	st.d	$r6,$r22,-56(0xfc8)
900000000000fc60:	0040818c 	slli.w	$r12,$r12,0x0
900000000000fc64:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
    int ret = -E_NO_FREE_PROC;
900000000000fc68:	02bfec0c 	addi.w	$r12,$r0,-5(0xffb)
900000000000fc6c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
900000000000fc70:	1c0042cc 	pcaddu12i	$r12,534(0x216)
900000000000fc74:	02dfc18c 	addi.d	$r12,$r12,2032(0x7f0)
900000000000fc78:	2880018c 	ld.w	$r12,$r12,0
900000000000fc7c:	0015018d 	move	$r13,$r12
900000000000fc80:	03bffc0c 	ori	$r12,$r0,0xfff
900000000000fc84:	6000bd8d 	blt	$r12,$r13,188(0xbc) # 900000000000fd40 <do_fork+0xfc>
        goto fork_out;
    }
    ret = -E_NO_MEM;
900000000000fc88:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
900000000000fc8c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    //    3. call copy_mm to dup OR share mm according clone_flag
    //    4. call copy_thread to setup tf & context in proc_struct
    //    5. insert proc_struct into hash_list && proc_list
    //    6. call wakeup_proc to make the new child process RUNNABLE
    //    7. set ret vaule using child proc's pid
        if ((proc = alloc_proc()) == NULL) {
900000000000fc90:	57f1a7ff 	bl	-3676(0xffff1a4) # 900000000000ee34 <alloc_proc>
900000000000fc94:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)
900000000000fc98:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000fc9c:	4000ad80 	beqz	$r12,172(0xac) # 900000000000fd48 <do_fork+0x104>
            goto fork_out;
        }

        proc->parent = current;
900000000000fca0:	1c00424c 	pcaddu12i	$r12,530(0x212)
900000000000fca4:	02dee18c 	addi.d	$r12,$r12,1976(0x7b8)
900000000000fca8:	28c0018d 	ld.d	$r13,$r12,0
900000000000fcac:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000fcb0:	29c0818d 	st.d	$r13,$r12,32(0x20)

        if(setup_kstack(proc)){
900000000000fcb4:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
900000000000fcb8:	57fabfff 	bl	-1348(0xffffabc) # 900000000000f774 <setup_kstack>
900000000000fcbc:	0015008c 	move	$r12,$r4
900000000000fcc0:	4400b580 	bnez	$r12,180(0xb4) # 900000000000fd74 <do_fork+0x130>
            goto bad_fork_cleanup_proc;
        }
    
        if (copy_fs(clone_flags, proc) != 0) {
900000000000fcc4:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
900000000000fcc8:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
900000000000fccc:	00150184 	move	$r4,$r12
900000000000fcd0:	57fe37ff 	bl	-460(0xffffe34) # 900000000000fb04 <copy_fs>
900000000000fcd4:	0015008c 	move	$r12,$r4
900000000000fcd8:	44008d80 	bnez	$r12,140(0x8c) # 900000000000fd64 <do_fork+0x120>
            goto bad_fork_cleanup_kstack;
        } 
        if (copy_mm(clone_flags, proc)){
900000000000fcdc:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
900000000000fce0:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
900000000000fce4:	00150184 	move	$r4,$r12
900000000000fce8:	57fbfbff 	bl	-1032(0xffffbf8) # 900000000000f8e0 <copy_mm>
900000000000fcec:	0015008c 	move	$r12,$r4
900000000000fcf0:	44006580 	bnez	$r12,100(0x64) # 900000000000fd54 <do_fork+0x110>
            goto bad_fork_cleanup_fs;
        }

        copy_thread(proc, (uint64_t)stack, tf);
900000000000fcf4:	28ff22c6 	ld.d	$r6,$r22,-56(0xfc8)
900000000000fcf8:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
900000000000fcfc:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
900000000000fd00:	57fd3bff 	bl	-712(0xffffd38) # 900000000000fa38 <copy_thread>

        proc->pid = get_pid();
900000000000fd04:	57f537ff 	bl	-2764(0xffff534) # 900000000000f238 <get_pid>
900000000000fd08:	0015008c 	move	$r12,$r4
900000000000fd0c:	0015018d 	move	$r13,$r12
900000000000fd10:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000fd14:	2980118d 	st.w	$r13,$r12,4(0x4)
        hash_proc(proc);
900000000000fd18:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
900000000000fd1c:	57f7c3ff 	bl	-2112(0xffff7c0) # 900000000000f4dc <hash_proc>

        set_links(proc);
900000000000fd20:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
900000000000fd24:	57f343ff 	bl	-3264(0xffff340) # 900000000000f064 <set_links>

        wakeup_proc(proc);
900000000000fd28:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
900000000000fd2c:	5424f800 	bl	9464(0x24f8) # 9000000000012224 <wakeup_proc>

        ret = proc->pid;
900000000000fd30:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000000fd34:	2880118c 	ld.w	$r12,$r12,4(0x4)
900000000000fd38:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000000fd3c:	50001000 	b	16(0x10) # 900000000000fd4c <do_fork+0x108>
        goto fork_out;
900000000000fd40:	03400000 	andi	$r0,$r0,0x0
900000000000fd44:	50000800 	b	8(0x8) # 900000000000fd4c <do_fork+0x108>
            goto fork_out;
900000000000fd48:	03400000 	andi	$r0,$r0,0x0
    #endif


fork_out:
    return ret;
900000000000fd4c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000000fd50:	50003400 	b	52(0x34) # 900000000000fd84 <do_fork+0x140>
            goto bad_fork_cleanup_fs;
900000000000fd54:	03400000 	andi	$r0,$r0,0x0

bad_fork_cleanup_fs:
    put_fs(proc);
900000000000fd58:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
900000000000fd5c:	57fe97ff 	bl	-364(0xffffe94) # 900000000000fbf0 <put_fs>
900000000000fd60:	50000800 	b	8(0x8) # 900000000000fd68 <do_fork+0x124>
            goto bad_fork_cleanup_kstack;
900000000000fd64:	03400000 	andi	$r0,$r0,0x0
bad_fork_cleanup_kstack:
    put_kstack(proc);
900000000000fd68:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
900000000000fd6c:	57fa6bff 	bl	-1432(0xffffa68) # 900000000000f7d4 <put_kstack>
900000000000fd70:	50000800 	b	8(0x8) # 900000000000fd78 <do_fork+0x134>
            goto bad_fork_cleanup_proc;
900000000000fd74:	03400000 	andi	$r0,$r0,0x0
bad_fork_cleanup_proc:
    kfree(proc);
900000000000fd78:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
900000000000fd7c:	577d9bff 	bl	-33384(0xfff7d98) # 9000000000007b14 <kfree>
    goto fork_out;
900000000000fd80:	53ffcfff 	b	-52(0xfffffcc) # 900000000000fd4c <do_fork+0x108>
}
900000000000fd84:	00150184 	move	$r4,$r12
900000000000fd88:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000000fd8c:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000000fd90:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000000fd94:	4c000020 	jirl	$r0,$r1,0

900000000000fd98 <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
900000000000fd98:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000000fd9c:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000000fda0:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000000fda4:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000000fda8:	0015008c 	move	$r12,$r4
900000000000fdac:	0040818c 	slli.w	$r12,$r12,0x0
900000000000fdb0:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
    if (current == idleproc) {
900000000000fdb4:	1c00424c 	pcaddu12i	$r12,530(0x212)
900000000000fdb8:	02da918c 	addi.d	$r12,$r12,1700(0x6a4)
900000000000fdbc:	28c0018d 	ld.d	$r13,$r12,0
900000000000fdc0:	1c00424c 	pcaddu12i	$r12,530(0x212)
900000000000fdc4:	02da218c 	addi.d	$r12,$r12,1672(0x688)
900000000000fdc8:	28c0018c 	ld.d	$r12,$r12,0
900000000000fdcc:	5c001dac 	bne	$r13,$r12,28(0x1c) # 900000000000fde8 <do_exit+0x50>
        panic("idleproc exit.\n");
900000000000fdd0:	1c000226 	pcaddu12i	$r6,17(0x11)
900000000000fdd4:	02d920c6 	addi.d	$r6,$r6,1608(0x648)
900000000000fdd8:	02885405 	addi.w	$r5,$r0,533(0x215)
900000000000fddc:	1c000224 	pcaddu12i	$r4,17(0x11)
900000000000fde0:	02d7f084 	addi.d	$r4,$r4,1532(0x5fc)
900000000000fde4:	57ce9fff 	bl	-12644(0xfffce9c) # 900000000000cc80 <__panic>
#else
        //panic("initproc exit.\n");
#endif
    }
	
    struct mm_struct *mm = current->mm;
900000000000fde8:	1c00424c 	pcaddu12i	$r12,530(0x212)
900000000000fdec:	02d9c18c 	addi.d	$r12,$r12,1648(0x670)
900000000000fdf0:	28c0018c 	ld.d	$r12,$r12,0
900000000000fdf4:	28c0a18c 	ld.d	$r12,$r12,40(0x28)
900000000000fdf8:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    if (mm != NULL) {
900000000000fdfc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000000fe00:	40005180 	beqz	$r12,80(0x50) # 900000000000fe50 <do_exit+0xb8>
        lcr3(boot_cr3);
900000000000fe04:	1c00424c 	pcaddu12i	$r12,530(0x212)
900000000000fe08:	28e5318c 	ld.d	$r12,$r12,-1716(0x94c)
900000000000fe0c:	28c0018c 	ld.d	$r12,$r12,0
900000000000fe10:	00150184 	move	$r4,$r12
900000000000fe14:	579397ff 	bl	-27756(0xfff9394) # 90000000000091a8 <lcr3>
        if (mm_count_dec(mm) == 0) {
900000000000fe18:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000fe1c:	57eddbff 	bl	-4648(0xfffedd8) # 900000000000ebf4 <mm_count_dec>
900000000000fe20:	0015008c 	move	$r12,$r4
900000000000fe24:	44001d80 	bnez	$r12,28(0x1c) # 900000000000fe40 <do_exit+0xa8>
            exit_mmap(mm);
900000000000fe28:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000fe2c:	57bc17ff 	bl	-17388(0xfffbc14) # 900000000000ba40 <exit_mmap>
            put_pgdir(mm);
900000000000fe30:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000fe34:	57fa67ff 	bl	-1436(0xffffa64) # 900000000000f898 <put_pgdir>
            mm_destroy(mm);
900000000000fe38:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000000fe3c:	57b88fff 	bl	-18292(0xfffb88c) # 900000000000b6c8 <mm_destroy>
        }
        current->mm = NULL;
900000000000fe40:	1c00424c 	pcaddu12i	$r12,530(0x212)
900000000000fe44:	02d8618c 	addi.d	$r12,$r12,1560(0x618)
900000000000fe48:	28c0018c 	ld.d	$r12,$r12,0
900000000000fe4c:	29c0a180 	st.d	$r0,$r12,40(0x28)
    }
    put_fs(current); //in LAB8
900000000000fe50:	1c00424c 	pcaddu12i	$r12,530(0x212)
900000000000fe54:	02d8218c 	addi.d	$r12,$r12,1544(0x608)
900000000000fe58:	28c0018c 	ld.d	$r12,$r12,0
900000000000fe5c:	00150184 	move	$r4,$r12
900000000000fe60:	57fd93ff 	bl	-624(0xffffd90) # 900000000000fbf0 <put_fs>
    current->state = PROC_ZOMBIE;
900000000000fe64:	1c00424c 	pcaddu12i	$r12,530(0x212)
900000000000fe68:	02d7d18c 	addi.d	$r12,$r12,1524(0x5f4)
900000000000fe6c:	28c0018c 	ld.d	$r12,$r12,0
900000000000fe70:	02800c0d 	addi.w	$r13,$r0,3(0x3)
900000000000fe74:	2980018d 	st.w	$r13,$r12,0
    current->exit_code = error_code;
900000000000fe78:	1c00424c 	pcaddu12i	$r12,530(0x212)
900000000000fe7c:	02d7818c 	addi.d	$r12,$r12,1504(0x5e0)
900000000000fe80:	28c0018c 	ld.d	$r12,$r12,0
900000000000fe84:	28bf32cd 	ld.w	$r13,$r22,-52(0xfcc)
900000000000fe88:	2983c18d 	st.w	$r13,$r12,240(0xf0)

	
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
900000000000fe8c:	57e89bff 	bl	-5992(0xfffe898) # 900000000000e724 <__intr_save>
900000000000fe90:	0015008c 	move	$r12,$r4
900000000000fe94:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
    {
        proc = current->parent;
900000000000fe98:	1c00424c 	pcaddu12i	$r12,530(0x212)
900000000000fe9c:	02d7018c 	addi.d	$r12,$r12,1472(0x5c0)
900000000000fea0:	28c0018c 	ld.d	$r12,$r12,0
900000000000fea4:	28c0818c 	ld.d	$r12,$r12,32(0x20)
900000000000fea8:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        if (proc->wait_state == WT_CHILD) {
900000000000feac:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000feb0:	2883d18c 	ld.w	$r12,$r12,244(0xf4)
900000000000feb4:	0015018d 	move	$r13,$r12
900000000000feb8:	1500000c 	lu12i.w	$r12,-524288(0x80000)
900000000000febc:	0380058c 	ori	$r12,$r12,0x1
900000000000fec0:	5c00f1ac 	bne	$r13,$r12,240(0xf0) # 900000000000ffb0 <do_exit+0x218>
            wakeup_proc(proc);
900000000000fec4:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000000fec8:	54235c00 	bl	9052(0x235c) # 9000000000012224 <wakeup_proc>
        }
        while (current->cptr != NULL) {
900000000000fecc:	5000e400 	b	228(0xe4) # 900000000000ffb0 <do_exit+0x218>
            proc = current->cptr;
900000000000fed0:	1c00424c 	pcaddu12i	$r12,530(0x212)
900000000000fed4:	02d6218c 	addi.d	$r12,$r12,1416(0x588)
900000000000fed8:	28c0018c 	ld.d	$r12,$r12,0
900000000000fedc:	28c3e18c 	ld.d	$r12,$r12,248(0xf8)
900000000000fee0:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
            current->cptr = proc->optr;
900000000000fee4:	1c00424c 	pcaddu12i	$r12,530(0x212)
900000000000fee8:	02d5d18c 	addi.d	$r12,$r12,1396(0x574)
900000000000feec:	28c0018c 	ld.d	$r12,$r12,0
900000000000fef0:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000fef4:	28c421ad 	ld.d	$r13,$r13,264(0x108)
900000000000fef8:	29c3e18d 	st.d	$r13,$r12,248(0xf8)
	
            proc->yptr = NULL;
900000000000fefc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000ff00:	29c40180 	st.d	$r0,$r12,256(0x100)
            if ((proc->optr = initproc->cptr) != NULL) {
900000000000ff04:	1c00424c 	pcaddu12i	$r12,530(0x212)
900000000000ff08:	02d5318c 	addi.d	$r12,$r12,1356(0x54c)
900000000000ff0c:	28c0018c 	ld.d	$r12,$r12,0
900000000000ff10:	28c3e18d 	ld.d	$r13,$r12,248(0xf8)
900000000000ff14:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000ff18:	29c4218d 	st.d	$r13,$r12,264(0x108)
900000000000ff1c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000ff20:	28c4218c 	ld.d	$r12,$r12,264(0x108)
900000000000ff24:	40001d80 	beqz	$r12,28(0x1c) # 900000000000ff40 <do_exit+0x1a8>
                initproc->cptr->yptr = proc;
900000000000ff28:	1c00424c 	pcaddu12i	$r12,530(0x212)
900000000000ff2c:	02d4a18c 	addi.d	$r12,$r12,1320(0x528)
900000000000ff30:	28c0018c 	ld.d	$r12,$r12,0
900000000000ff34:	28c3e18c 	ld.d	$r12,$r12,248(0xf8)
900000000000ff38:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000ff3c:	29c4018d 	st.d	$r13,$r12,256(0x100)
            }
            proc->parent = initproc;
900000000000ff40:	1c00424c 	pcaddu12i	$r12,530(0x212)
900000000000ff44:	02d4418c 	addi.d	$r12,$r12,1296(0x510)
900000000000ff48:	28c0018d 	ld.d	$r13,$r12,0
900000000000ff4c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000ff50:	29c0818d 	st.d	$r13,$r12,32(0x20)
            initproc->cptr = proc;
900000000000ff54:	1c00424c 	pcaddu12i	$r12,530(0x212)
900000000000ff58:	02d3f18c 	addi.d	$r12,$r12,1276(0x4fc)
900000000000ff5c:	28c0018c 	ld.d	$r12,$r12,0
900000000000ff60:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000000ff64:	29c3e18d 	st.d	$r13,$r12,248(0xf8)
            if (proc->state == PROC_ZOMBIE) {
900000000000ff68:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000000ff6c:	2880018c 	ld.w	$r12,$r12,0
900000000000ff70:	0015018d 	move	$r13,$r12
900000000000ff74:	02800c0c 	addi.w	$r12,$r0,3(0x3)
900000000000ff78:	5c0039ac 	bne	$r13,$r12,56(0x38) # 900000000000ffb0 <do_exit+0x218>
                if (initproc->wait_state == WT_CHILD) {
900000000000ff7c:	1c00424c 	pcaddu12i	$r12,530(0x212)
900000000000ff80:	02d3518c 	addi.d	$r12,$r12,1236(0x4d4)
900000000000ff84:	28c0018c 	ld.d	$r12,$r12,0
900000000000ff88:	2883d18c 	ld.w	$r12,$r12,244(0xf4)
900000000000ff8c:	0015018d 	move	$r13,$r12
900000000000ff90:	1500000c 	lu12i.w	$r12,-524288(0x80000)
900000000000ff94:	0380058c 	ori	$r12,$r12,0x1
900000000000ff98:	5c0019ac 	bne	$r13,$r12,24(0x18) # 900000000000ffb0 <do_exit+0x218>
                    wakeup_proc(initproc);
900000000000ff9c:	1c00424c 	pcaddu12i	$r12,530(0x212)
900000000000ffa0:	02d2d18c 	addi.d	$r12,$r12,1204(0x4b4)
900000000000ffa4:	28c0018c 	ld.d	$r12,$r12,0
900000000000ffa8:	00150184 	move	$r4,$r12
900000000000ffac:	54227800 	bl	8824(0x2278) # 9000000000012224 <wakeup_proc>
        while (current->cptr != NULL) {
900000000000ffb0:	1c00424c 	pcaddu12i	$r12,530(0x212)
900000000000ffb4:	02d2a18c 	addi.d	$r12,$r12,1192(0x4a8)
900000000000ffb8:	28c0018c 	ld.d	$r12,$r12,0
900000000000ffbc:	28c3e18c 	ld.d	$r12,$r12,248(0xf8)
900000000000ffc0:	47ff119f 	bnez	$r12,-240(0x7fff10) # 900000000000fed0 <do_exit+0x138>
                }
            }
        }
    }
    local_intr_restore(intr_flag);
900000000000ffc4:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000000ffc8:	00150184 	move	$r4,$r12
900000000000ffcc:	57e78bff 	bl	-6264(0xfffe788) # 900000000000e754 <__intr_restore>
	
    schedule();
900000000000ffd0:	54232000 	bl	8992(0x2320) # 90000000000122f0 <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
900000000000ffd4:	1c00424c 	pcaddu12i	$r12,530(0x212)
900000000000ffd8:	02d2118c 	addi.d	$r12,$r12,1156(0x484)
900000000000ffdc:	28c0018c 	ld.d	$r12,$r12,0
900000000000ffe0:	2880118c 	ld.w	$r12,$r12,4(0x4)
900000000000ffe4:	00150187 	move	$r7,$r12
900000000000ffe8:	1c000226 	pcaddu12i	$r6,17(0x11)
900000000000ffec:	02d100c6 	addi.d	$r6,$r6,1088(0x440)
900000000000fff0:	02893005 	addi.w	$r5,$r0,588(0x24c)
900000000000fff4:	1c000224 	pcaddu12i	$r4,17(0x11)
900000000000fff8:	02cf9084 	addi.d	$r4,$r4,996(0x3e4)
900000000000fffc:	57cc87ff 	bl	-13180(0xfffcc84) # 900000000000cc80 <__panic>

9000000000010000 <load_icode_read>:
}

//load_icode_read is used by load_icode in LAB8

static int
load_icode_read(int fd, void *buf, size_t len, off_t offset) {
9000000000010000:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000010004:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000010008:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000001000c:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000010010:	0015008c 	move	$r12,$r4
9000000000010014:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
9000000000010018:	29ff22c6 	st.d	$r6,$r22,-56(0xfc8)
900000000001001c:	29ff02c7 	st.d	$r7,$r22,-64(0xfc0)
9000000000010020:	0040818c 	slli.w	$r12,$r12,0x0
9000000000010024:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
    int ret;
    if ((ret = sysfile_seek(fd, offset, LSEEK_SET)) != 0) {
9000000000010028:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
900000000001002c:	00150006 	move	$r6,$r0
9000000000010030:	28ff02c5 	ld.d	$r5,$r22,-64(0xfc0)
9000000000010034:	00150184 	move	$r4,$r12
9000000000010038:	54536800 	bl	21352(0x5368) # 90000000000153a0 <sysfile_seek>
900000000001003c:	0015008c 	move	$r12,$r4
9000000000010040:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000010044:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000010048:	40000d80 	beqz	$r12,12(0xc) # 9000000000010054 <load_icode_read+0x54>
        return ret;
900000000001004c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000010050:	50005000 	b	80(0x50) # 90000000000100a0 <load_icode_read+0xa0>
    }
    if ((ret = sysfile_read(fd, buf, len)) != len) {
9000000000010054:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000010058:	28ff22c6 	ld.d	$r6,$r22,-56(0xfc8)
900000000001005c:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
9000000000010060:	00150184 	move	$r4,$r12
9000000000010064:	544fac00 	bl	20396(0x4fac) # 9000000000015010 <sysfile_read>
9000000000010068:	0015008c 	move	$r12,$r4
900000000001006c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000010070:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000010074:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
9000000000010078:	580025ac 	beq	$r13,$r12,36(0x24) # 900000000001009c <load_icode_read+0x9c>
        return (ret < 0) ? ret : -1;
900000000001007c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000010080:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
9000000000010084:	02bffc0e 	addi.w	$r14,$r0,-1(0xfff)
9000000000010088:	0200018c 	slti	$r12,$r12,0
900000000001008c:	001331ad 	maskeqz	$r13,$r13,$r12
9000000000010090:	0013b1cc 	masknez	$r12,$r14,$r12
9000000000010094:	001531ac 	or	$r12,$r13,$r12
9000000000010098:	50000800 	b	8(0x8) # 90000000000100a0 <load_icode_read+0xa0>
    }
    return 0;
900000000001009c:	0015000c 	move	$r12,$r0
}
90000000000100a0:	00150184 	move	$r4,$r12
90000000000100a4:	28c0e061 	ld.d	$r1,$r3,56(0x38)
90000000000100a8:	28c0c076 	ld.d	$r22,$r3,48(0x30)
90000000000100ac:	02c10063 	addi.d	$r3,$r3,64(0x40)
90000000000100b0:	4c000020 	jirl	$r0,$r1,0

90000000000100b4 <print_elf>:
// 1. create a new mm for current process
// 2. create a new PDT, and mm->pgdir= kernel virtual addr of PDT
// 3. copy TEXT/DATA/BSS parts in binary to memory space of process
// 4. call mm_map to setup user stack, and put parameters into user stack
// 5. setup trapframe for user environment
void print_elf(struct elfhdr64 *elf){
90000000000100b4:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000000100b8:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000000100bc:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000000100c0:	02c08076 	addi.d	$r22,$r3,32(0x20)
90000000000100c4:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    kprintf("e_magic is ");printhex(elf->e_magic);kprintf("\n");
90000000000100c8:	1c000224 	pcaddu12i	$r4,17(0x11)
90000000000100cc:	02ce0084 	addi.d	$r4,$r4,896(0x380)
90000000000100d0:	573d4fff 	bl	-49844(0xfff3d4c) # 9000000000003e1c <kprintf>
90000000000100d4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000100d8:	2880018c 	ld.w	$r12,$r12,0
90000000000100dc:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
90000000000100e0:	00150184 	move	$r4,$r12
90000000000100e4:	573da7ff 	bl	-49756(0xfff3da4) # 9000000000003e88 <printhex>
90000000000100e8:	1c000224 	pcaddu12i	$r4,17(0x11)
90000000000100ec:	02cdc084 	addi.d	$r4,$r4,880(0x370)
90000000000100f0:	573d2fff 	bl	-49876(0xfff3d2c) # 9000000000003e1c <kprintf>
    kprintf("e_type is ");printhex(elf->e_type);kprintf("\n");
90000000000100f4:	1c000224 	pcaddu12i	$r4,17(0x11)
90000000000100f8:	02cdb084 	addi.d	$r4,$r4,876(0x36c)
90000000000100fc:	573d23ff 	bl	-49888(0xfff3d20) # 9000000000003e1c <kprintf>
9000000000010100:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000010104:	2880418c 	ld.w	$r12,$r12,16(0x10)
9000000000010108:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
900000000001010c:	00150184 	move	$r4,$r12
9000000000010110:	573d7bff 	bl	-49800(0xfff3d78) # 9000000000003e88 <printhex>
9000000000010114:	1c000224 	pcaddu12i	$r4,17(0x11)
9000000000010118:	02cd1084 	addi.d	$r4,$r4,836(0x344)
900000000001011c:	573d03ff 	bl	-49920(0xfff3d00) # 9000000000003e1c <kprintf>
    kprintf("e_machine is ");printhex(elf->e_machine);kprintf("\n");
9000000000010120:	1c000224 	pcaddu12i	$r4,17(0x11)
9000000000010124:	02cd4084 	addi.d	$r4,$r4,848(0x350)
9000000000010128:	573cf7ff 	bl	-49932(0xfff3cf4) # 9000000000003e1c <kprintf>
900000000001012c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000010130:	2880518c 	ld.w	$r12,$r12,20(0x14)
9000000000010134:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
9000000000010138:	00150184 	move	$r4,$r12
900000000001013c:	573d4fff 	bl	-49844(0xfff3d4c) # 9000000000003e88 <printhex>
9000000000010140:	1c000224 	pcaddu12i	$r4,17(0x11)
9000000000010144:	02cc6084 	addi.d	$r4,$r4,792(0x318)
9000000000010148:	573cd7ff 	bl	-49964(0xfff3cd4) # 9000000000003e1c <kprintf>
    kprintf("e_version is ");printhex(elf->e_version);kprintf("\n");
900000000001014c:	1c000224 	pcaddu12i	$r4,17(0x11)
9000000000010150:	02ccd084 	addi.d	$r4,$r4,820(0x334)
9000000000010154:	573ccbff 	bl	-49976(0xfff3cc8) # 9000000000003e1c <kprintf>
9000000000010158:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001015c:	2880618c 	ld.w	$r12,$r12,24(0x18)
9000000000010160:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
9000000000010164:	00150184 	move	$r4,$r12
9000000000010168:	573d23ff 	bl	-49888(0xfff3d20) # 9000000000003e88 <printhex>
900000000001016c:	1c000224 	pcaddu12i	$r4,17(0x11)
9000000000010170:	02cbb084 	addi.d	$r4,$r4,748(0x2ec)
9000000000010174:	573cabff 	bl	-50008(0xfff3ca8) # 9000000000003e1c <kprintf>
    kprintf("e_entry is ");printhex(elf->e_entry);kprintf("\n");
9000000000010178:	1c000224 	pcaddu12i	$r4,17(0x11)
900000000001017c:	02cc6084 	addi.d	$r4,$r4,792(0x318)
9000000000010180:	573c9fff 	bl	-50020(0xfff3c9c) # 9000000000003e1c <kprintf>
9000000000010184:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000010188:	28c0818c 	ld.d	$r12,$r12,32(0x20)
900000000001018c:	00150184 	move	$r4,$r12
9000000000010190:	573cfbff 	bl	-49928(0xfff3cf8) # 9000000000003e88 <printhex>
9000000000010194:	1c000224 	pcaddu12i	$r4,17(0x11)
9000000000010198:	02cb1084 	addi.d	$r4,$r4,708(0x2c4)
900000000001019c:	573c83ff 	bl	-50048(0xfff3c80) # 9000000000003e1c <kprintf>
    kprintf("e_phoff is  ");printhex(elf->e_phoff);kprintf("\n");
90000000000101a0:	1c000224 	pcaddu12i	$r4,17(0x11)
90000000000101a4:	02cc0084 	addi.d	$r4,$r4,768(0x300)
90000000000101a8:	573c77ff 	bl	-50060(0xfff3c74) # 9000000000003e1c <kprintf>
90000000000101ac:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000101b0:	28c0a18c 	ld.d	$r12,$r12,40(0x28)
90000000000101b4:	00150184 	move	$r4,$r12
90000000000101b8:	573cd3ff 	bl	-49968(0xfff3cd0) # 9000000000003e88 <printhex>
90000000000101bc:	1c000224 	pcaddu12i	$r4,17(0x11)
90000000000101c0:	02ca7084 	addi.d	$r4,$r4,668(0x29c)
90000000000101c4:	573c5bff 	bl	-50088(0xfff3c58) # 9000000000003e1c <kprintf>
    kprintf("e_shoff is ");printhex(elf->e_shoff);kprintf("\n");
90000000000101c8:	1c000224 	pcaddu12i	$r4,17(0x11)
90000000000101cc:	02cba084 	addi.d	$r4,$r4,744(0x2e8)
90000000000101d0:	573c4fff 	bl	-50100(0xfff3c4c) # 9000000000003e1c <kprintf>
90000000000101d4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000101d8:	28c0c18c 	ld.d	$r12,$r12,48(0x30)
90000000000101dc:	00150184 	move	$r4,$r12
90000000000101e0:	573cabff 	bl	-50008(0xfff3ca8) # 9000000000003e88 <printhex>
90000000000101e4:	1c000224 	pcaddu12i	$r4,17(0x11)
90000000000101e8:	02c9d084 	addi.d	$r4,$r4,628(0x274)
90000000000101ec:	573c33ff 	bl	-50128(0xfff3c30) # 9000000000003e1c <kprintf>
    kprintf("e_flags is ");printhex(elf->e_flags);kprintf("\n");
90000000000101f0:	1c000224 	pcaddu12i	$r4,17(0x11)
90000000000101f4:	02cb4084 	addi.d	$r4,$r4,720(0x2d0)
90000000000101f8:	573c27ff 	bl	-50140(0xfff3c24) # 9000000000003e1c <kprintf>
90000000000101fc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000010200:	2880e18c 	ld.w	$r12,$r12,56(0x38)
9000000000010204:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
9000000000010208:	00150184 	move	$r4,$r12
900000000001020c:	573c7fff 	bl	-50052(0xfff3c7c) # 9000000000003e88 <printhex>
9000000000010210:	1c000224 	pcaddu12i	$r4,17(0x11)
9000000000010214:	02c92084 	addi.d	$r4,$r4,584(0x248)
9000000000010218:	573c07ff 	bl	-50172(0xfff3c04) # 9000000000003e1c <kprintf>
    kprintf("e_ehsize is ");printhex(elf->e_ehsize);kprintf("\n");
900000000001021c:	1c000224 	pcaddu12i	$r4,17(0x11)
9000000000010220:	02cad084 	addi.d	$r4,$r4,692(0x2b4)
9000000000010224:	573bfbff 	bl	-50184(0xfff3bf8) # 9000000000003e1c <kprintf>
9000000000010228:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001022c:	2880f18c 	ld.w	$r12,$r12,60(0x3c)
9000000000010230:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
9000000000010234:	00150184 	move	$r4,$r12
9000000000010238:	573c53ff 	bl	-50096(0xfff3c50) # 9000000000003e88 <printhex>
900000000001023c:	1c000224 	pcaddu12i	$r4,17(0x11)
9000000000010240:	02c87084 	addi.d	$r4,$r4,540(0x21c)
9000000000010244:	573bdbff 	bl	-50216(0xfff3bd8) # 9000000000003e1c <kprintf>
    kprintf("e_phnum is ");printhex(elf->e_phnum);kprintf("\n");
9000000000010248:	1c000224 	pcaddu12i	$r4,17(0x11)
900000000001024c:	02ca6084 	addi.d	$r4,$r4,664(0x298)
9000000000010250:	573bcfff 	bl	-50228(0xfff3bcc) # 9000000000003e1c <kprintf>
9000000000010254:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000010258:	2881118c 	ld.w	$r12,$r12,68(0x44)
900000000001025c:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
9000000000010260:	00150184 	move	$r4,$r12
9000000000010264:	573c27ff 	bl	-50140(0xfff3c24) # 9000000000003e88 <printhex>
9000000000010268:	1c000224 	pcaddu12i	$r4,17(0x11)
900000000001026c:	02c7c084 	addi.d	$r4,$r4,496(0x1f0)
9000000000010270:	573bafff 	bl	-50260(0xfff3bac) # 9000000000003e1c <kprintf>
    kprintf("e_shentsize is ");printhex(elf->e_shentsize);kprintf("\n");
9000000000010274:	1c000224 	pcaddu12i	$r4,17(0x11)
9000000000010278:	02c9f084 	addi.d	$r4,$r4,636(0x27c)
900000000001027c:	573ba3ff 	bl	-50272(0xfff3ba0) # 9000000000003e1c <kprintf>
9000000000010280:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000010284:	2881218c 	ld.w	$r12,$r12,72(0x48)
9000000000010288:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
900000000001028c:	00150184 	move	$r4,$r12
9000000000010290:	573bfbff 	bl	-50184(0xfff3bf8) # 9000000000003e88 <printhex>
9000000000010294:	1c000224 	pcaddu12i	$r4,17(0x11)
9000000000010298:	02c71084 	addi.d	$r4,$r4,452(0x1c4)
900000000001029c:	573b83ff 	bl	-50304(0xfff3b80) # 9000000000003e1c <kprintf>
    kprintf("e_shnum is ");printhex(elf->e_shnum);kprintf("\n");
90000000000102a0:	1c000224 	pcaddu12i	$r4,17(0x11)
90000000000102a4:	02c98084 	addi.d	$r4,$r4,608(0x260)
90000000000102a8:	573b77ff 	bl	-50316(0xfff3b74) # 9000000000003e1c <kprintf>
90000000000102ac:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000102b0:	2881318c 	ld.w	$r12,$r12,76(0x4c)
90000000000102b4:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
90000000000102b8:	00150184 	move	$r4,$r12
90000000000102bc:	573bcfff 	bl	-50228(0xfff3bcc) # 9000000000003e88 <printhex>
90000000000102c0:	1c000224 	pcaddu12i	$r4,17(0x11)
90000000000102c4:	02c66084 	addi.d	$r4,$r4,408(0x198)
90000000000102c8:	573b57ff 	bl	-50348(0xfff3b54) # 9000000000003e1c <kprintf>
    kprintf("e_shstrndx is ");printhex(elf->e_shstrndx);kprintf("\n");
90000000000102cc:	1c000224 	pcaddu12i	$r4,17(0x11)
90000000000102d0:	02c91084 	addi.d	$r4,$r4,580(0x244)
90000000000102d4:	573b4bff 	bl	-50360(0xfff3b48) # 9000000000003e1c <kprintf>
90000000000102d8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000102dc:	2881418c 	ld.w	$r12,$r12,80(0x50)
90000000000102e0:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
90000000000102e4:	00150184 	move	$r4,$r12
90000000000102e8:	573ba3ff 	bl	-50272(0xfff3ba0) # 9000000000003e88 <printhex>
90000000000102ec:	1c000224 	pcaddu12i	$r4,17(0x11)
90000000000102f0:	02c5b084 	addi.d	$r4,$r4,364(0x16c)
90000000000102f4:	573b2bff 	bl	-50392(0xfff3b28) # 9000000000003e1c <kprintf>
}
90000000000102f8:	03400000 	andi	$r0,$r0,0x0
90000000000102fc:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000010300:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000010304:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000010308:	4c000020 	jirl	$r0,$r1,0

900000000001030c <load_icode>:
        mm_destroy(mm);
    bad_mm:
        goto out;
}
#else
static int load_icode(int fd, int argc, char **kargv) { // load_icode from disk fd, For LAB8
900000000001030c:	02f98063 	addi.d	$r3,$r3,-416(0xe60)
9000000000010310:	29c66061 	st.d	$r1,$r3,408(0x198)
9000000000010314:	29c64076 	st.d	$r22,$r3,400(0x190)
9000000000010318:	29c62077 	st.d	$r23,$r3,392(0x188)
900000000001031c:	02c68076 	addi.d	$r22,$r3,416(0x1a0)
9000000000010320:	0015008d 	move	$r13,$r4
9000000000010324:	001500ac 	move	$r12,$r5
9000000000010328:	29f982c6 	st.d	$r6,$r22,-416(0xe60)
900000000001032c:	004081ad 	slli.w	$r13,$r13,0x0
9000000000010330:	29b9b2cd 	st.w	$r13,$r22,-404(0xe6c)
9000000000010334:	0040818c 	slli.w	$r12,$r12,0x0
9000000000010338:	29b9a2cc 	st.w	$r12,$r22,-408(0xe68)
     * (5) setup current process's mm, cr3, reset pgidr (using lcr3 MARCO)
     * (6) setup trapframe for user environment (You have done in LAB5)
     * (7) store argc and kargv to a0 and a1 register in trapframe
     * (8) if up steps failed, you should cleanup the env.
     */
        if (current->mm != NULL) {
900000000001033c:	1c00424c 	pcaddu12i	$r12,530(0x212)
9000000000010340:	02c4718c 	addi.d	$r12,$r12,284(0x11c)
9000000000010344:	28c0018c 	ld.d	$r12,$r12,0
9000000000010348:	28c0a18c 	ld.d	$r12,$r12,40(0x28)
900000000001034c:	40001d80 	beqz	$r12,28(0x1c) # 9000000000010368 <load_icode+0x5c>
            panic("load_icode: current->mm must be empty.\n");
9000000000010350:	1c000226 	pcaddu12i	$r6,17(0x11)
9000000000010354:	02c740c6 	addi.d	$r6,$r6,464(0x1d0)
9000000000010358:	028c2805 	addi.w	$r5,$r0,778(0x30a)
900000000001035c:	1c000224 	pcaddu12i	$r4,17(0x11)
9000000000010360:	02c1f084 	addi.d	$r4,$r4,124(0x7c)
9000000000010364:	57c91fff 	bl	-14052(0xfffc91c) # 900000000000cc80 <__panic>
        }

        int ret = -E_NO_MEM;
9000000000010368:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
900000000001036c:	29be82cc 	st.w	$r12,$r22,-96(0xfa0)
        struct mm_struct *mm;
        if ((mm = mm_create()) == NULL) {
9000000000010370:	57af17ff 	bl	-20716(0xfffaf14) # 900000000000b284 <mm_create>
9000000000010374:	29fe62c4 	st.d	$r4,$r22,-104(0xf98)
9000000000010378:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
900000000001037c:	4007d580 	beqz	$r12,2004(0x7d4) # 9000000000010b50 <load_icode+0x844>
            goto bad_mm;
        }
        if (setup_pgdir(mm) != 0) {
9000000000010380:	28fe62c4 	ld.d	$r4,$r22,-104(0xf98)
9000000000010384:	57f49bff 	bl	-2920(0xffff498) # 900000000000f81c <setup_pgdir>
9000000000010388:	0015008c 	move	$r12,$r4
900000000001038c:	4407a980 	bnez	$r12,1960(0x7a8) # 9000000000010b34 <load_icode+0x828>
            goto bad_pgdir_cleanup_mm;
        }
        struct __elfhdr ___elfhdr__;
        struct elfhdr64 __elf, *elf = &__elf;
9000000000010390:	02faa2cc 	addi.d	$r12,$r22,-344(0xea8)
9000000000010394:	29fe42cc 	st.d	$r12,$r22,-112(0xf90)
        if ((ret = load_icode_read(fd, &___elfhdr__, sizeof(struct __elfhdr), 0)) != 0) {
9000000000010398:	02fc02cd 	addi.d	$r13,$r22,-256(0xf00)
900000000001039c:	28b9b2cc 	ld.w	$r12,$r22,-404(0xe6c)
90000000000103a0:	00150007 	move	$r7,$r0
90000000000103a4:	02810006 	addi.w	$r6,$r0,64(0x40)
90000000000103a8:	001501a5 	move	$r5,$r13
90000000000103ac:	00150184 	move	$r4,$r12
90000000000103b0:	57fc53ff 	bl	-944(0xffffc50) # 9000000000010000 <load_icode_read>
90000000000103b4:	0015008c 	move	$r12,$r4
90000000000103b8:	29be82cc 	st.w	$r12,$r22,-96(0xfa0)
90000000000103bc:	28be82cc 	ld.w	$r12,$r22,-96(0xfa0)
90000000000103c0:	44075980 	bnez	$r12,1880(0x758) # 9000000000010b18 <load_icode+0x80c>
            goto bad_elf_cleanup_pgdir;
        }
        _load_elfhdr((unsigned char*)&___elfhdr__, &__elf);
90000000000103c4:	02faa2cd 	addi.d	$r13,$r22,-344(0xea8)
90000000000103c8:	02fc02cc 	addi.d	$r12,$r22,-256(0xf00)
90000000000103cc:	001501a5 	move	$r5,$r13
90000000000103d0:	00150184 	move	$r4,$r12
90000000000103d4:	57e61fff 	bl	-6628(0xfffe61c) # 900000000000e9f0 <_load_elfhdr>

        if (elf->e_magic != ELF_MAGIC) {
90000000000103d8:	28fe42cc 	ld.d	$r12,$r22,-112(0xf90)
90000000000103dc:	2880018c 	ld.w	$r12,$r12,0
90000000000103e0:	0015018d 	move	$r13,$r12
90000000000103e4:	148c988c 	lu12i.w	$r12,287940(0x464c4)
90000000000103e8:	0395fd8c 	ori	$r12,$r12,0x57f
90000000000103ec:	580011ac 	beq	$r13,$r12,16(0x10) # 90000000000103fc <load_icode+0xf0>
            ret = -E_INVAL_ELF;
90000000000103f0:	02bfe00c 	addi.w	$r12,$r0,-8(0xff8)
90000000000103f4:	29be82cc 	st.w	$r12,$r22,-96(0xfa0)
            goto bad_elf_cleanup_pgdir;
90000000000103f8:	50072400 	b	1828(0x724) # 9000000000010b1c <load_icode+0x810>
        }

        struct proghdr _ph, *ph = &_ph;
90000000000103fc:	02f9c2cc 	addi.d	$r12,$r22,-400(0xe70)
9000000000010400:	29fe22cc 	st.d	$r12,$r22,-120(0xf88)
        uint32_t vm_flags, phnum;
        uint32_t perm = 0;
9000000000010404:	29bf52c0 	st.w	$r0,$r22,-44(0xfd4)
        struct Page *page;
        for (phnum = 0; phnum < elf->e_phnum; phnum ++) {
9000000000010408:	29bf62c0 	st.w	$r0,$r22,-40(0xfd8)
900000000001040c:	5004b000 	b	1200(0x4b0) # 90000000000108bc <load_icode+0x5b0>
        off_t phoff = elf->e_phoff + sizeof(struct proghdr) * phnum;
9000000000010410:	28fe42cc 	ld.d	$r12,$r22,-112(0xf90)
9000000000010414:	28c0a18d 	ld.d	$r13,$r12,40(0x28)
9000000000010418:	2abf62ce 	ld.wu	$r14,$r22,-40(0xfd8)
900000000001041c:	0280e00c 	addi.w	$r12,$r0,56(0x38)
9000000000010420:	001db1cc 	mul.d	$r12,$r14,$r12
9000000000010424:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000010428:	29fe02cc 	st.d	$r12,$r22,-128(0xf80)
        if ((ret = load_icode_read(fd, ph, sizeof(struct proghdr), phoff)) != 0) {
900000000001042c:	28b9b2cc 	ld.w	$r12,$r22,-404(0xe6c)
9000000000010430:	28fe02c7 	ld.d	$r7,$r22,-128(0xf80)
9000000000010434:	0280e006 	addi.w	$r6,$r0,56(0x38)
9000000000010438:	28fe22c5 	ld.d	$r5,$r22,-120(0xf88)
900000000001043c:	00150184 	move	$r4,$r12
9000000000010440:	57fbc3ff 	bl	-1088(0xffffbc0) # 9000000000010000 <load_icode_read>
9000000000010444:	0015008c 	move	$r12,$r4
9000000000010448:	29be82cc 	st.w	$r12,$r22,-96(0xfa0)
900000000001044c:	28be82cc 	ld.w	$r12,$r22,-96(0xfa0)
9000000000010450:	44069580 	bnez	$r12,1684(0x694) # 9000000000010ae4 <load_icode+0x7d8>
            goto bad_cleanup_mmap;
        }
        if (ph->p_type != ELF_PT_LOAD) {
9000000000010454:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
9000000000010458:	2880018c 	ld.w	$r12,$r12,0
900000000001045c:	0015018d 	move	$r13,$r12
9000000000010460:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000010464:	5c0441ac 	bne	$r13,$r12,1088(0x440) # 90000000000108a4 <load_icode+0x598>
            continue ;
        }
        if (ph->p_filesz > ph->p_memsz) {
9000000000010468:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
900000000001046c:	28c0818d 	ld.d	$r13,$r12,32(0x20)
9000000000010470:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
9000000000010474:	28c0a18c 	ld.d	$r12,$r12,40(0x28)
9000000000010478:	6c00118d 	bgeu	$r12,$r13,16(0x10) # 9000000000010488 <load_icode+0x17c>
            ret = -E_INVAL_ELF;
900000000001047c:	02bfe00c 	addi.w	$r12,$r0,-8(0xff8)
9000000000010480:	29be82cc 	st.w	$r12,$r22,-96(0xfa0)
            goto bad_cleanup_mmap;
9000000000010484:	50067c00 	b	1660(0x67c) # 9000000000010b00 <load_icode+0x7f4>
        }
        vm_flags = 0;
9000000000010488:	29bf72c0 	st.w	$r0,$r22,-36(0xfdc)
        //ptep_set_u_read(&perm);
        perm |= PTE_U;
900000000001048c:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000010490:	0380118c 	ori	$r12,$r12,0x4
9000000000010494:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
9000000000010498:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
900000000001049c:	2880118c 	ld.w	$r12,$r12,4(0x4)
90000000000104a0:	0340058c 	andi	$r12,$r12,0x1
90000000000104a4:	40001180 	beqz	$r12,16(0x10) # 90000000000104b4 <load_icode+0x1a8>
90000000000104a8:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
90000000000104ac:	0380118c 	ori	$r12,$r12,0x4
90000000000104b0:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
90000000000104b4:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
90000000000104b8:	2880118c 	ld.w	$r12,$r12,4(0x4)
90000000000104bc:	0340098c 	andi	$r12,$r12,0x2
90000000000104c0:	40001180 	beqz	$r12,16(0x10) # 90000000000104d0 <load_icode+0x1c4>
90000000000104c4:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
90000000000104c8:	0380098c 	ori	$r12,$r12,0x2
90000000000104cc:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
90000000000104d0:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
90000000000104d4:	2880118c 	ld.w	$r12,$r12,4(0x4)
90000000000104d8:	0340118c 	andi	$r12,$r12,0x4
90000000000104dc:	40001180 	beqz	$r12,16(0x10) # 90000000000104ec <load_icode+0x1e0>
90000000000104e0:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
90000000000104e4:	0380058c 	ori	$r12,$r12,0x1
90000000000104e8:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
        if (vm_flags & VM_WRITE) perm |= PTE_W; 
90000000000104ec:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
90000000000104f0:	0340098c 	andi	$r12,$r12,0x2
90000000000104f4:	40001180 	beqz	$r12,16(0x10) # 9000000000010504 <load_icode+0x1f8>
90000000000104f8:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
90000000000104fc:	0380098c 	ori	$r12,$r12,0x2
9000000000010500:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)

        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
9000000000010504:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
9000000000010508:	28c0418d 	ld.d	$r13,$r12,16(0x10)
900000000001050c:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
9000000000010510:	28c0a18c 	ld.d	$r12,$r12,40(0x28)
9000000000010514:	28bf72ce 	ld.w	$r14,$r22,-36(0xfdc)
9000000000010518:	00150008 	move	$r8,$r0
900000000001051c:	001501c7 	move	$r7,$r14
9000000000010520:	00150186 	move	$r6,$r12
9000000000010524:	001501a5 	move	$r5,$r13
9000000000010528:	28fe62c4 	ld.d	$r4,$r22,-104(0xf98)
900000000001052c:	57b26fff 	bl	-19860(0xfffb26c) # 900000000000b798 <mm_map>
9000000000010530:	0015008c 	move	$r12,$r4
9000000000010534:	29be82cc 	st.w	$r12,$r22,-96(0xfa0)
9000000000010538:	28be82cc 	ld.w	$r12,$r22,-96(0xfa0)
900000000001053c:	4405b180 	bnez	$r12,1456(0x5b0) # 9000000000010aec <load_icode+0x7e0>
            goto bad_cleanup_mmap;
        }

        off_t offset = ph->p_offset;
9000000000010540:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
9000000000010544:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000010548:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN_2N(start, PGSHIFT);
900000000001054c:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
9000000000010550:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000010554:	29fec2cc 	st.d	$r12,$r22,-80(0xfb0)
9000000000010558:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
900000000001055c:	15ffffec 	lu12i.w	$r12,-1(0xfffff)
9000000000010560:	0014b1ac 	and	$r12,$r13,$r12
9000000000010564:	29fea2cc 	st.d	$r12,$r22,-88(0xfa8)

        end = ph->p_va + ph->p_filesz;
9000000000010568:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
900000000001056c:	28c0418d 	ld.d	$r13,$r12,16(0x10)
9000000000010570:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
9000000000010574:	28c0818c 	ld.d	$r12,$r12,32(0x20)
9000000000010578:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001057c:	29fde2cc 	st.d	$r12,$r22,-136(0xf78)
        while (start < end) {
9000000000010580:	50010c00 	b	268(0x10c) # 900000000001068c <load_icode+0x380>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
9000000000010584:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
9000000000010588:	28c0618c 	ld.d	$r12,$r12,24(0x18)
900000000001058c:	28bf52cd 	ld.w	$r13,$r22,-44(0xfd4)
9000000000010590:	001501a6 	move	$r6,$r13
9000000000010594:	28fea2c5 	ld.d	$r5,$r22,-88(0xfa8)
9000000000010598:	00150184 	move	$r4,$r12
900000000001059c:	5797bbff 	bl	-26696(0xfff97b8) # 9000000000009d54 <pgdir_alloc_page>
90000000000105a0:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
90000000000105a4:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000105a8:	44001180 	bnez	$r12,16(0x10) # 90000000000105b8 <load_icode+0x2ac>
            ret = -E_NO_MEM;
90000000000105ac:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
90000000000105b0:	29be82cc 	st.w	$r12,$r22,-96(0xfa0)
            goto bad_cleanup_mmap;
90000000000105b4:	50054c00 	b	1356(0x54c) # 9000000000010b00 <load_icode+0x7f4>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
90000000000105b8:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
90000000000105bc:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
90000000000105c0:	0011b1ac 	sub.d	$r12,$r13,$r12
90000000000105c4:	29fdc2cc 	st.d	$r12,$r22,-144(0xf70)
90000000000105c8:	1400002d 	lu12i.w	$r13,1(0x1)
90000000000105cc:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
90000000000105d0:	0011b1ac 	sub.d	$r12,$r13,$r12
90000000000105d4:	29fee2cc 	st.d	$r12,$r22,-72(0xfb8)
90000000000105d8:	28fea2cd 	ld.d	$r13,$r22,-88(0xfa8)
90000000000105dc:	1400002c 	lu12i.w	$r12,1(0x1)
90000000000105e0:	0010b1ac 	add.d	$r12,$r13,$r12
90000000000105e4:	29fea2cc 	st.d	$r12,$r22,-88(0xfa8)
            if (end < la) {
90000000000105e8:	28fde2cd 	ld.d	$r13,$r22,-136(0xf78)
90000000000105ec:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
90000000000105f0:	6c001dac 	bgeu	$r13,$r12,28(0x1c) # 900000000001060c <load_icode+0x300>
            size -= la - end;
90000000000105f4:	28fde2cd 	ld.d	$r13,$r22,-136(0xf78)
90000000000105f8:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
90000000000105fc:	0011b1ac 	sub.d	$r12,$r13,$r12
9000000000010600:	28fee2cd 	ld.d	$r13,$r22,-72(0xfb8)
9000000000010604:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000010608:	29fee2cc 	st.d	$r12,$r22,-72(0xfb8)
            }
            if ((ret = load_icode_read(fd, page2kva(page) + off, size, offset)) != 0) {
900000000001060c:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000010610:	57e287ff 	bl	-7548(0xfffe284) # 900000000000e894 <page2kva>
9000000000010614:	0015008d 	move	$r13,$r4
9000000000010618:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
900000000001061c:	0010b1ad 	add.d	$r13,$r13,$r12
9000000000010620:	28b9b2cc 	ld.w	$r12,$r22,-404(0xe6c)
9000000000010624:	28ff02c7 	ld.d	$r7,$r22,-64(0xfc0)
9000000000010628:	28fee2c6 	ld.d	$r6,$r22,-72(0xfb8)
900000000001062c:	001501a5 	move	$r5,$r13
9000000000010630:	00150184 	move	$r4,$r12
9000000000010634:	57f9cfff 	bl	-1588(0xffff9cc) # 9000000000010000 <load_icode_read>
9000000000010638:	0015008c 	move	$r12,$r4
900000000001063c:	29be82cc 	st.w	$r12,$r22,-96(0xfa0)
9000000000010640:	28be82cc 	ld.w	$r12,$r22,-96(0xfa0)
9000000000010644:	4404b180 	bnez	$r12,1200(0x4b0) # 9000000000010af4 <load_icode+0x7e8>
                goto bad_cleanup_mmap;
            }
            fence_i(page2kva(page)+off, size);
9000000000010648:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
900000000001064c:	57e24bff 	bl	-7608(0xfffe248) # 900000000000e894 <page2kva>
9000000000010650:	0015008d 	move	$r13,$r4
9000000000010654:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
9000000000010658:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001065c:	28bee2cd 	ld.w	$r13,$r22,-72(0xfb8)
9000000000010660:	001501a5 	move	$r5,$r13
9000000000010664:	00150184 	move	$r4,$r12
9000000000010668:	57e04fff 	bl	-8116(0xfffe04c) # 900000000000e6b4 <fence_i>
            start += size, offset += size;
900000000001066c:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
9000000000010670:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000010674:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000010678:	29fec2cc 	st.d	$r12,$r22,-80(0xfb0)
900000000001067c:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
9000000000010680:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000010684:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000010688:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
        while (start < end) {
900000000001068c:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
9000000000010690:	28fde2cc 	ld.d	$r12,$r22,-136(0xf78)
9000000000010694:	6bfef1ac 	bltu	$r13,$r12,-272(0x3fef0) # 9000000000010584 <load_icode+0x278>
        }

        end = ph->p_va + ph->p_memsz;
9000000000010698:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
900000000001069c:	28c0418d 	ld.d	$r13,$r12,16(0x10)
90000000000106a0:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
90000000000106a4:	28c0a18c 	ld.d	$r12,$r12,40(0x28)
90000000000106a8:	0010b1ac 	add.d	$r12,$r13,$r12
90000000000106ac:	29fde2cc 	st.d	$r12,$r22,-136(0xf78)

        if (start < la) {
90000000000106b0:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
90000000000106b4:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
90000000000106b8:	6c01ddac 	bgeu	$r13,$r12,476(0x1dc) # 9000000000010894 <load_icode+0x588>
            if (start >= end) {
90000000000106bc:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
90000000000106c0:	28fde2cc 	ld.d	$r12,$r22,-136(0xf78)
90000000000106c4:	6c01e9ac 	bgeu	$r13,$r12,488(0x1e8) # 90000000000108ac <load_icode+0x5a0>
            continue ;
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
90000000000106c8:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
90000000000106cc:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
90000000000106d0:	0011b1ad 	sub.d	$r13,$r13,$r12
90000000000106d4:	1400002c 	lu12i.w	$r12,1(0x1)
90000000000106d8:	0010b1ac 	add.d	$r12,$r13,$r12
90000000000106dc:	29fdc2cc 	st.d	$r12,$r22,-144(0xf70)
90000000000106e0:	1400002d 	lu12i.w	$r13,1(0x1)
90000000000106e4:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
90000000000106e8:	0011b1ac 	sub.d	$r12,$r13,$r12
90000000000106ec:	29fee2cc 	st.d	$r12,$r22,-72(0xfb8)
            if (end < la) {
90000000000106f0:	28fde2cd 	ld.d	$r13,$r22,-136(0xf78)
90000000000106f4:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
90000000000106f8:	6c001dac 	bgeu	$r13,$r12,28(0x1c) # 9000000000010714 <load_icode+0x408>
            size -= la - end;
90000000000106fc:	28fde2cd 	ld.d	$r13,$r22,-136(0xf78)
9000000000010700:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
9000000000010704:	0011b1ac 	sub.d	$r12,$r13,$r12
9000000000010708:	28fee2cd 	ld.d	$r13,$r22,-72(0xfb8)
900000000001070c:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000010710:	29fee2cc 	st.d	$r12,$r22,-72(0xfb8)
            }
            memset(page2kva(page) + off, 0, size);
9000000000010714:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000010718:	57e17fff 	bl	-7812(0xfffe17c) # 900000000000e894 <page2kva>
900000000001071c:	0015008d 	move	$r13,$r4
9000000000010720:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
9000000000010724:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000010728:	28fee2c6 	ld.d	$r6,$r22,-72(0xfb8)
900000000001072c:	00150005 	move	$r5,$r0
9000000000010730:	00150184 	move	$r4,$r12
9000000000010734:	573defff 	bl	-49684(0xfff3dec) # 9000000000004520 <memset>
            fence_i(page2kva(page) + off, size);
9000000000010738:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
900000000001073c:	57e15bff 	bl	-7848(0xfffe158) # 900000000000e894 <page2kva>
9000000000010740:	0015008d 	move	$r13,$r4
9000000000010744:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
9000000000010748:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001074c:	28bee2cd 	ld.w	$r13,$r22,-72(0xfb8)
9000000000010750:	001501a5 	move	$r5,$r13
9000000000010754:	00150184 	move	$r4,$r12
9000000000010758:	57df5fff 	bl	-8356(0xfffdf5c) # 900000000000e6b4 <fence_i>
            start += size;
900000000001075c:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
9000000000010760:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000010764:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000010768:	29fec2cc 	st.d	$r12,$r22,-80(0xfb0)
            assert((end < la && start == end) || (end >= la && start == la));
900000000001076c:	28fde2cd 	ld.d	$r13,$r22,-136(0xf78)
9000000000010770:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
9000000000010774:	6c0011ac 	bgeu	$r13,$r12,16(0x10) # 9000000000010784 <load_icode+0x478>
9000000000010778:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
900000000001077c:	28fde2cc 	ld.d	$r12,$r22,-136(0xf78)
9000000000010780:	580115ac 	beq	$r13,$r12,276(0x114) # 9000000000010894 <load_icode+0x588>
9000000000010784:	28fde2cd 	ld.d	$r13,$r22,-136(0xf78)
9000000000010788:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000001078c:	680011ac 	bltu	$r13,$r12,16(0x10) # 900000000001079c <load_icode+0x490>
9000000000010790:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
9000000000010794:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
9000000000010798:	5800fdac 	beq	$r13,$r12,252(0xfc) # 9000000000010894 <load_icode+0x588>
900000000001079c:	1c000226 	pcaddu12i	$r6,17(0x11)
90000000000107a0:	02f6b0c6 	addi.d	$r6,$r6,-596(0xdac)
90000000000107a4:	028d7c05 	addi.w	$r5,$r0,863(0x35f)
90000000000107a8:	1c000224 	pcaddu12i	$r4,17(0x11)
90000000000107ac:	02f0c084 	addi.d	$r4,$r4,-976(0xc30)
90000000000107b0:	57c4d3ff 	bl	-15152(0xfffc4d0) # 900000000000cc80 <__panic>
        }

        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
90000000000107b4:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
90000000000107b8:	28c0618c 	ld.d	$r12,$r12,24(0x18)
90000000000107bc:	28bf52cd 	ld.w	$r13,$r22,-44(0xfd4)
90000000000107c0:	001501a6 	move	$r6,$r13
90000000000107c4:	28fea2c5 	ld.d	$r5,$r22,-88(0xfa8)
90000000000107c8:	00150184 	move	$r4,$r12
90000000000107cc:	57958bff 	bl	-27256(0xfff9588) # 9000000000009d54 <pgdir_alloc_page>
90000000000107d0:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
90000000000107d4:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000107d8:	44001180 	bnez	$r12,16(0x10) # 90000000000107e8 <load_icode+0x4dc>
            ret = -E_NO_MEM;
90000000000107dc:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
90000000000107e0:	29be82cc 	st.w	$r12,$r22,-96(0xfa0)
            goto bad_cleanup_mmap;
90000000000107e4:	50031c00 	b	796(0x31c) # 9000000000010b00 <load_icode+0x7f4>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
90000000000107e8:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
90000000000107ec:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
90000000000107f0:	0011b1ac 	sub.d	$r12,$r13,$r12
90000000000107f4:	29fdc2cc 	st.d	$r12,$r22,-144(0xf70)
90000000000107f8:	1400002d 	lu12i.w	$r13,1(0x1)
90000000000107fc:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
9000000000010800:	0011b1ac 	sub.d	$r12,$r13,$r12
9000000000010804:	29fee2cc 	st.d	$r12,$r22,-72(0xfb8)
9000000000010808:	28fea2cd 	ld.d	$r13,$r22,-88(0xfa8)
900000000001080c:	1400002c 	lu12i.w	$r12,1(0x1)
9000000000010810:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000010814:	29fea2cc 	st.d	$r12,$r22,-88(0xfa8)
            if (end < la) {
9000000000010818:	28fde2cd 	ld.d	$r13,$r22,-136(0xf78)
900000000001081c:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
9000000000010820:	6c001dac 	bgeu	$r13,$r12,28(0x1c) # 900000000001083c <load_icode+0x530>
            size -= la - end;
9000000000010824:	28fde2cd 	ld.d	$r13,$r22,-136(0xf78)
9000000000010828:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000001082c:	0011b1ac 	sub.d	$r12,$r13,$r12
9000000000010830:	28fee2cd 	ld.d	$r13,$r22,-72(0xfb8)
9000000000010834:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000010838:	29fee2cc 	st.d	$r12,$r22,-72(0xfb8)
            }
            memset(page2kva(page) + off, 0, size);
900000000001083c:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000010840:	57e057ff 	bl	-8108(0xfffe054) # 900000000000e894 <page2kva>
9000000000010844:	0015008d 	move	$r13,$r4
9000000000010848:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
900000000001084c:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000010850:	28fee2c6 	ld.d	$r6,$r22,-72(0xfb8)
9000000000010854:	00150005 	move	$r5,$r0
9000000000010858:	00150184 	move	$r4,$r12
900000000001085c:	573cc7ff 	bl	-49980(0xfff3cc4) # 9000000000004520 <memset>
            fence_i(page2kva(page) + off, size);
9000000000010860:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000010864:	57e033ff 	bl	-8144(0xfffe030) # 900000000000e894 <page2kva>
9000000000010868:	0015008d 	move	$r13,$r4
900000000001086c:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
9000000000010870:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000010874:	28bee2cd 	ld.w	$r13,$r22,-72(0xfb8)
9000000000010878:	001501a5 	move	$r5,$r13
900000000001087c:	00150184 	move	$r4,$r12
9000000000010880:	57de37ff 	bl	-8652(0xfffde34) # 900000000000e6b4 <fence_i>
            start += size;
9000000000010884:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
9000000000010888:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000001088c:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000010890:	29fec2cc 	st.d	$r12,$r22,-80(0xfb0)
        while (start < end) {
9000000000010894:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
9000000000010898:	28fde2cc 	ld.d	$r12,$r22,-136(0xf78)
900000000001089c:	6bff19ac 	bltu	$r13,$r12,-232(0x3ff18) # 90000000000107b4 <load_icode+0x4a8>
90000000000108a0:	50001000 	b	16(0x10) # 90000000000108b0 <load_icode+0x5a4>
            continue ;
90000000000108a4:	03400000 	andi	$r0,$r0,0x0
90000000000108a8:	50000800 	b	8(0x8) # 90000000000108b0 <load_icode+0x5a4>
            continue ;
90000000000108ac:	03400000 	andi	$r0,$r0,0x0
        for (phnum = 0; phnum < elf->e_phnum; phnum ++) {
90000000000108b0:	28bf62cc 	ld.w	$r12,$r22,-40(0xfd8)
90000000000108b4:	0280058c 	addi.w	$r12,$r12,1(0x1)
90000000000108b8:	29bf62cc 	st.w	$r12,$r22,-40(0xfd8)
90000000000108bc:	28fe42cc 	ld.d	$r12,$r22,-112(0xf90)
90000000000108c0:	2881118d 	ld.w	$r13,$r12,68(0x44)
90000000000108c4:	28bf62cc 	ld.w	$r12,$r22,-40(0xfd8)
90000000000108c8:	6bfb498d 	bltu	$r12,$r13,-1208(0x3fb48) # 9000000000010410 <load_icode+0x104>
        }
    }
    sysfile_close(fd);
90000000000108cc:	28b9b2cc 	ld.w	$r12,$r22,-404(0xe6c)
90000000000108d0:	00150184 	move	$r4,$r12
90000000000108d4:	5446fc00 	bl	18172(0x46fc) # 9000000000014fd0 <sysfile_close>
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
90000000000108d8:	02802c0c 	addi.w	$r12,$r0,11(0xb)
90000000000108dc:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
90000000000108e0:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
90000000000108e4:	00150008 	move	$r8,$r0
90000000000108e8:	00150187 	move	$r7,$r12
90000000000108ec:	14000206 	lu12i.w	$r6,16(0x10)
90000000000108f0:	14fffe05 	lu12i.w	$r5,524272(0x7fff0)
90000000000108f4:	28fe62c4 	ld.d	$r4,$r22,-104(0xf98)
90000000000108f8:	57aea3ff 	bl	-20832(0xfffaea0) # 900000000000b798 <mm_map>
90000000000108fc:	0015008c 	move	$r12,$r4
9000000000010900:	29be82cc 	st.w	$r12,$r22,-96(0xfa0)
9000000000010904:	28be82cc 	ld.w	$r12,$r22,-96(0xfa0)
9000000000010908:	4401f580 	bnez	$r12,500(0x1f4) # 9000000000010afc <load_icode+0x7f0>
    goto bad_cleanup_mmap;
    }

    mm_count_inc(mm);
900000000001090c:	28fe62c4 	ld.d	$r4,$r22,-104(0xf98)
9000000000010910:	57e26fff 	bl	-7572(0xfffe26c) # 900000000000eb7c <mm_count_inc>
    current->mm = mm;
9000000000010914:	1c00424c 	pcaddu12i	$r12,530(0x212)
9000000000010918:	02ed118c 	addi.d	$r12,$r12,-1212(0xb44)
900000000001091c:	28c0018c 	ld.d	$r12,$r12,0
9000000000010920:	28fe62cd 	ld.d	$r13,$r22,-104(0xf98)
9000000000010924:	29c0a18d 	st.d	$r13,$r12,40(0x28)
    current->cr3 = PADDR(mm->pgdir);
9000000000010928:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
900000000001092c:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000010930:	29fda2cc 	st.d	$r12,$r22,-152(0xf68)
9000000000010934:	28fda2cd 	ld.d	$r13,$r22,-152(0xf68)
9000000000010938:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
900000000001093c:	0323fd8c 	lu52i.d	$r12,$r12,-1793(0x8ff)
9000000000010940:	6800218d 	bltu	$r12,$r13,32(0x20) # 9000000000010960 <load_icode+0x654>
9000000000010944:	28fda2c7 	ld.d	$r7,$r22,-152(0xf68)
9000000000010948:	1c000226 	pcaddu12i	$r6,17(0x11)
900000000001094c:	02e9a0c6 	addi.d	$r6,$r6,-1432(0xa68)
9000000000010950:	028de005 	addi.w	$r5,$r0,888(0x378)
9000000000010954:	1c000224 	pcaddu12i	$r4,17(0x11)
9000000000010958:	02ea1084 	addi.d	$r4,$r4,-1404(0xa84)
900000000001095c:	57c327ff 	bl	-15580(0xfffc324) # 900000000000cc80 <__panic>
9000000000010960:	28fda2cd 	ld.d	$r13,$r22,-152(0xf68)
9000000000010964:	1c00424c 	pcaddu12i	$r12,530(0x212)
9000000000010968:	02ebd18c 	addi.d	$r12,$r12,-1292(0xaf4)
900000000001096c:	28c0018c 	ld.d	$r12,$r12,0
9000000000010970:	29c2818d 	st.d	$r13,$r12,160(0xa0)
    lcr3(PADDR(mm->pgdir));
9000000000010974:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
9000000000010978:	28c0618c 	ld.d	$r12,$r12,24(0x18)
900000000001097c:	29fd82cc 	st.d	$r12,$r22,-160(0xf60)
9000000000010980:	28fd82cd 	ld.d	$r13,$r22,-160(0xf60)
9000000000010984:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
9000000000010988:	0323fd8c 	lu52i.d	$r12,$r12,-1793(0x8ff)
900000000001098c:	6800218d 	bltu	$r12,$r13,32(0x20) # 90000000000109ac <load_icode+0x6a0>
9000000000010990:	28fd82c7 	ld.d	$r7,$r22,-160(0xf60)
9000000000010994:	1c000226 	pcaddu12i	$r6,17(0x11)
9000000000010998:	02e870c6 	addi.d	$r6,$r6,-1508(0xa1c)
900000000001099c:	028de405 	addi.w	$r5,$r0,889(0x379)
90000000000109a0:	1c000224 	pcaddu12i	$r4,17(0x11)
90000000000109a4:	02e8e084 	addi.d	$r4,$r4,-1480(0xa38)
90000000000109a8:	57c2dbff 	bl	-15656(0xfffc2d8) # 900000000000cc80 <__panic>
90000000000109ac:	28fd82cc 	ld.d	$r12,$r22,-160(0xf60)
90000000000109b0:	00150184 	move	$r4,$r12
90000000000109b4:	5787f7ff 	bl	-30732(0xfff87f4) # 90000000000091a8 <lcr3>
    uintptr_t stacktop = USTACKTOP - argc * PGSIZE;
90000000000109b8:	28b9a2cc 	ld.w	$r12,$r22,-408(0xe68)
90000000000109bc:	0040b18c 	slli.w	$r12,$r12,0xc
90000000000109c0:	1500000d 	lu12i.w	$r13,-524288(0x80000)
90000000000109c4:	001131ac 	sub.w	$r12,$r13,$r12
90000000000109c8:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
90000000000109cc:	29fd62cc 	st.d	$r12,$r22,-168(0xf58)
    char **uargv = (char **)(stacktop - argc * sizeof(char *));
90000000000109d0:	28b9a2cc 	ld.w	$r12,$r22,-408(0xe68)
90000000000109d4:	00410d8c 	slli.d	$r12,$r12,0x3
90000000000109d8:	28fd62cd 	ld.d	$r13,$r22,-168(0xf58)
90000000000109dc:	0011b1ac 	sub.d	$r12,$r13,$r12
90000000000109e0:	29fd42cc 	st.d	$r12,$r22,-176(0xf50)
    int i;
    for (i = 0; i < argc; i ++) {
90000000000109e4:	29be92c0 	st.w	$r0,$r22,-92(0xfa4)
90000000000109e8:	50006000 	b	96(0x60) # 9000000000010a48 <load_icode+0x73c>
        uargv[i] = strcpy((char *)(stacktop + i * PGSIZE), kargv[i]);
90000000000109ec:	28be92cc 	ld.w	$r12,$r22,-92(0xfa4)
90000000000109f0:	0040b18c 	slli.w	$r12,$r12,0xc
90000000000109f4:	0015018d 	move	$r13,$r12
90000000000109f8:	28fd62cc 	ld.d	$r12,$r22,-168(0xf58)
90000000000109fc:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000010a00:	0015018f 	move	$r15,$r12
9000000000010a04:	28be92cc 	ld.w	$r12,$r22,-92(0xfa4)
9000000000010a08:	00410d8c 	slli.d	$r12,$r12,0x3
9000000000010a0c:	28f982cd 	ld.d	$r13,$r22,-416(0xe60)
9000000000010a10:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000010a14:	28c0018e 	ld.d	$r14,$r12,0
9000000000010a18:	28be92cc 	ld.w	$r12,$r22,-92(0xfa4)
9000000000010a1c:	00410d8c 	slli.d	$r12,$r12,0x3
9000000000010a20:	28fd42cd 	ld.d	$r13,$r22,-176(0xf50)
9000000000010a24:	0010b1b7 	add.d	$r23,$r13,$r12
9000000000010a28:	001501c5 	move	$r5,$r14
9000000000010a2c:	001501e4 	move	$r4,$r15
9000000000010a30:	573827ff 	bl	-51164(0xfff3824) # 9000000000004254 <strcpy>
9000000000010a34:	0015008c 	move	$r12,$r4
9000000000010a38:	29c002ec 	st.d	$r12,$r23,0
    for (i = 0; i < argc; i ++) {
9000000000010a3c:	28be92cc 	ld.w	$r12,$r22,-92(0xfa4)
9000000000010a40:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000010a44:	29be92cc 	st.w	$r12,$r22,-92(0xfa4)
9000000000010a48:	28be92cd 	ld.w	$r13,$r22,-92(0xfa4)
9000000000010a4c:	28b9a2cc 	ld.w	$r12,$r22,-408(0xe68)
9000000000010a50:	63ff9dac 	blt	$r13,$r12,-100(0x3ff9c) # 90000000000109ec <load_icode+0x6e0>
    }
    struct trapframe *tf = current->tf;
9000000000010a54:	1c00424c 	pcaddu12i	$r12,530(0x212)
9000000000010a58:	02e8118c 	addi.d	$r12,$r12,-1532(0xa04)
9000000000010a5c:	28c0018c 	ld.d	$r12,$r12,0
9000000000010a60:	28c2618c 	ld.d	$r12,$r12,152(0x98)
9000000000010a64:	29fd22cc 	st.d	$r12,$r22,-184(0xf48)
    memset(tf, 0, sizeof(struct trapframe));
9000000000010a68:	02844006 	addi.w	$r6,$r0,272(0x110)
9000000000010a6c:	00150005 	move	$r5,$r0
9000000000010a70:	28fd22c4 	ld.d	$r4,$r22,-184(0xf48)
9000000000010a74:	573aafff 	bl	-50516(0xfff3aac) # 9000000000004520 <memset>
    tf->tf_era = elf->e_entry;
9000000000010a78:	28fe42cc 	ld.d	$r12,$r22,-112(0xf90)
9000000000010a7c:	28c0818d 	ld.d	$r13,$r12,32(0x20)
9000000000010a80:	28fd22cc 	ld.d	$r12,$r22,-184(0xf48)
9000000000010a84:	29c4218d 	st.d	$r13,$r12,264(0x108)
    tf->tf_regs.reg_r[LOONGARCH_REG_SP] = USTACKTOP;
9000000000010a88:	28fd22cd 	ld.d	$r13,$r22,-184(0xf48)
9000000000010a8c:	1500000c 	lu12i.w	$r12,-524288(0x80000)
9000000000010a90:	1600000c 	lu32i.d	$r12,0
9000000000010a94:	29c081ac 	st.d	$r12,$r13,32(0x20)
    uint32_t status = 0;
9000000000010a98:	29bd12c0 	st.w	$r0,$r22,-188(0xf44)
    status |= PLV_USER; // set plv=3(User Mode)
9000000000010a9c:	28bd12cc 	ld.w	$r12,$r22,-188(0xf44)
9000000000010aa0:	03800d8c 	ori	$r12,$r12,0x3
9000000000010aa4:	29bd12cc 	st.w	$r12,$r22,-188(0xf44)
    status |= CSR_CRMD_IE;
9000000000010aa8:	28bd12cc 	ld.w	$r12,$r22,-188(0xf44)
9000000000010aac:	0380118c 	ori	$r12,$r12,0x4
9000000000010ab0:	29bd12cc 	st.w	$r12,$r22,-188(0xf44)
    tf->tf_prmd = status;
9000000000010ab4:	28fd22cc 	ld.d	$r12,$r22,-184(0xf48)
9000000000010ab8:	28bd12cd 	ld.w	$r13,$r22,-188(0xf44)
9000000000010abc:	2980318d 	st.w	$r13,$r12,12(0xc)
    tf->tf_regs.reg_r[LOONGARCH_REG_A0] = argc;
9000000000010ac0:	28b9a2cd 	ld.w	$r13,$r22,-408(0xe68)
9000000000010ac4:	28fd22cc 	ld.d	$r12,$r22,-184(0xf48)
9000000000010ac8:	29c0a18d 	st.d	$r13,$r12,40(0x28)
    tf->tf_regs.reg_r[LOONGARCH_REG_A1] = (uint64_t)uargv;
9000000000010acc:	28fd42cd 	ld.d	$r13,$r22,-176(0xf50)
9000000000010ad0:	28fd22cc 	ld.d	$r12,$r22,-184(0xf48)
9000000000010ad4:	29c0c18d 	st.d	$r13,$r12,48(0x30)
    ret = 0;
9000000000010ad8:	29be82c0 	st.w	$r0,$r22,-96(0xfa0)
    out:
        return ret;
9000000000010adc:	28be82cc 	ld.w	$r12,$r22,-96(0xfa0)
9000000000010ae0:	50008c00 	b	140(0x8c) # 9000000000010b6c <load_icode+0x860>
            goto bad_cleanup_mmap;
9000000000010ae4:	03400000 	andi	$r0,$r0,0x0
9000000000010ae8:	50001800 	b	24(0x18) # 9000000000010b00 <load_icode+0x7f4>
            goto bad_cleanup_mmap;
9000000000010aec:	03400000 	andi	$r0,$r0,0x0
9000000000010af0:	50001000 	b	16(0x10) # 9000000000010b00 <load_icode+0x7f4>
                goto bad_cleanup_mmap;
9000000000010af4:	03400000 	andi	$r0,$r0,0x0
9000000000010af8:	50000800 	b	8(0x8) # 9000000000010b00 <load_icode+0x7f4>
    goto bad_cleanup_mmap;
9000000000010afc:	03400000 	andi	$r0,$r0,0x0
    bad_cleanup_mmap:
        panic("bad_cleanup_mmap");
9000000000010b00:	1c000226 	pcaddu12i	$r6,17(0x11)
9000000000010b04:	02ea60c6 	addi.d	$r6,$r6,-1384(0xa98)
9000000000010b08:	028e3805 	addi.w	$r5,$r0,910(0x38e)
9000000000010b0c:	1c000224 	pcaddu12i	$r4,17(0x11)
9000000000010b10:	02e33084 	addi.d	$r4,$r4,-1844(0x8cc)
9000000000010b14:	57c16fff 	bl	-16020(0xfffc16c) # 900000000000cc80 <__panic>
            goto bad_elf_cleanup_pgdir;
9000000000010b18:	03400000 	andi	$r0,$r0,0x0
        exit_mmap(mm);
    bad_elf_cleanup_pgdir:
        panic("bad_elf_cleanup_pgdir");
9000000000010b1c:	1c000226 	pcaddu12i	$r6,17(0x11)
9000000000010b20:	02ea50c6 	addi.d	$r6,$r6,-1388(0xa94)
9000000000010b24:	028e4405 	addi.w	$r5,$r0,913(0x391)
9000000000010b28:	1c000224 	pcaddu12i	$r4,17(0x11)
9000000000010b2c:	02e2c084 	addi.d	$r4,$r4,-1872(0x8b0)
9000000000010b30:	57c153ff 	bl	-16048(0xfffc150) # 900000000000cc80 <__panic>
            goto bad_pgdir_cleanup_mm;
9000000000010b34:	03400000 	andi	$r0,$r0,0x0
        put_pgdir(mm);
    bad_pgdir_cleanup_mm:
        panic("bad_pgdir_cleanup_mm");
9000000000010b38:	1c000226 	pcaddu12i	$r6,17(0x11)
9000000000010b3c:	02ea40c6 	addi.d	$r6,$r6,-1392(0xa90)
9000000000010b40:	028e5005 	addi.w	$r5,$r0,916(0x394)
9000000000010b44:	1c000224 	pcaddu12i	$r4,17(0x11)
9000000000010b48:	02e25084 	addi.d	$r4,$r4,-1900(0x894)
9000000000010b4c:	57c137ff 	bl	-16076(0xfffc134) # 900000000000cc80 <__panic>
            goto bad_mm;
9000000000010b50:	03400000 	andi	$r0,$r0,0x0
        mm_destroy(mm);
    bad_mm:
        panic("bad_mm");
9000000000010b54:	1c000226 	pcaddu12i	$r6,17(0x11)
9000000000010b58:	02ea30c6 	addi.d	$r6,$r6,-1396(0xa8c)
9000000000010b5c:	028e5c05 	addi.w	$r5,$r0,919(0x397)
9000000000010b60:	1c000224 	pcaddu12i	$r4,17(0x11)
9000000000010b64:	02e1e084 	addi.d	$r4,$r4,-1928(0x878)
9000000000010b68:	57c11bff 	bl	-16104(0xfffc118) # 900000000000cc80 <__panic>
        goto out;
    #endif
}
9000000000010b6c:	00150184 	move	$r4,$r12
9000000000010b70:	28c66061 	ld.d	$r1,$r3,408(0x198)
9000000000010b74:	28c64076 	ld.d	$r22,$r3,400(0x190)
9000000000010b78:	28c62077 	ld.d	$r23,$r3,392(0x188)
9000000000010b7c:	02c68063 	addi.d	$r3,$r3,416(0x1a0)
9000000000010b80:	4c000020 	jirl	$r0,$r1,0

9000000000010b84 <put_kargv>:
#endif

// this function isn't very correct in LAB8
static void
put_kargv(int argc, char **kargv) {
9000000000010b84:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000010b88:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000010b8c:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000010b90:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000010b94:	0015008c 	move	$r12,$r4
9000000000010b98:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
9000000000010b9c:	0040818c 	slli.w	$r12,$r12,0x0
9000000000010ba0:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    while (argc > 0) {
9000000000010ba4:	50002c00 	b	44(0x2c) # 9000000000010bd0 <put_kargv+0x4c>
        kfree(kargv[-- argc]);
9000000000010ba8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000010bac:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
9000000000010bb0:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000010bb4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000010bb8:	00410d8c 	slli.d	$r12,$r12,0x3
9000000000010bbc:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000010bc0:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000010bc4:	28c0018c 	ld.d	$r12,$r12,0
9000000000010bc8:	00150184 	move	$r4,$r12
9000000000010bcc:	576f4bff 	bl	-37048(0xfff6f48) # 9000000000007b14 <kfree>
    while (argc > 0) {
9000000000010bd0:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000010bd4:	63ffd40c 	blt	$r0,$r12,-44(0x3ffd4) # 9000000000010ba8 <put_kargv+0x24>
    }
}
9000000000010bd8:	03400000 	andi	$r0,$r0,0x0
9000000000010bdc:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000010be0:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000010be4:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000010be8:	4c000020 	jirl	$r0,$r1,0

9000000000010bec <copy_kargv>:

static int
copy_kargv(struct mm_struct *mm, int argc, char **kargv, const char **argv) {
9000000000010bec:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000010bf0:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000010bf4:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000010bf8:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000010bfc:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000010c00:	001500ac 	move	$r12,$r5
9000000000010c04:	29ff22c6 	st.d	$r6,$r22,-56(0xfc8)
9000000000010c08:	29ff02c7 	st.d	$r7,$r22,-64(0xfc0)
9000000000010c0c:	0040818c 	slli.w	$r12,$r12,0x0
9000000000010c10:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
    int i, ret = -E_INVAL;
9000000000010c14:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
9000000000010c18:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
    if (!user_mem_check(mm, (uintptr_t)argv, sizeof(const char *) * argc, 0)) {
9000000000010c1c:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
9000000000010c20:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000010c24:	00410d8c 	slli.d	$r12,$r12,0x3
9000000000010c28:	00150007 	move	$r7,$r0
9000000000010c2c:	00150186 	move	$r6,$r12
9000000000010c30:	001501a5 	move	$r5,$r13
9000000000010c34:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000010c38:	57b84bff 	bl	-18360(0xfffb848) # 900000000000c480 <user_mem_check>
9000000000010c3c:	0015008c 	move	$r12,$r4
9000000000010c40:	44000d80 	bnez	$r12,12(0xc) # 9000000000010c4c <copy_kargv+0x60>
        return ret;
9000000000010c44:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
9000000000010c48:	5000b400 	b	180(0xb4) # 9000000000010cfc <copy_kargv+0x110>
    }
    for (i = 0; i < argc; i ++) {
9000000000010c4c:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
9000000000010c50:	50007800 	b	120(0x78) # 9000000000010cc8 <copy_kargv+0xdc>
        char *buffer;
        if ((buffer = kmalloc(EXEC_MAX_ARG_LEN + 1)) == NULL) {
9000000000010c54:	14000024 	lu12i.w	$r4,1(0x1)
9000000000010c58:	5769e3ff 	bl	-38432(0xfff69e0) # 9000000000007638 <kmalloc>
9000000000010c5c:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)
9000000000010c60:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000010c64:	40007980 	beqz	$r12,120(0x78) # 9000000000010cdc <copy_kargv+0xf0>
            goto failed_nomem;
        }
        if (!copy_string(mm, buffer, argv[i], EXEC_MAX_ARG_LEN + 1)) {
9000000000010c68:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000010c6c:	00410d8c 	slli.d	$r12,$r12,0x3
9000000000010c70:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
9000000000010c74:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000010c78:	28c0018c 	ld.d	$r12,$r12,0
9000000000010c7c:	14000027 	lu12i.w	$r7,1(0x1)
9000000000010c80:	00150186 	move	$r6,$r12
9000000000010c84:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
9000000000010c88:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000010c8c:	57b9c7ff 	bl	-17980(0xfffb9c4) # 900000000000c650 <copy_string>
9000000000010c90:	0015008c 	move	$r12,$r4
9000000000010c94:	44001180 	bnez	$r12,16(0x10) # 9000000000010ca4 <copy_kargv+0xb8>
            kfree(buffer);
9000000000010c98:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000010c9c:	576e7bff 	bl	-37256(0xfff6e78) # 9000000000007b14 <kfree>
            goto failed_cleanup;
9000000000010ca0:	50004800 	b	72(0x48) # 9000000000010ce8 <copy_kargv+0xfc>
        }
        kargv[i] = buffer;
9000000000010ca4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000010ca8:	00410d8c 	slli.d	$r12,$r12,0x3
9000000000010cac:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
9000000000010cb0:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000010cb4:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000010cb8:	29c0018d 	st.d	$r13,$r12,0
    for (i = 0; i < argc; i ++) {
9000000000010cbc:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000010cc0:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000010cc4:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000010cc8:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
9000000000010ccc:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000010cd0:	63ff85ac 	blt	$r13,$r12,-124(0x3ff84) # 9000000000010c54 <copy_kargv+0x68>
    }
    return 0;
9000000000010cd4:	0015000c 	move	$r12,$r0
9000000000010cd8:	50002400 	b	36(0x24) # 9000000000010cfc <copy_kargv+0x110>
            goto failed_nomem;
9000000000010cdc:	03400000 	andi	$r0,$r0,0x0

failed_nomem:
    ret = -E_NO_MEM;
9000000000010ce0:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
9000000000010ce4:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
failed_cleanup:
    put_kargv(i, kargv);
9000000000010ce8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000010cec:	28ff22c5 	ld.d	$r5,$r22,-56(0xfc8)
9000000000010cf0:	00150184 	move	$r4,$r12
9000000000010cf4:	57fe93ff 	bl	-368(0xffffe90) # 9000000000010b84 <put_kargv>
    return ret;
9000000000010cf8:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
}
9000000000010cfc:	00150184 	move	$r4,$r12
9000000000010d00:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000000010d04:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000000010d08:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000010d0c:	4c000020 	jirl	$r0,$r1,0

9000000000010d10 <do_execve>:
    do_exit(ret);
    panic("already exit: %e.\n", ret);
}
#else
int
do_execve(const char *name, int argc, const char **argv) {
9000000000010d10:	02fa4063 	addi.d	$r3,$r3,-368(0xe90)
9000000000010d14:	29c5a061 	st.d	$r1,$r3,360(0x168)
9000000000010d18:	29c58076 	st.d	$r22,$r3,352(0x160)
9000000000010d1c:	02c5c076 	addi.d	$r22,$r3,368(0x170)
9000000000010d20:	29faa2c4 	st.d	$r4,$r22,-344(0xea8)
9000000000010d24:	001500ac 	move	$r12,$r5
9000000000010d28:	29fa62c6 	st.d	$r6,$r22,-360(0xe98)
9000000000010d2c:	0040818c 	slli.w	$r12,$r12,0x0
9000000000010d30:	29ba92cc 	st.w	$r12,$r22,-348(0xea4)
    static_assert(EXEC_MAX_ARG_LEN >= FS_MAX_FPATH_LEN);
    struct mm_struct *mm = current->mm;
9000000000010d34:	1c00422c 	pcaddu12i	$r12,529(0x211)
9000000000010d38:	02dc918c 	addi.d	$r12,$r12,1828(0x724)
9000000000010d3c:	28c0018c 	ld.d	$r12,$r12,0
9000000000010d40:	28c0a18c 	ld.d	$r12,$r12,40(0x28)
9000000000010d44:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    if (!(argc >= 1 && argc <= EXEC_MAX_ARG_NUM)) {
9000000000010d48:	28ba92cc 	ld.w	$r12,$r22,-348(0xea4)
9000000000010d4c:	6400140c 	bge	$r0,$r12,20(0x14) # 9000000000010d60 <do_execve+0x50>
9000000000010d50:	28ba92cc 	ld.w	$r12,$r22,-348(0xea4)
9000000000010d54:	0015018d 	move	$r13,$r12
9000000000010d58:	0280800c 	addi.w	$r12,$r0,32(0x20)
9000000000010d5c:	64000d8d 	bge	$r12,$r13,12(0xc) # 9000000000010d68 <do_execve+0x58>
        return -E_INVAL;
9000000000010d60:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
9000000000010d64:	50022800 	b	552(0x228) # 9000000000010f8c <do_execve+0x27c>
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
9000000000010d68:	02fec2cc 	addi.d	$r12,$r22,-80(0xfb0)
9000000000010d6c:	02807c06 	addi.w	$r6,$r0,31(0x1f)
9000000000010d70:	00150005 	move	$r5,$r0
9000000000010d74:	00150184 	move	$r4,$r12
9000000000010d78:	5737abff 	bl	-51288(0xfff37a8) # 9000000000004520 <memset>
	
    char *kargv[EXEC_MAX_ARG_NUM];
    const char *path;
	
    int ret = -E_INVAL;
9000000000010d7c:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
9000000000010d80:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
	
    lock_mm(mm);
9000000000010d84:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000010d88:	57defbff 	bl	-8456(0xfffdef8) # 900000000000ec80 <lock_mm>
    if (name == NULL) {
9000000000010d8c:	28faa2cc 	ld.d	$r12,$r22,-344(0xea8)
9000000000010d90:	44003580 	bnez	$r12,52(0x34) # 9000000000010dc4 <do_execve+0xb4>
        snprintf(local_name, sizeof(local_name), "<null> %d", current->pid);
9000000000010d94:	1c00422c 	pcaddu12i	$r12,529(0x211)
9000000000010d98:	02db118c 	addi.d	$r12,$r12,1732(0x6c4)
9000000000010d9c:	28c0018c 	ld.d	$r12,$r12,0
9000000000010da0:	2880118c 	ld.w	$r12,$r12,4(0x4)
9000000000010da4:	02fec2cd 	addi.d	$r13,$r22,-80(0xfb0)
9000000000010da8:	00150187 	move	$r7,$r12
9000000000010dac:	1c000226 	pcaddu12i	$r6,17(0x11)
9000000000010db0:	02e0f0c6 	addi.d	$r6,$r6,-1988(0x83c)
9000000000010db4:	02807c05 	addi.w	$r5,$r0,31(0x1f)
9000000000010db8:	001501a4 	move	$r4,$r13
9000000000010dbc:	5710f3ff 	bl	-61200(0xfff10f0) # 9000000000001eac <snprintf>
9000000000010dc0:	50003400 	b	52(0x34) # 9000000000010df4 <do_execve+0xe4>
    }
    else {
        if (!copy_string(mm, local_name, name, sizeof(local_name))) {
9000000000010dc4:	02fec2cc 	addi.d	$r12,$r22,-80(0xfb0)
9000000000010dc8:	02807c07 	addi.w	$r7,$r0,31(0x1f)
9000000000010dcc:	28faa2c6 	ld.d	$r6,$r22,-344(0xea8)
9000000000010dd0:	00150185 	move	$r5,$r12
9000000000010dd4:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000010dd8:	57b87bff 	bl	-18312(0xfffb878) # 900000000000c650 <copy_string>
9000000000010ddc:	0015008c 	move	$r12,$r4
9000000000010de0:	44001580 	bnez	$r12,20(0x14) # 9000000000010df4 <do_execve+0xe4>
            unlock_mm(mm);
9000000000010de4:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000010de8:	57df03ff 	bl	-8448(0xfffdf00) # 900000000000ece8 <unlock_mm>
            return ret;
9000000000010dec:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000010df0:	50019c00 	b	412(0x19c) # 9000000000010f8c <do_execve+0x27c>
        }
    }
    if ((ret = copy_kargv(mm, argc, kargv, argv)) != 0) {
9000000000010df4:	02fac2cd 	addi.d	$r13,$r22,-336(0xeb0)
9000000000010df8:	28ba92cc 	ld.w	$r12,$r22,-348(0xea4)
9000000000010dfc:	28fa62c7 	ld.d	$r7,$r22,-360(0xe98)
9000000000010e00:	001501a6 	move	$r6,$r13
9000000000010e04:	00150185 	move	$r5,$r12
9000000000010e08:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000010e0c:	57fde3ff 	bl	-544(0xffffde0) # 9000000000010bec <copy_kargv>
9000000000010e10:	0015008c 	move	$r12,$r4
9000000000010e14:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000010e18:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000010e1c:	40001580 	beqz	$r12,20(0x14) # 9000000000010e30 <do_execve+0x120>
        unlock_mm(mm);
9000000000010e20:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000010e24:	57dec7ff 	bl	-8508(0xfffdec4) # 900000000000ece8 <unlock_mm>
        return ret;
9000000000010e28:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000010e2c:	50016000 	b	352(0x160) # 9000000000010f8c <do_execve+0x27c>
    }
    path = argv[0];
9000000000010e30:	28fa62cc 	ld.d	$r12,$r22,-360(0xe98)
9000000000010e34:	28c0018c 	ld.d	$r12,$r12,0
9000000000010e38:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    unlock_mm(mm);
9000000000010e3c:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000010e40:	57deabff 	bl	-8536(0xfffdea8) # 900000000000ece8 <unlock_mm>
    fs_closeall(current->fs_struct);
9000000000010e44:	1c00422c 	pcaddu12i	$r12,529(0x211)
9000000000010e48:	02d8518c 	addi.d	$r12,$r12,1556(0x614)
9000000000010e4c:	28c0018c 	ld.d	$r12,$r12,0
9000000000010e50:	28c4c18c 	ld.d	$r12,$r12,304(0x130)
9000000000010e54:	00150184 	move	$r4,$r12
9000000000010e58:	543a7c00 	bl	14972(0x3a7c) # 90000000000148d4 <fs_closeall>

    /* sysfile_open will check the first argument path, thus we have to use a user-space pointer, and argv[0] may be incorrect */	
    int fd;
    
    if ((ret = fd = sysfile_open(path, O_RDONLY)) < 0) {
9000000000010e5c:	00150005 	move	$r5,$r0
9000000000010e60:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000010e64:	5440e400 	bl	16612(0x40e4) # 9000000000014f48 <sysfile_open>
9000000000010e68:	0015008c 	move	$r12,$r4
9000000000010e6c:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
9000000000010e70:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000010e74:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000010e78:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000010e7c:	6000c580 	blt	$r12,$r0,196(0xc4) # 9000000000010f40 <do_execve+0x230>
        goto execve_exit;
    } 
    if (mm != NULL) {
9000000000010e80:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000010e84:	40005180 	beqz	$r12,80(0x50) # 9000000000010ed4 <do_execve+0x1c4>
        lcr3(boot_cr3);
9000000000010e88:	1c00422c 	pcaddu12i	$r12,529(0x211)
9000000000010e8c:	28e3218c 	ld.d	$r12,$r12,-1848(0x8c8)
9000000000010e90:	28c0018c 	ld.d	$r12,$r12,0
9000000000010e94:	00150184 	move	$r4,$r12
9000000000010e98:	578313ff 	bl	-31984(0xfff8310) # 90000000000091a8 <lcr3>
        if (mm_count_dec(mm) == 0) {
9000000000010e9c:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000010ea0:	57dd57ff 	bl	-8876(0xfffdd54) # 900000000000ebf4 <mm_count_dec>
9000000000010ea4:	0015008c 	move	$r12,$r4
9000000000010ea8:	44001d80 	bnez	$r12,28(0x1c) # 9000000000010ec4 <do_execve+0x1b4>
            exit_mmap(mm);
9000000000010eac:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000010eb0:	57ab93ff 	bl	-21616(0xfffab90) # 900000000000ba40 <exit_mmap>
            put_pgdir(mm);
9000000000010eb4:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000010eb8:	57e9e3ff 	bl	-5664(0xfffe9e0) # 900000000000f898 <put_pgdir>
            mm_destroy(mm);
9000000000010ebc:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000010ec0:	57a80bff 	bl	-22520(0xfffa808) # 900000000000b6c8 <mm_destroy>
        }
        current->mm = NULL;
9000000000010ec4:	1c00422c 	pcaddu12i	$r12,529(0x211)
9000000000010ec8:	02d6518c 	addi.d	$r12,$r12,1428(0x594)
9000000000010ecc:	28c0018c 	ld.d	$r12,$r12,0
9000000000010ed0:	29c0a180 	st.d	$r0,$r12,40(0x28)
    }
    
    ret= -E_NO_MEM;;
9000000000010ed4:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
9000000000010ed8:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    if ((ret = load_icode(fd, argc, kargv)) != 0) {
9000000000010edc:	02fac2ce 	addi.d	$r14,$r22,-336(0xeb0)
9000000000010ee0:	28ba92cd 	ld.w	$r13,$r22,-348(0xea4)
9000000000010ee4:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000010ee8:	001501c6 	move	$r6,$r14
9000000000010eec:	001501a5 	move	$r5,$r13
9000000000010ef0:	00150184 	move	$r4,$r12
9000000000010ef4:	57f41bff 	bl	-3048(0xffff418) # 900000000001030c <load_icode>
9000000000010ef8:	0015008c 	move	$r12,$r4
9000000000010efc:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000010f00:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000010f04:	44004580 	bnez	$r12,68(0x44) # 9000000000010f48 <do_execve+0x238>
        goto execve_exit;
    }
    put_kargv(argc, kargv);
9000000000010f08:	02fac2cd 	addi.d	$r13,$r22,-336(0xeb0)
9000000000010f0c:	28ba92cc 	ld.w	$r12,$r22,-348(0xea4)
9000000000010f10:	001501a5 	move	$r5,$r13
9000000000010f14:	00150184 	move	$r4,$r12
9000000000010f18:	57fc6fff 	bl	-916(0xffffc6c) # 9000000000010b84 <put_kargv>
    set_proc_name(current, local_name);
9000000000010f1c:	1c00422c 	pcaddu12i	$r12,529(0x211)
9000000000010f20:	02d4f18c 	addi.d	$r12,$r12,1340(0x53c)
9000000000010f24:	28c0018c 	ld.d	$r12,$r12,0
9000000000010f28:	02fec2cd 	addi.d	$r13,$r22,-80(0xfb0)
9000000000010f2c:	001501a5 	move	$r5,$r13
9000000000010f30:	00150184 	move	$r4,$r12
9000000000010f34:	57e077ff 	bl	-8076(0xfffe074) # 900000000000efa8 <set_proc_name>
    return 0;
9000000000010f38:	0015000c 	move	$r12,$r0
9000000000010f3c:	50005000 	b	80(0x50) # 9000000000010f8c <do_execve+0x27c>
        goto execve_exit;
9000000000010f40:	03400000 	andi	$r0,$r0,0x0
9000000000010f44:	50000800 	b	8(0x8) # 9000000000010f4c <do_execve+0x23c>
        goto execve_exit;
9000000000010f48:	03400000 	andi	$r0,$r0,0x0

execve_exit:
    put_kargv(argc, kargv);
9000000000010f4c:	02fac2cd 	addi.d	$r13,$r22,-336(0xeb0)
9000000000010f50:	28ba92cc 	ld.w	$r12,$r22,-348(0xea4)
9000000000010f54:	001501a5 	move	$r5,$r13
9000000000010f58:	00150184 	move	$r4,$r12
9000000000010f5c:	57fc2bff 	bl	-984(0xffffc28) # 9000000000010b84 <put_kargv>
    do_exit(ret);
9000000000010f60:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000010f64:	00150184 	move	$r4,$r12
9000000000010f68:	57ee33ff 	bl	-4560(0xfffee30) # 900000000000fd98 <do_exit>
    panic("already exit: %e.\n", ret);
9000000000010f6c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000010f70:	00150187 	move	$r7,$r12
9000000000010f74:	1c000206 	pcaddu12i	$r6,16(0x10)
9000000000010f78:	02da10c6 	addi.d	$r6,$r6,1668(0x684)
9000000000010f7c:	02908405 	addi.w	$r5,$r0,1057(0x421)
9000000000010f80:	1c000204 	pcaddu12i	$r4,16(0x10)
9000000000010f84:	02d16084 	addi.d	$r4,$r4,1112(0x458)
9000000000010f88:	57bcfbff 	bl	-17160(0xfffbcf8) # 900000000000cc80 <__panic>
}
9000000000010f8c:	00150184 	move	$r4,$r12
9000000000010f90:	28c5a061 	ld.d	$r1,$r3,360(0x168)
9000000000010f94:	28c58076 	ld.d	$r22,$r3,352(0x160)
9000000000010f98:	02c5c063 	addi.d	$r3,$r3,368(0x170)
9000000000010f9c:	4c000020 	jirl	$r0,$r1,0

9000000000010fa0 <do_yield>:
#endif

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
9000000000010fa0:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000000010fa4:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000000010fa8:	02c04076 	addi.d	$r22,$r3,16(0x10)
  current->need_resched = 1;
9000000000010fac:	1c00422c 	pcaddu12i	$r12,529(0x211)
9000000000010fb0:	02d2b18c 	addi.d	$r12,$r12,1196(0x4ac)
9000000000010fb4:	28c0018c 	ld.d	$r12,$r12,0
9000000000010fb8:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000010fbc:	2980618d 	st.w	$r13,$r12,24(0x18)
  return 0;
9000000000010fc0:	0015000c 	move	$r12,$r0
}
9000000000010fc4:	00150184 	move	$r4,$r12
9000000000010fc8:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000000010fcc:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000000010fd0:	4c000020 	jirl	$r0,$r1,0

9000000000010fd4 <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
9000000000010fd4:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000010fd8:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000010fdc:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000010fe0:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000010fe4:	0015008c 	move	$r12,$r4
9000000000010fe8:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
9000000000010fec:	0040818c 	slli.w	$r12,$r12,0x0
9000000000010ff0:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
  assert(current);
9000000000010ff4:	1c00422c 	pcaddu12i	$r12,529(0x211)
9000000000010ff8:	02d1918c 	addi.d	$r12,$r12,1124(0x464)
9000000000010ffc:	28c0018c 	ld.d	$r12,$r12,0
9000000000011000:	44001d80 	bnez	$r12,28(0x1c) # 900000000001101c <do_wait+0x48>
9000000000011004:	1c000206 	pcaddu12i	$r6,16(0x10)
9000000000011008:	02d830c6 	addi.d	$r6,$r6,1548(0x60c)
900000000001100c:	0290c405 	addi.w	$r5,$r0,1073(0x431)
9000000000011010:	1c000204 	pcaddu12i	$r4,16(0x10)
9000000000011014:	02cf2084 	addi.d	$r4,$r4,968(0x3c8)
9000000000011018:	57bc6bff 	bl	-17304(0xfffbc68) # 900000000000cc80 <__panic>
  struct mm_struct *mm = current->mm;
900000000001101c:	1c00422c 	pcaddu12i	$r12,529(0x211)
9000000000011020:	02d0f18c 	addi.d	$r12,$r12,1084(0x43c)
9000000000011024:	28c0018c 	ld.d	$r12,$r12,0
9000000000011028:	28c0a18c 	ld.d	$r12,$r12,40(0x28)
900000000001102c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
  if (code_store != NULL) {
9000000000011030:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000011034:	40002d80 	beqz	$r12,44(0x2c) # 9000000000011060 <do_wait+0x8c>
    if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
9000000000011038:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000001103c:	02800407 	addi.w	$r7,$r0,1(0x1)
9000000000011040:	02801006 	addi.w	$r6,$r0,4(0x4)
9000000000011044:	00150185 	move	$r5,$r12
9000000000011048:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001104c:	57b437ff 	bl	-19404(0xfffb434) # 900000000000c480 <user_mem_check>
9000000000011050:	0015008c 	move	$r12,$r4
9000000000011054:	44000d80 	bnez	$r12,12(0xc) # 9000000000011060 <do_wait+0x8c>
      return -E_INVAL;
9000000000011058:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
900000000001105c:	5001a800 	b	424(0x1a8) # 9000000000011204 <do_wait+0x230>
    }
  }

  struct proc_struct *proc;
  bool intr_flag, haskid;
repeat:
9000000000011060:	03400000 	andi	$r0,$r0,0x0
  haskid = 0;
9000000000011064:	29bf92c0 	st.w	$r0,$r22,-28(0xfe4)
  if (pid != 0) {
9000000000011068:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
900000000001106c:	40005580 	beqz	$r12,84(0x54) # 90000000000110c0 <do_wait+0xec>
    proc = find_proc(pid);
9000000000011070:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
9000000000011074:	00150184 	move	$r4,$r12
9000000000011078:	57e587ff 	bl	-6780(0xfffe584) # 900000000000f5fc <find_proc>
900000000001107c:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
        if (proc != NULL && proc->parent == current) {
9000000000011080:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000011084:	40008580 	beqz	$r12,132(0x84) # 9000000000011108 <do_wait+0x134>
9000000000011088:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001108c:	28c0818d 	ld.d	$r13,$r12,32(0x20)
9000000000011090:	1c00422c 	pcaddu12i	$r12,529(0x211)
9000000000011094:	02cf218c 	addi.d	$r12,$r12,968(0x3c8)
9000000000011098:	28c0018c 	ld.d	$r12,$r12,0
900000000001109c:	5c006dac 	bne	$r13,$r12,108(0x6c) # 9000000000011108 <do_wait+0x134>
            haskid = 1;
90000000000110a0:	0280040c 	addi.w	$r12,$r0,1(0x1)
90000000000110a4:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
            if (proc->state == PROC_ZOMBIE) {
90000000000110a8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000110ac:	2880018c 	ld.w	$r12,$r12,0
90000000000110b0:	0015018d 	move	$r13,$r12
90000000000110b4:	02800c0c 	addi.w	$r12,$r0,3(0x3)
90000000000110b8:	5c0051ac 	bne	$r13,$r12,80(0x50) # 9000000000011108 <do_wait+0x134>
                goto found;
90000000000110bc:	5000b400 	b	180(0xb4) # 9000000000011170 <do_wait+0x19c>
            }
        }
    }
    else {
        proc = current->cptr;
90000000000110c0:	1c00422c 	pcaddu12i	$r12,529(0x211)
90000000000110c4:	02ce618c 	addi.d	$r12,$r12,920(0x398)
90000000000110c8:	28c0018c 	ld.d	$r12,$r12,0
90000000000110cc:	28c3e18c 	ld.d	$r12,$r12,248(0xf8)
90000000000110d0:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
        for (; proc != NULL; proc = proc->optr) {
90000000000110d4:	50002c00 	b	44(0x2c) # 9000000000011100 <do_wait+0x12c>
            haskid = 1;
90000000000110d8:	0280040c 	addi.w	$r12,$r0,1(0x1)
90000000000110dc:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
            if (proc->state == PROC_ZOMBIE) {
90000000000110e0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000110e4:	2880018c 	ld.w	$r12,$r12,0
90000000000110e8:	0015018d 	move	$r13,$r12
90000000000110ec:	02800c0c 	addi.w	$r12,$r0,3(0x3)
90000000000110f0:	58007dac 	beq	$r13,$r12,124(0x7c) # 900000000001116c <do_wait+0x198>
        for (; proc != NULL; proc = proc->optr) {
90000000000110f4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000110f8:	28c4218c 	ld.d	$r12,$r12,264(0x108)
90000000000110fc:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000011100:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000011104:	47ffd59f 	bnez	$r12,-44(0x7fffd4) # 90000000000110d8 <do_wait+0x104>
                goto found;
            }
        }
    }
    if (haskid) {
9000000000011108:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000001110c:	40005980 	beqz	$r12,88(0x58) # 9000000000011164 <do_wait+0x190>
        current->state = PROC_SLEEPING;
9000000000011110:	1c00422c 	pcaddu12i	$r12,529(0x211)
9000000000011114:	02cd218c 	addi.d	$r12,$r12,840(0x348)
9000000000011118:	28c0018c 	ld.d	$r12,$r12,0
900000000001111c:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000011120:	2980018d 	st.w	$r13,$r12,0
        current->wait_state = WT_CHILD;
9000000000011124:	1c00422c 	pcaddu12i	$r12,529(0x211)
9000000000011128:	02ccd18c 	addi.d	$r12,$r12,820(0x334)
900000000001112c:	28c0018c 	ld.d	$r12,$r12,0
9000000000011130:	1500000d 	lu12i.w	$r13,-524288(0x80000)
9000000000011134:	038005ad 	ori	$r13,$r13,0x1
9000000000011138:	2983d18d 	st.w	$r13,$r12,244(0xf4)
        schedule();
900000000001113c:	5411b400 	bl	4532(0x11b4) # 90000000000122f0 <schedule>
        if (current->flags & PF_EXITING) {
9000000000011140:	1c00422c 	pcaddu12i	$r12,529(0x211)
9000000000011144:	02cc618c 	addi.d	$r12,$r12,792(0x318)
9000000000011148:	28c0018c 	ld.d	$r12,$r12,0
900000000001114c:	2882a18c 	ld.w	$r12,$r12,168(0xa8)
9000000000011150:	0340058c 	andi	$r12,$r12,0x1
9000000000011154:	43ff119f 	beqz	$r12,-240(0x7fff10) # 9000000000011064 <do_wait+0x90>
            do_exit(-E_KILLED);
9000000000011158:	02bfdc04 	addi.w	$r4,$r0,-9(0xff7)
900000000001115c:	57ec3fff 	bl	-5060(0xfffec3c) # 900000000000fd98 <do_exit>
        }
        goto repeat;
9000000000011160:	53ff07ff 	b	-252(0xfffff04) # 9000000000011064 <do_wait+0x90>
    }
    return -E_BAD_PROC;
9000000000011164:	02bff80c 	addi.w	$r12,$r0,-2(0xffe)
9000000000011168:	50009c00 	b	156(0x9c) # 9000000000011204 <do_wait+0x230>
                goto found;
900000000001116c:	03400000 	andi	$r0,$r0,0x0

found:
    if (proc == idleproc || proc == initproc) {
9000000000011170:	1c00422c 	pcaddu12i	$r12,529(0x211)
9000000000011174:	02cb618c 	addi.d	$r12,$r12,728(0x2d8)
9000000000011178:	28c0018c 	ld.d	$r12,$r12,0
900000000001117c:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000011180:	580019ac 	beq	$r13,$r12,24(0x18) # 9000000000011198 <do_wait+0x1c4>
9000000000011184:	1c00422c 	pcaddu12i	$r12,529(0x211)
9000000000011188:	02cb318c 	addi.d	$r12,$r12,716(0x2cc)
900000000001118c:	28c0018c 	ld.d	$r12,$r12,0
9000000000011190:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000011194:	5c001dac 	bne	$r13,$r12,28(0x1c) # 90000000000111b0 <do_wait+0x1dc>
        panic("wait idleproc or initproc.\n");
9000000000011198:	1c000206 	pcaddu12i	$r6,16(0x10)
900000000001119c:	02d260c6 	addi.d	$r6,$r6,1176(0x498)
90000000000111a0:	02917005 	addi.w	$r5,$r0,1116(0x45c)
90000000000111a4:	1c000204 	pcaddu12i	$r4,16(0x10)
90000000000111a8:	02c8d084 	addi.d	$r4,$r4,564(0x234)
90000000000111ac:	57bad7ff 	bl	-17708(0xfffbad4) # 900000000000cc80 <__panic>
    }
    if (code_store != NULL) {
90000000000111b0:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
90000000000111b4:	40001580 	beqz	$r12,20(0x14) # 90000000000111c8 <do_wait+0x1f4>
        *code_store = proc->exit_code;
90000000000111b8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000111bc:	2883c18d 	ld.w	$r13,$r12,240(0xf0)
90000000000111c0:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
90000000000111c4:	2980018d 	st.w	$r13,$r12,0
    }
    local_intr_save(intr_flag);
90000000000111c8:	57d55fff 	bl	-10916(0xfffd55c) # 900000000000e724 <__intr_save>
90000000000111cc:	0015008c 	move	$r12,$r4
90000000000111d0:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
    {
        unhash_proc(proc);
90000000000111d4:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
90000000000111d8:	57e3cbff 	bl	-7224(0xfffe3c8) # 900000000000f5a0 <unhash_proc>
        remove_links(proc);
90000000000111dc:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
90000000000111e0:	57df87ff 	bl	-8316(0xfffdf84) # 900000000000f164 <remove_links>
    }
    local_intr_restore(intr_flag);
90000000000111e4:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
90000000000111e8:	00150184 	move	$r4,$r12
90000000000111ec:	57d56bff 	bl	-10904(0xfffd568) # 900000000000e754 <__intr_restore>
    put_kstack(proc);
90000000000111f0:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
90000000000111f4:	57e5e3ff 	bl	-6688(0xfffe5e0) # 900000000000f7d4 <put_kstack>
    kfree(proc);
90000000000111f8:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
90000000000111fc:	57691bff 	bl	-38632(0xfff6918) # 9000000000007b14 <kfree>
    return 0;
9000000000011200:	0015000c 	move	$r12,$r0
}
9000000000011204:	00150184 	move	$r4,$r12
9000000000011208:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000001120c:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000000011210:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000011214:	4c000020 	jirl	$r0,$r1,0

9000000000011218 <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
9000000000011218:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001121c:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000011220:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000011224:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000011228:	0015008c 	move	$r12,$r4
900000000001122c:	0040818c 	slli.w	$r12,$r12,0x0
9000000000011230:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
9000000000011234:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000011238:	00150184 	move	$r4,$r12
900000000001123c:	57e3c3ff 	bl	-7232(0xfffe3c0) # 900000000000f5fc <find_proc>
9000000000011240:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
9000000000011244:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000011248:	40005180 	beqz	$r12,80(0x50) # 9000000000011298 <do_kill+0x80>
        if (!(proc->flags & PF_EXITING)) {
900000000001124c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000011250:	2882a18c 	ld.w	$r12,$r12,168(0xa8)
9000000000011254:	0340058c 	andi	$r12,$r12,0x1
9000000000011258:	44003980 	bnez	$r12,56(0x38) # 9000000000011290 <do_kill+0x78>
            proc->flags |= PF_EXITING;
900000000001125c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000011260:	2882a18c 	ld.w	$r12,$r12,168(0xa8)
9000000000011264:	0380058c 	ori	$r12,$r12,0x1
9000000000011268:	0015018d 	move	$r13,$r12
900000000001126c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000011270:	2982a18d 	st.w	$r13,$r12,168(0xa8)
            if (proc->wait_state & WT_INTERRUPTED) {
9000000000011274:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000011278:	2883d18c 	ld.w	$r12,$r12,244(0xf4)
900000000001127c:	64000d80 	bge	$r12,$r0,12(0xc) # 9000000000011288 <do_kill+0x70>
                wakeup_proc(proc);
9000000000011280:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000011284:	540fa000 	bl	4000(0xfa0) # 9000000000012224 <wakeup_proc>
            }
            return 0;
9000000000011288:	0015000c 	move	$r12,$r0
900000000001128c:	50001000 	b	16(0x10) # 900000000001129c <do_kill+0x84>
        }
        return -E_KILLED;
9000000000011290:	02bfdc0c 	addi.w	$r12,$r0,-9(0xff7)
9000000000011294:	50000800 	b	8(0x8) # 900000000001129c <do_kill+0x84>
    }
    return -E_INVAL;
9000000000011298:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
}
900000000001129c:	00150184 	move	$r4,$r12
90000000000112a0:	28c0a061 	ld.d	$r1,$r3,40(0x28)
90000000000112a4:	28c08076 	ld.d	$r22,$r3,32(0x20)
90000000000112a8:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000000112ac:	4c000020 	jirl	$r0,$r1,0

90000000000112b0 <kernel_execve>:
      : "a0", "a1", "a2", "a3", "a7"
    );
    return ret;
}
#else
static int kernel_execve(const char *name, const char **argv) {
90000000000112b0:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000000112b4:	29c0a076 	st.d	$r22,$r3,40(0x28)
90000000000112b8:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000000112bc:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
90000000000112c0:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
    int argc = 0, ret;
90000000000112c4:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
    while (argv[argc] != NULL) {
90000000000112c8:	50001000 	b	16(0x10) # 90000000000112d8 <kernel_execve+0x28>
        argc ++;
90000000000112cc:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000112d0:	0280058c 	addi.w	$r12,$r12,1(0x1)
90000000000112d4:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    while (argv[argc] != NULL) {
90000000000112d8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000112dc:	00410d8c 	slli.d	$r12,$r12,0x3
90000000000112e0:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
90000000000112e4:	0010b1ac 	add.d	$r12,$r13,$r12
90000000000112e8:	28c0018c 	ld.d	$r12,$r12,0
90000000000112ec:	47ffe19f 	bnez	$r12,-32(0x7fffe0) # 90000000000112cc <kernel_execve+0x1c>
    }
    
    //panic("unimpl");

    asm volatile(
90000000000112f0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000112f4:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
90000000000112f8:	28ff42ce 	ld.d	$r14,$r22,-48(0xfd0)
90000000000112fc:	28bfb2cf 	ld.w	$r15,$r22,-20(0xfec)
9000000000011300:	02c2100b 	addi.d	$r11,$r0,132(0x84)
9000000000011304:	00150184 	move	$r4,$r12
9000000000011308:	001501a5 	move	$r5,$r13
900000000001130c:	001501c6 	move	$r6,$r14
9000000000011310:	001501e7 	move	$r7,$r15
9000000000011314:	002b0000 	syscall	0x0
9000000000011318:	0015016c 	move	$r12,$r11
900000000001131c:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
      "move %0, $a7;\n"
      : "=r"(ret)
      : "i"(SYSCALL_BASE+SYS_exec), "r"(name), "r"(argc), "r"(argv), "r"(argc) 
      : "a0", "a1", "a2", "a3", "a7"
    );
    return ret;
9000000000011320:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
}
9000000000011324:	00150184 	move	$r4,$r12
9000000000011328:	28c0a076 	ld.d	$r22,$r3,40(0x28)
900000000001132c:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000011330:	4c000020 	jirl	$r0,$r1,0

9000000000011334 <user_main>:



// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
9000000000011334:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000011338:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000001133c:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000011340:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000011344:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
#ifdef LAB8_EX2
    KERNEL_EXECVE(sh);
9000000000011348:	1c00020c 	pcaddu12i	$r12,16(0x10)
900000000001134c:	02cc218c 	addi.d	$r12,$r12,776(0x308)
9000000000011350:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000011354:	29ffa2c0 	st.d	$r0,$r22,-24(0xfe8)
9000000000011358:	1c00422c 	pcaddu12i	$r12,529(0x211)
900000000001135c:	02c4018c 	addi.d	$r12,$r12,256(0x100)
9000000000011360:	28c0018c 	ld.d	$r12,$r12,0
9000000000011364:	2880118c 	ld.w	$r12,$r12,4(0x4)
9000000000011368:	1c000206 	pcaddu12i	$r6,16(0x10)
900000000001136c:	02cba0c6 	addi.d	$r6,$r6,744(0x2e8)
9000000000011370:	00150185 	move	$r5,$r12
9000000000011374:	1c000204 	pcaddu12i	$r4,16(0x10)
9000000000011378:	02cb9084 	addi.d	$r4,$r4,740(0x2e4)
900000000001137c:	572aa3ff 	bl	-54624(0xfff2aa0) # 9000000000003e1c <kprintf>
9000000000011380:	02ff82cc 	addi.d	$r12,$r22,-32(0xfe0)
9000000000011384:	00150185 	move	$r5,$r12
9000000000011388:	1c000204 	pcaddu12i	$r4,16(0x10)
900000000001138c:	02cb2084 	addi.d	$r4,$r4,712(0x2c8)
9000000000011390:	57ff23ff 	bl	-224(0xfffff20) # 90000000000112b0 <kernel_execve>
#else
    KERNEL_EXECVE(exit);
#endif
    panic("user_main execve failed.\n");
9000000000011394:	1c000206 	pcaddu12i	$r6,16(0x10)
9000000000011398:	02cbb0c6 	addi.d	$r6,$r6,748(0x2ec)
900000000001139c:	02936005 	addi.w	$r5,$r0,1240(0x4d8)
90000000000113a0:	1c000204 	pcaddu12i	$r4,16(0x10)
90000000000113a4:	02c0e084 	addi.d	$r4,$r4,56(0x38)
90000000000113a8:	57b8dbff 	bl	-18216(0xfffb8d8) # 900000000000cc80 <__panic>

90000000000113ac <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
90000000000113ac:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
90000000000113b0:	29c12061 	st.d	$r1,$r3,72(0x48)
90000000000113b4:	29c10076 	st.d	$r22,$r3,64(0x40)
90000000000113b8:	02c14076 	addi.d	$r22,$r3,80(0x50)
90000000000113bc:	29fee2c4 	st.d	$r4,$r22,-72(0xfb8)
#ifdef LAB5_EX1
	int ret;
#ifdef LAB8_EX2
    if ((ret = vfs_set_bootfs("disk0:")) != 0) {
90000000000113c0:	1c000204 	pcaddu12i	$r4,16(0x10)
90000000000113c4:	02cb8084 	addi.d	$r4,$r4,736(0x2e0)
90000000000113c8:	544f0000 	bl	20224(0x4f00) # 90000000000162c8 <vfs_set_bootfs>
90000000000113cc:	0015008c 	move	$r12,$r4
90000000000113d0:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
90000000000113d4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000113d8:	40002580 	beqz	$r12,36(0x24) # 90000000000113fc <init_main+0x50>
        panic("set boot fs failed: %e.\n", ret);
90000000000113dc:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000113e0:	00150187 	move	$r7,$r12
90000000000113e4:	1c000206 	pcaddu12i	$r6,16(0x10)
90000000000113e8:	02cb10c6 	addi.d	$r6,$r6,708(0x2c4)
90000000000113ec:	02938805 	addi.w	$r5,$r0,1250(0x4e2)
90000000000113f0:	1c000204 	pcaddu12i	$r4,16(0x10)
90000000000113f4:	02ffa084 	addi.d	$r4,$r4,-24(0xfe8)
90000000000113f8:	57b88bff 	bl	-18296(0xfffb888) # 900000000000cc80 <__panic>
    }
#endif
    size_t nr_free_pages_store = nr_free_pages();
90000000000113fc:	577f63ff 	bl	-32928(0xfff7f60) # 900000000000935c <nr_free_pages>
9000000000011400:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)
    size_t slab_allocated_store = kallocated();
9000000000011404:	57576fff 	bl	-43156(0xfff576c) # 9000000000006b70 <kallocated>
9000000000011408:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    
    int pid = kernel_thread(user_main, NULL, 0);
900000000001140c:	00150006 	move	$r6,$r0
9000000000011410:	00150005 	move	$r5,$r0
9000000000011414:	1c000004 	pcaddu12i	$r4,0
9000000000011418:	02fc8084 	addi.d	$r4,$r4,-224(0xf20)
900000000001141c:	57e2abff 	bl	-7512(0xfffe2a8) # 900000000000f6c4 <kernel_thread>
9000000000011420:	0015008c 	move	$r12,$r4
9000000000011424:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
    if (pid <= 0) {
9000000000011428:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
900000000001142c:	6000200c 	blt	$r0,$r12,32(0x20) # 900000000001144c <init_main+0xa0>
        panic("create user_main failed.\n");
9000000000011430:	1c000206 	pcaddu12i	$r6,16(0x10)
9000000000011434:	02ca60c6 	addi.d	$r6,$r6,664(0x298)
9000000000011438:	0293a805 	addi.w	$r5,$r0,1258(0x4ea)
900000000001143c:	1c000204 	pcaddu12i	$r4,16(0x10)
9000000000011440:	02fe7084 	addi.d	$r4,$r4,-100(0xf9c)
9000000000011444:	57b83fff 	bl	-18372(0xfffb83c) # 900000000000cc80 <__panic>
#ifdef _SHOW_PHI
    extern void check_sync(void);
    check_sync();                // check philosopher sync problem
#endif
    while (do_wait(0, NULL) == 0) {
        schedule();
9000000000011448:	540ea800 	bl	3752(0xea8) # 90000000000122f0 <schedule>
    while (do_wait(0, NULL) == 0) {
900000000001144c:	00150005 	move	$r5,$r0
9000000000011450:	00150004 	move	$r4,$r0
9000000000011454:	57fb83ff 	bl	-1152(0xffffb80) # 9000000000010fd4 <do_wait>
9000000000011458:	0015008c 	move	$r12,$r4
900000000001145c:	43ffed9f 	beqz	$r12,-20(0x7fffec) # 9000000000011448 <init_main+0x9c>
    }
    
#ifdef LAB8_EX2
    fs_cleanup();
9000000000011460:	54325000 	bl	12880(0x3250) # 90000000000146b0 <fs_cleanup>
#endif
    kprintf("all user-mode processes have quit.\n");
9000000000011464:	1c000204 	pcaddu12i	$r4,16(0x10)
9000000000011468:	02ca1084 	addi.d	$r4,$r4,644(0x284)
900000000001146c:	5729b3ff 	bl	-54864(0xfff29b0) # 9000000000003e1c <kprintf>
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
9000000000011470:	1c00422c 	pcaddu12i	$r12,529(0x211)
9000000000011474:	02ff818c 	addi.d	$r12,$r12,-32(0xfe0)
9000000000011478:	28c0018c 	ld.d	$r12,$r12,0
900000000001147c:	28c3e18c 	ld.d	$r12,$r12,248(0xf8)
9000000000011480:	44002d80 	bnez	$r12,44(0x2c) # 90000000000114ac <init_main+0x100>
9000000000011484:	1c00422c 	pcaddu12i	$r12,529(0x211)
9000000000011488:	02ff318c 	addi.d	$r12,$r12,-52(0xfcc)
900000000001148c:	28c0018c 	ld.d	$r12,$r12,0
9000000000011490:	28c4018c 	ld.d	$r12,$r12,256(0x100)
9000000000011494:	44001980 	bnez	$r12,24(0x18) # 90000000000114ac <init_main+0x100>
9000000000011498:	1c00422c 	pcaddu12i	$r12,529(0x211)
900000000001149c:	02fee18c 	addi.d	$r12,$r12,-72(0xfb8)
90000000000114a0:	28c0018c 	ld.d	$r12,$r12,0
90000000000114a4:	28c4218c 	ld.d	$r12,$r12,264(0x108)
90000000000114a8:	40001d80 	beqz	$r12,28(0x1c) # 90000000000114c4 <init_main+0x118>
90000000000114ac:	1c000206 	pcaddu12i	$r6,16(0x10)
90000000000114b0:	02c990c6 	addi.d	$r6,$r6,612(0x264)
90000000000114b4:	0293e005 	addi.w	$r5,$r0,1272(0x4f8)
90000000000114b8:	1c000204 	pcaddu12i	$r4,16(0x10)
90000000000114bc:	02fc8084 	addi.d	$r4,$r4,-224(0xf20)
90000000000114c0:	57b7c3ff 	bl	-18496(0xfffb7c0) # 900000000000cc80 <__panic>
    assert(nr_process == 2);
90000000000114c4:	1c0042ac 	pcaddu12i	$r12,533(0x215)
90000000000114c8:	02fe718c 	addi.d	$r12,$r12,-100(0xf9c)
90000000000114cc:	2880018c 	ld.w	$r12,$r12,0
90000000000114d0:	0015018d 	move	$r13,$r12
90000000000114d4:	0280080c 	addi.w	$r12,$r0,2(0x2)
90000000000114d8:	58001dac 	beq	$r13,$r12,28(0x1c) # 90000000000114f4 <init_main+0x148>
90000000000114dc:	1c000206 	pcaddu12i	$r6,16(0x10)
90000000000114e0:	02ca50c6 	addi.d	$r6,$r6,660(0x294)
90000000000114e4:	0293e405 	addi.w	$r5,$r0,1273(0x4f9)
90000000000114e8:	1c000204 	pcaddu12i	$r4,16(0x10)
90000000000114ec:	02fbc084 	addi.d	$r4,$r4,-272(0xef0)
90000000000114f0:	57b793ff 	bl	-18544(0xfffb790) # 900000000000cc80 <__panic>
90000000000114f4:	1c00420c 	pcaddu12i	$r12,528(0x210)
90000000000114f8:	28c8118c 	ld.d	$r12,$r12,516(0x204)
90000000000114fc:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
9000000000011500:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000011504:	28c0218d 	ld.d	$r13,$r12,8(0x8)
    assert(list_next(&proc_list) == &(initproc->list_link));
9000000000011508:	1c00422c 	pcaddu12i	$r12,529(0x211)
900000000001150c:	02fd218c 	addi.d	$r12,$r12,-184(0xf48)
9000000000011510:	28c0018c 	ld.d	$r12,$r12,0
9000000000011514:	02c3418c 	addi.d	$r12,$r12,208(0xd0)
9000000000011518:	58001dac 	beq	$r13,$r12,28(0x1c) # 9000000000011534 <init_main+0x188>
900000000001151c:	1c000206 	pcaddu12i	$r6,16(0x10)
9000000000011520:	02c9f0c6 	addi.d	$r6,$r6,636(0x27c)
9000000000011524:	0293e805 	addi.w	$r5,$r0,1274(0x4fa)
9000000000011528:	1c000204 	pcaddu12i	$r4,16(0x10)
900000000001152c:	02fac084 	addi.d	$r4,$r4,-336(0xeb0)
9000000000011530:	57b753ff 	bl	-18608(0xfffb750) # 900000000000cc80 <__panic>
9000000000011534:	1c00420c 	pcaddu12i	$r12,528(0x210)
9000000000011538:	28c7118c 	ld.d	$r12,$r12,452(0x1c4)
900000000001153c:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
    return listelm->prev;
9000000000011540:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000011544:	28c0018d 	ld.d	$r13,$r12,0
    assert(list_prev(&proc_list) == &(initproc->list_link));
9000000000011548:	1c00422c 	pcaddu12i	$r12,529(0x211)
900000000001154c:	02fc218c 	addi.d	$r12,$r12,-248(0xf08)
9000000000011550:	28c0018c 	ld.d	$r12,$r12,0
9000000000011554:	02c3418c 	addi.d	$r12,$r12,208(0xd0)
9000000000011558:	58001dac 	beq	$r13,$r12,28(0x1c) # 9000000000011574 <init_main+0x1c8>
900000000001155c:	1c000206 	pcaddu12i	$r6,16(0x10)
9000000000011560:	02ca10c6 	addi.d	$r6,$r6,644(0x284)
9000000000011564:	0293ec05 	addi.w	$r5,$r0,1275(0x4fb)
9000000000011568:	1c000204 	pcaddu12i	$r4,16(0x10)
900000000001156c:	02f9c084 	addi.d	$r4,$r4,-400(0xe70)
9000000000011570:	57b713ff 	bl	-18672(0xfffb710) # 900000000000cc80 <__panic>
#ifndef _SHOW_PHI
    assert(nr_free_pages_store == nr_free_pages());
9000000000011574:	577debff 	bl	-33304(0xfff7de8) # 900000000000935c <nr_free_pages>
9000000000011578:	0015008d 	move	$r13,$r4
900000000001157c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000011580:	58001d8d 	beq	$r12,$r13,28(0x1c) # 900000000001159c <init_main+0x1f0>
9000000000011584:	1c000206 	pcaddu12i	$r6,16(0x10)
9000000000011588:	02ca90c6 	addi.d	$r6,$r6,676(0x2a4)
900000000001158c:	0293f405 	addi.w	$r5,$r0,1277(0x4fd)
9000000000011590:	1c000204 	pcaddu12i	$r4,16(0x10)
9000000000011594:	02f92084 	addi.d	$r4,$r4,-440(0xe48)
9000000000011598:	57b6ebff 	bl	-18712(0xfffb6e8) # 900000000000cc80 <__panic>
    assert(slab_allocated_store == kallocated());
900000000001159c:	5755d7ff 	bl	-43564(0xfff55d4) # 9000000000006b70 <kallocated>
90000000000115a0:	0015008d 	move	$r13,$r4
90000000000115a4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000115a8:	58001d8d 	beq	$r12,$r13,28(0x1c) # 90000000000115c4 <init_main+0x218>
90000000000115ac:	1c000206 	pcaddu12i	$r6,16(0x10)
90000000000115b0:	02caf0c6 	addi.d	$r6,$r6,700(0x2bc)
90000000000115b4:	0293f805 	addi.w	$r5,$r0,1278(0x4fe)
90000000000115b8:	1c000204 	pcaddu12i	$r4,16(0x10)
90000000000115bc:	02f88084 	addi.d	$r4,$r4,-480(0xe20)
90000000000115c0:	57b6c3ff 	bl	-18752(0xfffb6c0) # 900000000000cc80 <__panic>
#endif
    kprintf("init check memory pass.\n");
90000000000115c4:	1c000204 	pcaddu12i	$r4,16(0x10)
90000000000115c8:	02cb7084 	addi.d	$r4,$r4,732(0x2dc)
90000000000115cc:	572853ff 	bl	-55216(0xfff2850) # 9000000000003e1c <kprintf>
    return 0;
90000000000115d0:	0015000c 	move	$r12,$r0
    kprintf("LAB4 Check Passed!\n");
    intr_enable();
    while(1) asm volatile ("\tidle 0\n");
    return 0;
#endif
}
90000000000115d4:	00150184 	move	$r4,$r12
90000000000115d8:	28c12061 	ld.d	$r1,$r3,72(0x48)
90000000000115dc:	28c10076 	ld.d	$r22,$r3,64(0x40)
90000000000115e0:	02c14063 	addi.d	$r3,$r3,80(0x50)
90000000000115e4:	4c000020 	jirl	$r0,$r1,0

90000000000115e8 <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
90000000000115e8:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
90000000000115ec:	29c0e061 	st.d	$r1,$r3,56(0x38)
90000000000115f0:	29c0c076 	st.d	$r22,$r3,48(0x30)
90000000000115f4:	29c0a077 	st.d	$r23,$r3,40(0x28)
90000000000115f8:	02c10076 	addi.d	$r22,$r3,64(0x40)
90000000000115fc:	1c00420c 	pcaddu12i	$r12,528(0x210)
9000000000011600:	28c3f18c 	ld.d	$r12,$r12,252(0xfc)
9000000000011604:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    elm->prev = elm->next = elm;
9000000000011608:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001160c:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000011610:	29c0218d 	st.d	$r13,$r12,8(0x8)
9000000000011614:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000011618:	28c0218d 	ld.d	$r13,$r12,8(0x8)
900000000001161c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000011620:	29c0018d 	st.d	$r13,$r12,0
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
9000000000011624:	29bf72c0 	st.w	$r0,$r22,-36(0xfdc)
9000000000011628:	50004400 	b	68(0x44) # 900000000001166c <proc_init+0x84>
        list_init(hash_list + i);
900000000001162c:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000011630:	0041118d 	slli.d	$r13,$r12,0x4
9000000000011634:	1c00422c 	pcaddu12i	$r12,529(0x211)
9000000000011638:	02f8b18c 	addi.d	$r12,$r12,-468(0xe2c)
900000000001163c:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000011640:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
9000000000011644:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000011648:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
900000000001164c:	29c0218d 	st.d	$r13,$r12,8(0x8)
9000000000011650:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000011654:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000011658:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001165c:	29c0018d 	st.d	$r13,$r12,0
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
9000000000011660:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000011664:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000011668:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
900000000001166c:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000011670:	0015018d 	move	$r13,$r12
9000000000011674:	028ffc0c 	addi.w	$r12,$r0,1023(0x3ff)
9000000000011678:	67ffb58d 	bge	$r12,$r13,-76(0x3ffb4) # 900000000001162c <proc_init+0x44>
    }

    if ((idleproc = alloc_proc()) == NULL) {
900000000001167c:	57d7bbff 	bl	-10312(0xfffd7b8) # 900000000000ee34 <alloc_proc>
9000000000011680:	0015008d 	move	$r13,$r4
9000000000011684:	1c00422c 	pcaddu12i	$r12,529(0x211)
9000000000011688:	02f7118c 	addi.d	$r12,$r12,-572(0xdc4)
900000000001168c:	29c0018d 	st.d	$r13,$r12,0
9000000000011690:	1c00422c 	pcaddu12i	$r12,529(0x211)
9000000000011694:	02f6e18c 	addi.d	$r12,$r12,-584(0xdb8)
9000000000011698:	28c0018c 	ld.d	$r12,$r12,0
900000000001169c:	44001d80 	bnez	$r12,28(0x1c) # 90000000000116b8 <proc_init+0xd0>
        panic("cannot alloc idleproc.\n");
90000000000116a0:	1c000206 	pcaddu12i	$r6,16(0x10)
90000000000116a4:	02c880c6 	addi.d	$r6,$r6,544(0x220)
90000000000116a8:	02946805 	addi.w	$r5,$r0,1306(0x51a)
90000000000116ac:	1c000204 	pcaddu12i	$r4,16(0x10)
90000000000116b0:	02f4b084 	addi.d	$r4,$r4,-724(0xd2c)
90000000000116b4:	57b5cfff 	bl	-18996(0xfffb5cc) # 900000000000cc80 <__panic>
    }

    idleproc->pid = 0;
90000000000116b8:	1c00422c 	pcaddu12i	$r12,529(0x211)
90000000000116bc:	02f6418c 	addi.d	$r12,$r12,-624(0xd90)
90000000000116c0:	28c0018c 	ld.d	$r12,$r12,0
90000000000116c4:	29801180 	st.w	$r0,$r12,4(0x4)
    idleproc->state = PROC_RUNNABLE;
90000000000116c8:	1c00422c 	pcaddu12i	$r12,529(0x211)
90000000000116cc:	02f6018c 	addi.d	$r12,$r12,-640(0xd80)
90000000000116d0:	28c0018c 	ld.d	$r12,$r12,0
90000000000116d4:	0280080d 	addi.w	$r13,$r0,2(0x2)
90000000000116d8:	2980018d 	st.w	$r13,$r12,0
    idleproc->kstack = (uintptr_t)bootstack;
90000000000116dc:	1c00422c 	pcaddu12i	$r12,529(0x211)
90000000000116e0:	02f5b18c 	addi.d	$r12,$r12,-660(0xd6c)
90000000000116e4:	28c0018c 	ld.d	$r12,$r12,0
90000000000116e8:	1c00420d 	pcaddu12i	$r13,528(0x210)
90000000000116ec:	28c3e1ad 	ld.d	$r13,$r13,248(0xf8)
90000000000116f0:	29c0418d 	st.d	$r13,$r12,16(0x10)
    idleproc->need_resched = 1;
90000000000116f4:	1c00422c 	pcaddu12i	$r12,529(0x211)
90000000000116f8:	02f5518c 	addi.d	$r12,$r12,-684(0xd54)
90000000000116fc:	28c0018c 	ld.d	$r12,$r12,0
9000000000011700:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000011704:	2980618d 	st.w	$r13,$r12,24(0x18)


    if ((idleproc->fs_struct = fs_create()) == NULL) {
9000000000011708:	1c00422c 	pcaddu12i	$r12,529(0x211)
900000000001170c:	02f5018c 	addi.d	$r12,$r12,-704(0xd40)
9000000000011710:	28c00197 	ld.d	$r23,$r12,0
9000000000011714:	54303400 	bl	12340(0x3034) # 9000000000014748 <fs_create>
9000000000011718:	0015008c 	move	$r12,$r4
900000000001171c:	29c4c2ec 	st.d	$r12,$r23,304(0x130)
9000000000011720:	28c4c2ec 	ld.d	$r12,$r23,304(0x130)
9000000000011724:	44001d80 	bnez	$r12,28(0x1c) # 9000000000011740 <proc_init+0x158>
      panic("create fs_struct (idleproc) failed.\n");
9000000000011728:	1c000206 	pcaddu12i	$r6,16(0x10)
900000000001172c:	02c6c0c6 	addi.d	$r6,$r6,432(0x1b0)
9000000000011730:	02949005 	addi.w	$r5,$r0,1316(0x524)
9000000000011734:	1c000204 	pcaddu12i	$r4,16(0x10)
9000000000011738:	02f29084 	addi.d	$r4,$r4,-860(0xca4)
900000000001173c:	57b547ff 	bl	-19132(0xfffb544) # 900000000000cc80 <__panic>
    }
    fs_count_inc(idleproc->fs_struct);
9000000000011740:	1c00422c 	pcaddu12i	$r12,529(0x211)
9000000000011744:	02f4218c 	addi.d	$r12,$r12,-760(0xd08)
9000000000011748:	28c0018c 	ld.d	$r12,$r12,0
900000000001174c:	28c4c18c 	ld.d	$r12,$r12,304(0x130)
9000000000011750:	00150184 	move	$r4,$r12
9000000000011754:	57d5dfff 	bl	-10788(0xfffd5dc) # 900000000000ed30 <fs_count_inc>

    set_proc_name(idleproc, "idle");
9000000000011758:	1c00422c 	pcaddu12i	$r12,529(0x211)
900000000001175c:	02f3c18c 	addi.d	$r12,$r12,-784(0xcf0)
9000000000011760:	28c0018c 	ld.d	$r12,$r12,0
9000000000011764:	1c000205 	pcaddu12i	$r5,16(0x10)
9000000000011768:	02c670a5 	addi.d	$r5,$r5,412(0x19c)
900000000001176c:	00150184 	move	$r4,$r12
9000000000011770:	57d83bff 	bl	-10184(0xfffd838) # 900000000000efa8 <set_proc_name>
    nr_process ++;
9000000000011774:	1c0042ac 	pcaddu12i	$r12,533(0x215)
9000000000011778:	02f3b18c 	addi.d	$r12,$r12,-788(0xcec)
900000000001177c:	2880018c 	ld.w	$r12,$r12,0
9000000000011780:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000011784:	0015018d 	move	$r13,$r12
9000000000011788:	1c0042ac 	pcaddu12i	$r12,533(0x215)
900000000001178c:	02f3618c 	addi.d	$r12,$r12,-808(0xcd8)
9000000000011790:	2980018d 	st.w	$r13,$r12,0

    current = idleproc;
9000000000011794:	1c00422c 	pcaddu12i	$r12,529(0x211)
9000000000011798:	02f2d18c 	addi.d	$r12,$r12,-844(0xcb4)
900000000001179c:	28c0018d 	ld.d	$r13,$r12,0
90000000000117a0:	1c00422c 	pcaddu12i	$r12,529(0x211)
90000000000117a4:	02f2e18c 	addi.d	$r12,$r12,-840(0xcb8)
90000000000117a8:	29c0018d 	st.d	$r13,$r12,0

    int pid = kernel_thread(init_main, NULL, 0);
90000000000117ac:	00150006 	move	$r6,$r0
90000000000117b0:	00150005 	move	$r5,$r0
90000000000117b4:	1c000004 	pcaddu12i	$r4,0
90000000000117b8:	02efe084 	addi.d	$r4,$r4,-1032(0xbf8)
90000000000117bc:	57df0bff 	bl	-8440(0xfffdf08) # 900000000000f6c4 <kernel_thread>
90000000000117c0:	0015008c 	move	$r12,$r4
90000000000117c4:	29bf62cc 	st.w	$r12,$r22,-40(0xfd8)
    if (pid <= 0) {
90000000000117c8:	28bf62cc 	ld.w	$r12,$r22,-40(0xfd8)
90000000000117cc:	60001c0c 	blt	$r0,$r12,28(0x1c) # 90000000000117e8 <proc_init+0x200>
        panic("create init_main failed.\n");
90000000000117d0:	1c000206 	pcaddu12i	$r6,16(0x10)
90000000000117d4:	02c4e0c6 	addi.d	$r6,$r6,312(0x138)
90000000000117d8:	0294bc05 	addi.w	$r5,$r0,1327(0x52f)
90000000000117dc:	1c000204 	pcaddu12i	$r4,16(0x10)
90000000000117e0:	02eff084 	addi.d	$r4,$r4,-1028(0xbfc)
90000000000117e4:	57b49fff 	bl	-19300(0xfffb49c) # 900000000000cc80 <__panic>
    }

    initproc = find_proc(pid);
90000000000117e8:	28bf62cc 	ld.w	$r12,$r22,-40(0xfd8)
90000000000117ec:	00150184 	move	$r4,$r12
90000000000117f0:	57de0fff 	bl	-8692(0xfffde0c) # 900000000000f5fc <find_proc>
90000000000117f4:	0015008d 	move	$r13,$r4
90000000000117f8:	1c00422c 	pcaddu12i	$r12,529(0x211)
90000000000117fc:	02f1618c 	addi.d	$r12,$r12,-936(0xc58)
9000000000011800:	29c0018d 	st.d	$r13,$r12,0
    set_proc_name(initproc, "init");
9000000000011804:	1c00422c 	pcaddu12i	$r12,529(0x211)
9000000000011808:	02f1318c 	addi.d	$r12,$r12,-948(0xc4c)
900000000001180c:	28c0018c 	ld.d	$r12,$r12,0
9000000000011810:	1c000205 	pcaddu12i	$r5,16(0x10)
9000000000011814:	02c460a5 	addi.d	$r5,$r5,280(0x118)
9000000000011818:	00150184 	move	$r4,$r12
900000000001181c:	57d78fff 	bl	-10356(0xfffd78c) # 900000000000efa8 <set_proc_name>

    assert(idleproc != NULL && idleproc->pid == 0);
9000000000011820:	1c00422c 	pcaddu12i	$r12,529(0x211)
9000000000011824:	02f0a18c 	addi.d	$r12,$r12,-984(0xc28)
9000000000011828:	28c0018c 	ld.d	$r12,$r12,0
900000000001182c:	40001980 	beqz	$r12,24(0x18) # 9000000000011844 <proc_init+0x25c>
9000000000011830:	1c00422c 	pcaddu12i	$r12,529(0x211)
9000000000011834:	02f0618c 	addi.d	$r12,$r12,-1000(0xc18)
9000000000011838:	28c0018c 	ld.d	$r12,$r12,0
900000000001183c:	2880118c 	ld.w	$r12,$r12,4(0x4)
9000000000011840:	40001d80 	beqz	$r12,28(0x1c) # 900000000001185c <proc_init+0x274>
9000000000011844:	1c000206 	pcaddu12i	$r6,16(0x10)
9000000000011848:	02c3b0c6 	addi.d	$r6,$r6,236(0xec)
900000000001184c:	0294d405 	addi.w	$r5,$r0,1333(0x535)
9000000000011850:	1c000204 	pcaddu12i	$r4,16(0x10)
9000000000011854:	02ee2084 	addi.d	$r4,$r4,-1144(0xb88)
9000000000011858:	57b42bff 	bl	-19416(0xfffb428) # 900000000000cc80 <__panic>
    assert(initproc != NULL && initproc->pid == 1);
900000000001185c:	1c00422c 	pcaddu12i	$r12,529(0x211)
9000000000011860:	02efd18c 	addi.d	$r12,$r12,-1036(0xbf4)
9000000000011864:	28c0018c 	ld.d	$r12,$r12,0
9000000000011868:	40002180 	beqz	$r12,32(0x20) # 9000000000011888 <proc_init+0x2a0>
900000000001186c:	1c00422c 	pcaddu12i	$r12,529(0x211)
9000000000011870:	02ef918c 	addi.d	$r12,$r12,-1052(0xbe4)
9000000000011874:	28c0018c 	ld.d	$r12,$r12,0
9000000000011878:	2880118c 	ld.w	$r12,$r12,4(0x4)
900000000001187c:	0015018d 	move	$r13,$r12
9000000000011880:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000011884:	58001dac 	beq	$r13,$r12,28(0x1c) # 90000000000118a0 <proc_init+0x2b8>
9000000000011888:	1c000206 	pcaddu12i	$r6,16(0x10)
900000000001188c:	02c3a0c6 	addi.d	$r6,$r6,232(0xe8)
9000000000011890:	0294d805 	addi.w	$r5,$r0,1334(0x536)
9000000000011894:	1c000204 	pcaddu12i	$r4,16(0x10)
9000000000011898:	02ed1084 	addi.d	$r4,$r4,-1212(0xb44)
900000000001189c:	57b3e7ff 	bl	-19484(0xfffb3e4) # 900000000000cc80 <__panic>
    kprintf("proc_init succeeded\n");
90000000000118a0:	1c000204 	pcaddu12i	$r4,16(0x10)
90000000000118a4:	02c44084 	addi.d	$r4,$r4,272(0x110)
90000000000118a8:	572577ff 	bl	-55948(0xfff2574) # 9000000000003e1c <kprintf>
}
90000000000118ac:	03400000 	andi	$r0,$r0,0x0
90000000000118b0:	28c0e061 	ld.d	$r1,$r3,56(0x38)
90000000000118b4:	28c0c076 	ld.d	$r22,$r3,48(0x30)
90000000000118b8:	28c0a077 	ld.d	$r23,$r3,40(0x28)
90000000000118bc:	02c10063 	addi.d	$r3,$r3,64(0x40)
90000000000118c0:	4c000020 	jirl	$r0,$r1,0

90000000000118c4 <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
90000000000118c4:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
90000000000118c8:	29c02061 	st.d	$r1,$r3,8(0x8)
90000000000118cc:	29c00076 	st.d	$r22,$r3,0
90000000000118d0:	02c04076 	addi.d	$r22,$r3,16(0x10)
    while (1) {
        if (current->need_resched) {
90000000000118d4:	1c00422c 	pcaddu12i	$r12,529(0x211)
90000000000118d8:	02ee118c 	addi.d	$r12,$r12,-1148(0xb84)
90000000000118dc:	28c0018c 	ld.d	$r12,$r12,0
90000000000118e0:	2880618c 	ld.w	$r12,$r12,24(0x18)
90000000000118e4:	40000d80 	beqz	$r12,12(0xc) # 90000000000118f0 <cpu_idle+0x2c>
            //kprintf("\ncpu here\n");
            schedule();
90000000000118e8:	540a0800 	bl	2568(0xa08) # 90000000000122f0 <schedule>
90000000000118ec:	53ffebff 	b	-24(0xfffffe8) # 90000000000118d4 <cpu_idle+0x10>
        }
        else {
            asm volatile ("\tidle 0\n"); // idle cpu to avoid qemu use 100% of single thread
90000000000118f0:	06488000 	idle	0x0
        if (current->need_resched) {
90000000000118f4:	53ffe3ff 	b	-32(0xfffffe0) # 90000000000118d4 <cpu_idle+0x10>

90000000000118f8 <do_sleep>:
}

// do_sleep - set current process state to sleep and add timer with "time"
//          - then call scheduler. if process run again, delete timer first.
int
do_sleep(unsigned int time) {
90000000000118f8:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
90000000000118fc:	29c12061 	st.d	$r1,$r3,72(0x48)
9000000000011900:	29c10076 	st.d	$r22,$r3,64(0x40)
9000000000011904:	02c14076 	addi.d	$r22,$r3,80(0x50)
9000000000011908:	0015008c 	move	$r12,$r4
900000000001190c:	0040818c 	slli.w	$r12,$r12,0x0
9000000000011910:	29bef2cc 	st.w	$r12,$r22,-68(0xfbc)
    if (time == 0) {
9000000000011914:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
9000000000011918:	44000d80 	bnez	$r12,12(0xc) # 9000000000011924 <do_sleep+0x2c>
        return 0;
900000000001191c:	0015000c 	move	$r12,$r0
9000000000011920:	50008800 	b	136(0x88) # 90000000000119a8 <do_sleep+0xb0>
    }
    bool intr_flag;
    local_intr_save(intr_flag);
9000000000011924:	57ce03ff 	bl	-12800(0xfffce00) # 900000000000e724 <__intr_save>
9000000000011928:	0015008c 	move	$r12,$r4
900000000001192c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    timer_t __timer, *timer = timer_init(&__timer, current, time);
9000000000011930:	1c00422c 	pcaddu12i	$r12,529(0x211)
9000000000011934:	02eca18c 	addi.d	$r12,$r12,-1240(0xb28)
9000000000011938:	28c0018c 	ld.d	$r12,$r12,0
900000000001193c:	28bef2cd 	ld.w	$r13,$r22,-68(0xfbc)
9000000000011940:	02ff02ce 	addi.d	$r14,$r22,-64(0xfc0)
9000000000011944:	001501a6 	move	$r6,$r13
9000000000011948:	00150185 	move	$r5,$r12
900000000001194c:	001501c4 	move	$r4,$r14
9000000000011950:	57d02fff 	bl	-12244(0xfffd02c) # 900000000000e97c <timer_init>
9000000000011954:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)
    current->state = PROC_SLEEPING;
9000000000011958:	1c00422c 	pcaddu12i	$r12,529(0x211)
900000000001195c:	02ec018c 	addi.d	$r12,$r12,-1280(0xb00)
9000000000011960:	28c0018c 	ld.d	$r12,$r12,0
9000000000011964:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000011968:	2980018d 	st.w	$r13,$r12,0
    current->wait_state = WT_TIMER;
900000000001196c:	1c00422c 	pcaddu12i	$r12,529(0x211)
9000000000011970:	02ebb18c 	addi.d	$r12,$r12,-1300(0xaec)
9000000000011974:	28c0018c 	ld.d	$r12,$r12,0
9000000000011978:	1500000d 	lu12i.w	$r13,-524288(0x80000)
900000000001197c:	038009ad 	ori	$r13,$r13,0x2
9000000000011980:	2983d18d 	st.w	$r13,$r12,244(0xf4)
    add_timer(timer);
9000000000011984:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000011988:	540a4800 	bl	2632(0xa48) # 90000000000123d0 <add_timer>
    local_intr_restore(intr_flag);
900000000001198c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000011990:	00150184 	move	$r4,$r12
9000000000011994:	57cdc3ff 	bl	-12864(0xfffcdc0) # 900000000000e754 <__intr_restore>

    schedule();
9000000000011998:	54095800 	bl	2392(0x958) # 90000000000122f0 <schedule>

    del_timer(timer);
900000000001199c:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
90000000000119a0:	540be800 	bl	3048(0xbe8) # 9000000000012588 <del_timer>
    return 0; 
90000000000119a4:	0015000c 	move	$r12,$r0
}
90000000000119a8:	00150184 	move	$r4,$r12
90000000000119ac:	28c12061 	ld.d	$r1,$r3,72(0x48)
90000000000119b0:	28c10076 	ld.d	$r22,$r3,64(0x40)
90000000000119b4:	02c14063 	addi.d	$r3,$r3,80(0x50)
90000000000119b8:	4c000020 	jirl	$r0,$r1,0

90000000000119bc <fence_i>:
static void fence_i(void *va_start, int size) {
90000000000119bc:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000000119c0:	29c0a076 	st.d	$r22,$r3,40(0x28)
90000000000119c4:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000000119c8:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
90000000000119cc:	001500ac 	move	$r12,$r5
90000000000119d0:	0040818c 	slli.w	$r12,$r12,0x0
90000000000119d4:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
90000000000119d8:	38720000 	dbar	0x0
    void *va_end = va_start + size;
90000000000119dc:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
90000000000119e0:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
90000000000119e4:	0010b1ac 	add.d	$r12,$r13,$r12
90000000000119e8:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
90000000000119ec:	50002000 	b	32(0x20) # 9000000000011a0c <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
90000000000119f0:	06000189 	cacop	0x9,$r12,0
90000000000119f4:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
90000000000119f8:	06000188 	cacop	0x8,$r12,0
90000000000119fc:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
9000000000011a00:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000011a04:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000011a08:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
9000000000011a0c:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000011a10:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000011a14:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 90000000000119f0 <fence_i+0x34>
9000000000011a18:	38728000 	ibar	0x0
}
9000000000011a1c:	03400000 	andi	$r0,$r0,0x0
9000000000011a20:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000011a24:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000011a28:	4c000020 	jirl	$r0,$r1,0

9000000000011a2c <skew_heap_merge>:
}

static inline skew_heap_entry_t *
skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
                compare_f comp)
{
9000000000011a2c:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000011a30:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000011a34:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000011a38:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000011a3c:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000011a40:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
9000000000011a44:	29ff22c6 	st.d	$r6,$r22,-56(0xfc8)
     if (a == NULL) return b;
9000000000011a48:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000011a4c:	44000d80 	bnez	$r12,12(0xc) # 9000000000011a58 <skew_heap_merge+0x2c>
9000000000011a50:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000011a54:	5000e800 	b	232(0xe8) # 9000000000011b3c <skew_heap_merge+0x110>
     else if (b == NULL) return a;
9000000000011a58:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000011a5c:	44000d80 	bnez	$r12,12(0xc) # 9000000000011a68 <skew_heap_merge+0x3c>
9000000000011a60:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000011a64:	5000d800 	b	216(0xd8) # 9000000000011b3c <skew_heap_merge+0x110>
     
     skew_heap_entry_t *l, *r;
     if (comp(a, b) == -1)
9000000000011a68:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000011a6c:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
9000000000011a70:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000011a74:	4c000181 	jirl	$r1,$r12,0
9000000000011a78:	0015008c 	move	$r12,$r4
9000000000011a7c:	0015018d 	move	$r13,$r12
9000000000011a80:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
9000000000011a84:	5c0061ac 	bne	$r13,$r12,96(0x60) # 9000000000011ae4 <skew_heap_merge+0xb8>
     {
          r = a->left;
9000000000011a88:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000011a8c:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000011a90:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
          l = skew_heap_merge(a->right, b, comp);
9000000000011a94:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000011a98:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000011a9c:	28ff22c6 	ld.d	$r6,$r22,-56(0xfc8)
9000000000011aa0:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
9000000000011aa4:	00150184 	move	$r4,$r12
9000000000011aa8:	57ff87ff 	bl	-124(0xfffff84) # 9000000000011a2c <skew_heap_merge>
9000000000011aac:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)
          
          a->left = l;
9000000000011ab0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000011ab4:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000011ab8:	29c0218d 	st.d	$r13,$r12,8(0x8)
          a->right = r;
9000000000011abc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000011ac0:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000011ac4:	29c0418d 	st.d	$r13,$r12,16(0x10)
          if (l) l->parent = a;
9000000000011ac8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000011acc:	40001180 	beqz	$r12,16(0x10) # 9000000000011adc <skew_heap_merge+0xb0>
9000000000011ad0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000011ad4:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000011ad8:	29c0018d 	st.d	$r13,$r12,0

          return a;
9000000000011adc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000011ae0:	50005c00 	b	92(0x5c) # 9000000000011b3c <skew_heap_merge+0x110>
     }
     else
     {
          r = b->left;
9000000000011ae4:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000011ae8:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000011aec:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
          l = skew_heap_merge(a, b->right, comp);
9000000000011af0:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000011af4:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000011af8:	28ff22c6 	ld.d	$r6,$r22,-56(0xfc8)
9000000000011afc:	00150185 	move	$r5,$r12
9000000000011b00:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000011b04:	57ff2bff 	bl	-216(0xfffff28) # 9000000000011a2c <skew_heap_merge>
9000000000011b08:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)
          
          b->left = l;
9000000000011b0c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000011b10:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000011b14:	29c0218d 	st.d	$r13,$r12,8(0x8)
          b->right = r;
9000000000011b18:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000011b1c:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000011b20:	29c0418d 	st.d	$r13,$r12,16(0x10)
          if (l) l->parent = b;
9000000000011b24:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000011b28:	40001180 	beqz	$r12,16(0x10) # 9000000000011b38 <skew_heap_merge+0x10c>
9000000000011b2c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000011b30:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000011b34:	29c0018d 	st.d	$r13,$r12,0

          return b;
9000000000011b38:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
     }
}
9000000000011b3c:	00150184 	move	$r4,$r12
9000000000011b40:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000000011b44:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000000011b48:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000011b4c:	4c000020 	jirl	$r0,$r1,0

9000000000011b50 <proc_stride_comp_f>:

    /* The compare function for two skew_heap_node_t's and the
    * corresponding procs*/
    static int
    proc_stride_comp_f(void *a, void *b)
    {
9000000000011b50:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000011b54:	29c0e076 	st.d	$r22,$r3,56(0x38)
9000000000011b58:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000011b5c:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
9000000000011b60:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
        struct proc_struct *p = le2proc(a, lab6_run_pool);
9000000000011b64:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000011b68:	02fb218c 	addi.d	$r12,$r12,-312(0xec8)
9000000000011b6c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
        struct proc_struct *q = le2proc(b, lab6_run_pool);
9000000000011b70:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000011b74:	02fb218c 	addi.d	$r12,$r12,-312(0xec8)
9000000000011b78:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
        int32_t c = p->lab6_stride - q->lab6_stride;
9000000000011b7c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000011b80:	2885418d 	ld.w	$r13,$r12,336(0x150)
9000000000011b84:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000011b88:	2885418c 	ld.w	$r12,$r12,336(0x150)
9000000000011b8c:	001131ac 	sub.w	$r12,$r13,$r12
9000000000011b90:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
        if (c > 0) return 1;
9000000000011b94:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000011b98:	64000c0c 	bge	$r0,$r12,12(0xc) # 9000000000011ba4 <proc_stride_comp_f+0x54>
9000000000011b9c:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000011ba0:	50001800 	b	24(0x18) # 9000000000011bb8 <proc_stride_comp_f+0x68>
        else if (c == 0) return 0;
9000000000011ba4:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000011ba8:	44000d80 	bnez	$r12,12(0xc) # 9000000000011bb4 <proc_stride_comp_f+0x64>
9000000000011bac:	0015000c 	move	$r12,$r0
9000000000011bb0:	50000800 	b	8(0x8) # 9000000000011bb8 <proc_stride_comp_f+0x68>
        else return -1;
9000000000011bb4:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
    }
9000000000011bb8:	00150184 	move	$r4,$r12
9000000000011bbc:	28c0e076 	ld.d	$r22,$r3,56(0x38)
9000000000011bc0:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000011bc4:	4c000020 	jirl	$r0,$r1,0

9000000000011bc8 <stride_init>:
    *   - max_time_slice: no need here, the variable would be assigned by the caller.
    *
    * hint: see proj13.1/libs/list.h for routines of the list structures.
    */
    static void
    stride_init(struct run_queue *rq) {
9000000000011bc8:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000011bcc:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000011bd0:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000011bd4:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
        /* LAB6: YOUR CODE */
        list_init(&(rq->run_list));
9000000000011bd8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000011bdc:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000011be0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000011be4:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000011be8:	29c0218d 	st.d	$r13,$r12,8(0x8)
9000000000011bec:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000011bf0:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000011bf4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000011bf8:	29c0018d 	st.d	$r13,$r12,0
        rq->lab6_run_pool = NULL;
9000000000011bfc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000011c00:	29c06180 	st.d	$r0,$r12,24(0x18)
        rq->proc_num = 0;
9000000000011c04:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000011c08:	29804180 	st.w	$r0,$r12,16(0x10)
    }
9000000000011c0c:	03400000 	andi	$r0,$r0,0x0
9000000000011c10:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000011c14:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000011c18:	4c000020 	jirl	$r0,$r1,0

9000000000011c1c <stride_enqueue>:
    * 
    * hint: see proj13.1/libs/skew_heap.h for routines of the priority
    * queue structures.
    */
    static void
    stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
9000000000011c1c:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000011c20:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000011c24:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000011c28:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000011c2c:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
9000000000011c30:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
        /* LAB6: YOUR CODE */
    #if USE_SKEW_HEAP
        rq->lab6_run_pool =
            skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
9000000000011c34:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000011c38:	28c0618d 	ld.d	$r13,$r12,24(0x18)
9000000000011c3c:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000011c40:	02c4e18c 	addi.d	$r12,$r12,312(0x138)
9000000000011c44:	29ffa2cd 	st.d	$r13,$r22,-24(0xfe8)
9000000000011c48:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000011c4c:	1c00000c 	pcaddu12i	$r12,0
9000000000011c50:	02fc118c 	addi.d	$r12,$r12,-252(0xf04)
9000000000011c54:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
9000000000011c58:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000011c5c:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
     a->left = a->right = a->parent = NULL;
9000000000011c60:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000011c64:	29c00180 	st.d	$r0,$r12,0
9000000000011c68:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000011c6c:	28c0018d 	ld.d	$r13,$r12,0
9000000000011c70:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000011c74:	29c0418d 	st.d	$r13,$r12,16(0x10)
9000000000011c78:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000011c7c:	28c0418d 	ld.d	$r13,$r12,16(0x10)
9000000000011c80:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000011c84:	29c0218d 	st.d	$r13,$r12,8(0x8)
static inline skew_heap_entry_t *
skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_init(b);
     return skew_heap_merge(a, b, comp);
9000000000011c88:	28ff62c6 	ld.d	$r6,$r22,-40(0xfd8)
9000000000011c8c:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
9000000000011c90:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000011c94:	57fd9bff 	bl	-616(0xffffd98) # 9000000000011a2c <skew_heap_merge>
9000000000011c98:	0015008d 	move	$r13,$r4
        rq->lab6_run_pool =
9000000000011c9c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000011ca0:	29c0618d 	st.d	$r13,$r12,24(0x18)
    #else
        assert(list_empty(&(proc->run_link)));
        list_add_before(&(rq->run_list), &(proc->run_link));
    #endif
        if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
9000000000011ca4:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000011ca8:	2884a18c 	ld.w	$r12,$r12,296(0x128)
9000000000011cac:	40001980 	beqz	$r12,24(0x18) # 9000000000011cc4 <stride_enqueue+0xa8>
9000000000011cb0:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000011cb4:	2884a18d 	ld.w	$r13,$r12,296(0x128)
9000000000011cb8:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000011cbc:	2880518c 	ld.w	$r12,$r12,20(0x14)
9000000000011cc0:	6400158d 	bge	$r12,$r13,20(0x14) # 9000000000011cd4 <stride_enqueue+0xb8>
            proc->time_slice = rq->max_time_slice;
9000000000011cc4:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000011cc8:	2880518d 	ld.w	$r13,$r12,20(0x14)
9000000000011ccc:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000011cd0:	2984a18d 	st.w	$r13,$r12,296(0x128)
        }
        proc->rq = rq;
9000000000011cd4:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000011cd8:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
9000000000011cdc:	29c4418d 	st.d	$r13,$r12,272(0x110)
        rq->proc_num ++;
9000000000011ce0:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000011ce4:	2880418c 	ld.w	$r12,$r12,16(0x10)
9000000000011ce8:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000011cec:	0015018d 	move	$r13,$r12
9000000000011cf0:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000011cf4:	2980418d 	st.w	$r13,$r12,16(0x10)
    }
9000000000011cf8:	03400000 	andi	$r0,$r0,0x0
9000000000011cfc:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000000011d00:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000000011d04:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000011d08:	4c000020 	jirl	$r0,$r1,0

9000000000011d0c <stride_dequeue>:
    *
    * hint: see proj13.1/libs/skew_heap.h for routines of the priority
    * queue structures.
    */
    static void
    stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
9000000000011d0c:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
9000000000011d10:	29c12061 	st.d	$r1,$r3,72(0x48)
9000000000011d14:	29c10076 	st.d	$r22,$r3,64(0x40)
9000000000011d18:	02c14076 	addi.d	$r22,$r3,80(0x50)
9000000000011d1c:	29fee2c4 	st.d	$r4,$r22,-72(0xfb8)
9000000000011d20:	29fec2c5 	st.d	$r5,$r22,-80(0xfb0)
        /* LAB6: YOUR CODE */
    #if USE_SKEW_HEAP
        rq->lab6_run_pool =
            skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
9000000000011d24:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000011d28:	28c0618d 	ld.d	$r13,$r12,24(0x18)
9000000000011d2c:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
9000000000011d30:	02c4e18c 	addi.d	$r12,$r12,312(0x138)
9000000000011d34:	29ffa2cd 	st.d	$r13,$r22,-24(0xfe8)
9000000000011d38:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000011d3c:	1c00000c 	pcaddu12i	$r12,0
9000000000011d40:	02f8518c 	addi.d	$r12,$r12,-492(0xe14)
9000000000011d44:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)

static inline skew_heap_entry_t *
skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_entry_t *p   = b->parent;
9000000000011d48:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000011d4c:	28c0018c 	ld.d	$r12,$r12,0
9000000000011d50:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
9000000000011d54:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000011d58:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000011d5c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000011d60:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000011d64:	28ff62c6 	ld.d	$r6,$r22,-40(0xfd8)
9000000000011d68:	00150185 	move	$r5,$r12
9000000000011d6c:	001501a4 	move	$r4,$r13
9000000000011d70:	57fcbfff 	bl	-836(0xffffcbc) # 9000000000011a2c <skew_heap_merge>
9000000000011d74:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
     if (rep) rep->parent = p;
9000000000011d78:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000011d7c:	40001180 	beqz	$r12,16(0x10) # 9000000000011d8c <stride_dequeue+0x80>
9000000000011d80:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000011d84:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000011d88:	29c0018d 	st.d	$r13,$r12,0
     
     if (p)
9000000000011d8c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000011d90:	40003980 	beqz	$r12,56(0x38) # 9000000000011dc8 <stride_dequeue+0xbc>
     {
          if (p->left == b)
9000000000011d94:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000011d98:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000011d9c:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000011da0:	5c0015ac 	bne	$r13,$r12,20(0x14) # 9000000000011db4 <stride_dequeue+0xa8>
               p->left = rep;
9000000000011da4:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000011da8:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
9000000000011dac:	29c0218d 	st.d	$r13,$r12,8(0x8)
9000000000011db0:	50001000 	b	16(0x10) # 9000000000011dc0 <stride_dequeue+0xb4>
          else p->right = rep;
9000000000011db4:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000011db8:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
9000000000011dbc:	29c0418d 	st.d	$r13,$r12,16(0x10)
          return a;
9000000000011dc0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000011dc4:	50000800 	b	8(0x8) # 9000000000011dcc <stride_dequeue+0xc0>
     }
     else return rep;
9000000000011dc8:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
        rq->lab6_run_pool =
9000000000011dcc:	28fee2cd 	ld.d	$r13,$r22,-72(0xfb8)
9000000000011dd0:	29c061ac 	st.d	$r12,$r13,24(0x18)
    #else
        assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
        list_del_init(&(proc->run_link));
    #endif
        rq->proc_num --;
9000000000011dd4:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000011dd8:	2880418c 	ld.w	$r12,$r12,16(0x10)
9000000000011ddc:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
9000000000011de0:	0015018d 	move	$r13,$r12
9000000000011de4:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000011de8:	2980418d 	st.w	$r13,$r12,16(0x10)
    }
9000000000011dec:	03400000 	andi	$r0,$r0,0x0
9000000000011df0:	28c12061 	ld.d	$r1,$r3,72(0x48)
9000000000011df4:	28c10076 	ld.d	$r22,$r3,64(0x40)
9000000000011df8:	02c14063 	addi.d	$r3,$r3,80(0x50)
9000000000011dfc:	4c000020 	jirl	$r0,$r1,0

9000000000011e00 <stride_pick_next>:
    *
    * hint: see proj13.1/libs/skew_heap.h for routines of the priority
    * queue structures.
    */
    static struct proc_struct *
    stride_pick_next(struct run_queue *rq) {
9000000000011e00:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000011e04:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000011e08:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000011e0c:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
        /* LAB6: YOUR CODE */
    #if USE_SKEW_HEAP
        if (rq->lab6_run_pool == NULL) return NULL;
9000000000011e10:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000011e14:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000011e18:	44000d80 	bnez	$r12,12(0xc) # 9000000000011e24 <stride_pick_next+0x24>
9000000000011e1c:	0015000c 	move	$r12,$r0
9000000000011e20:	50008800 	b	136(0x88) # 9000000000011ea8 <stride_pick_next+0xa8>
        struct proc_struct *p = le2proc(rq->lab6_run_pool, lab6_run_pool);
9000000000011e24:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000011e28:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000011e2c:	02fb218c 	addi.d	$r12,$r12,-312(0xec8)
9000000000011e30:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
            if ((int32_t)(p->lab6_stride - q->lab6_stride) > 0)
                p = q;
            le = list_next(le);
        }
    #endif
        if (p->lab6_priority == 0)
9000000000011e34:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000011e38:	2885518c 	ld.w	$r12,$r12,340(0x154)
9000000000011e3c:	44002980 	bnez	$r12,40(0x28) # 9000000000011e64 <stride_pick_next+0x64>
            p->lab6_stride += BIG_STRIDE;
9000000000011e40:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000011e44:	2885418d 	ld.w	$r13,$r12,336(0x150)
9000000000011e48:	14ffffec 	lu12i.w	$r12,524287(0x7ffff)
9000000000011e4c:	03bffd8c 	ori	$r12,$r12,0xfff
9000000000011e50:	001031ac 	add.w	$r12,$r13,$r12
9000000000011e54:	0015018d 	move	$r13,$r12
9000000000011e58:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000011e5c:	2985418d 	st.w	$r13,$r12,336(0x150)
9000000000011e60:	50004400 	b	68(0x44) # 9000000000011ea4 <stride_pick_next+0xa4>
        else p->lab6_stride += BIG_STRIDE / p->lab6_priority;
9000000000011e64:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000011e68:	2885418d 	ld.w	$r13,$r12,336(0x150)
9000000000011e6c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000011e70:	2885518f 	ld.w	$r15,$r12,340(0x154)
9000000000011e74:	14ffffec 	lu12i.w	$r12,524287(0x7ffff)
9000000000011e78:	03bffd8c 	ori	$r12,$r12,0xfff
9000000000011e7c:	0015018e 	move	$r14,$r12
9000000000011e80:	001501ec 	move	$r12,$r15
9000000000011e84:	002131cf 	div.wu	$r15,$r14,$r12
9000000000011e88:	5c000980 	bne	$r12,$r0,8(0x8) # 9000000000011e90 <stride_pick_next+0x90>
9000000000011e8c:	002a0007 	break	0x7
9000000000011e90:	001501ec 	move	$r12,$r15
9000000000011e94:	001031ac 	add.w	$r12,$r13,$r12
9000000000011e98:	0015018d 	move	$r13,$r12
9000000000011e9c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000011ea0:	2985418d 	st.w	$r13,$r12,336(0x150)
        return p;
9000000000011ea4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
    }
9000000000011ea8:	00150184 	move	$r4,$r12
9000000000011eac:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000011eb0:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000011eb4:	4c000020 	jirl	$r0,$r1,0

9000000000011eb8 <stride_proc_tick>:
    * denotes the time slices left for current
    * process. proc->need_resched is the flag variable for process
    * switching.
    */
    static void
    stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
9000000000011eb8:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000011ebc:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000011ec0:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000011ec4:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
9000000000011ec8:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
        /* LAB6: YOUR CODE */
        if (proc->time_slice > 0) {
9000000000011ecc:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000011ed0:	2884a18c 	ld.w	$r12,$r12,296(0x128)
9000000000011ed4:	64001c0c 	bge	$r0,$r12,28(0x1c) # 9000000000011ef0 <stride_proc_tick+0x38>
            proc->time_slice --;
9000000000011ed8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000011edc:	2884a18c 	ld.w	$r12,$r12,296(0x128)
9000000000011ee0:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
9000000000011ee4:	0015018d 	move	$r13,$r12
9000000000011ee8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000011eec:	2984a18d 	st.w	$r13,$r12,296(0x128)
        }
        if (proc->time_slice == 0) {
9000000000011ef0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000011ef4:	2884a18c 	ld.w	$r12,$r12,296(0x128)
9000000000011ef8:	44001180 	bnez	$r12,16(0x10) # 9000000000011f08 <stride_proc_tick+0x50>
            proc->need_resched = 1;
9000000000011efc:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000011f00:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000011f04:	2980618d 	st.w	$r13,$r12,24(0x18)
        }
    }
9000000000011f08:	03400000 	andi	$r0,$r0,0x0
9000000000011f0c:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000011f10:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000011f14:	4c000020 	jirl	$r0,$r1,0

9000000000011f18 <fence_i>:
static void fence_i(void *va_start, int size) {
9000000000011f18:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000011f1c:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000011f20:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000011f24:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000011f28:	001500ac 	move	$r12,$r5
9000000000011f2c:	0040818c 	slli.w	$r12,$r12,0x0
9000000000011f30:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
9000000000011f34:	38720000 	dbar	0x0
    void *va_end = va_start + size;
9000000000011f38:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000011f3c:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000011f40:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000011f44:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
9000000000011f48:	50002000 	b	32(0x20) # 9000000000011f68 <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
9000000000011f4c:	06000189 	cacop	0x9,$r12,0
9000000000011f50:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
9000000000011f54:	06000188 	cacop	0x8,$r12,0
9000000000011f58:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
9000000000011f5c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000011f60:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000011f64:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
9000000000011f68:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000011f6c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000011f70:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 9000000000011f4c <fence_i+0x34>
9000000000011f74:	38728000 	ibar	0x0
}
9000000000011f78:	03400000 	andi	$r0,$r0,0x0
9000000000011f7c:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000011f80:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000011f84:	4c000020 	jirl	$r0,$r1,0

9000000000011f88 <__intr_save>:
{
9000000000011f88:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000000011f8c:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000000011f90:	02c04076 	addi.d	$r22,$r3,16(0x10)
	return __csrxchg(0, LISA_CSR_CRMD_IE, LISA_CSR_CRMD);
9000000000011f94:	0015000d 	move	$r13,$r0
9000000000011f98:	0280100c 	addi.w	$r12,$r0,4(0x4)
9000000000011f9c:	0400018d 	csrxchg	$r13,$r12,0x0
9000000000011fa0:	001501ac 	move	$r12,$r13
9000000000011fa4:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
}
9000000000011fa8:	00150184 	move	$r4,$r12
9000000000011fac:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000000011fb0:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000000011fb4:	4c000020 	jirl	$r0,$r1,0

9000000000011fb8 <__intr_restore>:
{
9000000000011fb8:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000011fbc:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000011fc0:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000011fc4:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
	__csrxchg(flags, LISA_CSR_CRMD_IE, LISA_CSR_CRMD);
9000000000011fc8:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
9000000000011fcc:	0280100d 	addi.w	$r13,$r0,4(0x4)
9000000000011fd0:	040001ac 	csrxchg	$r12,$r13,0x0
}
9000000000011fd4:	03400000 	andi	$r0,$r0,0x0
9000000000011fd8:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000011fdc:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000011fe0:	4c000020 	jirl	$r0,$r1,0

9000000000011fe4 <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
9000000000011fe4:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000011fe8:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000011fec:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000011ff0:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000011ff4:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    if (proc != idleproc) {
9000000000011ff8:	1c0041ec 	pcaddu12i	$r12,527(0x20f)
9000000000011ffc:	28dbe18c 	ld.d	$r12,$r12,1784(0x6f8)
9000000000012000:	28c0018c 	ld.d	$r12,$r12,0
9000000000012004:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000012008:	58002dac 	beq	$r13,$r12,44(0x2c) # 9000000000012034 <sched_class_enqueue+0x50>
        sched_class->enqueue(rq, proc);
900000000001200c:	1c00428c 	pcaddu12i	$r12,532(0x214)
9000000000012010:	02d2318c 	addi.d	$r12,$r12,1164(0x48c)
9000000000012014:	28c0018c 	ld.d	$r12,$r12,0
9000000000012018:	28c0418c 	ld.d	$r12,$r12,16(0x10)
900000000001201c:	1c00428d 	pcaddu12i	$r13,532(0x214)
9000000000012020:	02d211ad 	addi.d	$r13,$r13,1156(0x484)
9000000000012024:	28c001ad 	ld.d	$r13,$r13,0
9000000000012028:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
900000000001202c:	001501a4 	move	$r4,$r13
9000000000012030:	4c000181 	jirl	$r1,$r12,0
    }
}
9000000000012034:	03400000 	andi	$r0,$r0,0x0
9000000000012038:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000001203c:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000012040:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000012044:	4c000020 	jirl	$r0,$r1,0

9000000000012048 <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
9000000000012048:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000001204c:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000012050:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000012054:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000012058:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    sched_class->dequeue(rq, proc);
900000000001205c:	1c00428c 	pcaddu12i	$r12,532(0x214)
9000000000012060:	02d0f18c 	addi.d	$r12,$r12,1084(0x43c)
9000000000012064:	28c0018c 	ld.d	$r12,$r12,0
9000000000012068:	28c0618c 	ld.d	$r12,$r12,24(0x18)
900000000001206c:	1c00428d 	pcaddu12i	$r13,532(0x214)
9000000000012070:	02d0d1ad 	addi.d	$r13,$r13,1076(0x434)
9000000000012074:	28c001ad 	ld.d	$r13,$r13,0
9000000000012078:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
900000000001207c:	001501a4 	move	$r4,$r13
9000000000012080:	4c000181 	jirl	$r1,$r12,0
}
9000000000012084:	03400000 	andi	$r0,$r0,0x0
9000000000012088:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000001208c:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000012090:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000012094:	4c000020 	jirl	$r0,$r1,0

9000000000012098 <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
9000000000012098:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000001209c:	29c02061 	st.d	$r1,$r3,8(0x8)
90000000000120a0:	29c00076 	st.d	$r22,$r3,0
90000000000120a4:	02c04076 	addi.d	$r22,$r3,16(0x10)
    return sched_class->pick_next(rq);
90000000000120a8:	1c00428c 	pcaddu12i	$r12,532(0x214)
90000000000120ac:	02cfc18c 	addi.d	$r12,$r12,1008(0x3f0)
90000000000120b0:	28c0018c 	ld.d	$r12,$r12,0
90000000000120b4:	28c0818c 	ld.d	$r12,$r12,32(0x20)
90000000000120b8:	1c00428d 	pcaddu12i	$r13,532(0x214)
90000000000120bc:	02cfa1ad 	addi.d	$r13,$r13,1000(0x3e8)
90000000000120c0:	28c001ad 	ld.d	$r13,$r13,0
90000000000120c4:	001501a4 	move	$r4,$r13
90000000000120c8:	4c000181 	jirl	$r1,$r12,0
90000000000120cc:	0015008c 	move	$r12,$r4
}
90000000000120d0:	00150184 	move	$r4,$r12
90000000000120d4:	28c02061 	ld.d	$r1,$r3,8(0x8)
90000000000120d8:	28c00076 	ld.d	$r22,$r3,0
90000000000120dc:	02c04063 	addi.d	$r3,$r3,16(0x10)
90000000000120e0:	4c000020 	jirl	$r0,$r1,0

90000000000120e4 <sched_class_proc_tick>:

static void
sched_class_proc_tick(struct proc_struct *proc) {
90000000000120e4:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000000120e8:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000000120ec:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000000120f0:	02c08076 	addi.d	$r22,$r3,32(0x20)
90000000000120f4:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    if (proc != idleproc) {
90000000000120f8:	1c0041ec 	pcaddu12i	$r12,527(0x20f)
90000000000120fc:	28d7e18c 	ld.d	$r12,$r12,1528(0x5f8)
9000000000012100:	28c0018c 	ld.d	$r12,$r12,0
9000000000012104:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000012108:	580031ac 	beq	$r13,$r12,48(0x30) # 9000000000012138 <sched_class_proc_tick+0x54>
        sched_class->proc_tick(rq, proc);
900000000001210c:	1c00428c 	pcaddu12i	$r12,532(0x214)
9000000000012110:	02ce318c 	addi.d	$r12,$r12,908(0x38c)
9000000000012114:	28c0018c 	ld.d	$r12,$r12,0
9000000000012118:	28c0a18c 	ld.d	$r12,$r12,40(0x28)
900000000001211c:	1c00428d 	pcaddu12i	$r13,532(0x214)
9000000000012120:	02ce11ad 	addi.d	$r13,$r13,900(0x384)
9000000000012124:	28c001ad 	ld.d	$r13,$r13,0
9000000000012128:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
900000000001212c:	001501a4 	move	$r4,$r13
9000000000012130:	4c000181 	jirl	$r1,$r12,0
    }
    else {
        proc->need_resched = 1;
    }
}
9000000000012134:	50001000 	b	16(0x10) # 9000000000012144 <sched_class_proc_tick+0x60>
        proc->need_resched = 1;
9000000000012138:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001213c:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000012140:	2980618d 	st.w	$r13,$r12,24(0x18)
}
9000000000012144:	03400000 	andi	$r0,$r0,0x0
9000000000012148:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000001214c:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000012150:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000012154:	4c000020 	jirl	$r0,$r1,0

9000000000012158 <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
9000000000012158:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000001215c:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000012160:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000012164:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000012168:	1c00428c 	pcaddu12i	$r12,532(0x214)
900000000001216c:	02cc818c 	addi.d	$r12,$r12,800(0x320)
9000000000012170:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000012174:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000012178:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000001217c:	29c0218d 	st.d	$r13,$r12,8(0x8)
9000000000012180:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000012184:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000012188:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001218c:	29c0018d 	st.d	$r13,$r12,0
    list_init(&timer_list);

    sched_class = &default_sched_class;
9000000000012190:	1c00428c 	pcaddu12i	$r12,532(0x214)
9000000000012194:	02cc218c 	addi.d	$r12,$r12,776(0x308)
9000000000012198:	1c0041ed 	pcaddu12i	$r13,527(0x20f)
900000000001219c:	28d981ad 	ld.d	$r13,$r13,1632(0x660)
90000000000121a0:	29c0018d 	st.d	$r13,$r12,0

    rq = &__rq;
90000000000121a4:	1c00428c 	pcaddu12i	$r12,532(0x214)
90000000000121a8:	02cbf18c 	addi.d	$r12,$r12,764(0x2fc)
90000000000121ac:	1c00428d 	pcaddu12i	$r13,532(0x214)
90000000000121b0:	02cbf1ad 	addi.d	$r13,$r13,764(0x2fc)
90000000000121b4:	29c0018d 	st.d	$r13,$r12,0
    rq->max_time_slice = 20;
90000000000121b8:	1c00428c 	pcaddu12i	$r12,532(0x214)
90000000000121bc:	02cba18c 	addi.d	$r12,$r12,744(0x2e8)
90000000000121c0:	28c0018c 	ld.d	$r12,$r12,0
90000000000121c4:	0280500d 	addi.w	$r13,$r0,20(0x14)
90000000000121c8:	2980518d 	st.w	$r13,$r12,20(0x14)
    sched_class->init(rq);
90000000000121cc:	1c00428c 	pcaddu12i	$r12,532(0x214)
90000000000121d0:	02cb318c 	addi.d	$r12,$r12,716(0x2cc)
90000000000121d4:	28c0018c 	ld.d	$r12,$r12,0
90000000000121d8:	28c0218c 	ld.d	$r12,$r12,8(0x8)
90000000000121dc:	1c00428d 	pcaddu12i	$r13,532(0x214)
90000000000121e0:	02cb11ad 	addi.d	$r13,$r13,708(0x2c4)
90000000000121e4:	28c001ad 	ld.d	$r13,$r13,0
90000000000121e8:	001501a4 	move	$r4,$r13
90000000000121ec:	4c000181 	jirl	$r1,$r12,0

    kprintf("sched class: %s\n", sched_class->name);
90000000000121f0:	1c00428c 	pcaddu12i	$r12,532(0x214)
90000000000121f4:	02caa18c 	addi.d	$r12,$r12,680(0x2a8)
90000000000121f8:	28c0018c 	ld.d	$r12,$r12,0
90000000000121fc:	28c0018c 	ld.d	$r12,$r12,0
9000000000012200:	00150185 	move	$r5,$r12
9000000000012204:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000000012208:	02df7084 	addi.d	$r4,$r4,2012(0x7dc)
900000000001220c:	571c13ff 	bl	-58352(0xfff1c10) # 9000000000003e1c <kprintf>
}
9000000000012210:	03400000 	andi	$r0,$r0,0x0
9000000000012214:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000012218:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000001221c:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000012220:	4c000020 	jirl	$r0,$r1,0

9000000000012224 <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
9000000000012224:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000012228:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000001222c:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000012230:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000012234:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    assert(proc->state != PROC_ZOMBIE);
9000000000012238:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001223c:	2880018c 	ld.w	$r12,$r12,0
9000000000012240:	0015018d 	move	$r13,$r12
9000000000012244:	02800c0c 	addi.w	$r12,$r0,3(0x3)
9000000000012248:	5c001dac 	bne	$r13,$r12,28(0x1c) # 9000000000012264 <wakeup_proc+0x40>
900000000001224c:	1c0001e6 	pcaddu12i	$r6,15(0xf)
9000000000012250:	02deb0c6 	addi.d	$r6,$r6,1964(0x7ac)
9000000000012254:	0280ec05 	addi.w	$r5,$r0,59(0x3b)
9000000000012258:	1c0001e4 	pcaddu12i	$r4,15(0xf)
900000000001225c:	02df4084 	addi.d	$r4,$r4,2000(0x7d0)
9000000000012260:	57aa23ff 	bl	-21984(0xfffaa20) # 900000000000cc80 <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
9000000000012264:	57fd27ff 	bl	-732(0xffffd24) # 9000000000011f88 <__intr_save>
9000000000012268:	0015008c 	move	$r12,$r4
900000000001226c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    {
        if (proc->state != PROC_RUNNABLE) {
9000000000012270:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000012274:	2880018c 	ld.w	$r12,$r12,0
9000000000012278:	0015018d 	move	$r13,$r12
900000000001227c:	0280080c 	addi.w	$r12,$r0,2(0x2)
9000000000012280:	580039ac 	beq	$r13,$r12,56(0x38) # 90000000000122b8 <wakeup_proc+0x94>
            proc->state = PROC_RUNNABLE;
9000000000012284:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000012288:	0280080d 	addi.w	$r13,$r0,2(0x2)
900000000001228c:	2980018d 	st.w	$r13,$r12,0
            proc->wait_state = 0;
9000000000012290:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000012294:	2983d180 	st.w	$r0,$r12,244(0xf4)
            if (proc != current) {
9000000000012298:	1c0041ec 	pcaddu12i	$r12,527(0x20f)
900000000001229c:	28d3a18c 	ld.d	$r12,$r12,1256(0x4e8)
90000000000122a0:	28c0018c 	ld.d	$r12,$r12,0
90000000000122a4:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
90000000000122a8:	580029ac 	beq	$r13,$r12,40(0x28) # 90000000000122d0 <wakeup_proc+0xac>
                sched_class_enqueue(proc);
90000000000122ac:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
90000000000122b0:	57fd37ff 	bl	-716(0xffffd34) # 9000000000011fe4 <sched_class_enqueue>
90000000000122b4:	50001c00 	b	28(0x1c) # 90000000000122d0 <wakeup_proc+0xac>
            }
        }
        else {
            warn("wakeup runnable process.\n");
90000000000122b8:	1c0001e6 	pcaddu12i	$r6,15(0xf)
90000000000122bc:	02de20c6 	addi.d	$r6,$r6,1928(0x788)
90000000000122c0:	02811c05 	addi.w	$r5,$r0,71(0x47)
90000000000122c4:	1c0001e4 	pcaddu12i	$r4,15(0xf)
90000000000122c8:	02dd9084 	addi.d	$r4,$r4,1892(0x764)
90000000000122cc:	57aa67ff 	bl	-21916(0xfffaa64) # 900000000000cd30 <__warn>
        }
    }
    local_intr_restore(intr_flag);
90000000000122d0:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000122d4:	00150184 	move	$r4,$r12
90000000000122d8:	57fce3ff 	bl	-800(0xffffce0) # 9000000000011fb8 <__intr_restore>
}
90000000000122dc:	03400000 	andi	$r0,$r0,0x0
90000000000122e0:	28c0a061 	ld.d	$r1,$r3,40(0x28)
90000000000122e4:	28c08076 	ld.d	$r22,$r3,32(0x20)
90000000000122e8:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000000122ec:	4c000020 	jirl	$r0,$r1,0

90000000000122f0 <schedule>:

void
schedule(void) {
90000000000122f0:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000000122f4:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000000122f8:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000000122fc:	02c08076 	addi.d	$r22,$r3,32(0x20)
    bool intr_flag;
    struct proc_struct *next;
    //kprintf("\nsche here\n");
    local_intr_save(intr_flag);
9000000000012300:	57fc8bff 	bl	-888(0xffffc88) # 9000000000011f88 <__intr_save>
9000000000012304:	0015008c 	move	$r12,$r4
9000000000012308:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
    {
        current->need_resched = 0;
900000000001230c:	1c0041ec 	pcaddu12i	$r12,527(0x20f)
9000000000012310:	28d1d18c 	ld.d	$r12,$r12,1140(0x474)
9000000000012314:	28c0018c 	ld.d	$r12,$r12,0
9000000000012318:	29806180 	st.w	$r0,$r12,24(0x18)
        if (current->state == PROC_RUNNABLE) {
900000000001231c:	1c0041ec 	pcaddu12i	$r12,527(0x20f)
9000000000012320:	28d1918c 	ld.d	$r12,$r12,1124(0x464)
9000000000012324:	28c0018c 	ld.d	$r12,$r12,0
9000000000012328:	2880018c 	ld.w	$r12,$r12,0
900000000001232c:	0015018d 	move	$r13,$r12
9000000000012330:	0280080c 	addi.w	$r12,$r0,2(0x2)
9000000000012334:	5c0019ac 	bne	$r13,$r12,24(0x18) # 900000000001234c <schedule+0x5c>
            sched_class_enqueue(current);
9000000000012338:	1c0041ec 	pcaddu12i	$r12,527(0x20f)
900000000001233c:	28d1218c 	ld.d	$r12,$r12,1096(0x448)
9000000000012340:	28c0018c 	ld.d	$r12,$r12,0
9000000000012344:	00150184 	move	$r4,$r12
9000000000012348:	57fc9fff 	bl	-868(0xffffc9c) # 9000000000011fe4 <sched_class_enqueue>
        }
        if ((next = sched_class_pick_next()) != NULL) {
900000000001234c:	57fd4fff 	bl	-692(0xffffd4c) # 9000000000012098 <sched_class_pick_next>
9000000000012350:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
9000000000012354:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000012358:	40000d80 	beqz	$r12,12(0xc) # 9000000000012364 <schedule+0x74>
            sched_class_dequeue(next);
900000000001235c:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000012360:	57fcebff 	bl	-792(0xffffce8) # 9000000000012048 <sched_class_dequeue>
        }
        
        if (next == NULL) {
9000000000012364:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000012368:	44001580 	bnez	$r12,20(0x14) # 900000000001237c <schedule+0x8c>
            next = idleproc;
900000000001236c:	1c0041ec 	pcaddu12i	$r12,527(0x20f)
9000000000012370:	28ce118c 	ld.d	$r12,$r12,900(0x384)
9000000000012374:	28c0018c 	ld.d	$r12,$r12,0
9000000000012378:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
        }
        next->runs ++;
900000000001237c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000012380:	2880218c 	ld.w	$r12,$r12,8(0x8)
9000000000012384:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000012388:	0015018d 	move	$r13,$r12
900000000001238c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000012390:	2980218d 	st.w	$r13,$r12,8(0x8)
        if (next != current) {
9000000000012394:	1c0041ec 	pcaddu12i	$r12,527(0x20f)
9000000000012398:	28cfb18c 	ld.d	$r12,$r12,1004(0x3ec)
900000000001239c:	28c0018c 	ld.d	$r12,$r12,0
90000000000123a0:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
90000000000123a4:	58000dac 	beq	$r13,$r12,12(0xc) # 90000000000123b0 <schedule+0xc0>
            // kprintf("########################\n");
            // kprintf("c %d TO %d\n", current->pid, next->pid);
            // //print_trapframe(next->tf);
            // kprintf("@@@@@@@@@@@@@@@@@@@@@@@@\n");
            proc_run(next);
90000000000123a8:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
90000000000123ac:	57d04bff 	bl	-12216(0xfffd048) # 900000000000f3f4 <proc_run>
        }
    }
    local_intr_restore(intr_flag);
90000000000123b0:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
90000000000123b4:	00150184 	move	$r4,$r12
90000000000123b8:	57fc03ff 	bl	-1024(0xffffc00) # 9000000000011fb8 <__intr_restore>
}
90000000000123bc:	03400000 	andi	$r0,$r0,0x0
90000000000123c0:	28c06061 	ld.d	$r1,$r3,24(0x18)
90000000000123c4:	28c04076 	ld.d	$r22,$r3,16(0x10)
90000000000123c8:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000000123cc:	4c000020 	jirl	$r0,$r1,0

90000000000123d0 <add_timer>:

void
add_timer(timer_t *timer) {
90000000000123d0:	02fe0063 	addi.d	$r3,$r3,-128(0xf80)
90000000000123d4:	29c1e061 	st.d	$r1,$r3,120(0x78)
90000000000123d8:	29c1c076 	st.d	$r22,$r3,112(0x70)
90000000000123dc:	02c20076 	addi.d	$r22,$r3,128(0x80)
90000000000123e0:	29fe22c4 	st.d	$r4,$r22,-120(0xf88)
    bool intr_flag;
    local_intr_save(intr_flag);
90000000000123e4:	57fba7ff 	bl	-1116(0xffffba4) # 9000000000011f88 <__intr_save>
90000000000123e8:	0015008c 	move	$r12,$r4
90000000000123ec:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
    {
        assert(timer->expires > 0 && timer->proc != NULL);
90000000000123f0:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
90000000000123f4:	2880018c 	ld.w	$r12,$r12,0
90000000000123f8:	40001180 	beqz	$r12,16(0x10) # 9000000000012408 <add_timer+0x38>
90000000000123fc:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
9000000000012400:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000012404:	44001d80 	bnez	$r12,28(0x1c) # 9000000000012420 <add_timer+0x50>
9000000000012408:	1c0001e6 	pcaddu12i	$r6,15(0xf)
900000000001240c:	02d960c6 	addi.d	$r6,$r6,1624(0x658)
9000000000012410:	0281c005 	addi.w	$r5,$r0,112(0x70)
9000000000012414:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000000012418:	02d85084 	addi.d	$r4,$r4,1556(0x614)
900000000001241c:	57a867ff 	bl	-22428(0xfffa864) # 900000000000cc80 <__panic>
        assert(list_empty(&(timer->timer_link)));
9000000000012420:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
9000000000012424:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000012428:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    return list->next == list;
900000000001242c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000012430:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000012434:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000012438:	0015b1ac 	xor	$r12,$r13,$r12
900000000001243c:	0240058c 	sltui	$r12,$r12,1(0x1)
9000000000012440:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
9000000000012444:	44001d80 	bnez	$r12,28(0x1c) # 9000000000012460 <add_timer+0x90>
9000000000012448:	1c0001e6 	pcaddu12i	$r6,15(0xf)
900000000001244c:	02d960c6 	addi.d	$r6,$r6,1624(0x658)
9000000000012450:	0281c405 	addi.w	$r5,$r0,113(0x71)
9000000000012454:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000000012458:	02d75084 	addi.d	$r4,$r4,1492(0x5d4)
900000000001245c:	57a827ff 	bl	-22492(0xfffa824) # 900000000000cc80 <__panic>
9000000000012460:	1c00428c 	pcaddu12i	$r12,532(0x214)
9000000000012464:	02c0a18c 	addi.d	$r12,$r12,40(0x28)
9000000000012468:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
    return listelm->next;
900000000001246c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000012470:	28c0218c 	ld.d	$r12,$r12,8(0x8)
        list_entry_t *le = list_next(&timer_list);
9000000000012474:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
        while (le != &timer_list) {
9000000000012478:	50007c00 	b	124(0x7c) # 90000000000124f4 <add_timer+0x124>
            timer_t *next = le2timer(le, timer_link);
900000000001247c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000012480:	02ffc18c 	addi.d	$r12,$r12,-16(0xff0)
9000000000012484:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
            if (timer->expires < next->expires) {
9000000000012488:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
900000000001248c:	2880018d 	ld.w	$r13,$r12,0
9000000000012490:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000012494:	2880018c 	ld.w	$r12,$r12,0
9000000000012498:	6c0029ac 	bgeu	$r13,$r12,40(0x28) # 90000000000124c0 <add_timer+0xf0>
                next->expires -= timer->expires;
900000000001249c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000124a0:	2880018d 	ld.w	$r13,$r12,0
90000000000124a4:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
90000000000124a8:	2880018c 	ld.w	$r12,$r12,0
90000000000124ac:	001131ac 	sub.w	$r12,$r13,$r12
90000000000124b0:	0015018d 	move	$r13,$r12
90000000000124b4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000124b8:	2980018d 	st.w	$r13,$r12,0
                break;
90000000000124bc:	50004800 	b	72(0x48) # 9000000000012504 <add_timer+0x134>
            }
            timer->expires -= next->expires;
90000000000124c0:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
90000000000124c4:	2880018d 	ld.w	$r13,$r12,0
90000000000124c8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000124cc:	2880018c 	ld.w	$r12,$r12,0
90000000000124d0:	001131ac 	sub.w	$r12,$r13,$r12
90000000000124d4:	0015018d 	move	$r13,$r12
90000000000124d8:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
90000000000124dc:	2980018d 	st.w	$r13,$r12,0
90000000000124e0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000124e4:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
90000000000124e8:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
90000000000124ec:	28c0218c 	ld.d	$r12,$r12,8(0x8)
            le = list_next(le);
90000000000124f0:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
        while (le != &timer_list) {
90000000000124f4:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
90000000000124f8:	1c00428c 	pcaddu12i	$r12,532(0x214)
90000000000124fc:	02fe418c 	addi.d	$r12,$r12,-112(0xf90)
9000000000012500:	5fff7dac 	bne	$r13,$r12,-132(0x3ff7c) # 900000000001247c <add_timer+0xac>
        }
        list_add_before(le, &(timer->timer_link));
9000000000012504:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
9000000000012508:	02c0418c 	addi.d	$r12,$r12,16(0x10)
900000000001250c:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000012510:	29fee2cd 	st.d	$r13,$r22,-72(0xfb8)
9000000000012514:	29fec2cc 	st.d	$r12,$r22,-80(0xfb0)
    __list_add(elm, listelm->prev, listelm);
9000000000012518:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000001251c:	28c0018c 	ld.d	$r12,$r12,0
9000000000012520:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
9000000000012524:	29fea2cd 	st.d	$r13,$r22,-88(0xfa8)
9000000000012528:	29fe82cc 	st.d	$r12,$r22,-96(0xfa0)
900000000001252c:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000012530:	29fe62cc 	st.d	$r12,$r22,-104(0xf98)
    prev->next = next->prev = elm;
9000000000012534:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
9000000000012538:	28fea2cd 	ld.d	$r13,$r22,-88(0xfa8)
900000000001253c:	29c0018d 	st.d	$r13,$r12,0
9000000000012540:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
9000000000012544:	28c0018d 	ld.d	$r13,$r12,0
9000000000012548:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
900000000001254c:	29c0218d 	st.d	$r13,$r12,8(0x8)
    elm->next = next;
9000000000012550:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
9000000000012554:	28fe62cd 	ld.d	$r13,$r22,-104(0xf98)
9000000000012558:	29c0218d 	st.d	$r13,$r12,8(0x8)
    elm->prev = prev;
900000000001255c:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
9000000000012560:	28fe82cd 	ld.d	$r13,$r22,-96(0xfa0)
9000000000012564:	29c0018d 	st.d	$r13,$r12,0
    }
    local_intr_restore(intr_flag);
9000000000012568:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000001256c:	00150184 	move	$r4,$r12
9000000000012570:	57fa4bff 	bl	-1464(0xffffa48) # 9000000000011fb8 <__intr_restore>
}
9000000000012574:	03400000 	andi	$r0,$r0,0x0
9000000000012578:	28c1e061 	ld.d	$r1,$r3,120(0x78)
900000000001257c:	28c1c076 	ld.d	$r22,$r3,112(0x70)
9000000000012580:	02c20063 	addi.d	$r3,$r3,128(0x80)
9000000000012584:	4c000020 	jirl	$r0,$r1,0

9000000000012588 <del_timer>:

void
del_timer(timer_t *timer) {
9000000000012588:	02fe4063 	addi.d	$r3,$r3,-112(0xf90)
900000000001258c:	29c1a061 	st.d	$r1,$r3,104(0x68)
9000000000012590:	29c18076 	st.d	$r22,$r3,96(0x60)
9000000000012594:	02c1c076 	addi.d	$r22,$r3,112(0x70)
9000000000012598:	29fe62c4 	st.d	$r4,$r22,-104(0xf98)
    bool intr_flag;
    local_intr_save(intr_flag);
900000000001259c:	57f9efff 	bl	-1556(0xffff9ec) # 9000000000011f88 <__intr_save>
90000000000125a0:	0015008c 	move	$r12,$r4
90000000000125a4:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    {
        if (!list_empty(&(timer->timer_link))) {
90000000000125a8:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
90000000000125ac:	02c0418c 	addi.d	$r12,$r12,16(0x10)
90000000000125b0:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    return list->next == list;
90000000000125b4:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
90000000000125b8:	28c0218d 	ld.d	$r13,$r12,8(0x8)
90000000000125bc:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
90000000000125c0:	0015b1ac 	xor	$r12,$r13,$r12
90000000000125c4:	0240058c 	sltui	$r12,$r12,1(0x1)
90000000000125c8:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
90000000000125cc:	4400cd80 	bnez	$r12,204(0xcc) # 9000000000012698 <del_timer+0x110>
            if (timer->expires != 0) {
90000000000125d0:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
90000000000125d4:	2880018c 	ld.w	$r12,$r12,0
90000000000125d8:	40005980 	beqz	$r12,88(0x58) # 9000000000012630 <del_timer+0xa8>
                list_entry_t *le = list_next(&(timer->timer_link));
90000000000125dc:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
90000000000125e0:	02c0418c 	addi.d	$r12,$r12,16(0x10)
90000000000125e4:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
    return listelm->next;
90000000000125e8:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000125ec:	28c0218c 	ld.d	$r12,$r12,8(0x8)
90000000000125f0:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
                if (le != &timer_list) {
90000000000125f4:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
90000000000125f8:	1c00428c 	pcaddu12i	$r12,532(0x214)
90000000000125fc:	02fa418c 	addi.d	$r12,$r12,-368(0xe90)
9000000000012600:	580031ac 	beq	$r13,$r12,48(0x30) # 9000000000012630 <del_timer+0xa8>
                    timer_t *next = le2timer(le, timer_link);
9000000000012604:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000012608:	02ffc18c 	addi.d	$r12,$r12,-16(0xff0)
900000000001260c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
                    next->expires += timer->expires;
9000000000012610:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000012614:	2880018d 	ld.w	$r13,$r12,0
9000000000012618:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
900000000001261c:	2880018c 	ld.w	$r12,$r12,0
9000000000012620:	001031ac 	add.w	$r12,$r13,$r12
9000000000012624:	0015018d 	move	$r13,$r12
9000000000012628:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001262c:	2980018d 	st.w	$r13,$r12,0
                }
            }
            list_del_init(&(timer->timer_link));
9000000000012630:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
9000000000012634:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000012638:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
900000000001263c:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000012640:	29fee2cc 	st.d	$r12,$r22,-72(0xfb8)
    __list_del(listelm->prev, listelm->next);
9000000000012644:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000012648:	28c0018d 	ld.d	$r13,$r12,0
900000000001264c:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000012650:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000012654:	29fec2cd 	st.d	$r13,$r22,-80(0xfb0)
9000000000012658:	29fea2cc 	st.d	$r12,$r22,-88(0xfa8)
    prev->next = next;
900000000001265c:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
9000000000012660:	28fea2cd 	ld.d	$r13,$r22,-88(0xfa8)
9000000000012664:	29c0218d 	st.d	$r13,$r12,8(0x8)
    next->prev = prev;
9000000000012668:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000001266c:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
9000000000012670:	29c0018d 	st.d	$r13,$r12,0
9000000000012674:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000012678:	29fe82cc 	st.d	$r12,$r22,-96(0xfa0)
    elm->prev = elm->next = elm;
900000000001267c:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
9000000000012680:	28fe82cd 	ld.d	$r13,$r22,-96(0xfa0)
9000000000012684:	29c0218d 	st.d	$r13,$r12,8(0x8)
9000000000012688:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
900000000001268c:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000012690:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
9000000000012694:	29c0018d 	st.d	$r13,$r12,0
        }
    }
    local_intr_restore(intr_flag);
9000000000012698:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001269c:	00150184 	move	$r4,$r12
90000000000126a0:	57f91bff 	bl	-1768(0xffff918) # 9000000000011fb8 <__intr_restore>
}
90000000000126a4:	03400000 	andi	$r0,$r0,0x0
90000000000126a8:	28c1a061 	ld.d	$r1,$r3,104(0x68)
90000000000126ac:	28c18076 	ld.d	$r22,$r3,96(0x60)
90000000000126b0:	02c1c063 	addi.d	$r3,$r3,112(0x70)
90000000000126b4:	4c000020 	jirl	$r0,$r1,0

90000000000126b8 <run_timer_list>:

void
run_timer_list(void) {
90000000000126b8:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
90000000000126bc:	29c0e061 	st.d	$r1,$r3,56(0x38)
90000000000126c0:	29c0c076 	st.d	$r22,$r3,48(0x30)
90000000000126c4:	02c10076 	addi.d	$r22,$r3,64(0x40)
    bool intr_flag;
    local_intr_save(intr_flag);
90000000000126c8:	57f8c3ff 	bl	-1856(0xffff8c0) # 9000000000011f88 <__intr_save>
90000000000126cc:	0015008c 	move	$r12,$r4
90000000000126d0:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
90000000000126d4:	1c00428c 	pcaddu12i	$r12,532(0x214)
90000000000126d8:	02f6d18c 	addi.d	$r12,$r12,-588(0xdb4)
90000000000126dc:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
    return listelm->next;
90000000000126e0:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000126e4:	28c0218c 	ld.d	$r12,$r12,8(0x8)
    {
        list_entry_t *le = list_next(&timer_list);
90000000000126e8:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
        if (le != &timer_list) {
90000000000126ec:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
90000000000126f0:	1c00428c 	pcaddu12i	$r12,532(0x214)
90000000000126f4:	02f6618c 	addi.d	$r12,$r12,-616(0xd98)
90000000000126f8:	580105ac 	beq	$r13,$r12,260(0x104) # 90000000000127fc <run_timer_list+0x144>
            timer_t *timer = le2timer(le, timer_link);
90000000000126fc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000012700:	02ffc18c 	addi.d	$r12,$r12,-16(0xff0)
9000000000012704:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
            assert(timer->expires != 0);
9000000000012708:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001270c:	2880018c 	ld.w	$r12,$r12,0
9000000000012710:	44001d80 	bnez	$r12,28(0x1c) # 900000000001272c <run_timer_list+0x74>
9000000000012714:	1c0001e6 	pcaddu12i	$r6,15(0xf)
9000000000012718:	02cf10c6 	addi.d	$r6,$r6,964(0x3c4)
900000000001271c:	02827005 	addi.w	$r5,$r0,156(0x9c)
9000000000012720:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000000012724:	02cc2084 	addi.d	$r4,$r4,776(0x308)
9000000000012728:	57a55bff 	bl	-23208(0xfffa558) # 900000000000cc80 <__panic>
            timer->expires --;
900000000001272c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000012730:	2880018c 	ld.w	$r12,$r12,0
9000000000012734:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
9000000000012738:	0015018d 	move	$r13,$r12
900000000001273c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000012740:	2980018d 	st.w	$r13,$r12,0
            while (timer->expires == 0) {
9000000000012744:	5000a400 	b	164(0xa4) # 90000000000127e8 <run_timer_list+0x130>
9000000000012748:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001274c:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
9000000000012750:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000012754:	28c0218c 	ld.d	$r12,$r12,8(0x8)
                le = list_next(le);
9000000000012758:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
                struct proc_struct *proc = timer->proc;
900000000001275c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000012760:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000012764:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
                if (proc->wait_state != 0) {
9000000000012768:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001276c:	2883d18c 	ld.w	$r12,$r12,244(0xf4)
9000000000012770:	40002980 	beqz	$r12,40(0x28) # 9000000000012798 <run_timer_list+0xe0>
                    assert(proc->wait_state & WT_INTERRUPTED);
9000000000012774:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000012778:	2883d18c 	ld.w	$r12,$r12,244(0xf4)
900000000001277c:	60004180 	blt	$r12,$r0,64(0x40) # 90000000000127bc <run_timer_list+0x104>
9000000000012780:	1c0001e6 	pcaddu12i	$r6,15(0xf)
9000000000012784:	02ce00c6 	addi.d	$r6,$r6,896(0x380)
9000000000012788:	02828805 	addi.w	$r5,$r0,162(0xa2)
900000000001278c:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000000012790:	02ca7084 	addi.d	$r4,$r4,668(0x29c)
9000000000012794:	57a4efff 	bl	-23316(0xfffa4ec) # 900000000000cc80 <__panic>
                }
                else {
                    warn("process %d's wait_state == 0.\n", proc->pid);
9000000000012798:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001279c:	2880118c 	ld.w	$r12,$r12,4(0x4)
90000000000127a0:	00150187 	move	$r7,$r12
90000000000127a4:	1c0001e6 	pcaddu12i	$r6,15(0xf)
90000000000127a8:	02ce50c6 	addi.d	$r6,$r6,916(0x394)
90000000000127ac:	02829405 	addi.w	$r5,$r0,165(0xa5)
90000000000127b0:	1c0001e4 	pcaddu12i	$r4,15(0xf)
90000000000127b4:	02c9e084 	addi.d	$r4,$r4,632(0x278)
90000000000127b8:	57a57bff 	bl	-23176(0xfffa578) # 900000000000cd30 <__warn>
                }
                wakeup_proc(proc);
90000000000127bc:	28ff42c4 	ld.d	$r4,$r22,-48(0xfd0)
90000000000127c0:	57fa67ff 	bl	-1436(0xffffa64) # 9000000000012224 <wakeup_proc>
                del_timer(timer);
90000000000127c4:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
90000000000127c8:	57fdc3ff 	bl	-576(0xffffdc0) # 9000000000012588 <del_timer>
                if (le == &timer_list) {
90000000000127cc:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
90000000000127d0:	1c00428c 	pcaddu12i	$r12,532(0x214)
90000000000127d4:	02f2e18c 	addi.d	$r12,$r12,-840(0xcb8)
90000000000127d8:	580021ac 	beq	$r13,$r12,32(0x20) # 90000000000127f8 <run_timer_list+0x140>
                    break;
                }
                timer = le2timer(le, timer_link);
90000000000127dc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000127e0:	02ffc18c 	addi.d	$r12,$r12,-16(0xff0)
90000000000127e4:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
            while (timer->expires == 0) {
90000000000127e8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000127ec:	2880018c 	ld.w	$r12,$r12,0
90000000000127f0:	43ff599f 	beqz	$r12,-168(0x7fff58) # 9000000000012748 <run_timer_list+0x90>
90000000000127f4:	50000800 	b	8(0x8) # 90000000000127fc <run_timer_list+0x144>
                    break;
90000000000127f8:	03400000 	andi	$r0,$r0,0x0
            }
        }
        sched_class_proc_tick(current);
90000000000127fc:	1c0041ec 	pcaddu12i	$r12,527(0x20f)
9000000000012800:	28fe118c 	ld.d	$r12,$r12,-124(0xf84)
9000000000012804:	28c0018c 	ld.d	$r12,$r12,0
9000000000012808:	00150184 	move	$r4,$r12
900000000001280c:	57f8dbff 	bl	-1832(0xffff8d8) # 90000000000120e4 <sched_class_proc_tick>
    }
    local_intr_restore(intr_flag);
9000000000012810:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000012814:	00150184 	move	$r4,$r12
9000000000012818:	57f7a3ff 	bl	-2144(0xffff7a0) # 9000000000011fb8 <__intr_restore>
}
900000000001281c:	03400000 	andi	$r0,$r0,0x0
9000000000012820:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000000012824:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000000012828:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000001282c:	4c000020 	jirl	$r0,$r1,0

9000000000012830 <fence_i>:
static void fence_i(void *va_start, int size) {
9000000000012830:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000012834:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000012838:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000001283c:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000012840:	001500ac 	move	$r12,$r5
9000000000012844:	0040818c 	slli.w	$r12,$r12,0x0
9000000000012848:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
900000000001284c:	38720000 	dbar	0x0
    void *va_end = va_start + size;
9000000000012850:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000012854:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000012858:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001285c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
9000000000012860:	50002000 	b	32(0x20) # 9000000000012880 <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
9000000000012864:	06000189 	cacop	0x9,$r12,0
9000000000012868:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
900000000001286c:	06000188 	cacop	0x8,$r12,0
9000000000012870:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
9000000000012874:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000012878:	02c0418c 	addi.d	$r12,$r12,16(0x10)
900000000001287c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
9000000000012880:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000012884:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000012888:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 9000000000012864 <fence_i+0x34>
900000000001288c:	38728000 	ibar	0x0
}
9000000000012890:	03400000 	andi	$r0,$r0,0x0
9000000000012894:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000012898:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001289c:	4c000020 	jirl	$r0,$r1,0

90000000000128a0 <sys_exit>:
#include <sysfile.h>

extern volatile int ticks;

static int
sys_exit(uint64_t arg[]) {
90000000000128a0:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000000128a4:	29c0a061 	st.d	$r1,$r3,40(0x28)
90000000000128a8:	29c08076 	st.d	$r22,$r3,32(0x20)
90000000000128ac:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000000128b0:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    int error_code = (int)arg[0];
90000000000128b4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000128b8:	28c0018c 	ld.d	$r12,$r12,0
90000000000128bc:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    return do_exit(error_code);
90000000000128c0:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000128c4:	00150184 	move	$r4,$r12
90000000000128c8:	57d4d3ff 	bl	-11056(0xfffd4d0) # 900000000000fd98 <do_exit>
90000000000128cc:	0015008c 	move	$r12,$r4
}
90000000000128d0:	00150184 	move	$r4,$r12
90000000000128d4:	28c0a061 	ld.d	$r1,$r3,40(0x28)
90000000000128d8:	28c08076 	ld.d	$r22,$r3,32(0x20)
90000000000128dc:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000000128e0:	4c000020 	jirl	$r0,$r1,0

90000000000128e4 <sys_fork>:

static int
sys_fork(uint64_t arg[]) {
90000000000128e4:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000000128e8:	29c0a061 	st.d	$r1,$r3,40(0x28)
90000000000128ec:	29c08076 	st.d	$r22,$r3,32(0x20)
90000000000128f0:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000000128f4:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    struct trapframe *tf = current->tf;
90000000000128f8:	1c0041ec 	pcaddu12i	$r12,527(0x20f)
90000000000128fc:	28fa218c 	ld.d	$r12,$r12,-376(0xe88)
9000000000012900:	28c0018c 	ld.d	$r12,$r12,0
9000000000012904:	28c2618c 	ld.d	$r12,$r12,152(0x98)
9000000000012908:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    uintptr_t stack = tf->tf_regs.reg_r[LOONGARCH_REG_SP];
900000000001290c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000012910:	28c0818c 	ld.d	$r12,$r12,32(0x20)
9000000000012914:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    return do_fork(0, stack, tf);
9000000000012918:	28ffa2c6 	ld.d	$r6,$r22,-24(0xfe8)
900000000001291c:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
9000000000012920:	00150004 	move	$r4,$r0
9000000000012924:	57d323ff 	bl	-11488(0xfffd320) # 900000000000fc44 <do_fork>
9000000000012928:	0015008c 	move	$r12,$r4
}
900000000001292c:	00150184 	move	$r4,$r12
9000000000012930:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000012934:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000012938:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001293c:	4c000020 	jirl	$r0,$r1,0

9000000000012940 <sys_wait>:

static int
sys_wait(uint64_t arg[]) {
9000000000012940:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000012944:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000012948:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000001294c:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000012950:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    int pid = (int)arg[0];
9000000000012954:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000012958:	28c0018c 	ld.d	$r12,$r12,0
900000000001295c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    int *store = (int *)arg[1];
9000000000012960:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000012964:	02c0218c 	addi.d	$r12,$r12,8(0x8)
9000000000012968:	28c0018c 	ld.d	$r12,$r12,0
900000000001296c:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    return do_wait(pid, store);
9000000000012970:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000012974:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
9000000000012978:	00150184 	move	$r4,$r12
900000000001297c:	57e65bff 	bl	-6568(0xfffe658) # 9000000000010fd4 <do_wait>
9000000000012980:	0015008c 	move	$r12,$r4
}
9000000000012984:	00150184 	move	$r4,$r12
9000000000012988:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000001298c:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000012990:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000012994:	4c000020 	jirl	$r0,$r1,0

9000000000012998 <sys_exec>:
    size_t size = (size_t)arg[3];
    return do_execve(name, len, binary, size);
}
#else
static int
sys_exec(uint64_t arg[]) {
9000000000012998:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000001299c:	29c0e061 	st.d	$r1,$r3,56(0x38)
90000000000129a0:	29c0c076 	st.d	$r22,$r3,48(0x30)
90000000000129a4:	02c10076 	addi.d	$r22,$r3,64(0x40)
90000000000129a8:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
    const char *name = (const char *)arg[0];
90000000000129ac:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000129b0:	28c0018c 	ld.d	$r12,$r12,0
90000000000129b4:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    int argc = (int)arg[1];
90000000000129b8:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000129bc:	02c0218c 	addi.d	$r12,$r12,8(0x8)
90000000000129c0:	28c0018c 	ld.d	$r12,$r12,0
90000000000129c4:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
    const char **argv = (const char **)arg[2];
90000000000129c8:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000129cc:	02c0418c 	addi.d	$r12,$r12,16(0x10)
90000000000129d0:	28c0018c 	ld.d	$r12,$r12,0
90000000000129d4:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    return do_execve(name, argc, argv);
90000000000129d8:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
90000000000129dc:	28ff62c6 	ld.d	$r6,$r22,-40(0xfd8)
90000000000129e0:	00150185 	move	$r5,$r12
90000000000129e4:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
90000000000129e8:	57e32bff 	bl	-7384(0xfffe328) # 9000000000010d10 <do_execve>
90000000000129ec:	0015008c 	move	$r12,$r4
}
90000000000129f0:	00150184 	move	$r4,$r12
90000000000129f4:	28c0e061 	ld.d	$r1,$r3,56(0x38)
90000000000129f8:	28c0c076 	ld.d	$r22,$r3,48(0x30)
90000000000129fc:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000012a00:	4c000020 	jirl	$r0,$r1,0

9000000000012a04 <sys_yield>:
#endif

static int
sys_yield(uint64_t arg[]) {
9000000000012a04:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000012a08:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000012a0c:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000012a10:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000012a14:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    return do_yield();
9000000000012a18:	57e58bff 	bl	-6776(0xfffe588) # 9000000000010fa0 <do_yield>
9000000000012a1c:	0015008c 	move	$r12,$r4
}
9000000000012a20:	00150184 	move	$r4,$r12
9000000000012a24:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000012a28:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000012a2c:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000012a30:	4c000020 	jirl	$r0,$r1,0

9000000000012a34 <sys_kill>:

static int
sys_kill(uint64_t arg[]) {
9000000000012a34:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000012a38:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000012a3c:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000012a40:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000012a44:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    int pid = (int)arg[0];
9000000000012a48:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000012a4c:	28c0018c 	ld.d	$r12,$r12,0
9000000000012a50:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    return do_kill(pid);
9000000000012a54:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000012a58:	00150184 	move	$r4,$r12
9000000000012a5c:	57e7bfff 	bl	-6212(0xfffe7bc) # 9000000000011218 <do_kill>
9000000000012a60:	0015008c 	move	$r12,$r4
}
9000000000012a64:	00150184 	move	$r4,$r12
9000000000012a68:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000012a6c:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000012a70:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000012a74:	4c000020 	jirl	$r0,$r1,0

9000000000012a78 <sys_getpid>:

static int
sys_getpid(uint64_t arg[]) {
9000000000012a78:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000012a7c:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000012a80:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000012a84:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    return current->pid;
9000000000012a88:	1c0041ec 	pcaddu12i	$r12,527(0x20f)
9000000000012a8c:	28f3e18c 	ld.d	$r12,$r12,-776(0xcf8)
9000000000012a90:	28c0018c 	ld.d	$r12,$r12,0
9000000000012a94:	2880118c 	ld.w	$r12,$r12,4(0x4)
}
9000000000012a98:	00150184 	move	$r4,$r12
9000000000012a9c:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000012aa0:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000012aa4:	4c000020 	jirl	$r0,$r1,0

9000000000012aa8 <sys_putc>:

static int
sys_putc(uint64_t arg[]) {
9000000000012aa8:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000012aac:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000012ab0:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000012ab4:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000012ab8:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    int c = (int)arg[0];
9000000000012abc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000012ac0:	28c0018c 	ld.d	$r12,$r12,0
9000000000012ac4:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    kputchar(c);
9000000000012ac8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000012acc:	00150184 	move	$r4,$r12
9000000000012ad0:	57157fff 	bl	-60036(0xfff157c) # 900000000000404c <kputchar>
    return 0;
9000000000012ad4:	0015000c 	move	$r12,$r0
}
9000000000012ad8:	00150184 	move	$r4,$r12
9000000000012adc:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000012ae0:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000012ae4:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000012ae8:	4c000020 	jirl	$r0,$r1,0

9000000000012aec <sys_pgdir>:

static int
sys_pgdir(uint64_t arg[]) {
9000000000012aec:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000012af0:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000012af4:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000012af8:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000012afc:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    print_pgdir();
9000000000012b00:	577d87ff 	bl	-33404(0xfff7d84) # 900000000000a884 <print_pgdir>
    return 0;
9000000000012b04:	0015000c 	move	$r12,$r0
}
9000000000012b08:	00150184 	move	$r4,$r12
9000000000012b0c:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000012b10:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000012b14:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000012b18:	4c000020 	jirl	$r0,$r1,0

9000000000012b1c <sys_gettime>:

static int
sys_gettime(uint64_t arg[]) {
9000000000012b1c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000012b20:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000012b24:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000012b28:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    return (int)ticks;
9000000000012b2c:	1c0041ec 	pcaddu12i	$r12,527(0x20f)
9000000000012b30:	28f2318c 	ld.d	$r12,$r12,-884(0xc8c)
9000000000012b34:	2880018c 	ld.w	$r12,$r12,0
}
9000000000012b38:	00150184 	move	$r4,$r12
9000000000012b3c:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000012b40:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000012b44:	4c000020 	jirl	$r0,$r1,0

9000000000012b48 <sys_sleep>:

static int
sys_sleep(uint64_t arg[]) {
9000000000012b48:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000012b4c:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000012b50:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000012b54:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000012b58:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    unsigned int time = (unsigned int)arg[0];
9000000000012b5c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000012b60:	28c0018c 	ld.d	$r12,$r12,0
9000000000012b64:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    return do_sleep(time);
9000000000012b68:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000012b6c:	00150184 	move	$r4,$r12
9000000000012b70:	57ed8bff 	bl	-4728(0xfffed88) # 90000000000118f8 <do_sleep>
9000000000012b74:	0015008c 	move	$r12,$r4
}
9000000000012b78:	00150184 	move	$r4,$r12
9000000000012b7c:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000012b80:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000012b84:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000012b88:	4c000020 	jirl	$r0,$r1,0

9000000000012b8c <sys_open>:

static int
sys_open(uint64_t arg[]) {
9000000000012b8c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000012b90:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000012b94:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000012b98:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000012b9c:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    const char *path = (const char *)arg[0];
9000000000012ba0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000012ba4:	28c0018c 	ld.d	$r12,$r12,0
9000000000012ba8:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    uint64_t open_flags = (uint64_t)arg[1];
9000000000012bac:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000012bb0:	02c0218c 	addi.d	$r12,$r12,8(0x8)
9000000000012bb4:	28c0018c 	ld.d	$r12,$r12,0
9000000000012bb8:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    return sysfile_open(path, open_flags);
9000000000012bbc:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
9000000000012bc0:	00150185 	move	$r5,$r12
9000000000012bc4:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000012bc8:	54238000 	bl	9088(0x2380) # 9000000000014f48 <sysfile_open>
9000000000012bcc:	0015008c 	move	$r12,$r4
}
9000000000012bd0:	00150184 	move	$r4,$r12
9000000000012bd4:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000012bd8:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000012bdc:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000012be0:	4c000020 	jirl	$r0,$r1,0

9000000000012be4 <sys_close>:

static int
sys_close(uint64_t arg[]) {
9000000000012be4:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000012be8:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000012bec:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000012bf0:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000012bf4:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    int fd = (int)arg[0];
9000000000012bf8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000012bfc:	28c0018c 	ld.d	$r12,$r12,0
9000000000012c00:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    return sysfile_close(fd);
9000000000012c04:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000012c08:	00150184 	move	$r4,$r12
9000000000012c0c:	5423c400 	bl	9156(0x23c4) # 9000000000014fd0 <sysfile_close>
9000000000012c10:	0015008c 	move	$r12,$r4
}
9000000000012c14:	00150184 	move	$r4,$r12
9000000000012c18:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000012c1c:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000012c20:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000012c24:	4c000020 	jirl	$r0,$r1,0

9000000000012c28 <sys_read>:

static int
sys_read(uint64_t arg[]) {
9000000000012c28:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000012c2c:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000012c30:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000012c34:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000012c38:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
    int fd = (int)arg[0];
9000000000012c3c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000012c40:	28c0018c 	ld.d	$r12,$r12,0
9000000000012c44:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    void *base = (void *)arg[1];
9000000000012c48:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000012c4c:	02c0218c 	addi.d	$r12,$r12,8(0x8)
9000000000012c50:	28c0018c 	ld.d	$r12,$r12,0
9000000000012c54:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    size_t len = (size_t)arg[2];
9000000000012c58:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000012c5c:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000012c60:	28c0018c 	ld.d	$r12,$r12,0
9000000000012c64:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    static int time=1;
    // kprintf("times is %d",time++);
    // kprintf("fd=%d,base=%lx,len=%d",fd,base,len);
    return sysfile_read(fd, base, len);
9000000000012c68:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000012c6c:	28ff62c6 	ld.d	$r6,$r22,-40(0xfd8)
9000000000012c70:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
9000000000012c74:	00150184 	move	$r4,$r12
9000000000012c78:	54239800 	bl	9112(0x2398) # 9000000000015010 <sysfile_read>
9000000000012c7c:	0015008c 	move	$r12,$r4
}
9000000000012c80:	00150184 	move	$r4,$r12
9000000000012c84:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000000012c88:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000000012c8c:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000012c90:	4c000020 	jirl	$r0,$r1,0

9000000000012c94 <sys_write>:

static int
sys_write(uint64_t arg[]) {
9000000000012c94:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000012c98:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000012c9c:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000012ca0:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000012ca4:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
    int fd = (int)arg[0];
9000000000012ca8:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000012cac:	28c0018c 	ld.d	$r12,$r12,0
9000000000012cb0:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    void *base = (void *)arg[1];
9000000000012cb4:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000012cb8:	02c0218c 	addi.d	$r12,$r12,8(0x8)
9000000000012cbc:	28c0018c 	ld.d	$r12,$r12,0
9000000000012cc0:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    size_t len = (size_t)arg[2];
9000000000012cc4:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000012cc8:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000012ccc:	28c0018c 	ld.d	$r12,$r12,0
9000000000012cd0:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    return sysfile_write(fd, base, len);
9000000000012cd4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000012cd8:	28ff62c6 	ld.d	$r6,$r22,-40(0xfd8)
9000000000012cdc:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
9000000000012ce0:	00150184 	move	$r4,$r12
9000000000012ce4:	5424f400 	bl	9460(0x24f4) # 90000000000151d8 <sysfile_write>
9000000000012ce8:	0015008c 	move	$r12,$r4
}
9000000000012cec:	00150184 	move	$r4,$r12
9000000000012cf0:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000000012cf4:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000000012cf8:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000012cfc:	4c000020 	jirl	$r0,$r1,0

9000000000012d00 <sys_seek>:

static int
sys_seek(uint64_t arg[]) {
9000000000012d00:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000012d04:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000012d08:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000012d0c:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000012d10:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
    int fd = (int)arg[0];
9000000000012d14:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000012d18:	28c0018c 	ld.d	$r12,$r12,0
9000000000012d1c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    off_t pos = (off_t)arg[1];
9000000000012d20:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000012d24:	02c0218c 	addi.d	$r12,$r12,8(0x8)
9000000000012d28:	28c0018c 	ld.d	$r12,$r12,0
9000000000012d2c:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    int whence = (int)arg[2];
9000000000012d30:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000012d34:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000012d38:	28c0018c 	ld.d	$r12,$r12,0
9000000000012d3c:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
    return sysfile_seek(fd, pos, whence);
9000000000012d40:	28bf72cd 	ld.w	$r13,$r22,-36(0xfdc)
9000000000012d44:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000012d48:	001501a6 	move	$r6,$r13
9000000000012d4c:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
9000000000012d50:	00150184 	move	$r4,$r12
9000000000012d54:	54264c00 	bl	9804(0x264c) # 90000000000153a0 <sysfile_seek>
9000000000012d58:	0015008c 	move	$r12,$r4
}
9000000000012d5c:	00150184 	move	$r4,$r12
9000000000012d60:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000000012d64:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000000012d68:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000012d6c:	4c000020 	jirl	$r0,$r1,0

9000000000012d70 <sys_fstat>:

static int
sys_fstat(uint64_t arg[]) {
9000000000012d70:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000012d74:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000012d78:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000012d7c:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000012d80:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    int fd = (int)arg[0];
9000000000012d84:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000012d88:	28c0018c 	ld.d	$r12,$r12,0
9000000000012d8c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    struct stat *stat = (struct stat *)arg[1];
9000000000012d90:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000012d94:	02c0218c 	addi.d	$r12,$r12,8(0x8)
9000000000012d98:	28c0018c 	ld.d	$r12,$r12,0
9000000000012d9c:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    return sysfile_fstat(fd, stat);
9000000000012da0:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000012da4:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
9000000000012da8:	00150184 	move	$r4,$r12
9000000000012dac:	54265000 	bl	9808(0x2650) # 90000000000153fc <sysfile_fstat>
9000000000012db0:	0015008c 	move	$r12,$r4
}
9000000000012db4:	00150184 	move	$r4,$r12
9000000000012db8:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000012dbc:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000012dc0:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000012dc4:	4c000020 	jirl	$r0,$r1,0

9000000000012dc8 <sys_fsync>:

static int
sys_fsync(uint64_t arg[]) {
9000000000012dc8:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000012dcc:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000012dd0:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000012dd4:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000012dd8:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    int fd = (int)arg[0];
9000000000012ddc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000012de0:	28c0018c 	ld.d	$r12,$r12,0
9000000000012de4:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    return sysfile_fsync(fd);
9000000000012de8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000012dec:	00150184 	move	$r4,$r12
9000000000012df0:	5426bc00 	bl	9916(0x26bc) # 90000000000154ac <sysfile_fsync>
9000000000012df4:	0015008c 	move	$r12,$r4
}
9000000000012df8:	00150184 	move	$r4,$r12
9000000000012dfc:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000012e00:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000012e04:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000012e08:	4c000020 	jirl	$r0,$r1,0

9000000000012e0c <sys_chdir>:

static int 
sys_chdir(uint64_t arg[]) {
9000000000012e0c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000012e10:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000012e14:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000012e18:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000012e1c:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    const char *path = (const char *)arg[0];
9000000000012e20:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000012e24:	28c0018c 	ld.d	$r12,$r12,0
9000000000012e28:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    return sysfile_chdir(path);
9000000000012e2c:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000012e30:	5426bc00 	bl	9916(0x26bc) # 90000000000154ec <sysfile_chdir>
9000000000012e34:	0015008c 	move	$r12,$r4
}
9000000000012e38:	00150184 	move	$r4,$r12
9000000000012e3c:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000012e40:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000012e44:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000012e48:	4c000020 	jirl	$r0,$r1,0

9000000000012e4c <sys_getcwd>:

static int
sys_getcwd(uint64_t arg[]) {
9000000000012e4c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000012e50:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000012e54:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000012e58:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000012e5c:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    char *buf = (char *)arg[0];
9000000000012e60:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000012e64:	28c0018c 	ld.d	$r12,$r12,0
9000000000012e68:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    size_t len = (size_t)arg[1];
9000000000012e6c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000012e70:	02c0218c 	addi.d	$r12,$r12,8(0x8)
9000000000012e74:	28c0018c 	ld.d	$r12,$r12,0
9000000000012e78:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    return sysfile_getcwd(buf, len);
9000000000012e7c:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
9000000000012e80:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000012e84:	5428d000 	bl	10448(0x28d0) # 9000000000015754 <sysfile_getcwd>
9000000000012e88:	0015008c 	move	$r12,$r4
}
9000000000012e8c:	00150184 	move	$r4,$r12
9000000000012e90:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000012e94:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000012e98:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000012e9c:	4c000020 	jirl	$r0,$r1,0

9000000000012ea0 <sys_getdirentry>:


static int
sys_getdirentry(uint64_t arg[]) {
9000000000012ea0:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000012ea4:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000012ea8:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000012eac:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000012eb0:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    int fd = (int)arg[0];
9000000000012eb4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000012eb8:	28c0018c 	ld.d	$r12,$r12,0
9000000000012ebc:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    struct dirent *direntp = (struct dirent *)arg[1];
9000000000012ec0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000012ec4:	02c0218c 	addi.d	$r12,$r12,8(0x8)
9000000000012ec8:	28c0018c 	ld.d	$r12,$r12,0
9000000000012ecc:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    return sysfile_getdirentry(fd, direntp);
9000000000012ed0:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000012ed4:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
9000000000012ed8:	00150184 	move	$r4,$r12
9000000000012edc:	54293000 	bl	10544(0x2930) # 900000000001580c <sysfile_getdirentry>
9000000000012ee0:	0015008c 	move	$r12,$r4
}
9000000000012ee4:	00150184 	move	$r4,$r12
9000000000012ee8:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000012eec:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000012ef0:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000012ef4:	4c000020 	jirl	$r0,$r1,0

9000000000012ef8 <sys_dup>:

static int
sys_dup(uint64_t arg[]) {
9000000000012ef8:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000012efc:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000012f00:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000012f04:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000012f08:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    int fd1 = (int)arg[0];
9000000000012f0c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000012f10:	28c0018c 	ld.d	$r12,$r12,0
9000000000012f14:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    int fd2 = (int)arg[1];
9000000000012f18:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000012f1c:	02c0218c 	addi.d	$r12,$r12,8(0x8)
9000000000012f20:	28c0018c 	ld.d	$r12,$r12,0
9000000000012f24:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
    return sysfile_dup(fd1, fd2);
9000000000012f28:	28bfa2cd 	ld.w	$r13,$r22,-24(0xfe8)
9000000000012f2c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000012f30:	001501a5 	move	$r5,$r13
9000000000012f34:	00150184 	move	$r4,$r12
9000000000012f38:	5429ec00 	bl	10732(0x29ec) # 9000000000015924 <sysfile_dup>
9000000000012f3c:	0015008c 	move	$r12,$r4
}
9000000000012f40:	00150184 	move	$r4,$r12
9000000000012f44:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000012f48:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000012f4c:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000012f50:	4c000020 	jirl	$r0,$r1,0

9000000000012f54 <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
9000000000012f54:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000012f58:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000012f5c:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000012f60:	02c10076 	addi.d	$r22,$r3,64(0x40)
  assert(current != NULL);
9000000000012f64:	1c0041ec 	pcaddu12i	$r12,527(0x20f)
9000000000012f68:	28e0718c 	ld.d	$r12,$r12,-2020(0x81c)
9000000000012f6c:	28c0018c 	ld.d	$r12,$r12,0
9000000000012f70:	44001d80 	bnez	$r12,28(0x1c) # 9000000000012f8c <syscall+0x38>
9000000000012f74:	1c0001e6 	pcaddu12i	$r6,15(0xf)
9000000000012f78:	02ef90c6 	addi.d	$r6,$r6,-1052(0xbe4)
9000000000012f7c:	02832c05 	addi.w	$r5,$r0,203(0xcb)
9000000000012f80:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000000012f84:	02f00084 	addi.d	$r4,$r4,-1024(0xc00)
9000000000012f88:	579cfbff 	bl	-25352(0xfff9cf8) # 900000000000cc80 <__panic>
  struct trapframe *tf = current->tf;
9000000000012f8c:	1c0041cc 	pcaddu12i	$r12,526(0x20e)
9000000000012f90:	28dfd18c 	ld.d	$r12,$r12,2036(0x7f4)
9000000000012f94:	28c0018c 	ld.d	$r12,$r12,0
9000000000012f98:	28c2618c 	ld.d	$r12,$r12,152(0x98)
9000000000012f9c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
  uint64_t arg[4];
  int num = tf->tf_regs.reg_r[LOONGARCH_REG_A7];
9000000000012fa0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000012fa4:	28c1818c 	ld.d	$r12,$r12,96(0x60)
9000000000012fa8:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
  num -= SYSCALL_BASE;
9000000000012fac:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000012fb0:	02be018c 	addi.w	$r12,$r12,-128(0xf80)
9000000000012fb4:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
  //kprintf("$ %d %d\n",current->pid, num);
  if (num >= 0 && num < NUM_SYSCALLS) {
9000000000012fb8:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000012fbc:	60009980 	blt	$r12,$r0,152(0x98) # 9000000000013054 <syscall+0x100>
9000000000012fc0:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000012fc4:	0015018d 	move	$r13,$r12
9000000000012fc8:	0282080c 	addi.w	$r12,$r0,130(0x82)
9000000000012fcc:	6800898d 	bltu	$r12,$r13,136(0x88) # 9000000000013054 <syscall+0x100>
    if (syscalls[num] != NULL) {
9000000000012fd0:	1c00022d 	pcaddu12i	$r13,17(0x11)
9000000000012fd4:	02c381ad 	addi.d	$r13,$r13,224(0xe0)
9000000000012fd8:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000012fdc:	00410d8c 	slli.d	$r12,$r12,0x3
9000000000012fe0:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000012fe4:	28c0018c 	ld.d	$r12,$r12,0
9000000000012fe8:	40006d80 	beqz	$r12,108(0x6c) # 9000000000013054 <syscall+0x100>
      arg[0] = tf->tf_regs.reg_r[LOONGARCH_REG_A0];
9000000000012fec:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000012ff0:	28c0a18c 	ld.d	$r12,$r12,40(0x28)
9000000000012ff4:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
      arg[1] = tf->tf_regs.reg_r[LOONGARCH_REG_A1];
9000000000012ff8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000012ffc:	28c0c18c 	ld.d	$r12,$r12,48(0x30)
9000000000013000:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
      arg[2] = tf->tf_regs.reg_r[LOONGARCH_REG_A2];
9000000000013004:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000013008:	28c0e18c 	ld.d	$r12,$r12,56(0x38)
900000000001300c:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
      arg[3] = tf->tf_regs.reg_r[LOONGARCH_REG_A3];
9000000000013010:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000013014:	28c1018c 	ld.d	$r12,$r12,64(0x40)
9000000000013018:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
      tf->tf_regs.reg_r[LOONGARCH_REG_A7] = syscalls[num](arg);
900000000001301c:	1c00022d 	pcaddu12i	$r13,17(0x11)
9000000000013020:	02c251ad 	addi.d	$r13,$r13,148(0x94)
9000000000013024:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000013028:	00410d8c 	slli.d	$r12,$r12,0x3
900000000001302c:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000013030:	28c0018c 	ld.d	$r12,$r12,0
9000000000013034:	02ff02cd 	addi.d	$r13,$r22,-64(0xfc0)
9000000000013038:	001501a4 	move	$r4,$r13
900000000001303c:	4c000181 	jirl	$r1,$r12,0
9000000000013040:	0015008c 	move	$r12,$r4
9000000000013044:	0015018d 	move	$r13,$r12
9000000000013048:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001304c:	29c1818d 	st.d	$r13,$r12,96(0x60)
      // a0 and v0 are the same register in loongarch64, so continue to use v0 will cause arg[0] being coverd by return value when sys_exec
      return ;
9000000000013050:	50005400 	b	84(0x54) # 90000000000130a4 <syscall+0x150>
    }
  }
  print_trapframe(tf);
9000000000013054:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000013058:	571c1fff 	bl	-58340(0xfff1c1c) # 9000000000004c74 <print_trapframe>
  panic("undefined syscall %d, pid = %d, name = %s.\n",
900000000001305c:	1c0041cc 	pcaddu12i	$r12,526(0x20e)
9000000000013060:	28dc918c 	ld.d	$r12,$r12,1828(0x724)
9000000000013064:	28c0018c 	ld.d	$r12,$r12,0
9000000000013068:	2880118d 	ld.w	$r13,$r12,4(0x4)
900000000001306c:	1c0041cc 	pcaddu12i	$r12,526(0x20e)
9000000000013070:	28dc518c 	ld.d	$r12,$r12,1812(0x714)
9000000000013074:	28c0018c 	ld.d	$r12,$r12,0
9000000000013078:	02c2b18e 	addi.d	$r14,$r12,172(0xac)
900000000001307c:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000013080:	001501c9 	move	$r9,$r14
9000000000013084:	001501a8 	move	$r8,$r13
9000000000013088:	00150187 	move	$r7,$r12
900000000001308c:	1c0001e6 	pcaddu12i	$r6,15(0xf)
9000000000013090:	02ec30c6 	addi.d	$r6,$r6,-1268(0xb0c)
9000000000013094:	02837805 	addi.w	$r5,$r0,222(0xde)
9000000000013098:	1c0001e4 	pcaddu12i	$r4,15(0xf)
900000000001309c:	02eba084 	addi.d	$r4,$r4,-1304(0xae8)
90000000000130a0:	579be3ff 	bl	-25632(0xfff9be0) # 900000000000cc80 <__panic>
      num, current->pid, current->name);
}
90000000000130a4:	28c0e061 	ld.d	$r1,$r3,56(0x38)
90000000000130a8:	28c0c076 	ld.d	$r22,$r3,48(0x30)
90000000000130ac:	02c10063 	addi.d	$r3,$r3,64(0x40)
90000000000130b0:	4c000020 	jirl	$r0,$r1,0

90000000000130b4 <fence_i>:
static void fence_i(void *va_start, int size) {
90000000000130b4:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000000130b8:	29c0a076 	st.d	$r22,$r3,40(0x28)
90000000000130bc:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000000130c0:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
90000000000130c4:	001500ac 	move	$r12,$r5
90000000000130c8:	0040818c 	slli.w	$r12,$r12,0x0
90000000000130cc:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
90000000000130d0:	38720000 	dbar	0x0
    void *va_end = va_start + size;
90000000000130d4:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
90000000000130d8:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
90000000000130dc:	0010b1ac 	add.d	$r12,$r13,$r12
90000000000130e0:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
90000000000130e4:	50002000 	b	32(0x20) # 9000000000013104 <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
90000000000130e8:	06000189 	cacop	0x9,$r12,0
90000000000130ec:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
90000000000130f0:	06000188 	cacop	0x8,$r12,0
90000000000130f4:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
90000000000130f8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000130fc:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000013100:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
9000000000013104:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000013108:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001310c:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 90000000000130e8 <fence_i+0x34>
9000000000013110:	38728000 	ibar	0x0
}
9000000000013114:	03400000 	andi	$r0,$r0,0x0
9000000000013118:	28c0a076 	ld.d	$r22,$r3,40(0x28)
900000000001311c:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000013120:	4c000020 	jirl	$r0,$r1,0

9000000000013124 <__intr_save>:
{
9000000000013124:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000000013128:	29c02076 	st.d	$r22,$r3,8(0x8)
900000000001312c:	02c04076 	addi.d	$r22,$r3,16(0x10)
	return __csrxchg(0, LISA_CSR_CRMD_IE, LISA_CSR_CRMD);
9000000000013130:	0015000d 	move	$r13,$r0
9000000000013134:	0280100c 	addi.w	$r12,$r0,4(0x4)
9000000000013138:	0400018d 	csrxchg	$r13,$r12,0x0
900000000001313c:	001501ac 	move	$r12,$r13
9000000000013140:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
}
9000000000013144:	00150184 	move	$r4,$r12
9000000000013148:	28c02076 	ld.d	$r22,$r3,8(0x8)
900000000001314c:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000000013150:	4c000020 	jirl	$r0,$r1,0

9000000000013154 <__intr_restore>:
{
9000000000013154:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000013158:	29c06076 	st.d	$r22,$r3,24(0x18)
900000000001315c:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000013160:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
	__csrxchg(flags, LISA_CSR_CRMD_IE, LISA_CSR_CRMD);
9000000000013164:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
9000000000013168:	0280100d 	addi.w	$r13,$r0,4(0x4)
900000000001316c:	040001ac 	csrxchg	$r12,$r13,0x0
}
9000000000013170:	03400000 	andi	$r0,$r0,0x0
9000000000013174:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000013178:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000001317c:	4c000020 	jirl	$r0,$r1,0

9000000000013180 <fs_count>:
fs_count(struct fs_struct *fs_struct) {
9000000000013180:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000013184:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000013188:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000001318c:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    return atomic_read(&(fs_struct->fs_count));
9000000000013190:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000013194:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000013198:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
  return v->counter;
900000000001319c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000131a0:	2880018c 	ld.w	$r12,$r12,0
}
90000000000131a4:	00150184 	move	$r4,$r12
90000000000131a8:	28c0a076 	ld.d	$r22,$r3,40(0x28)
90000000000131ac:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000000131b0:	4c000020 	jirl	$r0,$r1,0

90000000000131b4 <fopen_count>:
int file_dup(int fd1, int fd2);
int file_pipe(int fd[]);
int file_mkfifo(const char *name, uint32_t open_flags);

static inline int
fopen_count(struct file *file) {
90000000000131b4:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000000131b8:	29c0a076 	st.d	$r22,$r3,40(0x28)
90000000000131bc:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000000131c0:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    return atomic_read(&(file->open_count));
90000000000131c4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000131c8:	02c0818c 	addi.d	$r12,$r12,32(0x20)
90000000000131cc:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
90000000000131d0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000131d4:	2880018c 	ld.w	$r12,$r12,0
}
90000000000131d8:	00150184 	move	$r4,$r12
90000000000131dc:	28c0a076 	ld.d	$r22,$r3,40(0x28)
90000000000131e0:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000000131e4:	4c000020 	jirl	$r0,$r1,0

90000000000131e8 <fopen_count_inc>:

static inline int
fopen_count_inc(struct file *file) {
90000000000131e8:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000000131ec:	29c0a061 	st.d	$r1,$r3,40(0x28)
90000000000131f0:	29c08076 	st.d	$r22,$r3,32(0x20)
90000000000131f4:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000000131f8:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    return atomic_add_return(&(file->open_count), 1);
90000000000131fc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000013200:	02c0818c 	addi.d	$r12,$r12,32(0x20)
9000000000013204:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000013208:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000001320c:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
  local_intr_save (intr_flag);
9000000000013210:	57ff17ff 	bl	-236(0xfffff14) # 9000000000013124 <__intr_save>
9000000000013214:	0015008c 	move	$r12,$r4
9000000000013218:	29bf82cc 	st.w	$r12,$r22,-32(0xfe0)
  v->counter += i;
900000000001321c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000013220:	2880018c 	ld.w	$r12,$r12,0
9000000000013224:	28bf92cd 	ld.w	$r13,$r22,-28(0xfe4)
9000000000013228:	001031ac 	add.w	$r12,$r13,$r12
900000000001322c:	0015018d 	move	$r13,$r12
9000000000013230:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000013234:	2980018d 	st.w	$r13,$r12,0
  local_intr_restore (intr_flag);
9000000000013238:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
900000000001323c:	00150184 	move	$r4,$r12
9000000000013240:	57ff17ff 	bl	-236(0xfffff14) # 9000000000013154 <__intr_restore>
  return v->counter;
9000000000013244:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000013248:	2880018c 	ld.w	$r12,$r12,0
}
900000000001324c:	00150184 	move	$r4,$r12
9000000000013250:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000013254:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000013258:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001325c:	4c000020 	jirl	$r0,$r1,0

9000000000013260 <fopen_count_dec>:

static inline int
fopen_count_dec(struct file *file) {
9000000000013260:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000013264:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000013268:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000001326c:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000013270:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
    return atomic_sub_return(&(file->open_count), 1);
9000000000013274:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000013278:	02c0818c 	addi.d	$r12,$r12,32(0x20)
900000000001327c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000013280:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000013284:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
  return atomic_add_return(v, -i);
9000000000013288:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000001328c:	0011300c 	sub.w	$r12,$r0,$r12
9000000000013290:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000013294:	29ff62cd 	st.d	$r13,$r22,-40(0xfd8)
9000000000013298:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
  local_intr_save (intr_flag);
900000000001329c:	57fe8bff 	bl	-376(0xffffe88) # 9000000000013124 <__intr_save>
90000000000132a0:	0015008c 	move	$r12,$r4
90000000000132a4:	29bf42cc 	st.w	$r12,$r22,-48(0xfd0)
  v->counter += i;
90000000000132a8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000132ac:	2880018c 	ld.w	$r12,$r12,0
90000000000132b0:	28bf52cd 	ld.w	$r13,$r22,-44(0xfd4)
90000000000132b4:	001031ac 	add.w	$r12,$r13,$r12
90000000000132b8:	0015018d 	move	$r13,$r12
90000000000132bc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000132c0:	2980018d 	st.w	$r13,$r12,0
  local_intr_restore (intr_flag);
90000000000132c4:	28bf42cc 	ld.w	$r12,$r22,-48(0xfd0)
90000000000132c8:	00150184 	move	$r4,$r12
90000000000132cc:	57fe8bff 	bl	-376(0xffffe88) # 9000000000013154 <__intr_restore>
  return v->counter;
90000000000132d0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000132d4:	2880018c 	ld.w	$r12,$r12,0
}
90000000000132d8:	00150184 	move	$r4,$r12
90000000000132dc:	28c0e061 	ld.d	$r1,$r3,56(0x38)
90000000000132e0:	28c0c076 	ld.d	$r22,$r3,48(0x30)
90000000000132e4:	02c10063 	addi.d	$r3,$r3,64(0x40)
90000000000132e8:	4c000020 	jirl	$r0,$r1,0

90000000000132ec <get_filemap>:
#include <assert.h>

#define testfd(fd)                          ((fd) >= 0 && (fd) < FS_STRUCT_NENTRY)

static struct file *
get_filemap(void) {
90000000000132ec:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000000132f0:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000000132f4:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000000132f8:	02c08076 	addi.d	$r22,$r3,32(0x20)
    struct fs_struct *fs_struct = current->fs_struct;
90000000000132fc:	1c0041cc 	pcaddu12i	$r12,526(0x20e)
9000000000013300:	28d2118c 	ld.d	$r12,$r12,1156(0x484)
9000000000013304:	28c0018c 	ld.d	$r12,$r12,0
9000000000013308:	28c4c18c 	ld.d	$r12,$r12,304(0x130)
900000000001330c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    assert(fs_struct != NULL);
9000000000013310:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000013314:	44001d80 	bnez	$r12,28(0x1c) # 9000000000013330 <get_filemap+0x44>
9000000000013318:	1c0001e6 	pcaddu12i	$r6,15(0xf)
900000000001331c:	02e2c0c6 	addi.d	$r6,$r6,-1872(0x8b0)
9000000000013320:	02804c05 	addi.w	$r5,$r0,19(0x13)
9000000000013324:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000000013328:	02e33084 	addi.d	$r4,$r4,-1844(0x8cc)
900000000001332c:	579957ff 	bl	-26284(0xfff9954) # 900000000000cc80 <__panic>
    assert(fs_count(fs_struct) > 0);
9000000000013330:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000013334:	57fe4fff 	bl	-436(0xffffe4c) # 9000000000013180 <fs_count>
9000000000013338:	0015008c 	move	$r12,$r4
900000000001333c:	60001c0c 	blt	$r0,$r12,28(0x1c) # 9000000000013358 <get_filemap+0x6c>
9000000000013340:	1c0001e6 	pcaddu12i	$r6,15(0xf)
9000000000013344:	02e300c6 	addi.d	$r6,$r6,-1856(0x8c0)
9000000000013348:	02805005 	addi.w	$r5,$r0,20(0x14)
900000000001334c:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000000013350:	02e29084 	addi.d	$r4,$r4,-1884(0x8a4)
9000000000013354:	57992fff 	bl	-26324(0xfff992c) # 900000000000cc80 <__panic>
    return fs_struct->filemap;
9000000000013358:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001335c:	28c0218c 	ld.d	$r12,$r12,8(0x8)
}
9000000000013360:	00150184 	move	$r4,$r12
9000000000013364:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000013368:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000001336c:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000013370:	4c000020 	jirl	$r0,$r1,0

9000000000013374 <filemap_init>:

void
filemap_init(struct file *filemap) {
9000000000013374:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000013378:	29c0e076 	st.d	$r22,$r3,56(0x38)
900000000001337c:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000013380:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
    int fd;
    struct file *file = filemap;
9000000000013384:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000013388:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    for (fd = 0; fd < FS_STRUCT_NENTRY; fd ++, file ++) {
900000000001338c:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
9000000000013390:	50004c00 	b	76(0x4c) # 90000000000133dc <filemap_init+0x68>
        atomic_set(&(file->open_count), 0);
9000000000013394:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000013398:	02c0818c 	addi.d	$r12,$r12,32(0x20)
900000000001339c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
90000000000133a0:	29bf52c0 	st.w	$r0,$r22,-44(0xfd4)
  v->counter = i;
90000000000133a4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000133a8:	28bf52cd 	ld.w	$r13,$r22,-44(0xfd4)
90000000000133ac:	2980018d 	st.w	$r13,$r12,0
        file->status = FD_NONE, file->fd = fd;
90000000000133b0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000133b4:	29800180 	st.w	$r0,$r12,0
90000000000133b8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000133bc:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
90000000000133c0:	2980318d 	st.w	$r13,$r12,12(0xc)
    for (fd = 0; fd < FS_STRUCT_NENTRY; fd ++, file ++) {
90000000000133c4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000133c8:	0280058c 	addi.w	$r12,$r12,1(0x1)
90000000000133cc:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
90000000000133d0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000133d4:	02c0a18c 	addi.d	$r12,$r12,40(0x28)
90000000000133d8:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
90000000000133dc:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000133e0:	0015018d 	move	$r13,$r12
90000000000133e4:	0281900c 	addi.w	$r12,$r0,100(0x64)
90000000000133e8:	6fffad8d 	bgeu	$r12,$r13,-84(0x3ffac) # 9000000000013394 <filemap_init+0x20>
    }
}
90000000000133ec:	03400000 	andi	$r0,$r0,0x0
90000000000133f0:	28c0e076 	ld.d	$r22,$r3,56(0x38)
90000000000133f4:	02c10063 	addi.d	$r3,$r3,64(0x40)
90000000000133f8:	4c000020 	jirl	$r0,$r1,0

90000000000133fc <filemap_alloc>:

static int
filemap_alloc(int fd, struct file **file_store) {
90000000000133fc:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000013400:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000013404:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000013408:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000001340c:	0015008c 	move	$r12,$r4
9000000000013410:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
9000000000013414:	0040818c 	slli.w	$r12,$r12,0x0
9000000000013418:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
//	panic("debug");
    struct file *file = get_filemap();
900000000001341c:	57fed3ff 	bl	-304(0xffffed0) # 90000000000132ec <get_filemap>
9000000000013420:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    if (fd == NO_FD) {
9000000000013424:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000013428:	0015018d 	move	$r13,$r12
900000000001342c:	15fffecc 	lu12i.w	$r12,-10(0xffff6)
9000000000013430:	03ab658c 	ori	$r12,$r12,0xad9
9000000000013434:	5c0049ac 	bne	$r13,$r12,72(0x48) # 900000000001347c <filemap_alloc+0x80>
        for (fd = 0; fd < FS_STRUCT_NENTRY; fd ++, file ++) {
9000000000013438:	29bf72c0 	st.w	$r0,$r22,-36(0xfdc)
900000000001343c:	50002800 	b	40(0x28) # 9000000000013464 <filemap_alloc+0x68>
            if (file->status == FD_NONE) {
9000000000013440:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000013444:	2880018c 	ld.w	$r12,$r12,0
9000000000013448:	40008180 	beqz	$r12,128(0x80) # 90000000000134c8 <filemap_alloc+0xcc>
        for (fd = 0; fd < FS_STRUCT_NENTRY; fd ++, file ++) {
900000000001344c:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000013450:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000013454:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
9000000000013458:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001345c:	02c0a18c 	addi.d	$r12,$r12,40(0x28)
9000000000013460:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000013464:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000013468:	0015018d 	move	$r13,$r12
900000000001346c:	0281900c 	addi.w	$r12,$r0,100(0x64)
9000000000013470:	6fffd18d 	bgeu	$r12,$r13,-48(0x3ffd0) # 9000000000013440 <filemap_alloc+0x44>
                goto found;
            }
        }
        return -E_MAX_OPEN;
9000000000013474:	02bfa80c 	addi.w	$r12,$r0,-22(0xfea)
9000000000013478:	5000a800 	b	168(0xa8) # 9000000000013520 <filemap_alloc+0x124>
    }
    else {
        if (testfd(fd)) {
900000000001347c:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000013480:	60004180 	blt	$r12,$r0,64(0x40) # 90000000000134c0 <filemap_alloc+0xc4>
9000000000013484:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000013488:	0015018d 	move	$r13,$r12
900000000001348c:	0281900c 	addi.w	$r12,$r0,100(0x64)
9000000000013490:	6800318d 	bltu	$r12,$r13,48(0x30) # 90000000000134c0 <filemap_alloc+0xc4>
            file += fd;
9000000000013494:	28bf72cd 	ld.w	$r13,$r22,-36(0xfdc)
9000000000013498:	0280a00c 	addi.w	$r12,$r0,40(0x28)
900000000001349c:	001db1ac 	mul.d	$r12,$r13,$r12
90000000000134a0:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
90000000000134a4:	0010b1ac 	add.d	$r12,$r13,$r12
90000000000134a8:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
            if (file->status == FD_NONE) {
90000000000134ac:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000134b0:	2880018c 	ld.w	$r12,$r12,0
90000000000134b4:	40001d80 	beqz	$r12,28(0x1c) # 90000000000134d0 <filemap_alloc+0xd4>
                goto found;
            }
            return -E_BUSY;
90000000000134b8:	02bfc40c 	addi.w	$r12,$r0,-15(0xff1)
90000000000134bc:	50006400 	b	100(0x64) # 9000000000013520 <filemap_alloc+0x124>
        }
        return -E_INVAL;
90000000000134c0:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
90000000000134c4:	50005c00 	b	92(0x5c) # 9000000000013520 <filemap_alloc+0x124>
                goto found;
90000000000134c8:	03400000 	andi	$r0,$r0,0x0
90000000000134cc:	50000800 	b	8(0x8) # 90000000000134d4 <filemap_alloc+0xd8>
                goto found;
90000000000134d0:	03400000 	andi	$r0,$r0,0x0
    }
found:
    assert(fopen_count(file) == 0);
90000000000134d4:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
90000000000134d8:	57fcdfff 	bl	-804(0xffffcdc) # 90000000000131b4 <fopen_count>
90000000000134dc:	0015008c 	move	$r12,$r4
90000000000134e0:	40001d80 	beqz	$r12,28(0x1c) # 90000000000134fc <filemap_alloc+0x100>
90000000000134e4:	1c0001c6 	pcaddu12i	$r6,14(0xe)
90000000000134e8:	02dd30c6 	addi.d	$r6,$r6,1868(0x74c)
90000000000134ec:	0280e405 	addi.w	$r5,$r0,57(0x39)
90000000000134f0:	1c0001c4 	pcaddu12i	$r4,14(0xe)
90000000000134f4:	02dc0084 	addi.d	$r4,$r4,1792(0x700)
90000000000134f8:	57978bff 	bl	-26744(0xfff9788) # 900000000000cc80 <__panic>
    file->status = FD_INIT, file->node = NULL;
90000000000134fc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000013500:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000013504:	2980018d 	st.w	$r13,$r12,0
9000000000013508:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001350c:	29c06180 	st.d	$r0,$r12,24(0x18)
    *file_store = file;
9000000000013510:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000013514:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000013518:	29c0018d 	st.d	$r13,$r12,0
    return 0;
900000000001351c:	0015000c 	move	$r12,$r0
}
9000000000013520:	00150184 	move	$r4,$r12
9000000000013524:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000013528:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000001352c:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000013530:	4c000020 	jirl	$r0,$r1,0

9000000000013534 <filemap_free>:

static void
filemap_free(struct file *file) {
9000000000013534:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000013538:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000001353c:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000013540:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000013544:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    assert(file->status == FD_INIT || file->status == FD_CLOSED);
9000000000013548:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001354c:	2880018c 	ld.w	$r12,$r12,0
9000000000013550:	0015018d 	move	$r13,$r12
9000000000013554:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000013558:	580031ac 	beq	$r13,$r12,48(0x30) # 9000000000013588 <filemap_free+0x54>
900000000001355c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000013560:	2880018c 	ld.w	$r12,$r12,0
9000000000013564:	0015018d 	move	$r13,$r12
9000000000013568:	02800c0c 	addi.w	$r12,$r0,3(0x3)
900000000001356c:	58001dac 	beq	$r13,$r12,28(0x1c) # 9000000000013588 <filemap_free+0x54>
9000000000013570:	1c0001c6 	pcaddu12i	$r6,14(0xe)
9000000000013574:	02dbc0c6 	addi.d	$r6,$r6,1776(0x6f0)
9000000000013578:	02810405 	addi.w	$r5,$r0,65(0x41)
900000000001357c:	1c0001c4 	pcaddu12i	$r4,14(0xe)
9000000000013580:	02d9d084 	addi.d	$r4,$r4,1652(0x674)
9000000000013584:	5796ffff 	bl	-26884(0xfff96fc) # 900000000000cc80 <__panic>
    assert(fopen_count(file) == 0);
9000000000013588:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000001358c:	57fc2bff 	bl	-984(0xffffc28) # 90000000000131b4 <fopen_count>
9000000000013590:	0015008c 	move	$r12,$r4
9000000000013594:	40001d80 	beqz	$r12,28(0x1c) # 90000000000135b0 <filemap_free+0x7c>
9000000000013598:	1c0001c6 	pcaddu12i	$r6,14(0xe)
900000000001359c:	02da60c6 	addi.d	$r6,$r6,1688(0x698)
90000000000135a0:	02810805 	addi.w	$r5,$r0,66(0x42)
90000000000135a4:	1c0001c4 	pcaddu12i	$r4,14(0xe)
90000000000135a8:	02d93084 	addi.d	$r4,$r4,1612(0x64c)
90000000000135ac:	5796d7ff 	bl	-26924(0xfff96d4) # 900000000000cc80 <__panic>
    if (file->status == FD_CLOSED) {
90000000000135b0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000135b4:	2880018c 	ld.w	$r12,$r12,0
90000000000135b8:	0015018d 	move	$r13,$r12
90000000000135bc:	02800c0c 	addi.w	$r12,$r0,3(0x3)
90000000000135c0:	5c0015ac 	bne	$r13,$r12,20(0x14) # 90000000000135d4 <filemap_free+0xa0>
        vfs_close(file->node);
90000000000135c4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000135c8:	28c0618c 	ld.d	$r12,$r12,24(0x18)
90000000000135cc:	00150184 	move	$r4,$r12
90000000000135d0:	543df000 	bl	15856(0x3df0) # 90000000000173c0 <vfs_close>
    }
    file->status = FD_NONE;
90000000000135d4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000135d8:	29800180 	st.w	$r0,$r12,0
}
90000000000135dc:	03400000 	andi	$r0,$r0,0x0
90000000000135e0:	28c06061 	ld.d	$r1,$r3,24(0x18)
90000000000135e4:	28c04076 	ld.d	$r22,$r3,16(0x10)
90000000000135e8:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000000135ec:	4c000020 	jirl	$r0,$r1,0

90000000000135f0 <filemap_acquire>:

static void
filemap_acquire(struct file *file) {
90000000000135f0:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000000135f4:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000000135f8:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000000135fc:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000013600:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    assert(file->status == FD_OPENED);
9000000000013604:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000013608:	2880018c 	ld.w	$r12,$r12,0
900000000001360c:	0015018d 	move	$r13,$r12
9000000000013610:	0280080c 	addi.w	$r12,$r0,2(0x2)
9000000000013614:	58001dac 	beq	$r13,$r12,28(0x1c) # 9000000000013630 <filemap_acquire+0x40>
9000000000013618:	1c0001c6 	pcaddu12i	$r6,14(0xe)
900000000001361c:	02da40c6 	addi.d	$r6,$r6,1680(0x690)
9000000000013620:	02812c05 	addi.w	$r5,$r0,75(0x4b)
9000000000013624:	1c0001c4 	pcaddu12i	$r4,14(0xe)
9000000000013628:	02d73084 	addi.d	$r4,$r4,1484(0x5cc)
900000000001362c:	579657ff 	bl	-27052(0xfff9654) # 900000000000cc80 <__panic>
    fopen_count_inc(file);
9000000000013630:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000013634:	57fbb7ff 	bl	-1100(0xffffbb4) # 90000000000131e8 <fopen_count_inc>
}
9000000000013638:	03400000 	andi	$r0,$r0,0x0
900000000001363c:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000013640:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000013644:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000013648:	4c000020 	jirl	$r0,$r1,0

900000000001364c <filemap_release>:

static void
filemap_release(struct file *file) {
900000000001364c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000013650:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000013654:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000013658:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000001365c:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    assert(file->status == FD_OPENED || file->status == FD_CLOSED);
9000000000013660:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000013664:	2880018c 	ld.w	$r12,$r12,0
9000000000013668:	0015018d 	move	$r13,$r12
900000000001366c:	0280080c 	addi.w	$r12,$r0,2(0x2)
9000000000013670:	580031ac 	beq	$r13,$r12,48(0x30) # 90000000000136a0 <filemap_release+0x54>
9000000000013674:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000013678:	2880018c 	ld.w	$r12,$r12,0
900000000001367c:	0015018d 	move	$r13,$r12
9000000000013680:	02800c0c 	addi.w	$r12,$r0,3(0x3)
9000000000013684:	58001dac 	beq	$r13,$r12,28(0x1c) # 90000000000136a0 <filemap_release+0x54>
9000000000013688:	1c0001c6 	pcaddu12i	$r6,14(0xe)
900000000001368c:	02d940c6 	addi.d	$r6,$r6,1616(0x650)
9000000000013690:	02814405 	addi.w	$r5,$r0,81(0x51)
9000000000013694:	1c0001c4 	pcaddu12i	$r4,14(0xe)
9000000000013698:	02d57084 	addi.d	$r4,$r4,1372(0x55c)
900000000001369c:	5795e7ff 	bl	-27164(0xfff95e4) # 900000000000cc80 <__panic>
    assert(fopen_count(file) > 0);
90000000000136a0:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
90000000000136a4:	57fb13ff 	bl	-1264(0xffffb10) # 90000000000131b4 <fopen_count>
90000000000136a8:	0015008c 	move	$r12,$r4
90000000000136ac:	60001c0c 	blt	$r0,$r12,28(0x1c) # 90000000000136c8 <filemap_release+0x7c>
90000000000136b0:	1c0001c6 	pcaddu12i	$r6,14(0xe)
90000000000136b4:	02d9e0c6 	addi.d	$r6,$r6,1656(0x678)
90000000000136b8:	02814805 	addi.w	$r5,$r0,82(0x52)
90000000000136bc:	1c0001c4 	pcaddu12i	$r4,14(0xe)
90000000000136c0:	02d4d084 	addi.d	$r4,$r4,1332(0x534)
90000000000136c4:	5795bfff 	bl	-27204(0xfff95bc) # 900000000000cc80 <__panic>
    if (fopen_count_dec(file) == 0) {
90000000000136c8:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
90000000000136cc:	57fb97ff 	bl	-1132(0xffffb94) # 9000000000013260 <fopen_count_dec>
90000000000136d0:	0015008c 	move	$r12,$r4
90000000000136d4:	44000d80 	bnez	$r12,12(0xc) # 90000000000136e0 <filemap_release+0x94>
        filemap_free(file);
90000000000136d8:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
90000000000136dc:	57fe5bff 	bl	-424(0xffffe58) # 9000000000013534 <filemap_free>
    }
}
90000000000136e0:	03400000 	andi	$r0,$r0,0x0
90000000000136e4:	28c06061 	ld.d	$r1,$r3,24(0x18)
90000000000136e8:	28c04076 	ld.d	$r22,$r3,16(0x10)
90000000000136ec:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000000136f0:	4c000020 	jirl	$r0,$r1,0

90000000000136f4 <filemap_open>:

void
filemap_open(struct file *file) {
90000000000136f4:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000000136f8:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000000136fc:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000013700:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000013704:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    assert(file->status == FD_INIT && file->node != NULL);
9000000000013708:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001370c:	2880018c 	ld.w	$r12,$r12,0
9000000000013710:	0015018d 	move	$r13,$r12
9000000000013714:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000013718:	5c0011ac 	bne	$r13,$r12,16(0x10) # 9000000000013728 <filemap_open+0x34>
900000000001371c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000013720:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000013724:	44001d80 	bnez	$r12,28(0x1c) # 9000000000013740 <filemap_open+0x4c>
9000000000013728:	1c0001c6 	pcaddu12i	$r6,14(0xe)
900000000001372c:	02d8a0c6 	addi.d	$r6,$r6,1576(0x628)
9000000000013730:	02816805 	addi.w	$r5,$r0,90(0x5a)
9000000000013734:	1c0001c4 	pcaddu12i	$r4,14(0xe)
9000000000013738:	02d2f084 	addi.d	$r4,$r4,1212(0x4bc)
900000000001373c:	579547ff 	bl	-27324(0xfff9544) # 900000000000cc80 <__panic>
    file->status = FD_OPENED;
9000000000013740:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000013744:	0280080d 	addi.w	$r13,$r0,2(0x2)
9000000000013748:	2980018d 	st.w	$r13,$r12,0
    fopen_count_inc(file);
900000000001374c:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000013750:	57fa9bff 	bl	-1384(0xffffa98) # 90000000000131e8 <fopen_count_inc>
}
9000000000013754:	03400000 	andi	$r0,$r0,0x0
9000000000013758:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000001375c:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000013760:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000013764:	4c000020 	jirl	$r0,$r1,0

9000000000013768 <filemap_close>:

void
filemap_close(struct file *file) {
9000000000013768:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000001376c:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000013770:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000013774:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000013778:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    assert(file->status == FD_OPENED);
900000000001377c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000013780:	2880018c 	ld.w	$r12,$r12,0
9000000000013784:	0015018d 	move	$r13,$r12
9000000000013788:	0280080c 	addi.w	$r12,$r0,2(0x2)
900000000001378c:	58001dac 	beq	$r13,$r12,28(0x1c) # 90000000000137a8 <filemap_close+0x40>
9000000000013790:	1c0001c6 	pcaddu12i	$r6,14(0xe)
9000000000013794:	02d460c6 	addi.d	$r6,$r6,1304(0x518)
9000000000013798:	02818405 	addi.w	$r5,$r0,97(0x61)
900000000001379c:	1c0001c4 	pcaddu12i	$r4,14(0xe)
90000000000137a0:	02d15084 	addi.d	$r4,$r4,1108(0x454)
90000000000137a4:	5794dfff 	bl	-27428(0xfff94dc) # 900000000000cc80 <__panic>
    assert(fopen_count(file) > 0);
90000000000137a8:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
90000000000137ac:	57fa0bff 	bl	-1528(0xffffa08) # 90000000000131b4 <fopen_count>
90000000000137b0:	0015008c 	move	$r12,$r4
90000000000137b4:	60001c0c 	blt	$r0,$r12,28(0x1c) # 90000000000137d0 <filemap_close+0x68>
90000000000137b8:	1c0001c6 	pcaddu12i	$r6,14(0xe)
90000000000137bc:	02d5c0c6 	addi.d	$r6,$r6,1392(0x570)
90000000000137c0:	02818805 	addi.w	$r5,$r0,98(0x62)
90000000000137c4:	1c0001c4 	pcaddu12i	$r4,14(0xe)
90000000000137c8:	02d0b084 	addi.d	$r4,$r4,1068(0x42c)
90000000000137cc:	5794b7ff 	bl	-27468(0xfff94b4) # 900000000000cc80 <__panic>
    file->status = FD_CLOSED;
90000000000137d0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000137d4:	02800c0d 	addi.w	$r13,$r0,3(0x3)
90000000000137d8:	2980018d 	st.w	$r13,$r12,0
    if (fopen_count_dec(file) == 0) {
90000000000137dc:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
90000000000137e0:	57fa83ff 	bl	-1408(0xffffa80) # 9000000000013260 <fopen_count_dec>
90000000000137e4:	0015008c 	move	$r12,$r4
90000000000137e8:	44000d80 	bnez	$r12,12(0xc) # 90000000000137f4 <filemap_close+0x8c>
        filemap_free(file);
90000000000137ec:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
90000000000137f0:	57fd47ff 	bl	-700(0xffffd44) # 9000000000013534 <filemap_free>
    }
}
90000000000137f4:	03400000 	andi	$r0,$r0,0x0
90000000000137f8:	28c06061 	ld.d	$r1,$r3,24(0x18)
90000000000137fc:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000013800:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000013804:	4c000020 	jirl	$r0,$r1,0

9000000000013808 <filemap_dup>:

void
filemap_dup(struct file *to, struct file *from) {
9000000000013808:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001380c:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000013810:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000013814:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000013818:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000001381c:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
	//kprintf("[filemap_dup]from fd=%d, to fd=%d\n",from->fd, to->fd);
    assert(to->status == FD_INIT && from->status == FD_OPENED);
9000000000013820:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000013824:	2880018c 	ld.w	$r12,$r12,0
9000000000013828:	0015018d 	move	$r13,$r12
900000000001382c:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000013830:	5c0019ac 	bne	$r13,$r12,24(0x18) # 9000000000013848 <filemap_dup+0x40>
9000000000013834:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000013838:	2880018c 	ld.w	$r12,$r12,0
900000000001383c:	0015018d 	move	$r13,$r12
9000000000013840:	0280080c 	addi.w	$r12,$r0,2(0x2)
9000000000013844:	58001dac 	beq	$r13,$r12,28(0x1c) # 9000000000013860 <filemap_dup+0x58>
9000000000013848:	1c0001c6 	pcaddu12i	$r6,14(0xe)
900000000001384c:	02d520c6 	addi.d	$r6,$r6,1352(0x548)
9000000000013850:	0281b005 	addi.w	$r5,$r0,108(0x6c)
9000000000013854:	1c0001c4 	pcaddu12i	$r4,14(0xe)
9000000000013858:	02ce7084 	addi.d	$r4,$r4,924(0x39c)
900000000001385c:	579427ff 	bl	-27612(0xfff9424) # 900000000000cc80 <__panic>
    to->pos = from->pos;
9000000000013860:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000013864:	28c0418d 	ld.d	$r13,$r12,16(0x10)
9000000000013868:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001386c:	29c0418d 	st.d	$r13,$r12,16(0x10)
    to->readable = from->readable;
9000000000013870:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000013874:	2880118d 	ld.w	$r13,$r12,4(0x4)
9000000000013878:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001387c:	2980118d 	st.w	$r13,$r12,4(0x4)
    to->writable = from->writable;
9000000000013880:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000013884:	2880218d 	ld.w	$r13,$r12,8(0x8)
9000000000013888:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001388c:	2980218d 	st.w	$r13,$r12,8(0x8)
    struct inode *node = from->node;
9000000000013890:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000013894:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000013898:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    vop_ref_inc(node), vop_open_inc(node);
900000000001389c:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
90000000000138a0:	5423bc00 	bl	9148(0x23bc) # 9000000000015c5c <inode_ref_inc>
90000000000138a4:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
90000000000138a8:	54258c00 	bl	9612(0x258c) # 9000000000015e34 <inode_open_inc>
    to->node = node;
90000000000138ac:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000138b0:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
90000000000138b4:	29c0618d 	st.d	$r13,$r12,24(0x18)
    filemap_open(to);
90000000000138b8:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
90000000000138bc:	57fe3bff 	bl	-456(0xffffe38) # 90000000000136f4 <filemap_open>
}
90000000000138c0:	03400000 	andi	$r0,$r0,0x0
90000000000138c4:	28c0a061 	ld.d	$r1,$r3,40(0x28)
90000000000138c8:	28c08076 	ld.d	$r22,$r3,32(0x20)
90000000000138cc:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000000138d0:	4c000020 	jirl	$r0,$r1,0

90000000000138d4 <fd2file>:

static inline int
fd2file(int fd, struct file **file_store) {
90000000000138d4:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000000138d8:	29c0a061 	st.d	$r1,$r3,40(0x28)
90000000000138dc:	29c08076 	st.d	$r22,$r3,32(0x20)
90000000000138e0:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000000138e4:	0015008c 	move	$r12,$r4
90000000000138e8:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
90000000000138ec:	0040818c 	slli.w	$r12,$r12,0x0
90000000000138f0:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
    if (testfd(fd)) {
90000000000138f4:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
90000000000138f8:	60006980 	blt	$r12,$r0,104(0x68) # 9000000000013960 <fd2file+0x8c>
90000000000138fc:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000013900:	0015018d 	move	$r13,$r12
9000000000013904:	0281900c 	addi.w	$r12,$r0,100(0x64)
9000000000013908:	6800598d 	bltu	$r12,$r13,88(0x58) # 9000000000013960 <fd2file+0x8c>
        struct file *file = get_filemap() + fd;
900000000001390c:	57f9e3ff 	bl	-1568(0xffff9e0) # 90000000000132ec <get_filemap>
9000000000013910:	0015008e 	move	$r14,$r4
9000000000013914:	28bf72cd 	ld.w	$r13,$r22,-36(0xfdc)
9000000000013918:	0280a00c 	addi.w	$r12,$r0,40(0x28)
900000000001391c:	001db1ac 	mul.d	$r12,$r13,$r12
9000000000013920:	0010b1cc 	add.d	$r12,$r14,$r12
9000000000013924:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
        if (file->status == FD_OPENED && file->fd == fd) {
9000000000013928:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001392c:	2880018c 	ld.w	$r12,$r12,0
9000000000013930:	0015018d 	move	$r13,$r12
9000000000013934:	0280080c 	addi.w	$r12,$r0,2(0x2)
9000000000013938:	5c0029ac 	bne	$r13,$r12,40(0x28) # 9000000000013960 <fd2file+0x8c>
900000000001393c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000013940:	2880318d 	ld.w	$r13,$r12,12(0xc)
9000000000013944:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000013948:	5c00198d 	bne	$r12,$r13,24(0x18) # 9000000000013960 <fd2file+0x8c>
            *file_store = file;
900000000001394c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000013950:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000013954:	29c0018d 	st.d	$r13,$r12,0
            return 0;
9000000000013958:	0015000c 	move	$r12,$r0
900000000001395c:	50000800 	b	8(0x8) # 9000000000013964 <fd2file+0x90>
        }
    }
    return -E_INVAL;
9000000000013960:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
}
9000000000013964:	00150184 	move	$r4,$r12
9000000000013968:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000001396c:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000013970:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000013974:	4c000020 	jirl	$r0,$r1,0

9000000000013978 <file_testfd>:

bool
file_testfd(int fd, bool readable, bool writable) {
9000000000013978:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001397c:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000013980:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000013984:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000013988:	0015008e 	move	$r14,$r4
900000000001398c:	001500ad 	move	$r13,$r5
9000000000013990:	001500cc 	move	$r12,$r6
9000000000013994:	004081ce 	slli.w	$r14,$r14,0x0
9000000000013998:	29bf72ce 	st.w	$r14,$r22,-36(0xfdc)
900000000001399c:	004081ad 	slli.w	$r13,$r13,0x0
90000000000139a0:	29bf62cd 	st.w	$r13,$r22,-40(0xfd8)
90000000000139a4:	0040818c 	slli.w	$r12,$r12,0x0
90000000000139a8:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
90000000000139ac:	02ff82cd 	addi.d	$r13,$r22,-32(0xfe0)
90000000000139b0:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
90000000000139b4:	001501a5 	move	$r5,$r13
90000000000139b8:	00150184 	move	$r4,$r12
90000000000139bc:	57ff1bff 	bl	-232(0xfffff18) # 90000000000138d4 <fd2file>
90000000000139c0:	0015008c 	move	$r12,$r4
90000000000139c4:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
90000000000139c8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000139cc:	40000d80 	beqz	$r12,12(0xc) # 90000000000139d8 <file_testfd+0x60>
        return 0;
90000000000139d0:	0015000c 	move	$r12,$r0
90000000000139d4:	50004000 	b	64(0x40) # 9000000000013a14 <file_testfd+0x9c>
    }
    if (readable && !file->readable) {
90000000000139d8:	28bf62cc 	ld.w	$r12,$r22,-40(0xfd8)
90000000000139dc:	40001980 	beqz	$r12,24(0x18) # 90000000000139f4 <file_testfd+0x7c>
90000000000139e0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000139e4:	2880118c 	ld.w	$r12,$r12,4(0x4)
90000000000139e8:	44000d80 	bnez	$r12,12(0xc) # 90000000000139f4 <file_testfd+0x7c>
        return 0;
90000000000139ec:	0015000c 	move	$r12,$r0
90000000000139f0:	50002400 	b	36(0x24) # 9000000000013a14 <file_testfd+0x9c>
    }
    if (writable && !file->writable) {
90000000000139f4:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
90000000000139f8:	40001980 	beqz	$r12,24(0x18) # 9000000000013a10 <file_testfd+0x98>
90000000000139fc:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000013a00:	2880218c 	ld.w	$r12,$r12,8(0x8)
9000000000013a04:	44000d80 	bnez	$r12,12(0xc) # 9000000000013a10 <file_testfd+0x98>
        return 0;
9000000000013a08:	0015000c 	move	$r12,$r0
9000000000013a0c:	50000800 	b	8(0x8) # 9000000000013a14 <file_testfd+0x9c>
    }
    return 1;
9000000000013a10:	0280040c 	addi.w	$r12,$r0,1(0x1)
}
9000000000013a14:	00150184 	move	$r4,$r12
9000000000013a18:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000013a1c:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000013a20:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000013a24:	4c000020 	jirl	$r0,$r1,0

9000000000013a28 <file_open>:

int
file_open(char *path, uint32_t open_flags) {
9000000000013a28:	02fe4063 	addi.d	$r3,$r3,-112(0xf90)
9000000000013a2c:	29c1a061 	st.d	$r1,$r3,104(0x68)
9000000000013a30:	29c18076 	st.d	$r22,$r3,96(0x60)
9000000000013a34:	02c1c076 	addi.d	$r22,$r3,112(0x70)
9000000000013a38:	29fe62c4 	st.d	$r4,$r22,-104(0xf98)
9000000000013a3c:	001500ac 	move	$r12,$r5
9000000000013a40:	0040818c 	slli.w	$r12,$r12,0x0
9000000000013a44:	29be52cc 	st.w	$r12,$r22,-108(0xf94)
    bool readable = 0, writable = 0;
9000000000013a48:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
9000000000013a4c:	29bfa2c0 	st.w	$r0,$r22,-24(0xfe8)
    switch (open_flags & O_ACCMODE) {
9000000000013a50:	28be52cc 	ld.w	$r12,$r22,-108(0xf94)
9000000000013a54:	03400d8c 	andi	$r12,$r12,0x3
9000000000013a58:	0015018e 	move	$r14,$r12
9000000000013a5c:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000013a60:	580029cd 	beq	$r14,$r13,40(0x28) # 9000000000013a88 <file_open+0x60>
9000000000013a64:	0015018d 	move	$r13,$r12
9000000000013a68:	400015a0 	beqz	$r13,20(0x14) # 9000000000013a7c <file_open+0x54>
9000000000013a6c:	0015018d 	move	$r13,$r12
9000000000013a70:	0280080c 	addi.w	$r12,$r0,2(0x2)
9000000000013a74:	580021ac 	beq	$r13,$r12,32(0x20) # 9000000000013a94 <file_open+0x6c>
9000000000013a78:	50003000 	b	48(0x30) # 9000000000013aa8 <file_open+0x80>
    case O_RDONLY: readable = 1; break;
9000000000013a7c:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000013a80:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000013a84:	50002c00 	b	44(0x2c) # 9000000000013ab0 <file_open+0x88>
    case O_WRONLY: writable = 1; break;
9000000000013a88:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000013a8c:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
9000000000013a90:	50002000 	b	32(0x20) # 9000000000013ab0 <file_open+0x88>
    case O_RDWR:
        readable = writable = 1;
9000000000013a94:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000013a98:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
9000000000013a9c:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
9000000000013aa0:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
        break;
9000000000013aa4:	50000c00 	b	12(0xc) # 9000000000013ab0 <file_open+0x88>
    default:
        return -E_INVAL;
9000000000013aa8:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
9000000000013aac:	50017000 	b	368(0x170) # 9000000000013c1c <file_open+0x1f4>
    }

    int ret;
    struct file *file;
    if ((ret = filemap_alloc(NO_FD, &file)) != 0) {
9000000000013ab0:	02ff22cc 	addi.d	$r12,$r22,-56(0xfc8)
9000000000013ab4:	00150185 	move	$r5,$r12
9000000000013ab8:	15fffecc 	lu12i.w	$r12,-10(0xffff6)
9000000000013abc:	03ab6584 	ori	$r4,$r12,0xad9
9000000000013ac0:	57f93fff 	bl	-1732(0xffff93c) # 90000000000133fc <filemap_alloc>
9000000000013ac4:	0015008c 	move	$r12,$r4
9000000000013ac8:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
9000000000013acc:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000013ad0:	40000d80 	beqz	$r12,12(0xc) # 9000000000013adc <file_open+0xb4>
        return ret;
9000000000013ad4:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000013ad8:	50014400 	b	324(0x144) # 9000000000013c1c <file_open+0x1f4>
    }

    struct inode *node;
    if ((ret = vfs_open(path, open_flags, &node)) != 0) {
9000000000013adc:	02ff02cd 	addi.d	$r13,$r22,-64(0xfc0)
9000000000013ae0:	28be52cc 	ld.w	$r12,$r22,-108(0xf94)
9000000000013ae4:	001501a6 	move	$r6,$r13
9000000000013ae8:	00150185 	move	$r5,$r12
9000000000013aec:	28fe62c4 	ld.d	$r4,$r22,-104(0xf98)
9000000000013af0:	54358000 	bl	13696(0x3580) # 9000000000017070 <vfs_open>
9000000000013af4:	0015008c 	move	$r12,$r4
9000000000013af8:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
9000000000013afc:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000013b00:	40001980 	beqz	$r12,24(0x18) # 9000000000013b18 <file_open+0xf0>
        filemap_free(file);
9000000000013b04:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000013b08:	00150184 	move	$r4,$r12
9000000000013b0c:	57fa2bff 	bl	-1496(0xffffa28) # 9000000000013534 <filemap_free>
        return ret;
9000000000013b10:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000013b14:	50010800 	b	264(0x108) # 9000000000013c1c <file_open+0x1f4>
    }

    file->pos = 0;
9000000000013b18:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000013b1c:	29c04180 	st.d	$r0,$r12,16(0x10)
    if (open_flags & O_APPEND) {
9000000000013b20:	28be52cc 	ld.w	$r12,$r22,-108(0xf94)
9000000000013b24:	0340818c 	andi	$r12,$r12,0x20
9000000000013b28:	4000bd80 	beqz	$r12,188(0xbc) # 9000000000013be4 <file_open+0x1bc>
        struct stat __stat, *stat = &__stat;
9000000000013b2c:	02fe82cc 	addi.d	$r12,$r22,-96(0xfa0)
9000000000013b30:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        if ((ret = vop_fstat(node, stat)) != 0) {
9000000000013b34:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000013b38:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
9000000000013b3c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000013b40:	40002180 	beqz	$r12,32(0x20) # 9000000000013b60 <file_open+0x138>
9000000000013b44:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000013b48:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000013b4c:	40001580 	beqz	$r12,20(0x14) # 9000000000013b60 <file_open+0x138>
9000000000013b50:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000013b54:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000013b58:	28c0a18c 	ld.d	$r12,$r12,40(0x28)
9000000000013b5c:	44001d80 	bnez	$r12,28(0x1c) # 9000000000013b78 <file_open+0x150>
9000000000013b60:	1c0001c6 	pcaddu12i	$r6,14(0xe)
9000000000013b64:	02c9e0c6 	addi.d	$r6,$r6,632(0x278)
9000000000013b68:	0282b805 	addi.w	$r5,$r0,174(0xae)
9000000000013b6c:	1c0001c4 	pcaddu12i	$r4,14(0xe)
9000000000013b70:	02c21084 	addi.d	$r4,$r4,132(0x84)
9000000000013b74:	57910fff 	bl	-28404(0xfff910c) # 900000000000cc80 <__panic>
9000000000013b78:	1c0001c5 	pcaddu12i	$r5,14(0xe)
9000000000013b7c:	02cb00a5 	addi.d	$r5,$r5,704(0x2c0)
9000000000013b80:	28ff42c4 	ld.d	$r4,$r22,-48(0xfd0)
9000000000013b84:	54247800 	bl	9336(0x2478) # 9000000000015ffc <inode_check>
9000000000013b88:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000013b8c:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000013b90:	28c0a18c 	ld.d	$r12,$r12,40(0x28)
9000000000013b94:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
9000000000013b98:	28ff62c5 	ld.d	$r5,$r22,-40(0xfd8)
9000000000013b9c:	001501a4 	move	$r4,$r13
9000000000013ba0:	4c000181 	jirl	$r1,$r12,0
9000000000013ba4:	0015008c 	move	$r12,$r4
9000000000013ba8:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
9000000000013bac:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000013bb0:	40002580 	beqz	$r12,36(0x24) # 9000000000013bd4 <file_open+0x1ac>
            vfs_close(node);
9000000000013bb4:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000013bb8:	00150184 	move	$r4,$r12
9000000000013bbc:	54380400 	bl	14340(0x3804) # 90000000000173c0 <vfs_close>
            filemap_free(file);
9000000000013bc0:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000013bc4:	00150184 	move	$r4,$r12
9000000000013bc8:	57f96fff 	bl	-1684(0xffff96c) # 9000000000013534 <filemap_free>
            return ret;
9000000000013bcc:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000013bd0:	50004c00 	b	76(0x4c) # 9000000000013c1c <file_open+0x1f4>
        }
        file->pos = stat->st_size;
9000000000013bd4:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000013bd8:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000013bdc:	28c061ad 	ld.d	$r13,$r13,24(0x18)
9000000000013be0:	29c0418d 	st.d	$r13,$r12,16(0x10)
    }

    file->node = node;
9000000000013be4:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000013be8:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
9000000000013bec:	29c0618d 	st.d	$r13,$r12,24(0x18)
    file->readable = readable;
9000000000013bf0:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000013bf4:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
9000000000013bf8:	2980118d 	st.w	$r13,$r12,4(0x4)
    file->writable = writable;
9000000000013bfc:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000013c00:	28bfa2cd 	ld.w	$r13,$r22,-24(0xfe8)
9000000000013c04:	2980218d 	st.w	$r13,$r12,8(0x8)
    filemap_open(file);
9000000000013c08:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000013c0c:	00150184 	move	$r4,$r12
9000000000013c10:	57fae7ff 	bl	-1308(0xffffae4) # 90000000000136f4 <filemap_open>
    return file->fd;
9000000000013c14:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000013c18:	2880318c 	ld.w	$r12,$r12,12(0xc)
}
9000000000013c1c:	00150184 	move	$r4,$r12
9000000000013c20:	28c1a061 	ld.d	$r1,$r3,104(0x68)
9000000000013c24:	28c18076 	ld.d	$r22,$r3,96(0x60)
9000000000013c28:	02c1c063 	addi.d	$r3,$r3,112(0x70)
9000000000013c2c:	4c000020 	jirl	$r0,$r1,0

9000000000013c30 <file_close>:

int
file_close(int fd) {
9000000000013c30:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000013c34:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000013c38:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000013c3c:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000013c40:	0015008c 	move	$r12,$r4
9000000000013c44:	0040818c 	slli.w	$r12,$r12,0x0
9000000000013c48:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
9000000000013c4c:	02ff82cd 	addi.d	$r13,$r22,-32(0xfe0)
9000000000013c50:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000013c54:	001501a5 	move	$r5,$r13
9000000000013c58:	00150184 	move	$r4,$r12
9000000000013c5c:	57fc7bff 	bl	-904(0xffffc78) # 90000000000138d4 <fd2file>
9000000000013c60:	0015008c 	move	$r12,$r4
9000000000013c64:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000013c68:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000013c6c:	40000d80 	beqz	$r12,12(0xc) # 9000000000013c78 <file_close+0x48>
        return ret;
9000000000013c70:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000013c74:	50001400 	b	20(0x14) # 9000000000013c88 <file_close+0x58>
    }
    filemap_close(file);
9000000000013c78:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000013c7c:	00150184 	move	$r4,$r12
9000000000013c80:	57faebff 	bl	-1304(0xffffae8) # 9000000000013768 <filemap_close>
    return 0;
9000000000013c84:	0015000c 	move	$r12,$r0
}
9000000000013c88:	00150184 	move	$r4,$r12
9000000000013c8c:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000013c90:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000013c94:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000013c98:	4c000020 	jirl	$r0,$r1,0

9000000000013c9c <file_read>:

int
file_read(int fd, void *base, size_t len, size_t *copied_store) {
9000000000013c9c:	02fe0063 	addi.d	$r3,$r3,-128(0xf80)
9000000000013ca0:	29c1e061 	st.d	$r1,$r3,120(0x78)
9000000000013ca4:	29c1c076 	st.d	$r22,$r3,112(0x70)
9000000000013ca8:	02c20076 	addi.d	$r22,$r3,128(0x80)
9000000000013cac:	0015008c 	move	$r12,$r4
9000000000013cb0:	29fe42c5 	st.d	$r5,$r22,-112(0xf90)
9000000000013cb4:	29fe22c6 	st.d	$r6,$r22,-120(0xf88)
9000000000013cb8:	29fe02c7 	st.d	$r7,$r22,-128(0xf80)
9000000000013cbc:	0040818c 	slli.w	$r12,$r12,0x0
9000000000013cc0:	29be72cc 	st.w	$r12,$r22,-100(0xf9c)
    int ret;
    struct file *file;
    *copied_store = 0;
9000000000013cc4:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
9000000000013cc8:	29c00180 	st.d	$r0,$r12,0
    if ((ret = fd2file(fd, &file)) != 0) {
9000000000013ccc:	02ff22cd 	addi.d	$r13,$r22,-56(0xfc8)
9000000000013cd0:	28be72cc 	ld.w	$r12,$r22,-100(0xf9c)
9000000000013cd4:	001501a5 	move	$r5,$r13
9000000000013cd8:	00150184 	move	$r4,$r12
9000000000013cdc:	57fbfbff 	bl	-1032(0xffffbf8) # 90000000000138d4 <fd2file>
9000000000013ce0:	0015008c 	move	$r12,$r4
9000000000013ce4:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000013ce8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000013cec:	40000d80 	beqz	$r12,12(0xc) # 9000000000013cf8 <file_read+0x5c>
        return ret;
9000000000013cf0:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000013cf4:	50012800 	b	296(0x128) # 9000000000013e1c <file_read+0x180>
    }
    if (!file->readable) {
9000000000013cf8:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000013cfc:	2880118c 	ld.w	$r12,$r12,4(0x4)
9000000000013d00:	44000d80 	bnez	$r12,12(0xc) # 9000000000013d0c <file_read+0x70>
        return -E_INVAL;
9000000000013d04:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
9000000000013d08:	50011400 	b	276(0x114) # 9000000000013e1c <file_read+0x180>
    }
    filemap_acquire(file);
9000000000013d0c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000013d10:	00150184 	move	$r4,$r12
9000000000013d14:	57f8dfff 	bl	-1828(0xffff8dc) # 90000000000135f0 <filemap_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, base, len, file->pos);
9000000000013d18:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000013d1c:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000013d20:	02fea2cd 	addi.d	$r13,$r22,-88(0xfa8)
9000000000013d24:	00150187 	move	$r7,$r12
9000000000013d28:	28fe22c6 	ld.d	$r6,$r22,-120(0xf88)
9000000000013d2c:	28fe42c5 	ld.d	$r5,$r22,-112(0xf90)
9000000000013d30:	001501a4 	move	$r4,$r13
9000000000013d34:	540d9c00 	bl	3484(0xd9c) # 9000000000014ad0 <iobuf_init>
9000000000013d38:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)
    ret = vop_read(file->node, iob);
9000000000013d3c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000013d40:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000013d44:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
9000000000013d48:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000013d4c:	40002180 	beqz	$r12,32(0x20) # 9000000000013d6c <file_read+0xd0>
9000000000013d50:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000013d54:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000013d58:	40001580 	beqz	$r12,20(0x14) # 9000000000013d6c <file_read+0xd0>
9000000000013d5c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000013d60:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000013d64:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000013d68:	44001d80 	bnez	$r12,28(0x1c) # 9000000000013d84 <file_read+0xe8>
9000000000013d6c:	1c0001c6 	pcaddu12i	$r6,14(0xe)
9000000000013d70:	02c350c6 	addi.d	$r6,$r6,212(0xd4)
9000000000013d74:	02835805 	addi.w	$r5,$r0,214(0xd6)
9000000000013d78:	1c0001c4 	pcaddu12i	$r4,14(0xe)
9000000000013d7c:	02f9e084 	addi.d	$r4,$r4,-392(0xe78)
9000000000013d80:	578f03ff 	bl	-28928(0xfff8f00) # 900000000000cc80 <__panic>
9000000000013d84:	1c0001c5 	pcaddu12i	$r5,14(0xe)
9000000000013d88:	02c470a5 	addi.d	$r5,$r5,284(0x11c)
9000000000013d8c:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000013d90:	54226c00 	bl	8812(0x226c) # 9000000000015ffc <inode_check>
9000000000013d94:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000013d98:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000013d9c:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000013da0:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
9000000000013da4:	28c061ad 	ld.d	$r13,$r13,24(0x18)
9000000000013da8:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
9000000000013dac:	001501a4 	move	$r4,$r13
9000000000013db0:	4c000181 	jirl	$r1,$r12,0
9000000000013db4:	0015008c 	move	$r12,$r4
9000000000013db8:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    size_t copied = iobuf_used(iob);
9000000000013dbc:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000013dc0:	28c0418d 	ld.d	$r13,$r12,16(0x10)
9000000000013dc4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000013dc8:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000013dcc:	0011b1ac 	sub.d	$r12,$r13,$r12
9000000000013dd0:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    if (file->status == FD_OPENED) {
9000000000013dd4:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000013dd8:	2880018c 	ld.w	$r12,$r12,0
9000000000013ddc:	0015018d 	move	$r13,$r12
9000000000013de0:	0280080c 	addi.w	$r12,$r0,2(0x2)
9000000000013de4:	5c001dac 	bne	$r13,$r12,28(0x1c) # 9000000000013e00 <file_read+0x164>
        file->pos += copied;
9000000000013de8:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000013dec:	28c0418e 	ld.d	$r14,$r12,16(0x10)
9000000000013df0:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000013df4:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000013df8:	0010b5cd 	add.d	$r13,$r14,$r13
9000000000013dfc:	29c0418d 	st.d	$r13,$r12,16(0x10)
    }
    *copied_store = copied;
9000000000013e00:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
9000000000013e04:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000013e08:	29c0018d 	st.d	$r13,$r12,0
    filemap_release(file);
9000000000013e0c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000013e10:	00150184 	move	$r4,$r12
9000000000013e14:	57f83bff 	bl	-1992(0xffff838) # 900000000001364c <filemap_release>
    return ret;
9000000000013e18:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
9000000000013e1c:	00150184 	move	$r4,$r12
9000000000013e20:	28c1e061 	ld.d	$r1,$r3,120(0x78)
9000000000013e24:	28c1c076 	ld.d	$r22,$r3,112(0x70)
9000000000013e28:	02c20063 	addi.d	$r3,$r3,128(0x80)
9000000000013e2c:	4c000020 	jirl	$r0,$r1,0

9000000000013e30 <file_write>:

int
file_write(int fd, void *base, size_t len, size_t *copied_store) {
9000000000013e30:	02fe0063 	addi.d	$r3,$r3,-128(0xf80)
9000000000013e34:	29c1e061 	st.d	$r1,$r3,120(0x78)
9000000000013e38:	29c1c076 	st.d	$r22,$r3,112(0x70)
9000000000013e3c:	02c20076 	addi.d	$r22,$r3,128(0x80)
9000000000013e40:	0015008c 	move	$r12,$r4
9000000000013e44:	29fe42c5 	st.d	$r5,$r22,-112(0xf90)
9000000000013e48:	29fe22c6 	st.d	$r6,$r22,-120(0xf88)
9000000000013e4c:	29fe02c7 	st.d	$r7,$r22,-128(0xf80)
9000000000013e50:	0040818c 	slli.w	$r12,$r12,0x0
9000000000013e54:	29be72cc 	st.w	$r12,$r22,-100(0xf9c)
    int ret;
    struct file *file;
    *copied_store = 0;
9000000000013e58:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
9000000000013e5c:	29c00180 	st.d	$r0,$r12,0
    if ((ret = fd2file(fd, &file)) != 0) {
9000000000013e60:	02ff22cd 	addi.d	$r13,$r22,-56(0xfc8)
9000000000013e64:	28be72cc 	ld.w	$r12,$r22,-100(0xf9c)
9000000000013e68:	001501a5 	move	$r5,$r13
9000000000013e6c:	00150184 	move	$r4,$r12
9000000000013e70:	57fa67ff 	bl	-1436(0xffffa64) # 90000000000138d4 <fd2file>
9000000000013e74:	0015008c 	move	$r12,$r4
9000000000013e78:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000013e7c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000013e80:	40000d80 	beqz	$r12,12(0xc) # 9000000000013e8c <file_write+0x5c>
        return ret;
9000000000013e84:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000013e88:	50012800 	b	296(0x128) # 9000000000013fb0 <file_write+0x180>
    }
    if (!file->writable) {
9000000000013e8c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000013e90:	2880218c 	ld.w	$r12,$r12,8(0x8)
9000000000013e94:	44000d80 	bnez	$r12,12(0xc) # 9000000000013ea0 <file_write+0x70>
        return -E_INVAL;
9000000000013e98:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
9000000000013e9c:	50011400 	b	276(0x114) # 9000000000013fb0 <file_write+0x180>
    }
    filemap_acquire(file);
9000000000013ea0:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000013ea4:	00150184 	move	$r4,$r12
9000000000013ea8:	57f74bff 	bl	-2232(0xffff748) # 90000000000135f0 <filemap_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, base, len, file->pos);
9000000000013eac:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000013eb0:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000013eb4:	02fea2cd 	addi.d	$r13,$r22,-88(0xfa8)
9000000000013eb8:	00150187 	move	$r7,$r12
9000000000013ebc:	28fe22c6 	ld.d	$r6,$r22,-120(0xf88)
9000000000013ec0:	28fe42c5 	ld.d	$r5,$r22,-112(0xf90)
9000000000013ec4:	001501a4 	move	$r4,$r13
9000000000013ec8:	540c0800 	bl	3080(0xc08) # 9000000000014ad0 <iobuf_init>
9000000000013ecc:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)
    ret = vop_write(file->node, iob);
9000000000013ed0:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000013ed4:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000013ed8:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
9000000000013edc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000013ee0:	40002180 	beqz	$r12,32(0x20) # 9000000000013f00 <file_write+0xd0>
9000000000013ee4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000013ee8:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000013eec:	40001580 	beqz	$r12,20(0x14) # 9000000000013f00 <file_write+0xd0>
9000000000013ef0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000013ef4:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000013ef8:	28c0818c 	ld.d	$r12,$r12,32(0x20)
9000000000013efc:	44001d80 	bnez	$r12,28(0x1c) # 9000000000013f18 <file_write+0xe8>
9000000000013f00:	1c0001c6 	pcaddu12i	$r6,14(0xe)
9000000000013f04:	02fea0c6 	addi.d	$r6,$r6,-88(0xfa8)
9000000000013f08:	0283b805 	addi.w	$r5,$r0,238(0xee)
9000000000013f0c:	1c0001c4 	pcaddu12i	$r4,14(0xe)
9000000000013f10:	02f39084 	addi.d	$r4,$r4,-796(0xce4)
9000000000013f14:	578d6fff 	bl	-29332(0xfff8d6c) # 900000000000cc80 <__panic>
9000000000013f18:	1c0001c5 	pcaddu12i	$r5,14(0xe)
9000000000013f1c:	02ffc0a5 	addi.d	$r5,$r5,-16(0xff0)
9000000000013f20:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000013f24:	5420d800 	bl	8408(0x20d8) # 9000000000015ffc <inode_check>
9000000000013f28:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000013f2c:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000013f30:	28c0818c 	ld.d	$r12,$r12,32(0x20)
9000000000013f34:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
9000000000013f38:	28c061ad 	ld.d	$r13,$r13,24(0x18)
9000000000013f3c:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
9000000000013f40:	001501a4 	move	$r4,$r13
9000000000013f44:	4c000181 	jirl	$r1,$r12,0
9000000000013f48:	0015008c 	move	$r12,$r4
9000000000013f4c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)

    size_t copied = iobuf_used(iob);
9000000000013f50:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000013f54:	28c0418d 	ld.d	$r13,$r12,16(0x10)
9000000000013f58:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000013f5c:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000013f60:	0011b1ac 	sub.d	$r12,$r13,$r12
9000000000013f64:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    if (file->status == FD_OPENED) {
9000000000013f68:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000013f6c:	2880018c 	ld.w	$r12,$r12,0
9000000000013f70:	0015018d 	move	$r13,$r12
9000000000013f74:	0280080c 	addi.w	$r12,$r0,2(0x2)
9000000000013f78:	5c001dac 	bne	$r13,$r12,28(0x1c) # 9000000000013f94 <file_write+0x164>
        file->pos += copied;
9000000000013f7c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000013f80:	28c0418e 	ld.d	$r14,$r12,16(0x10)
9000000000013f84:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000013f88:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000013f8c:	0010b5cd 	add.d	$r13,$r14,$r13
9000000000013f90:	29c0418d 	st.d	$r13,$r12,16(0x10)
    }
    *copied_store = copied;
9000000000013f94:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
9000000000013f98:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000013f9c:	29c0018d 	st.d	$r13,$r12,0
    filemap_release(file);
9000000000013fa0:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000013fa4:	00150184 	move	$r4,$r12
9000000000013fa8:	57f6a7ff 	bl	-2396(0xffff6a4) # 900000000001364c <filemap_release>
    return ret;
9000000000013fac:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
9000000000013fb0:	00150184 	move	$r4,$r12
9000000000013fb4:	28c1e061 	ld.d	$r1,$r3,120(0x78)
9000000000013fb8:	28c1c076 	ld.d	$r22,$r3,112(0x70)
9000000000013fbc:	02c20063 	addi.d	$r3,$r3,128(0x80)
9000000000013fc0:	4c000020 	jirl	$r0,$r1,0

9000000000013fc4 <file_seek>:

int
file_seek(int fd, off_t pos, int whence) {
9000000000013fc4:	02fe4063 	addi.d	$r3,$r3,-112(0xf90)
9000000000013fc8:	29c1a061 	st.d	$r1,$r3,104(0x68)
9000000000013fcc:	29c18076 	st.d	$r22,$r3,96(0x60)
9000000000013fd0:	02c1c076 	addi.d	$r22,$r3,112(0x70)
9000000000013fd4:	0015008d 	move	$r13,$r4
9000000000013fd8:	29fe42c5 	st.d	$r5,$r22,-112(0xf90)
9000000000013fdc:	001500cc 	move	$r12,$r6
9000000000013fe0:	004081ad 	slli.w	$r13,$r13,0x0
9000000000013fe4:	29be72cd 	st.w	$r13,$r22,-100(0xf9c)
9000000000013fe8:	0040818c 	slli.w	$r12,$r12,0x0
9000000000013fec:	29be62cc 	st.w	$r12,$r22,-104(0xf98)
    struct stat __stat, *stat = &__stat;
9000000000013ff0:	02fec2cc 	addi.d	$r12,$r22,-80(0xfb0)
9000000000013ff4:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
9000000000013ff8:	02fea2cd 	addi.d	$r13,$r22,-88(0xfa8)
9000000000013ffc:	28be72cc 	ld.w	$r12,$r22,-100(0xf9c)
9000000000014000:	001501a5 	move	$r5,$r13
9000000000014004:	00150184 	move	$r4,$r12
9000000000014008:	57f8cfff 	bl	-1844(0xffff8cc) # 90000000000138d4 <fd2file>
900000000001400c:	0015008c 	move	$r12,$r4
9000000000014010:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000014014:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000014018:	40000d80 	beqz	$r12,12(0xc) # 9000000000014024 <file_seek+0x60>
        return ret;
900000000001401c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000014020:	5001b000 	b	432(0x1b0) # 90000000000141d0 <file_seek+0x20c>
    }
    filemap_acquire(file);
9000000000014024:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
9000000000014028:	00150184 	move	$r4,$r12
900000000001402c:	57f5c7ff 	bl	-2620(0xffff5c4) # 90000000000135f0 <filemap_acquire>

    switch (whence) {
9000000000014030:	28be62cc 	ld.w	$r12,$r22,-104(0xf98)
9000000000014034:	0015018d 	move	$r13,$r12
9000000000014038:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000001403c:	580021ac 	beq	$r13,$r12,32(0x20) # 900000000001405c <file_seek+0x98>
9000000000014040:	28be62cc 	ld.w	$r12,$r22,-104(0xf98)
9000000000014044:	0015018d 	move	$r13,$r12
9000000000014048:	0280080c 	addi.w	$r12,$r0,2(0x2)
900000000001404c:	580029ac 	beq	$r13,$r12,40(0x28) # 9000000000014074 <file_seek+0xb0>
9000000000014050:	28be62cc 	ld.w	$r12,$r22,-104(0xf98)
9000000000014054:	4400c180 	bnez	$r12,192(0xc0) # 9000000000014114 <file_seek+0x150>
    case LSEEK_SET: break;
9000000000014058:	5000cc00 	b	204(0xcc) # 9000000000014124 <file_seek+0x160>
    case LSEEK_CUR: pos += file->pos; break;
900000000001405c:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
9000000000014060:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000014064:	28fe42cd 	ld.d	$r13,$r22,-112(0xf90)
9000000000014068:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001406c:	29fe42cc 	st.d	$r12,$r22,-112(0xf90)
9000000000014070:	5000b400 	b	180(0xb4) # 9000000000014124 <file_seek+0x160>
    case LSEEK_END:
        if ((ret = vop_fstat(file->node, stat)) == 0) {
9000000000014074:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
9000000000014078:	28c0618c 	ld.d	$r12,$r12,24(0x18)
900000000001407c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
9000000000014080:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000014084:	40002180 	beqz	$r12,32(0x20) # 90000000000140a4 <file_seek+0xe0>
9000000000014088:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001408c:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000014090:	40001580 	beqz	$r12,20(0x14) # 90000000000140a4 <file_seek+0xe0>
9000000000014094:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000014098:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
900000000001409c:	28c0a18c 	ld.d	$r12,$r12,40(0x28)
90000000000140a0:	44001d80 	bnez	$r12,28(0x1c) # 90000000000140bc <file_seek+0xf8>
90000000000140a4:	1c0001c6 	pcaddu12i	$r6,14(0xe)
90000000000140a8:	02f4d0c6 	addi.d	$r6,$r6,-716(0xd34)
90000000000140ac:	02841c05 	addi.w	$r5,$r0,263(0x107)
90000000000140b0:	1c0001c4 	pcaddu12i	$r4,14(0xe)
90000000000140b4:	02ed0084 	addi.d	$r4,$r4,-1216(0xb40)
90000000000140b8:	578bcbff 	bl	-29752(0xfff8bc8) # 900000000000cc80 <__panic>
90000000000140bc:	1c0001c5 	pcaddu12i	$r5,14(0xe)
90000000000140c0:	02f5f0a5 	addi.d	$r5,$r5,-644(0xd7c)
90000000000140c4:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
90000000000140c8:	541f3400 	bl	7988(0x1f34) # 9000000000015ffc <inode_check>
90000000000140cc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000140d0:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
90000000000140d4:	28c0a18c 	ld.d	$r12,$r12,40(0x28)
90000000000140d8:	28fea2cd 	ld.d	$r13,$r22,-88(0xfa8)
90000000000140dc:	28c061ad 	ld.d	$r13,$r13,24(0x18)
90000000000140e0:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
90000000000140e4:	001501a4 	move	$r4,$r13
90000000000140e8:	4c000181 	jirl	$r1,$r12,0
90000000000140ec:	0015008c 	move	$r12,$r4
90000000000140f0:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
90000000000140f4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000140f8:	44002980 	bnez	$r12,40(0x28) # 9000000000014120 <file_seek+0x15c>
            pos += stat->st_size;
90000000000140fc:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000014100:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000014104:	28fe42cd 	ld.d	$r13,$r22,-112(0xf90)
9000000000014108:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001410c:	29fe42cc 	st.d	$r12,$r22,-112(0xf90)
        }
        break;
9000000000014110:	50001000 	b	16(0x10) # 9000000000014120 <file_seek+0x15c>
    default: ret = -E_INVAL;
9000000000014114:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
9000000000014118:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000001411c:	50000800 	b	8(0x8) # 9000000000014124 <file_seek+0x160>
        break;
9000000000014120:	03400000 	andi	$r0,$r0,0x0
    }

    if (ret == 0) {
9000000000014124:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000014128:	44009980 	bnez	$r12,152(0x98) # 90000000000141c0 <file_seek+0x1fc>
        if ((ret = vop_tryseek(file->node, pos)) == 0) {
900000000001412c:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
9000000000014130:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000014134:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
9000000000014138:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001413c:	40002180 	beqz	$r12,32(0x20) # 900000000001415c <file_seek+0x198>
9000000000014140:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000014144:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000014148:	40001580 	beqz	$r12,20(0x14) # 900000000001415c <file_seek+0x198>
900000000001414c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000014150:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000014154:	28c1618c 	ld.d	$r12,$r12,88(0x58)
9000000000014158:	44001d80 	bnez	$r12,28(0x1c) # 9000000000014174 <file_seek+0x1b0>
900000000001415c:	1c0001c6 	pcaddu12i	$r6,14(0xe)
9000000000014160:	02f6d0c6 	addi.d	$r6,$r6,-588(0xdb4)
9000000000014164:	02843c05 	addi.w	$r5,$r0,271(0x10f)
9000000000014168:	1c0001c4 	pcaddu12i	$r4,14(0xe)
900000000001416c:	02ea2084 	addi.d	$r4,$r4,-1400(0xa88)
9000000000014170:	578b13ff 	bl	-29936(0xfff8b10) # 900000000000cc80 <__panic>
9000000000014174:	1c0001c5 	pcaddu12i	$r5,14(0xe)
9000000000014178:	02f810a5 	addi.d	$r5,$r5,-508(0xe04)
900000000001417c:	28ff42c4 	ld.d	$r4,$r22,-48(0xfd0)
9000000000014180:	541e7c00 	bl	7804(0x1e7c) # 9000000000015ffc <inode_check>
9000000000014184:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000014188:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
900000000001418c:	28c1618c 	ld.d	$r12,$r12,88(0x58)
9000000000014190:	28fea2cd 	ld.d	$r13,$r22,-88(0xfa8)
9000000000014194:	28c061ad 	ld.d	$r13,$r13,24(0x18)
9000000000014198:	28fe42c5 	ld.d	$r5,$r22,-112(0xf90)
900000000001419c:	001501a4 	move	$r4,$r13
90000000000141a0:	4c000181 	jirl	$r1,$r12,0
90000000000141a4:	0015008c 	move	$r12,$r4
90000000000141a8:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
90000000000141ac:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000141b0:	44001180 	bnez	$r12,16(0x10) # 90000000000141c0 <file_seek+0x1fc>
            file->pos = pos;
90000000000141b4:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
90000000000141b8:	28fe42cd 	ld.d	$r13,$r22,-112(0xf90)
90000000000141bc:	29c0418d 	st.d	$r13,$r12,16(0x10)
        }
//	kprintf("file_seek, pos=%d, whence=%d, ret=%d\n", pos, whence, ret);
    }
    filemap_release(file);
90000000000141c0:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
90000000000141c4:	00150184 	move	$r4,$r12
90000000000141c8:	57f487ff 	bl	-2940(0xffff484) # 900000000001364c <filemap_release>
    return ret;
90000000000141cc:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
90000000000141d0:	00150184 	move	$r4,$r12
90000000000141d4:	28c1a061 	ld.d	$r1,$r3,104(0x68)
90000000000141d8:	28c18076 	ld.d	$r22,$r3,96(0x60)
90000000000141dc:	02c1c063 	addi.d	$r3,$r3,112(0x70)
90000000000141e0:	4c000020 	jirl	$r0,$r1,0

90000000000141e4 <file_fstat>:

int
file_fstat(int fd, struct stat *stat) {
90000000000141e4:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
90000000000141e8:	29c0e061 	st.d	$r1,$r3,56(0x38)
90000000000141ec:	29c0c076 	st.d	$r22,$r3,48(0x30)
90000000000141f0:	02c10076 	addi.d	$r22,$r3,64(0x40)
90000000000141f4:	0015008c 	move	$r12,$r4
90000000000141f8:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
90000000000141fc:	0040818c 	slli.w	$r12,$r12,0x0
9000000000014200:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
9000000000014204:	02ff62cd 	addi.d	$r13,$r22,-40(0xfd8)
9000000000014208:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
900000000001420c:	001501a5 	move	$r5,$r13
9000000000014210:	00150184 	move	$r4,$r12
9000000000014214:	57f6c3ff 	bl	-2368(0xffff6c0) # 90000000000138d4 <fd2file>
9000000000014218:	0015008c 	move	$r12,$r4
900000000001421c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000014220:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000014224:	40000d80 	beqz	$r12,12(0xc) # 9000000000014230 <file_fstat+0x4c>
        return ret;
9000000000014228:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001422c:	5000a000 	b	160(0xa0) # 90000000000142cc <file_fstat+0xe8>
    }
    filemap_acquire(file);
9000000000014230:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000014234:	00150184 	move	$r4,$r12
9000000000014238:	57f3bbff 	bl	-3144(0xffff3b8) # 90000000000135f0 <filemap_acquire>
    ret = vop_fstat(file->node, stat);
900000000001423c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000014240:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000014244:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000014248:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001424c:	40002180 	beqz	$r12,32(0x20) # 900000000001426c <file_fstat+0x88>
9000000000014250:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000014254:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000014258:	40001580 	beqz	$r12,20(0x14) # 900000000001426c <file_fstat+0x88>
900000000001425c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000014260:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000014264:	28c0a18c 	ld.d	$r12,$r12,40(0x28)
9000000000014268:	44001d80 	bnez	$r12,28(0x1c) # 9000000000014284 <file_fstat+0xa0>
900000000001426c:	1c0001c6 	pcaddu12i	$r6,14(0xe)
9000000000014270:	02edb0c6 	addi.d	$r6,$r6,-1172(0xb6c)
9000000000014274:	02848005 	addi.w	$r5,$r0,288(0x120)
9000000000014278:	1c0001c4 	pcaddu12i	$r4,14(0xe)
900000000001427c:	02e5e084 	addi.d	$r4,$r4,-1672(0x978)
9000000000014280:	578a03ff 	bl	-30208(0xfff8a00) # 900000000000cc80 <__panic>
9000000000014284:	1c0001c5 	pcaddu12i	$r5,14(0xe)
9000000000014288:	02eed0a5 	addi.d	$r5,$r5,-1100(0xbb4)
900000000001428c:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000014290:	541d6c00 	bl	7532(0x1d6c) # 9000000000015ffc <inode_check>
9000000000014294:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000014298:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
900000000001429c:	28c0a18c 	ld.d	$r12,$r12,40(0x28)
90000000000142a0:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
90000000000142a4:	28c061ad 	ld.d	$r13,$r13,24(0x18)
90000000000142a8:	28ff02c5 	ld.d	$r5,$r22,-64(0xfc0)
90000000000142ac:	001501a4 	move	$r4,$r13
90000000000142b0:	4c000181 	jirl	$r1,$r12,0
90000000000142b4:	0015008c 	move	$r12,$r4
90000000000142b8:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    filemap_release(file);
90000000000142bc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000142c0:	00150184 	move	$r4,$r12
90000000000142c4:	57f38bff 	bl	-3192(0xffff388) # 900000000001364c <filemap_release>
    return ret;
90000000000142c8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
90000000000142cc:	00150184 	move	$r4,$r12
90000000000142d0:	28c0e061 	ld.d	$r1,$r3,56(0x38)
90000000000142d4:	28c0c076 	ld.d	$r22,$r3,48(0x30)
90000000000142d8:	02c10063 	addi.d	$r3,$r3,64(0x40)
90000000000142dc:	4c000020 	jirl	$r0,$r1,0

90000000000142e0 <file_fsync>:

int
file_fsync(int fd) {
90000000000142e0:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
90000000000142e4:	29c0e061 	st.d	$r1,$r3,56(0x38)
90000000000142e8:	29c0c076 	st.d	$r22,$r3,48(0x30)
90000000000142ec:	02c10076 	addi.d	$r22,$r3,64(0x40)
90000000000142f0:	0015008c 	move	$r12,$r4
90000000000142f4:	0040818c 	slli.w	$r12,$r12,0x0
90000000000142f8:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
90000000000142fc:	02ff62cd 	addi.d	$r13,$r22,-40(0xfd8)
9000000000014300:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
9000000000014304:	001501a5 	move	$r5,$r13
9000000000014308:	00150184 	move	$r4,$r12
900000000001430c:	57f5cbff 	bl	-2616(0xffff5c8) # 90000000000138d4 <fd2file>
9000000000014310:	0015008c 	move	$r12,$r4
9000000000014314:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000014318:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001431c:	40000d80 	beqz	$r12,12(0xc) # 9000000000014328 <file_fsync+0x48>
        return ret;
9000000000014320:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000014324:	50009c00 	b	156(0x9c) # 90000000000143c0 <file_fsync+0xe0>
    }
    filemap_acquire(file);
9000000000014328:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001432c:	00150184 	move	$r4,$r12
9000000000014330:	57f2c3ff 	bl	-3392(0xffff2c0) # 90000000000135f0 <filemap_acquire>
    ret = vop_fsync(file->node);
9000000000014334:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000014338:	28c0618c 	ld.d	$r12,$r12,24(0x18)
900000000001433c:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000014340:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000014344:	40002180 	beqz	$r12,32(0x20) # 9000000000014364 <file_fsync+0x84>
9000000000014348:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001434c:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000014350:	40001580 	beqz	$r12,20(0x14) # 9000000000014364 <file_fsync+0x84>
9000000000014354:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000014358:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
900000000001435c:	28c0c18c 	ld.d	$r12,$r12,48(0x30)
9000000000014360:	44001d80 	bnez	$r12,28(0x1c) # 900000000001437c <file_fsync+0x9c>
9000000000014364:	1c0001c6 	pcaddu12i	$r6,14(0xe)
9000000000014368:	02f070c6 	addi.d	$r6,$r6,-996(0xc1c)
900000000001436c:	0284b405 	addi.w	$r5,$r0,301(0x12d)
9000000000014370:	1c0001c4 	pcaddu12i	$r4,14(0xe)
9000000000014374:	02e20084 	addi.d	$r4,$r4,-1920(0x880)
9000000000014378:	57890bff 	bl	-30456(0xfff8908) # 900000000000cc80 <__panic>
900000000001437c:	1c0001c5 	pcaddu12i	$r5,14(0xe)
9000000000014380:	02f190a5 	addi.d	$r5,$r5,-924(0xc64)
9000000000014384:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000014388:	541c7400 	bl	7284(0x1c74) # 9000000000015ffc <inode_check>
900000000001438c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000014390:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000014394:	28c0c18c 	ld.d	$r12,$r12,48(0x30)
9000000000014398:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000001439c:	28c061ad 	ld.d	$r13,$r13,24(0x18)
90000000000143a0:	001501a4 	move	$r4,$r13
90000000000143a4:	4c000181 	jirl	$r1,$r12,0
90000000000143a8:	0015008c 	move	$r12,$r4
90000000000143ac:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    filemap_release(file);
90000000000143b0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000143b4:	00150184 	move	$r4,$r12
90000000000143b8:	57f297ff 	bl	-3436(0xffff294) # 900000000001364c <filemap_release>
    return ret;
90000000000143bc:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
90000000000143c0:	00150184 	move	$r4,$r12
90000000000143c4:	28c0e061 	ld.d	$r1,$r3,56(0x38)
90000000000143c8:	28c0c076 	ld.d	$r22,$r3,48(0x30)
90000000000143cc:	02c10063 	addi.d	$r3,$r3,64(0x40)
90000000000143d0:	4c000020 	jirl	$r0,$r1,0

90000000000143d4 <file_getdirentry>:

int
file_getdirentry(int fd, struct dirent *direntp) {
90000000000143d4:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
90000000000143d8:	29c16061 	st.d	$r1,$r3,88(0x58)
90000000000143dc:	29c14076 	st.d	$r22,$r3,80(0x50)
90000000000143e0:	02c18076 	addi.d	$r22,$r3,96(0x60)
90000000000143e4:	0015008c 	move	$r12,$r4
90000000000143e8:	29fe82c5 	st.d	$r5,$r22,-96(0xfa0)
90000000000143ec:	0040818c 	slli.w	$r12,$r12,0x0
90000000000143f0:	29beb2cc 	st.w	$r12,$r22,-84(0xfac)
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
90000000000143f4:	02ff42cd 	addi.d	$r13,$r22,-48(0xfd0)
90000000000143f8:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
90000000000143fc:	001501a5 	move	$r5,$r13
9000000000014400:	00150184 	move	$r4,$r12
9000000000014404:	57f4d3ff 	bl	-2864(0xffff4d0) # 90000000000138d4 <fd2file>
9000000000014408:	0015008c 	move	$r12,$r4
900000000001440c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000014410:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000014414:	40000d80 	beqz	$r12,12(0xc) # 9000000000014420 <file_getdirentry+0x4c>
        return ret;
9000000000014418:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001441c:	5000fc00 	b	252(0xfc) # 9000000000014518 <file_getdirentry+0x144>
    }
    filemap_acquire(file);
9000000000014420:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000014424:	00150184 	move	$r4,$r12
9000000000014428:	57f1cbff 	bl	-3640(0xffff1c8) # 90000000000135f0 <filemap_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, direntp->name, sizeof(direntp->name), direntp->offset);
900000000001442c:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
9000000000014430:	02c0218d 	addi.d	$r13,$r12,8(0x8)
9000000000014434:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
9000000000014438:	28c0018c 	ld.d	$r12,$r12,0
900000000001443c:	02fec2ce 	addi.d	$r14,$r22,-80(0xfb0)
9000000000014440:	00150187 	move	$r7,$r12
9000000000014444:	02840006 	addi.w	$r6,$r0,256(0x100)
9000000000014448:	001501a5 	move	$r5,$r13
900000000001444c:	001501c4 	move	$r4,$r14
9000000000014450:	54068000 	bl	1664(0x680) # 9000000000014ad0 <iobuf_init>
9000000000014454:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)
    if ((ret = vop_getdirentry(file->node, iob)) == 0) {
9000000000014458:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001445c:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000014460:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
9000000000014464:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000014468:	40002180 	beqz	$r12,32(0x20) # 9000000000014488 <file_getdirentry+0xb4>
900000000001446c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000014470:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000014474:	40001580 	beqz	$r12,20(0x14) # 9000000000014488 <file_getdirentry+0xb4>
9000000000014478:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001447c:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000014480:	28c1018c 	ld.d	$r12,$r12,64(0x40)
9000000000014484:	44001d80 	bnez	$r12,28(0x1c) # 90000000000144a0 <file_getdirentry+0xcc>
9000000000014488:	1c0001c6 	pcaddu12i	$r6,14(0xe)
900000000001448c:	02ed80c6 	addi.d	$r6,$r6,-1184(0xb60)
9000000000014490:	0284f005 	addi.w	$r5,$r0,316(0x13c)
9000000000014494:	1c0001a4 	pcaddu12i	$r4,13(0xd)
9000000000014498:	02dd7084 	addi.d	$r4,$r4,1884(0x75c)
900000000001449c:	5787e7ff 	bl	-30748(0xfff87e4) # 900000000000cc80 <__panic>
90000000000144a0:	1c0001c5 	pcaddu12i	$r5,14(0xe)
90000000000144a4:	02eec0a5 	addi.d	$r5,$r5,-1104(0xbb0)
90000000000144a8:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
90000000000144ac:	541b5000 	bl	6992(0x1b50) # 9000000000015ffc <inode_check>
90000000000144b0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000144b4:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
90000000000144b8:	28c1018c 	ld.d	$r12,$r12,64(0x40)
90000000000144bc:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
90000000000144c0:	28c061ad 	ld.d	$r13,$r13,24(0x18)
90000000000144c4:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
90000000000144c8:	001501a4 	move	$r4,$r13
90000000000144cc:	4c000181 	jirl	$r1,$r12,0
90000000000144d0:	0015008c 	move	$r12,$r4
90000000000144d4:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
90000000000144d8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000144dc:	44002d80 	bnez	$r12,44(0x2c) # 9000000000014508 <file_getdirentry+0x134>
        direntp->offset += iobuf_used(iob);
90000000000144e0:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
90000000000144e4:	28c0018d 	ld.d	$r13,$r12,0
90000000000144e8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000144ec:	28c0418e 	ld.d	$r14,$r12,16(0x10)
90000000000144f0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000144f4:	28c0618c 	ld.d	$r12,$r12,24(0x18)
90000000000144f8:	0011b1cc 	sub.d	$r12,$r14,$r12
90000000000144fc:	0010b1ad 	add.d	$r13,$r13,$r12
9000000000014500:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
9000000000014504:	29c0018d 	st.d	$r13,$r12,0
    }
    filemap_release(file);
9000000000014508:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001450c:	00150184 	move	$r4,$r12
9000000000014510:	57f13fff 	bl	-3780(0xffff13c) # 900000000001364c <filemap_release>
    return ret;
9000000000014514:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
9000000000014518:	00150184 	move	$r4,$r12
900000000001451c:	28c16061 	ld.d	$r1,$r3,88(0x58)
9000000000014520:	28c14076 	ld.d	$r22,$r3,80(0x50)
9000000000014524:	02c18063 	addi.d	$r3,$r3,96(0x60)
9000000000014528:	4c000020 	jirl	$r0,$r1,0

900000000001452c <file_dup>:

int
file_dup(int fd1, int fd2) {
900000000001452c:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000014530:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000014534:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000014538:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000001453c:	0015008d 	move	$r13,$r4
9000000000014540:	001500ac 	move	$r12,$r5
9000000000014544:	004081ad 	slli.w	$r13,$r13,0x0
9000000000014548:	29bf32cd 	st.w	$r13,$r22,-52(0xfcc)
900000000001454c:	0040818c 	slli.w	$r12,$r12,0x0
9000000000014550:	29bf22cc 	st.w	$r12,$r22,-56(0xfc8)
    int ret;
    struct file *file1, *file2;
    if ((ret = fd2file(fd1, &file1)) != 0) {
9000000000014554:	02ff82cd 	addi.d	$r13,$r22,-32(0xfe0)
9000000000014558:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
900000000001455c:	001501a5 	move	$r5,$r13
9000000000014560:	00150184 	move	$r4,$r12
9000000000014564:	57f373ff 	bl	-3216(0xffff370) # 90000000000138d4 <fd2file>
9000000000014568:	0015008c 	move	$r12,$r4
900000000001456c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000014570:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000014574:	40000d80 	beqz	$r12,12(0xc) # 9000000000014580 <file_dup+0x54>
        return ret;
9000000000014578:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001457c:	50004c00 	b	76(0x4c) # 90000000000145c8 <file_dup+0x9c>
    }
    if ((ret = filemap_alloc(fd2, &file2)) != 0) {
9000000000014580:	02ff62cd 	addi.d	$r13,$r22,-40(0xfd8)
9000000000014584:	28bf22cc 	ld.w	$r12,$r22,-56(0xfc8)
9000000000014588:	001501a5 	move	$r5,$r13
900000000001458c:	00150184 	move	$r4,$r12
9000000000014590:	57ee6fff 	bl	-4500(0xfffee6c) # 90000000000133fc <filemap_alloc>
9000000000014594:	0015008c 	move	$r12,$r4
9000000000014598:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000001459c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000145a0:	40000d80 	beqz	$r12,12(0xc) # 90000000000145ac <file_dup+0x80>
        return ret;
90000000000145a4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000145a8:	50002000 	b	32(0x20) # 90000000000145c8 <file_dup+0x9c>
    }
    filemap_dup(file2, file1);
90000000000145ac:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000145b0:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
90000000000145b4:	001501a5 	move	$r5,$r13
90000000000145b8:	00150184 	move	$r4,$r12
90000000000145bc:	57f24fff 	bl	-3508(0xffff24c) # 9000000000013808 <filemap_dup>
    return file2->fd;
90000000000145c0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000145c4:	2880318c 	ld.w	$r12,$r12,12(0xc)
}
90000000000145c8:	00150184 	move	$r4,$r12
90000000000145cc:	28c0e061 	ld.d	$r1,$r3,56(0x38)
90000000000145d0:	28c0c076 	ld.d	$r22,$r3,48(0x30)
90000000000145d4:	02c10063 	addi.d	$r3,$r3,64(0x40)
90000000000145d8:	4c000020 	jirl	$r0,$r1,0

90000000000145dc <fence_i>:
static void fence_i(void *va_start, int size) {
90000000000145dc:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000000145e0:	29c0a076 	st.d	$r22,$r3,40(0x28)
90000000000145e4:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000000145e8:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
90000000000145ec:	001500ac 	move	$r12,$r5
90000000000145f0:	0040818c 	slli.w	$r12,$r12,0x0
90000000000145f4:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
90000000000145f8:	38720000 	dbar	0x0
    void *va_end = va_start + size;
90000000000145fc:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000014600:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000014604:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000014608:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
900000000001460c:	50002000 	b	32(0x20) # 900000000001462c <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
9000000000014610:	06000189 	cacop	0x9,$r12,0
9000000000014614:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
9000000000014618:	06000188 	cacop	0x8,$r12,0
900000000001461c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
9000000000014620:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000014624:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000014628:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
900000000001462c:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000014630:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000014634:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 9000000000014610 <fence_i+0x34>
9000000000014638:	38728000 	ibar	0x0
}
900000000001463c:	03400000 	andi	$r0,$r0,0x0
9000000000014640:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000014644:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000014648:	4c000020 	jirl	$r0,$r1,0

900000000001464c <fs_count>:
fs_count(struct fs_struct *fs_struct) {
900000000001464c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000014650:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000014654:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000014658:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    return atomic_read(&(fs_struct->fs_count));
900000000001465c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000014660:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000014664:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
  return v->counter;
9000000000014668:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001466c:	2880018c 	ld.w	$r12,$r12,0
}
9000000000014670:	00150184 	move	$r4,$r12
9000000000014674:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000014678:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001467c:	4c000020 	jirl	$r0,$r1,0

9000000000014680 <fs_init>:
#include <sfs.h>
#include <inode.h>
#include <assert.h>
//called when init_main proc start
void
fs_init(void) {
9000000000014680:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000000014684:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000000014688:	29c00076 	st.d	$r22,$r3,0
900000000001468c:	02c04076 	addi.d	$r22,$r3,16(0x10)
    vfs_init();
9000000000014690:	541b4000 	bl	6976(0x1b40) # 90000000000161d0 <vfs_init>
    dev_init();
9000000000014694:	5486c400 	bl	34500(0x86c4) # 900000000001cd58 <dev_init>
    sfs_init();
9000000000014698:	543d3400 	bl	15668(0x3d34) # 90000000000183cc <sfs_init>
}
900000000001469c:	03400000 	andi	$r0,$r0,0x0
90000000000146a0:	28c02061 	ld.d	$r1,$r3,8(0x8)
90000000000146a4:	28c00076 	ld.d	$r22,$r3,0
90000000000146a8:	02c04063 	addi.d	$r3,$r3,16(0x10)
90000000000146ac:	4c000020 	jirl	$r0,$r1,0

90000000000146b0 <fs_cleanup>:

void
fs_cleanup(void) {
90000000000146b0:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
90000000000146b4:	29c02061 	st.d	$r1,$r3,8(0x8)
90000000000146b8:	29c00076 	st.d	$r22,$r3,0
90000000000146bc:	02c04076 	addi.d	$r22,$r3,16(0x10)
    vfs_cleanup();
90000000000146c0:	541e7c00 	bl	7804(0x1e7c) # 900000000001653c <vfs_cleanup>
}
90000000000146c4:	03400000 	andi	$r0,$r0,0x0
90000000000146c8:	28c02061 	ld.d	$r1,$r3,8(0x8)
90000000000146cc:	28c00076 	ld.d	$r22,$r3,0
90000000000146d0:	02c04063 	addi.d	$r3,$r3,16(0x10)
90000000000146d4:	4c000020 	jirl	$r0,$r1,0

90000000000146d8 <lock_fs>:

void
lock_fs(struct fs_struct *fs_struct) {
90000000000146d8:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000000146dc:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000000146e0:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000000146e4:	02c08076 	addi.d	$r22,$r3,32(0x20)
90000000000146e8:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    down(&(fs_struct->fs_sem));
90000000000146ec:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000146f0:	02c0618c 	addi.d	$r12,$r12,24(0x18)
90000000000146f4:	00150184 	move	$r4,$r12
90000000000146f8:	579733ff 	bl	-26832(0xfff9730) # 900000000000de28 <down>
}
90000000000146fc:	03400000 	andi	$r0,$r0,0x0
9000000000014700:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000014704:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000014708:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000001470c:	4c000020 	jirl	$r0,$r1,0

9000000000014710 <unlock_fs>:

void
unlock_fs(struct fs_struct *fs_struct) {
9000000000014710:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000014714:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000014718:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000001471c:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000014720:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    up(&(fs_struct->fs_sem));
9000000000014724:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000014728:	02c0618c 	addi.d	$r12,$r12,24(0x18)
900000000001472c:	00150184 	move	$r4,$r12
9000000000014730:	5796c7ff 	bl	-26940(0xfff96c4) # 900000000000ddf4 <up>
}
9000000000014734:	03400000 	andi	$r0,$r0,0x0
9000000000014738:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000001473c:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000014740:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000014744:	4c000020 	jirl	$r0,$r1,0

9000000000014748 <fs_create>:
//Called when a new proc init
struct fs_struct *
fs_create(void) {
9000000000014748:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001474c:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000014750:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000014754:	02c0c076 	addi.d	$r22,$r3,48(0x30)
	// kprintf("[fs_create]\n");
    //static_assert((int)FS_STRUCT_NENTRY > 128);
    struct fs_struct *fs_struct;
    if ((fs_struct = kmalloc(sizeof(struct fs_struct) + FS_STRUCT_BUFSIZE)) != NULL) {
9000000000014758:	14000024 	lu12i.w	$r4,1(0x1)
900000000001475c:	572edfff 	bl	-53540(0xfff2edc) # 9000000000007638 <kmalloc>
9000000000014760:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
9000000000014764:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000014768:	40005d80 	beqz	$r12,92(0x5c) # 90000000000147c4 <fs_create+0x7c>
        fs_struct->pwd = NULL;
900000000001476c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000014770:	29c00180 	st.d	$r0,$r12,0
        fs_struct->filemap = (void *)(fs_struct + 1);
9000000000014774:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000014778:	02c0c18d 	addi.d	$r13,$r12,48(0x30)
900000000001477c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000014780:	29c0218d 	st.d	$r13,$r12,8(0x8)
        atomic_set(&(fs_struct->fs_count), 0);
9000000000014784:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000014788:	02c0418c 	addi.d	$r12,$r12,16(0x10)
900000000001478c:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000014790:	29bf72c0 	st.w	$r0,$r22,-36(0xfdc)
  v->counter = i;
9000000000014794:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000014798:	28bf72cd 	ld.w	$r13,$r22,-36(0xfdc)
900000000001479c:	2980018d 	st.w	$r13,$r12,0
        sem_init(&(fs_struct->fs_sem), 1);
90000000000147a0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000147a4:	02c0618c 	addi.d	$r12,$r12,24(0x18)
90000000000147a8:	02800405 	addi.w	$r5,$r0,1(0x1)
90000000000147ac:	00150184 	move	$r4,$r12
90000000000147b0:	57941fff 	bl	-27620(0xfff941c) # 900000000000dbcc <sem_init>
        filemap_init(fs_struct->filemap);
90000000000147b4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000147b8:	28c0218c 	ld.d	$r12,$r12,8(0x8)
90000000000147bc:	00150184 	move	$r4,$r12
90000000000147c0:	57ebb7ff 	bl	-5196(0xfffebb4) # 9000000000013374 <filemap_init>
    }
    return fs_struct;
90000000000147c4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
}
90000000000147c8:	00150184 	move	$r4,$r12
90000000000147cc:	28c0a061 	ld.d	$r1,$r3,40(0x28)
90000000000147d0:	28c08076 	ld.d	$r22,$r3,32(0x20)
90000000000147d4:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000000147d8:	4c000020 	jirl	$r0,$r1,0

90000000000147dc <fs_destroy>:
//Called when a proc exit
void
fs_destroy(struct fs_struct *fs_struct) {
90000000000147dc:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000000147e0:	29c0a061 	st.d	$r1,$r3,40(0x28)
90000000000147e4:	29c08076 	st.d	$r22,$r3,32(0x20)
90000000000147e8:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000000147ec:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
	// kprintf("[fs_destroy]\n");
    assert(fs_struct != NULL && fs_count(fs_struct) == 0);
90000000000147f0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000147f4:	40001580 	beqz	$r12,20(0x14) # 9000000000014808 <fs_destroy+0x2c>
90000000000147f8:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
90000000000147fc:	57fe53ff 	bl	-432(0xffffe50) # 900000000001464c <fs_count>
9000000000014800:	0015008c 	move	$r12,$r4
9000000000014804:	40001d80 	beqz	$r12,28(0x1c) # 9000000000014820 <fs_destroy+0x44>
9000000000014808:	1c0001c6 	pcaddu12i	$r6,14(0xe)
900000000001480c:	02e160c6 	addi.d	$r6,$r6,-1960(0x858)
9000000000014810:	0280cc05 	addi.w	$r5,$r0,51(0x33)
9000000000014814:	1c0001c4 	pcaddu12i	$r4,14(0xe)
9000000000014818:	02e23084 	addi.d	$r4,$r4,-1908(0x88c)
900000000001481c:	578467ff 	bl	-31644(0xfff8464) # 900000000000cc80 <__panic>
    if (fs_struct->pwd != NULL) {
9000000000014820:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000014824:	28c0018c 	ld.d	$r12,$r12,0
9000000000014828:	40001580 	beqz	$r12,20(0x14) # 900000000001483c <fs_destroy+0x60>
        vop_ref_dec(fs_struct->pwd);
900000000001482c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000014830:	28c0018c 	ld.d	$r12,$r12,0
9000000000014834:	00150184 	move	$r4,$r12
9000000000014838:	54149c00 	bl	5276(0x149c) # 9000000000015cd4 <inode_ref_dec>
    }
    int i;
    struct file *file = fs_struct->filemap;
900000000001483c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000014840:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000014844:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    for (i = 0; i < FS_STRUCT_NENTRY; i ++, file ++) {
9000000000014848:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
900000000001484c:	50005c00 	b	92(0x5c) # 90000000000148a8 <fs_destroy+0xcc>
        if (file->status == FD_OPENED) {
9000000000014850:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000014854:	2880018c 	ld.w	$r12,$r12,0
9000000000014858:	0015018d 	move	$r13,$r12
900000000001485c:	0280080c 	addi.w	$r12,$r0,2(0x2)
9000000000014860:	5c000dac 	bne	$r13,$r12,12(0xc) # 900000000001486c <fs_destroy+0x90>
            filemap_close(file);
9000000000014864:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000014868:	57ef03ff 	bl	-4352(0xfffef00) # 9000000000013768 <filemap_close>
        }
        assert(file->status == FD_NONE);
900000000001486c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000014870:	2880018c 	ld.w	$r12,$r12,0
9000000000014874:	40001d80 	beqz	$r12,28(0x1c) # 9000000000014890 <fs_destroy+0xb4>
9000000000014878:	1c0001c6 	pcaddu12i	$r6,14(0xe)
900000000001487c:	02e0e0c6 	addi.d	$r6,$r6,-1992(0x838)
9000000000014880:	0280f405 	addi.w	$r5,$r0,61(0x3d)
9000000000014884:	1c0001c4 	pcaddu12i	$r4,14(0xe)
9000000000014888:	02e07084 	addi.d	$r4,$r4,-2020(0x81c)
900000000001488c:	5783f7ff 	bl	-31756(0xfff83f4) # 900000000000cc80 <__panic>
    for (i = 0; i < FS_STRUCT_NENTRY; i ++, file ++) {
9000000000014890:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000014894:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000014898:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000001489c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000148a0:	02c0a18c 	addi.d	$r12,$r12,40(0x28)
90000000000148a4:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
90000000000148a8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000148ac:	0015018d 	move	$r13,$r12
90000000000148b0:	0281900c 	addi.w	$r12,$r0,100(0x64)
90000000000148b4:	6fff9d8d 	bgeu	$r12,$r13,-100(0x3ff9c) # 9000000000014850 <fs_destroy+0x74>
    }
    kfree(fs_struct);
90000000000148b8:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
90000000000148bc:	57325bff 	bl	-52648(0xfff3258) # 9000000000007b14 <kfree>
}
90000000000148c0:	03400000 	andi	$r0,$r0,0x0
90000000000148c4:	28c0a061 	ld.d	$r1,$r3,40(0x28)
90000000000148c8:	28c08076 	ld.d	$r22,$r3,32(0x20)
90000000000148cc:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000000148d0:	4c000020 	jirl	$r0,$r1,0

90000000000148d4 <fs_closeall>:

void
fs_closeall(struct fs_struct *fs_struct) {
90000000000148d4:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000000148d8:	29c0a061 	st.d	$r1,$r3,40(0x28)
90000000000148dc:	29c08076 	st.d	$r22,$r3,32(0x20)
90000000000148e0:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000000148e4:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
//	kprintf("[fs_closeall]\n");
    assert(fs_struct != NULL && fs_count(fs_struct) > 0);
90000000000148e8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000148ec:	40001580 	beqz	$r12,20(0x14) # 9000000000014900 <fs_closeall+0x2c>
90000000000148f0:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
90000000000148f4:	57fd5bff 	bl	-680(0xffffd58) # 900000000001464c <fs_count>
90000000000148f8:	0015008c 	move	$r12,$r4
90000000000148fc:	60001c0c 	blt	$r0,$r12,28(0x1c) # 9000000000014918 <fs_closeall+0x44>
9000000000014900:	1c0001a6 	pcaddu12i	$r6,13(0xd)
9000000000014904:	02df80c6 	addi.d	$r6,$r6,2016(0x7e0)
9000000000014908:	02811405 	addi.w	$r5,$r0,69(0x45)
900000000001490c:	1c0001a4 	pcaddu12i	$r4,13(0xd)
9000000000014910:	02de5084 	addi.d	$r4,$r4,1940(0x794)
9000000000014914:	57836fff 	bl	-31892(0xfff836c) # 900000000000cc80 <__panic>
    int i;
    struct file *file = fs_struct->filemap;
9000000000014918:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001491c:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000014920:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
	//skip the stdin & stdout
    for (i = 2, file += 2; i < FS_STRUCT_NENTRY; i ++, file ++) {
9000000000014924:	0280080c 	addi.w	$r12,$r0,2(0x2)
9000000000014928:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000001492c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000014930:	02c1418c 	addi.d	$r12,$r12,80(0x50)
9000000000014934:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000014938:	50003800 	b	56(0x38) # 9000000000014970 <fs_closeall+0x9c>
        if (file->status == FD_OPENED) {
900000000001493c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000014940:	2880018c 	ld.w	$r12,$r12,0
9000000000014944:	0015018d 	move	$r13,$r12
9000000000014948:	0280080c 	addi.w	$r12,$r0,2(0x2)
900000000001494c:	5c000dac 	bne	$r13,$r12,12(0xc) # 9000000000014958 <fs_closeall+0x84>
            filemap_close(file);
9000000000014950:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000014954:	57ee17ff 	bl	-4588(0xfffee14) # 9000000000013768 <filemap_close>
    for (i = 2, file += 2; i < FS_STRUCT_NENTRY; i ++, file ++) {
9000000000014958:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001495c:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000014960:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000014964:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000014968:	02c0a18c 	addi.d	$r12,$r12,40(0x28)
900000000001496c:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000014970:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000014974:	0015018d 	move	$r13,$r12
9000000000014978:	0281900c 	addi.w	$r12,$r0,100(0x64)
900000000001497c:	6fffc18d 	bgeu	$r12,$r13,-64(0x3ffc0) # 900000000001493c <fs_closeall+0x68>
        }
    }
}
9000000000014980:	03400000 	andi	$r0,$r0,0x0
9000000000014984:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000014988:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000001498c:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000014990:	4c000020 	jirl	$r0,$r1,0

9000000000014994 <dup_fs>:

int
dup_fs(struct fs_struct *to, struct fs_struct *from) {
9000000000014994:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000014998:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000001499c:	29c0c076 	st.d	$r22,$r3,48(0x30)
90000000000149a0:	02c10076 	addi.d	$r22,$r3,64(0x40)
90000000000149a4:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
90000000000149a8:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
//	kprintf("[dup_fs]\n");
    assert(to != NULL && from != NULL);
90000000000149ac:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000149b0:	40000d80 	beqz	$r12,12(0xc) # 90000000000149bc <dup_fs+0x28>
90000000000149b4:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
90000000000149b8:	44001d80 	bnez	$r12,28(0x1c) # 90000000000149d4 <dup_fs+0x40>
90000000000149bc:	1c0001a6 	pcaddu12i	$r6,13(0xd)
90000000000149c0:	02dd90c6 	addi.d	$r6,$r6,1892(0x764)
90000000000149c4:	02814c05 	addi.w	$r5,$r0,83(0x53)
90000000000149c8:	1c0001a4 	pcaddu12i	$r4,13(0xd)
90000000000149cc:	02db6084 	addi.d	$r4,$r4,1752(0x6d8)
90000000000149d0:	5782b3ff 	bl	-32080(0xfff82b0) # 900000000000cc80 <__panic>
    assert(fs_count(to) == 0 && fs_count(from) > 0);
90000000000149d4:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
90000000000149d8:	57fc77ff 	bl	-908(0xffffc74) # 900000000001464c <fs_count>
90000000000149dc:	0015008c 	move	$r12,$r4
90000000000149e0:	44001580 	bnez	$r12,20(0x14) # 90000000000149f4 <dup_fs+0x60>
90000000000149e4:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
90000000000149e8:	57fc67ff 	bl	-924(0xffffc64) # 900000000001464c <fs_count>
90000000000149ec:	0015008c 	move	$r12,$r4
90000000000149f0:	60001c0c 	blt	$r0,$r12,28(0x1c) # 9000000000014a0c <dup_fs+0x78>
90000000000149f4:	1c0001a6 	pcaddu12i	$r6,13(0xd)
90000000000149f8:	02dd70c6 	addi.d	$r6,$r6,1884(0x75c)
90000000000149fc:	02815005 	addi.w	$r5,$r0,84(0x54)
9000000000014a00:	1c0001a4 	pcaddu12i	$r4,13(0xd)
9000000000014a04:	02da8084 	addi.d	$r4,$r4,1696(0x6a0)
9000000000014a08:	57827bff 	bl	-32136(0xfff8278) # 900000000000cc80 <__panic>
    if ((to->pwd = from->pwd) != NULL) {
9000000000014a0c:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000014a10:	28c0018d 	ld.d	$r13,$r12,0
9000000000014a14:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000014a18:	29c0018d 	st.d	$r13,$r12,0
9000000000014a1c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000014a20:	28c0018c 	ld.d	$r12,$r12,0
9000000000014a24:	40001580 	beqz	$r12,20(0x14) # 9000000000014a38 <dup_fs+0xa4>
        vop_ref_inc(to->pwd);
9000000000014a28:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000014a2c:	28c0018c 	ld.d	$r12,$r12,0
9000000000014a30:	00150184 	move	$r4,$r12
9000000000014a34:	54122800 	bl	4648(0x1228) # 9000000000015c5c <inode_ref_inc>
    }
    int i;
    struct file *to_file = to->filemap, *from_file = from->filemap;
9000000000014a38:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000014a3c:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000014a40:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000014a44:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000014a48:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000014a4c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    for (i = 0; i < FS_STRUCT_NENTRY; i ++, to_file ++, from_file ++) {
9000000000014a50:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
9000000000014a54:	50005400 	b	84(0x54) # 9000000000014aa8 <dup_fs+0x114>
        if (from_file->status == FD_OPENED) {
9000000000014a58:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000014a5c:	2880018c 	ld.w	$r12,$r12,0
9000000000014a60:	0015018d 	move	$r13,$r12
9000000000014a64:	0280080c 	addi.w	$r12,$r0,2(0x2)
9000000000014a68:	5c001dac 	bne	$r13,$r12,28(0x1c) # 9000000000014a84 <dup_fs+0xf0>
            /* alloc_fd first */
            to_file->status = FD_INIT;
9000000000014a6c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000014a70:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000014a74:	2980018d 	st.w	$r13,$r12,0
            filemap_dup(to_file, from_file);
9000000000014a78:	28ff62c5 	ld.d	$r5,$r22,-40(0xfd8)
9000000000014a7c:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000014a80:	57ed8bff 	bl	-4728(0xfffed88) # 9000000000013808 <filemap_dup>
    for (i = 0; i < FS_STRUCT_NENTRY; i ++, to_file ++, from_file ++) {
9000000000014a84:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000014a88:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000014a8c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000014a90:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000014a94:	02c0a18c 	addi.d	$r12,$r12,40(0x28)
9000000000014a98:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000014a9c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000014aa0:	02c0a18c 	addi.d	$r12,$r12,40(0x28)
9000000000014aa4:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
9000000000014aa8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000014aac:	0015018d 	move	$r13,$r12
9000000000014ab0:	0281900c 	addi.w	$r12,$r0,100(0x64)
9000000000014ab4:	6fffa58d 	bgeu	$r12,$r13,-92(0x3ffa4) # 9000000000014a58 <dup_fs+0xc4>
        }
    }
    return 0;
9000000000014ab8:	0015000c 	move	$r12,$r0
}
9000000000014abc:	00150184 	move	$r4,$r12
9000000000014ac0:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000000014ac4:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000000014ac8:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000014acc:	4c000020 	jirl	$r0,$r1,0

9000000000014ad0 <iobuf_init>:
#include <iobuf.h>
#include <error.h>
#include <assert.h>

struct iobuf *
iobuf_init(struct iobuf *iob, void *base, size_t len, off_t offset) {
9000000000014ad0:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000014ad4:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000014ad8:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000014adc:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
9000000000014ae0:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
9000000000014ae4:	29ff62c6 	st.d	$r6,$r22,-40(0xfd8)
9000000000014ae8:	29ff42c7 	st.d	$r7,$r22,-48(0xfd0)
    iob->io_base = base;
9000000000014aec:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000014af0:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000014af4:	29c0018d 	st.d	$r13,$r12,0
    iob->io_offset = offset;
9000000000014af8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000014afc:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000014b00:	29c0218d 	st.d	$r13,$r12,8(0x8)
    iob->io_len = iob->io_resid = len;
9000000000014b04:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000014b08:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000014b0c:	29c0618d 	st.d	$r13,$r12,24(0x18)
9000000000014b10:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000014b14:	28c0618d 	ld.d	$r13,$r12,24(0x18)
9000000000014b18:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000014b1c:	29c0418d 	st.d	$r13,$r12,16(0x10)
    return iob;
9000000000014b20:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
}
9000000000014b24:	00150184 	move	$r4,$r12
9000000000014b28:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000014b2c:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000014b30:	4c000020 	jirl	$r0,$r1,0

9000000000014b34 <iobuf_move>:

int
iobuf_move(struct iobuf *iob, void *data, size_t len, bool m2b, size_t *copiedp) {
9000000000014b34:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
9000000000014b38:	29c16061 	st.d	$r1,$r3,88(0x58)
9000000000014b3c:	29c14076 	st.d	$r22,$r3,80(0x50)
9000000000014b40:	02c18076 	addi.d	$r22,$r3,96(0x60)
9000000000014b44:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
9000000000014b48:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
9000000000014b4c:	29fee2c6 	st.d	$r6,$r22,-72(0xfb8)
9000000000014b50:	001500ec 	move	$r12,$r7
9000000000014b54:	29fea2c8 	st.d	$r8,$r22,-88(0xfa8)
9000000000014b58:	0040818c 	slli.w	$r12,$r12,0x0
9000000000014b5c:	29bed2cc 	st.w	$r12,$r22,-76(0xfb4)
    size_t alen;
    if ((alen = iob->io_resid) > len) {
9000000000014b60:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000014b64:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000014b68:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000014b6c:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000014b70:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000014b74:	6c000d8d 	bgeu	$r12,$r13,12(0xc) # 9000000000014b80 <iobuf_move+0x4c>
        alen = len;
9000000000014b78:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000014b7c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    }
    if (alen > 0) {
9000000000014b80:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000014b84:	40006580 	beqz	$r12,100(0x64) # 9000000000014be8 <iobuf_move+0xb4>
        void *src = iob->io_base, *dst = data;
9000000000014b88:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000014b8c:	28c0018c 	ld.d	$r12,$r12,0
9000000000014b90:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000014b94:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000014b98:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        if (m2b) {
9000000000014b9c:	28bed2cc 	ld.w	$r12,$r22,-76(0xfb4)
9000000000014ba0:	40001d80 	beqz	$r12,28(0x1c) # 9000000000014bbc <iobuf_move+0x88>
            void *tmp = src;
9000000000014ba4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000014ba8:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
            src = dst, dst = tmp;
9000000000014bac:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000014bb0:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000014bb4:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000014bb8:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        }
        memmove(dst, src, alen);
9000000000014bbc:	28ffa2c6 	ld.d	$r6,$r22,-24(0xfe8)
9000000000014bc0:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
9000000000014bc4:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000014bc8:	56fa2fff 	bl	-67028(0xffefa2c) # 90000000000045f4 <memmove>
        iobuf_skip(iob, alen), len -= alen;
9000000000014bcc:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
9000000000014bd0:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000014bd4:	54010400 	bl	260(0x104) # 9000000000014cd8 <iobuf_skip>
9000000000014bd8:	28fee2cd 	ld.d	$r13,$r22,-72(0xfb8)
9000000000014bdc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000014be0:	0011b1ac 	sub.d	$r12,$r13,$r12
9000000000014be4:	29fee2cc 	st.d	$r12,$r22,-72(0xfb8)
    }
    if (copiedp != NULL) {
9000000000014be8:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
9000000000014bec:	40001180 	beqz	$r12,16(0x10) # 9000000000014bfc <iobuf_move+0xc8>
        *copiedp = alen;
9000000000014bf0:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
9000000000014bf4:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000014bf8:	29c0018d 	st.d	$r13,$r12,0
    }
    return (len == 0) ? 0 : -E_NO_MEM;
9000000000014bfc:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000014c00:	44000d80 	bnez	$r12,12(0xc) # 9000000000014c0c <iobuf_move+0xd8>
9000000000014c04:	0015000c 	move	$r12,$r0
9000000000014c08:	50000800 	b	8(0x8) # 9000000000014c10 <iobuf_move+0xdc>
9000000000014c0c:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
}
9000000000014c10:	00150184 	move	$r4,$r12
9000000000014c14:	28c16061 	ld.d	$r1,$r3,88(0x58)
9000000000014c18:	28c14076 	ld.d	$r22,$r3,80(0x50)
9000000000014c1c:	02c18063 	addi.d	$r3,$r3,96(0x60)
9000000000014c20:	4c000020 	jirl	$r0,$r1,0

9000000000014c24 <iobuf_move_zeros>:

int
iobuf_move_zeros(struct iobuf *iob, size_t len, size_t *copiedp) {
9000000000014c24:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000014c28:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000014c2c:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000014c30:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000014c34:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000014c38:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
9000000000014c3c:	29ff22c6 	st.d	$r6,$r22,-56(0xfc8)
    size_t alen;
    if ((alen = iob->io_resid) > len) {
9000000000014c40:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000014c44:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000014c48:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000014c4c:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000014c50:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000014c54:	6c000d8d 	bgeu	$r12,$r13,12(0xc) # 9000000000014c60 <iobuf_move_zeros+0x3c>
        alen = len;
9000000000014c58:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000014c5c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    }
    if (alen > 0) {
9000000000014c60:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000014c64:	40003980 	beqz	$r12,56(0x38) # 9000000000014c9c <iobuf_move_zeros+0x78>
        memset(iob->io_base, 0, alen);
9000000000014c68:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000014c6c:	28c0018c 	ld.d	$r12,$r12,0
9000000000014c70:	28ffa2c6 	ld.d	$r6,$r22,-24(0xfe8)
9000000000014c74:	00150005 	move	$r5,$r0
9000000000014c78:	00150184 	move	$r4,$r12
9000000000014c7c:	56f8a7ff 	bl	-67420(0xffef8a4) # 9000000000004520 <memset>
        iobuf_skip(iob, alen), len -= alen;
9000000000014c80:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
9000000000014c84:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000014c88:	54005000 	bl	80(0x50) # 9000000000014cd8 <iobuf_skip>
9000000000014c8c:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000014c90:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000014c94:	0011b1ac 	sub.d	$r12,$r13,$r12
9000000000014c98:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    }
    if (copiedp != NULL) {
9000000000014c9c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000014ca0:	40001180 	beqz	$r12,16(0x10) # 9000000000014cb0 <iobuf_move_zeros+0x8c>
        *copiedp = alen;
9000000000014ca4:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000014ca8:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000014cac:	29c0018d 	st.d	$r13,$r12,0
    }
    return (len == 0) ? 0 : -E_NO_MEM;
9000000000014cb0:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000014cb4:	44000d80 	bnez	$r12,12(0xc) # 9000000000014cc0 <iobuf_move_zeros+0x9c>
9000000000014cb8:	0015000c 	move	$r12,$r0
9000000000014cbc:	50000800 	b	8(0x8) # 9000000000014cc4 <iobuf_move_zeros+0xa0>
9000000000014cc0:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
}
9000000000014cc4:	00150184 	move	$r4,$r12
9000000000014cc8:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000000014ccc:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000000014cd0:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000014cd4:	4c000020 	jirl	$r0,$r1,0

9000000000014cd8 <iobuf_skip>:

void
iobuf_skip(struct iobuf *iob, size_t n) {
9000000000014cd8:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000014cdc:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000014ce0:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000014ce4:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000014ce8:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
9000000000014cec:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
    assert(iob->io_resid >= n);
9000000000014cf0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000014cf4:	28c0618c 	ld.d	$r12,$r12,24(0x18)
9000000000014cf8:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000014cfc:	6c001d8d 	bgeu	$r12,$r13,28(0x1c) # 9000000000014d18 <iobuf_skip+0x40>
9000000000014d00:	1c0001a6 	pcaddu12i	$r6,13(0xd)
9000000000014d04:	02d240c6 	addi.d	$r6,$r6,1168(0x490)
9000000000014d08:	0280d805 	addi.w	$r5,$r0,54(0x36)
9000000000014d0c:	1c0001a4 	pcaddu12i	$r4,13(0xd)
9000000000014d10:	02d2b084 	addi.d	$r4,$r4,1196(0x4ac)
9000000000014d14:	577f6fff 	bl	-32916(0xfff7f6c) # 900000000000cc80 <__panic>
    iob->io_base += n, iob->io_offset += n, iob->io_resid -= n;
9000000000014d18:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000014d1c:	28c0018d 	ld.d	$r13,$r12,0
9000000000014d20:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000014d24:	0010b1ad 	add.d	$r13,$r13,$r12
9000000000014d28:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000014d2c:	29c0018d 	st.d	$r13,$r12,0
9000000000014d30:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000014d34:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000014d38:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000014d3c:	0010b1ad 	add.d	$r13,$r13,$r12
9000000000014d40:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000014d44:	29c0218d 	st.d	$r13,$r12,8(0x8)
9000000000014d48:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000014d4c:	28c0618d 	ld.d	$r13,$r12,24(0x18)
9000000000014d50:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000014d54:	0011b1ad 	sub.d	$r13,$r13,$r12
9000000000014d58:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000014d5c:	29c0618d 	st.d	$r13,$r12,24(0x18)
}
9000000000014d60:	03400000 	andi	$r0,$r0,0x0
9000000000014d64:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000014d68:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000014d6c:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000014d70:	4c000020 	jirl	$r0,$r1,0

9000000000014d74 <fence_i>:
static void fence_i(void *va_start, int size) {
9000000000014d74:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000014d78:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000014d7c:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000014d80:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000014d84:	001500ac 	move	$r12,$r5
9000000000014d88:	0040818c 	slli.w	$r12,$r12,0x0
9000000000014d8c:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
9000000000014d90:	38720000 	dbar	0x0
    void *va_end = va_start + size;
9000000000014d94:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000014d98:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000014d9c:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000014da0:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
9000000000014da4:	50002000 	b	32(0x20) # 9000000000014dc4 <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
9000000000014da8:	06000189 	cacop	0x9,$r12,0
9000000000014dac:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
9000000000014db0:	06000188 	cacop	0x8,$r12,0
9000000000014db4:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
9000000000014db8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000014dbc:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000014dc0:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
9000000000014dc4:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000014dc8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000014dcc:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 9000000000014da8 <fence_i+0x34>
9000000000014dd0:	38728000 	ibar	0x0
}
9000000000014dd4:	03400000 	andi	$r0,$r0,0x0
9000000000014dd8:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000014ddc:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000014de0:	4c000020 	jirl	$r0,$r1,0

9000000000014de4 <lock_mm>:
lock_mm(struct mm_struct *mm) {
9000000000014de4:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000014de8:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000014dec:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000014df0:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000014df4:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    if (mm != NULL) {
9000000000014df8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000014dfc:	40003d80 	beqz	$r12,60(0x3c) # 9000000000014e38 <lock_mm+0x54>
        down(&(mm->mm_sem));
9000000000014e00:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000014e04:	02c0a18c 	addi.d	$r12,$r12,40(0x28)
9000000000014e08:	00150184 	move	$r4,$r12
9000000000014e0c:	57901fff 	bl	-28644(0xfff901c) # 900000000000de28 <down>
        if (current != NULL) {
9000000000014e10:	1c0041ac 	pcaddu12i	$r12,525(0x20d)
9000000000014e14:	28e5c18c 	ld.d	$r12,$r12,-1680(0x970)
9000000000014e18:	28c0018c 	ld.d	$r12,$r12,0
9000000000014e1c:	40001d80 	beqz	$r12,28(0x1c) # 9000000000014e38 <lock_mm+0x54>
            mm->locked_by = current->pid;
9000000000014e20:	1c0041ac 	pcaddu12i	$r12,525(0x20d)
9000000000014e24:	28e5818c 	ld.d	$r12,$r12,-1696(0x960)
9000000000014e28:	28c0018c 	ld.d	$r12,$r12,0
9000000000014e2c:	2880118d 	ld.w	$r13,$r12,4(0x4)
9000000000014e30:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000014e34:	2981018d 	st.w	$r13,$r12,64(0x40)
}
9000000000014e38:	03400000 	andi	$r0,$r0,0x0
9000000000014e3c:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000014e40:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000014e44:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000014e48:	4c000020 	jirl	$r0,$r1,0

9000000000014e4c <unlock_mm>:
unlock_mm(struct mm_struct *mm) {
9000000000014e4c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000014e50:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000014e54:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000014e58:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000014e5c:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    if (mm != NULL) {
9000000000014e60:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000014e64:	40001d80 	beqz	$r12,28(0x1c) # 9000000000014e80 <unlock_mm+0x34>
        up(&(mm->mm_sem));
9000000000014e68:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000014e6c:	02c0a18c 	addi.d	$r12,$r12,40(0x28)
9000000000014e70:	00150184 	move	$r4,$r12
9000000000014e74:	578f83ff 	bl	-28800(0xfff8f80) # 900000000000ddf4 <up>
        mm->locked_by = 0;
9000000000014e78:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000014e7c:	29810180 	st.w	$r0,$r12,64(0x40)
}
9000000000014e80:	03400000 	andi	$r0,$r0,0x0
9000000000014e84:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000014e88:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000014e8c:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000014e90:	4c000020 	jirl	$r0,$r1,0

9000000000014e94 <copy_path>:
#include <assert.h>

#define IOBUF_SIZE                          4096

static int
copy_path(char **to, const char *from) {
9000000000014e94:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000014e98:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000014e9c:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000014ea0:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000014ea4:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000014ea8:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
    struct mm_struct *mm = current->mm;
9000000000014eac:	1c0041ac 	pcaddu12i	$r12,525(0x20d)
9000000000014eb0:	28e3518c 	ld.d	$r12,$r12,-1836(0x8d4)
9000000000014eb4:	28c0018c 	ld.d	$r12,$r12,0
9000000000014eb8:	28c0a18c 	ld.d	$r12,$r12,40(0x28)
9000000000014ebc:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    char *buffer;
    if ((buffer = kmalloc(FS_MAX_FPATH_LEN + 1)) == NULL) {
9000000000014ec0:	14000024 	lu12i.w	$r4,1(0x1)
9000000000014ec4:	572777ff 	bl	-55436(0xfff2774) # 9000000000007638 <kmalloc>
9000000000014ec8:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)
9000000000014ecc:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000014ed0:	44000d80 	bnez	$r12,12(0xc) # 9000000000014edc <copy_path+0x48>
        return -E_NO_MEM;
9000000000014ed4:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
9000000000014ed8:	50005c00 	b	92(0x5c) # 9000000000014f34 <copy_path+0xa0>
    }
    lock_mm(mm);
9000000000014edc:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000014ee0:	57ff07ff 	bl	-252(0xfffff04) # 9000000000014de4 <lock_mm>
    if (!copy_string(mm, buffer, from, FS_MAX_FPATH_LEN + 1)) {
9000000000014ee4:	14000027 	lu12i.w	$r7,1(0x1)
9000000000014ee8:	28ff42c6 	ld.d	$r6,$r22,-48(0xfd0)
9000000000014eec:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
9000000000014ef0:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000014ef4:	57775fff 	bl	-34980(0xfff775c) # 900000000000c650 <copy_string>
9000000000014ef8:	0015008c 	move	$r12,$r4
9000000000014efc:	44002180 	bnez	$r12,32(0x20) # 9000000000014f1c <copy_path+0x88>
        unlock_mm(mm);
9000000000014f00:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000014f04:	57ff4bff 	bl	-184(0xfffff48) # 9000000000014e4c <unlock_mm>
        goto failed_cleanup;
9000000000014f08:	03400000 	andi	$r0,$r0,0x0
    unlock_mm(mm);
    *to = buffer;
    return 0;

failed_cleanup:
    kfree(buffer);
9000000000014f0c:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000014f10:	572c07ff 	bl	-54268(0xfff2c04) # 9000000000007b14 <kfree>
    return -E_INVAL;
9000000000014f14:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
9000000000014f18:	50001c00 	b	28(0x1c) # 9000000000014f34 <copy_path+0xa0>
    unlock_mm(mm);
9000000000014f1c:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000014f20:	57ff2fff 	bl	-212(0xfffff2c) # 9000000000014e4c <unlock_mm>
    *to = buffer;
9000000000014f24:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000014f28:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000014f2c:	29c0018d 	st.d	$r13,$r12,0
    return 0;
9000000000014f30:	0015000c 	move	$r12,$r0
}
9000000000014f34:	00150184 	move	$r4,$r12
9000000000014f38:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000014f3c:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000014f40:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000014f44:	4c000020 	jirl	$r0,$r1,0

9000000000014f48 <sysfile_open>:

int
sysfile_open(const char *__path, uint32_t open_flags) {
9000000000014f48:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000014f4c:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000014f50:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000014f54:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000014f58:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000014f5c:	001500ac 	move	$r12,$r5
9000000000014f60:	0040818c 	slli.w	$r12,$r12,0x0
9000000000014f64:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
9000000000014f68:	02ff82cc 	addi.d	$r12,$r22,-32(0xfe0)
9000000000014f6c:	28ff62c5 	ld.d	$r5,$r22,-40(0xfd8)
9000000000014f70:	00150184 	move	$r4,$r12
9000000000014f74:	57ff23ff 	bl	-224(0xfffff20) # 9000000000014e94 <copy_path>
9000000000014f78:	0015008c 	move	$r12,$r4
9000000000014f7c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000014f80:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000014f84:	40000d80 	beqz	$r12,12(0xc) # 9000000000014f90 <sysfile_open+0x48>
        return ret;
9000000000014f88:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000014f8c:	50003000 	b	48(0x30) # 9000000000014fbc <sysfile_open+0x74>
    }
    ret = file_open(path, open_flags);
9000000000014f90:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000014f94:	28bf52cd 	ld.w	$r13,$r22,-44(0xfd4)
9000000000014f98:	001501a5 	move	$r5,$r13
9000000000014f9c:	00150184 	move	$r4,$r12
9000000000014fa0:	57ea8bff 	bl	-5496(0xfffea88) # 9000000000013a28 <file_open>
9000000000014fa4:	0015008c 	move	$r12,$r4
9000000000014fa8:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    kfree(path);
9000000000014fac:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000014fb0:	00150184 	move	$r4,$r12
9000000000014fb4:	572b63ff 	bl	-54432(0xfff2b60) # 9000000000007b14 <kfree>
    return ret;
9000000000014fb8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
9000000000014fbc:	00150184 	move	$r4,$r12
9000000000014fc0:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000014fc4:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000014fc8:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000014fcc:	4c000020 	jirl	$r0,$r1,0

9000000000014fd0 <sysfile_close>:

int
sysfile_close(int fd) {
9000000000014fd0:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000014fd4:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000014fd8:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000014fdc:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000014fe0:	0015008c 	move	$r12,$r4
9000000000014fe4:	0040818c 	slli.w	$r12,$r12,0x0
9000000000014fe8:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    return file_close(fd);
9000000000014fec:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000014ff0:	00150184 	move	$r4,$r12
9000000000014ff4:	57ec3fff 	bl	-5060(0xfffec3c) # 9000000000013c30 <file_close>
9000000000014ff8:	0015008c 	move	$r12,$r4
}
9000000000014ffc:	00150184 	move	$r4,$r12
9000000000015000:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000015004:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000015008:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000001500c:	4c000020 	jirl	$r0,$r1,0

9000000000015010 <sysfile_read>:

int
sysfile_read(int fd, void *base, size_t len) {
9000000000015010:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
9000000000015014:	29c16061 	st.d	$r1,$r3,88(0x58)
9000000000015018:	29c14076 	st.d	$r22,$r3,80(0x50)
900000000001501c:	02c18076 	addi.d	$r22,$r3,96(0x60)
9000000000015020:	0015008c 	move	$r12,$r4
9000000000015024:	29fec2c5 	st.d	$r5,$r22,-80(0xfb0)
9000000000015028:	29fea2c6 	st.d	$r6,$r22,-88(0xfa8)
900000000001502c:	0040818c 	slli.w	$r12,$r12,0x0
9000000000015030:	29bef2cc 	st.w	$r12,$r22,-68(0xfbc)
    struct mm_struct *mm = current->mm;
9000000000015034:	1c00418c 	pcaddu12i	$r12,524(0x20c)
9000000000015038:	28dd318c 	ld.d	$r12,$r12,1868(0x74c)
900000000001503c:	28c0018c 	ld.d	$r12,$r12,0
9000000000015040:	28c0a18c 	ld.d	$r12,$r12,40(0x28)
9000000000015044:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    //kprintf("&& %08x %08x %d\n",current->fs_struct,current->fs_struct->pwd, current->fs_struct->fs_count.counter);
    if (len == 0) {
9000000000015048:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000001504c:	44000d80 	bnez	$r12,12(0xc) # 9000000000015058 <sysfile_read+0x48>
        return 0;
9000000000015050:	0015000c 	move	$r12,$r0
9000000000015054:	50017000 	b	368(0x170) # 90000000000151c4 <sysfile_read+0x1b4>
    }
    if (!file_testfd(fd, 1, 0)) {
9000000000015058:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
900000000001505c:	00150006 	move	$r6,$r0
9000000000015060:	02800405 	addi.w	$r5,$r0,1(0x1)
9000000000015064:	00150184 	move	$r4,$r12
9000000000015068:	57e913ff 	bl	-5872(0xfffe910) # 9000000000013978 <file_testfd>
900000000001506c:	0015008c 	move	$r12,$r4
9000000000015070:	44000d80 	bnez	$r12,12(0xc) # 900000000001507c <sysfile_read+0x6c>
        return -E_INVAL;
9000000000015074:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
9000000000015078:	50014c00 	b	332(0x14c) # 90000000000151c4 <sysfile_read+0x1b4>
    }
    void *buffer;
    if ((buffer = kmalloc(IOBUF_SIZE)) == NULL) {
900000000001507c:	14000024 	lu12i.w	$r4,1(0x1)
9000000000015080:	5725bbff 	bl	-55880(0xfff25b8) # 9000000000007638 <kmalloc>
9000000000015084:	29ff42c4 	st.d	$r4,$r22,-48(0xfd0)
9000000000015088:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001508c:	44000d80 	bnez	$r12,12(0xc) # 9000000000015098 <sysfile_read+0x88>
        return -E_NO_MEM;
9000000000015090:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
9000000000015094:	50013000 	b	304(0x130) # 90000000000151c4 <sysfile_read+0x1b4>
    }
    int ret = 0;
9000000000015098:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
    size_t copied = 0, alen;
900000000001509c:	29ff82c0 	st.d	$r0,$r22,-32(0xfe0)
    while (len != 0) {
90000000000150a0:	5000f800 	b	248(0xf8) # 9000000000015198 <sysfile_read+0x188>
        if ((alen = IOBUF_SIZE) > len) {
90000000000150a4:	1400002c 	lu12i.w	$r12,1(0x1)
90000000000150a8:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
90000000000150ac:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000150b0:	28fea2cd 	ld.d	$r13,$r22,-88(0xfa8)
90000000000150b4:	6c000dac 	bgeu	$r13,$r12,12(0xc) # 90000000000150c0 <sysfile_read+0xb0>
            alen = len;
90000000000150b8:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
90000000000150bc:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
        }
        ret = file_read(fd, buffer, alen, &alen);
90000000000150c0:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
90000000000150c4:	02ff22ce 	addi.d	$r14,$r22,-56(0xfc8)
90000000000150c8:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
90000000000150cc:	001501c7 	move	$r7,$r14
90000000000150d0:	001501a6 	move	$r6,$r13
90000000000150d4:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
90000000000150d8:	00150184 	move	$r4,$r12
90000000000150dc:	57ebc3ff 	bl	-5184(0xfffebc0) # 9000000000013c9c <file_read>
90000000000150e0:	0015008c 	move	$r12,$r4
90000000000150e4:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
        if (alen != 0) {
90000000000150e8:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000150ec:	40009d80 	beqz	$r12,156(0x9c) # 9000000000015188 <sysfile_read+0x178>
            lock_mm(mm);
90000000000150f0:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
90000000000150f4:	57fcf3ff 	bl	-784(0xffffcf0) # 9000000000014de4 <lock_mm>
            {
                if (copy_to_user(mm, base, buffer, alen)) {
90000000000150f8:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000150fc:	00150187 	move	$r7,$r12
9000000000015100:	28ff42c6 	ld.d	$r6,$r22,-48(0xfd0)
9000000000015104:	28fec2c5 	ld.d	$r5,$r22,-80(0xfb0)
9000000000015108:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001510c:	576acbff 	bl	-38200(0xfff6ac8) # 900000000000bbd4 <copy_to_user>
9000000000015110:	0015008c 	move	$r12,$r4
9000000000015114:	40005d80 	beqz	$r12,92(0x5c) # 9000000000015170 <sysfile_read+0x160>
                    assert(len >= alen);
9000000000015118:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001511c:	28fea2cd 	ld.d	$r13,$r22,-88(0xfa8)
9000000000015120:	6c001dac 	bgeu	$r13,$r12,28(0x1c) # 900000000001513c <sysfile_read+0x12c>
9000000000015124:	1c0001a6 	pcaddu12i	$r6,13(0xd)
9000000000015128:	02c290c6 	addi.d	$r6,$r6,164(0xa4)
900000000001512c:	02814405 	addi.w	$r5,$r0,81(0x51)
9000000000015130:	1c0001a4 	pcaddu12i	$r4,13(0xd)
9000000000015134:	02c2e084 	addi.d	$r4,$r4,184(0xb8)
9000000000015138:	577b4bff 	bl	-33976(0xfff7b48) # 900000000000cc80 <__panic>
                    base += alen, len -= alen, copied += alen;
900000000001513c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000015140:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
9000000000015144:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000015148:	29fec2cc 	st.d	$r12,$r22,-80(0xfb0)
900000000001514c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000015150:	28fea2cd 	ld.d	$r13,$r22,-88(0xfa8)
9000000000015154:	0011b1ac 	sub.d	$r12,$r13,$r12
9000000000015158:	29fea2cc 	st.d	$r12,$r22,-88(0xfa8)
900000000001515c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000015160:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000015164:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000015168:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
900000000001516c:	50001400 	b	20(0x14) # 9000000000015180 <sysfile_read+0x170>
                    
                }
                else if (ret == 0) {
9000000000015170:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000015174:	44000d80 	bnez	$r12,12(0xc) # 9000000000015180 <sysfile_read+0x170>
                    ret = -E_INVAL;
9000000000015178:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
900000000001517c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
                }
            }
            unlock_mm(mm);
9000000000015180:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000015184:	57fccbff 	bl	-824(0xffffcc8) # 9000000000014e4c <unlock_mm>
        }
        if (ret != 0 || alen == 0) {
9000000000015188:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001518c:	44001980 	bnez	$r12,24(0x18) # 90000000000151a4 <sysfile_read+0x194>
9000000000015190:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000015194:	40001180 	beqz	$r12,16(0x10) # 90000000000151a4 <sysfile_read+0x194>
    while (len != 0) {
9000000000015198:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000001519c:	47ff099f 	bnez	$r12,-248(0x7fff08) # 90000000000150a4 <sysfile_read+0x94>
            goto out;
        }
    }
    
out:
90000000000151a0:	50000800 	b	8(0x8) # 90000000000151a8 <sysfile_read+0x198>
            goto out;
90000000000151a4:	03400000 	andi	$r0,$r0,0x0
    kfree(buffer);
90000000000151a8:	28ff42c4 	ld.d	$r4,$r22,-48(0xfd0)
90000000000151ac:	57296bff 	bl	-54936(0xfff2968) # 9000000000007b14 <kfree>
    if (copied != 0) {
90000000000151b0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000151b4:	40000d80 	beqz	$r12,12(0xc) # 90000000000151c0 <sysfile_read+0x1b0>
        return copied;
90000000000151b8:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
90000000000151bc:	50000800 	b	8(0x8) # 90000000000151c4 <sysfile_read+0x1b4>
    }
    return ret;
90000000000151c0:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
90000000000151c4:	00150184 	move	$r4,$r12
90000000000151c8:	28c16061 	ld.d	$r1,$r3,88(0x58)
90000000000151cc:	28c14076 	ld.d	$r22,$r3,80(0x50)
90000000000151d0:	02c18063 	addi.d	$r3,$r3,96(0x60)
90000000000151d4:	4c000020 	jirl	$r0,$r1,0

90000000000151d8 <sysfile_write>:

int
sysfile_write(int fd, void *base, size_t len) {
90000000000151d8:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
90000000000151dc:	29c16061 	st.d	$r1,$r3,88(0x58)
90000000000151e0:	29c14076 	st.d	$r22,$r3,80(0x50)
90000000000151e4:	02c18076 	addi.d	$r22,$r3,96(0x60)
90000000000151e8:	0015008c 	move	$r12,$r4
90000000000151ec:	29fec2c5 	st.d	$r5,$r22,-80(0xfb0)
90000000000151f0:	29fea2c6 	st.d	$r6,$r22,-88(0xfa8)
90000000000151f4:	0040818c 	slli.w	$r12,$r12,0x0
90000000000151f8:	29bef2cc 	st.w	$r12,$r22,-68(0xfbc)
    struct mm_struct *mm = current->mm;
90000000000151fc:	1c00418c 	pcaddu12i	$r12,524(0x20c)
9000000000015200:	28d6118c 	ld.d	$r12,$r12,1412(0x584)
9000000000015204:	28c0018c 	ld.d	$r12,$r12,0
9000000000015208:	28c0a18c 	ld.d	$r12,$r12,40(0x28)
900000000001520c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    if (len == 0) {
9000000000015210:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
9000000000015214:	44000d80 	bnez	$r12,12(0xc) # 9000000000015220 <sysfile_write+0x48>
        return 0;
9000000000015218:	0015000c 	move	$r12,$r0
900000000001521c:	50017000 	b	368(0x170) # 900000000001538c <sysfile_write+0x1b4>
    }
    if (!file_testfd(fd, 0, 1)) {
9000000000015220:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
9000000000015224:	02800406 	addi.w	$r6,$r0,1(0x1)
9000000000015228:	00150005 	move	$r5,$r0
900000000001522c:	00150184 	move	$r4,$r12
9000000000015230:	57e74bff 	bl	-6328(0xfffe748) # 9000000000013978 <file_testfd>
9000000000015234:	0015008c 	move	$r12,$r4
9000000000015238:	44000d80 	bnez	$r12,12(0xc) # 9000000000015244 <sysfile_write+0x6c>
        return -E_INVAL;
900000000001523c:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
9000000000015240:	50014c00 	b	332(0x14c) # 900000000001538c <sysfile_write+0x1b4>
    }
    void *buffer;
    if ((buffer = kmalloc(IOBUF_SIZE)) == NULL) {
9000000000015244:	14000024 	lu12i.w	$r4,1(0x1)
9000000000015248:	5723f3ff 	bl	-56336(0xfff23f0) # 9000000000007638 <kmalloc>
900000000001524c:	29ff42c4 	st.d	$r4,$r22,-48(0xfd0)
9000000000015250:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000015254:	44000d80 	bnez	$r12,12(0xc) # 9000000000015260 <sysfile_write+0x88>
        return -E_NO_MEM;
9000000000015258:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
900000000001525c:	50013000 	b	304(0x130) # 900000000001538c <sysfile_write+0x1b4>
    }

    int ret = 0;
9000000000015260:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
    size_t copied = 0, alen;
9000000000015264:	29ff82c0 	st.d	$r0,$r22,-32(0xfe0)
    while (len != 0) {
9000000000015268:	5000f800 	b	248(0xf8) # 9000000000015360 <sysfile_write+0x188>
        if ((alen = IOBUF_SIZE) > len) {
900000000001526c:	1400002c 	lu12i.w	$r12,1(0x1)
9000000000015270:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
9000000000015274:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000015278:	28fea2cd 	ld.d	$r13,$r22,-88(0xfa8)
900000000001527c:	6c000dac 	bgeu	$r13,$r12,12(0xc) # 9000000000015288 <sysfile_write+0xb0>
            alen = len;
9000000000015280:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
9000000000015284:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
        }
        lock_mm(mm);
9000000000015288:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001528c:	57fb5bff 	bl	-1192(0xffffb58) # 9000000000014de4 <lock_mm>
        {
            if (!copy_from_user(mm, buffer, base, alen, 0)) {
9000000000015290:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000015294:	00150008 	move	$r8,$r0
9000000000015298:	00150187 	move	$r7,$r12
900000000001529c:	28fec2c6 	ld.d	$r6,$r22,-80(0xfb0)
90000000000152a0:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
90000000000152a4:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
90000000000152a8:	5768afff 	bl	-38740(0xfff68ac) # 900000000000bb54 <copy_from_user>
90000000000152ac:	0015008c 	move	$r12,$r4
90000000000152b0:	44000d80 	bnez	$r12,12(0xc) # 90000000000152bc <sysfile_write+0xe4>
                ret = -E_INVAL;
90000000000152b4:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
90000000000152b8:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
            }
        }
        unlock_mm(mm);
90000000000152bc:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
90000000000152c0:	57fb8fff 	bl	-1140(0xffffb8c) # 9000000000014e4c <unlock_mm>
        if (ret == 0) {
90000000000152c4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000152c8:	44008980 	bnez	$r12,136(0x88) # 9000000000015350 <sysfile_write+0x178>
            ret = file_write(fd, buffer, alen, &alen);
90000000000152cc:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
90000000000152d0:	02ff22ce 	addi.d	$r14,$r22,-56(0xfc8)
90000000000152d4:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
90000000000152d8:	001501c7 	move	$r7,$r14
90000000000152dc:	001501a6 	move	$r6,$r13
90000000000152e0:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
90000000000152e4:	00150184 	move	$r4,$r12
90000000000152e8:	57eb4bff 	bl	-5304(0xfffeb48) # 9000000000013e30 <file_write>
90000000000152ec:	0015008c 	move	$r12,$r4
90000000000152f0:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
            if (alen != 0) {
90000000000152f4:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000152f8:	40005980 	beqz	$r12,88(0x58) # 9000000000015350 <sysfile_write+0x178>
                assert(len >= alen);
90000000000152fc:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000015300:	28fea2cd 	ld.d	$r13,$r22,-88(0xfa8)
9000000000015304:	6c001dac 	bgeu	$r13,$r12,28(0x1c) # 9000000000015320 <sysfile_write+0x148>
9000000000015308:	1c0001a6 	pcaddu12i	$r6,13(0xd)
900000000001530c:	02fb00c6 	addi.d	$r6,$r6,-320(0xec0)
9000000000015310:	02821805 	addi.w	$r5,$r0,134(0x86)
9000000000015314:	1c0001a4 	pcaddu12i	$r4,13(0xd)
9000000000015318:	02fb5084 	addi.d	$r4,$r4,-300(0xed4)
900000000001531c:	577967ff 	bl	-34460(0xfff7964) # 900000000000cc80 <__panic>
                base += alen, len -= alen, copied += alen;
9000000000015320:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000015324:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
9000000000015328:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001532c:	29fec2cc 	st.d	$r12,$r22,-80(0xfb0)
9000000000015330:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000015334:	28fea2cd 	ld.d	$r13,$r22,-88(0xfa8)
9000000000015338:	0011b1ac 	sub.d	$r12,$r13,$r12
900000000001533c:	29fea2cc 	st.d	$r12,$r22,-88(0xfa8)
9000000000015340:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000015344:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000015348:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001534c:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
            }
        }
        if (ret != 0 || alen == 0) {
9000000000015350:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000015354:	44001980 	bnez	$r12,24(0x18) # 900000000001536c <sysfile_write+0x194>
9000000000015358:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001535c:	40001180 	beqz	$r12,16(0x10) # 900000000001536c <sysfile_write+0x194>
    while (len != 0) {
9000000000015360:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
9000000000015364:	47ff099f 	bnez	$r12,-248(0x7fff08) # 900000000001526c <sysfile_write+0x94>
            goto out;
        }
    }

out:
9000000000015368:	50000800 	b	8(0x8) # 9000000000015370 <sysfile_write+0x198>
            goto out;
900000000001536c:	03400000 	andi	$r0,$r0,0x0
    kfree(buffer);
9000000000015370:	28ff42c4 	ld.d	$r4,$r22,-48(0xfd0)
9000000000015374:	5727a3ff 	bl	-55392(0xfff27a0) # 9000000000007b14 <kfree>
    if (copied != 0) {
9000000000015378:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001537c:	40000d80 	beqz	$r12,12(0xc) # 9000000000015388 <sysfile_write+0x1b0>
        return copied;
9000000000015380:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
9000000000015384:	50000800 	b	8(0x8) # 900000000001538c <sysfile_write+0x1b4>
    }
    return ret;
9000000000015388:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
900000000001538c:	00150184 	move	$r4,$r12
9000000000015390:	28c16061 	ld.d	$r1,$r3,88(0x58)
9000000000015394:	28c14076 	ld.d	$r22,$r3,80(0x50)
9000000000015398:	02c18063 	addi.d	$r3,$r3,96(0x60)
900000000001539c:	4c000020 	jirl	$r0,$r1,0

90000000000153a0 <sysfile_seek>:

int
sysfile_seek(int fd, off_t pos, int whence) {
90000000000153a0:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000000153a4:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000000153a8:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000000153ac:	02c08076 	addi.d	$r22,$r3,32(0x20)
90000000000153b0:	0015008d 	move	$r13,$r4
90000000000153b4:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
90000000000153b8:	001500cc 	move	$r12,$r6
90000000000153bc:	004081ad 	slli.w	$r13,$r13,0x0
90000000000153c0:	29bfb2cd 	st.w	$r13,$r22,-20(0xfec)
90000000000153c4:	0040818c 	slli.w	$r12,$r12,0x0
90000000000153c8:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
    return file_seek(fd, pos, whence);
90000000000153cc:	28bfa2cd 	ld.w	$r13,$r22,-24(0xfe8)
90000000000153d0:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000153d4:	001501a6 	move	$r6,$r13
90000000000153d8:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
90000000000153dc:	00150184 	move	$r4,$r12
90000000000153e0:	57ebe7ff 	bl	-5148(0xfffebe4) # 9000000000013fc4 <file_seek>
90000000000153e4:	0015008c 	move	$r12,$r4
}
90000000000153e8:	00150184 	move	$r4,$r12
90000000000153ec:	28c06061 	ld.d	$r1,$r3,24(0x18)
90000000000153f0:	28c04076 	ld.d	$r22,$r3,16(0x10)
90000000000153f4:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000000153f8:	4c000020 	jirl	$r0,$r1,0

90000000000153fc <sysfile_fstat>:

int
sysfile_fstat(int fd, struct stat *__stat) {
90000000000153fc:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
9000000000015400:	29c16061 	st.d	$r1,$r3,88(0x58)
9000000000015404:	29c14076 	st.d	$r22,$r3,80(0x50)
9000000000015408:	02c18076 	addi.d	$r22,$r3,96(0x60)
900000000001540c:	0015008c 	move	$r12,$r4
9000000000015410:	29fe82c5 	st.d	$r5,$r22,-96(0xfa0)
9000000000015414:	0040818c 	slli.w	$r12,$r12,0x0
9000000000015418:	29beb2cc 	st.w	$r12,$r22,-84(0xfac)
    struct mm_struct *mm = current->mm;
900000000001541c:	1c00418c 	pcaddu12i	$r12,524(0x20c)
9000000000015420:	28cd918c 	ld.d	$r12,$r12,868(0x364)
9000000000015424:	28c0018c 	ld.d	$r12,$r12,0
9000000000015428:	28c0a18c 	ld.d	$r12,$r12,40(0x28)
900000000001542c:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    int ret;
    struct stat __local_stat, *stat = &__local_stat;
9000000000015430:	02fee2cc 	addi.d	$r12,$r22,-72(0xfb8)
9000000000015434:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    if ((ret = file_fstat(fd, stat)) != 0) {
9000000000015438:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
900000000001543c:	28ff62c5 	ld.d	$r5,$r22,-40(0xfd8)
9000000000015440:	00150184 	move	$r4,$r12
9000000000015444:	57eda3ff 	bl	-4704(0xfffeda0) # 90000000000141e4 <file_fstat>
9000000000015448:	0015008c 	move	$r12,$r4
900000000001544c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000015450:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000015454:	40000d80 	beqz	$r12,12(0xc) # 9000000000015460 <sysfile_fstat+0x64>
        return ret;
9000000000015458:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001545c:	50003c00 	b	60(0x3c) # 9000000000015498 <sysfile_fstat+0x9c>
    }

    lock_mm(mm);
9000000000015460:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000015464:	57f983ff 	bl	-1664(0xffff980) # 9000000000014de4 <lock_mm>
    {
        if (!copy_to_user(mm, __stat, stat, sizeof(struct stat))) {
9000000000015468:	02808007 	addi.w	$r7,$r0,32(0x20)
900000000001546c:	28ff62c6 	ld.d	$r6,$r22,-40(0xfd8)
9000000000015470:	28fe82c5 	ld.d	$r5,$r22,-96(0xfa0)
9000000000015474:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000015478:	57675fff 	bl	-39076(0xfff675c) # 900000000000bbd4 <copy_to_user>
900000000001547c:	0015008c 	move	$r12,$r4
9000000000015480:	44000d80 	bnez	$r12,12(0xc) # 900000000001548c <sysfile_fstat+0x90>
            ret = -E_INVAL;
9000000000015484:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
9000000000015488:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
        }
    }
    unlock_mm(mm);
900000000001548c:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000015490:	57f9bfff 	bl	-1604(0xffff9bc) # 9000000000014e4c <unlock_mm>
    return ret;
9000000000015494:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
9000000000015498:	00150184 	move	$r4,$r12
900000000001549c:	28c16061 	ld.d	$r1,$r3,88(0x58)
90000000000154a0:	28c14076 	ld.d	$r22,$r3,80(0x50)
90000000000154a4:	02c18063 	addi.d	$r3,$r3,96(0x60)
90000000000154a8:	4c000020 	jirl	$r0,$r1,0

90000000000154ac <sysfile_fsync>:

int
sysfile_fsync(int fd) {
90000000000154ac:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000000154b0:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000000154b4:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000000154b8:	02c08076 	addi.d	$r22,$r3,32(0x20)
90000000000154bc:	0015008c 	move	$r12,$r4
90000000000154c0:	0040818c 	slli.w	$r12,$r12,0x0
90000000000154c4:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    return file_fsync(fd);
90000000000154c8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000154cc:	00150184 	move	$r4,$r12
90000000000154d0:	57ee13ff 	bl	-4592(0xfffee10) # 90000000000142e0 <file_fsync>
90000000000154d4:	0015008c 	move	$r12,$r4
}
90000000000154d8:	00150184 	move	$r4,$r12
90000000000154dc:	28c06061 	ld.d	$r1,$r3,24(0x18)
90000000000154e0:	28c04076 	ld.d	$r22,$r3,16(0x10)
90000000000154e4:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000000154e8:	4c000020 	jirl	$r0,$r1,0

90000000000154ec <sysfile_chdir>:

int
sysfile_chdir(const char *__path) {
90000000000154ec:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000000154f0:	29c0a061 	st.d	$r1,$r3,40(0x28)
90000000000154f4:	29c08076 	st.d	$r22,$r3,32(0x20)
90000000000154f8:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000000154fc:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
9000000000015500:	02ff82cc 	addi.d	$r12,$r22,-32(0xfe0)
9000000000015504:	28ff62c5 	ld.d	$r5,$r22,-40(0xfd8)
9000000000015508:	00150184 	move	$r4,$r12
900000000001550c:	57f98bff 	bl	-1656(0xffff988) # 9000000000014e94 <copy_path>
9000000000015510:	0015008c 	move	$r12,$r4
9000000000015514:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000015518:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001551c:	40000d80 	beqz	$r12,12(0xc) # 9000000000015528 <sysfile_chdir+0x3c>
        return ret;
9000000000015520:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000015524:	50002800 	b	40(0x28) # 900000000001554c <sysfile_chdir+0x60>
    }
    ret = vfs_chdir(path);
9000000000015528:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001552c:	00150184 	move	$r4,$r12
9000000000015530:	5426e000 	bl	9952(0x26e0) # 9000000000017c10 <vfs_chdir>
9000000000015534:	0015008c 	move	$r12,$r4
9000000000015538:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    kfree(path);
900000000001553c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000015540:	00150184 	move	$r4,$r12
9000000000015544:	5725d3ff 	bl	-55856(0xfff25d0) # 9000000000007b14 <kfree>
    return ret;
9000000000015548:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
900000000001554c:	00150184 	move	$r4,$r12
9000000000015550:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000015554:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000015558:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001555c:	4c000020 	jirl	$r0,$r1,0

9000000000015560 <sysfile_link>:

int
sysfile_link(const char *__path1, const char *__path2) {
9000000000015560:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000015564:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000015568:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000001556c:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000015570:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
9000000000015574:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
    int ret;
    char *old_path, *new_path;
    if ((ret = copy_path(&old_path, __path1)) != 0) {
9000000000015578:	02ff82cc 	addi.d	$r12,$r22,-32(0xfe0)
900000000001557c:	28ff22c5 	ld.d	$r5,$r22,-56(0xfc8)
9000000000015580:	00150184 	move	$r4,$r12
9000000000015584:	57f913ff 	bl	-1776(0xffff910) # 9000000000014e94 <copy_path>
9000000000015588:	0015008c 	move	$r12,$r4
900000000001558c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000015590:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000015594:	40000d80 	beqz	$r12,12(0xc) # 90000000000155a0 <sysfile_link+0x40>
        return ret;
9000000000015598:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001559c:	50007000 	b	112(0x70) # 900000000001560c <sysfile_link+0xac>
    }
    if ((ret = copy_path(&new_path, __path2)) != 0) {
90000000000155a0:	02ff62cc 	addi.d	$r12,$r22,-40(0xfd8)
90000000000155a4:	28ff02c5 	ld.d	$r5,$r22,-64(0xfc0)
90000000000155a8:	00150184 	move	$r4,$r12
90000000000155ac:	57f8ebff 	bl	-1816(0xffff8e8) # 9000000000014e94 <copy_path>
90000000000155b0:	0015008c 	move	$r12,$r4
90000000000155b4:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
90000000000155b8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000155bc:	40001980 	beqz	$r12,24(0x18) # 90000000000155d4 <sysfile_link+0x74>
        kfree(old_path);
90000000000155c0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000155c4:	00150184 	move	$r4,$r12
90000000000155c8:	57254fff 	bl	-55988(0xfff254c) # 9000000000007b14 <kfree>
        return ret;
90000000000155cc:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000155d0:	50003c00 	b	60(0x3c) # 900000000001560c <sysfile_link+0xac>
    }
    ret = vfs_link(old_path, new_path);
90000000000155d4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000155d8:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
90000000000155dc:	001501a5 	move	$r5,$r13
90000000000155e0:	00150184 	move	$r4,$r12
90000000000155e4:	541e6400 	bl	7780(0x1e64) # 9000000000017448 <vfs_link>
90000000000155e8:	0015008c 	move	$r12,$r4
90000000000155ec:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    kfree(old_path), kfree(new_path);
90000000000155f0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000155f4:	00150184 	move	$r4,$r12
90000000000155f8:	57251fff 	bl	-56036(0xfff251c) # 9000000000007b14 <kfree>
90000000000155fc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000015600:	00150184 	move	$r4,$r12
9000000000015604:	572513ff 	bl	-56048(0xfff2510) # 9000000000007b14 <kfree>
    return ret;
9000000000015608:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
900000000001560c:	00150184 	move	$r4,$r12
9000000000015610:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000000015614:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000000015618:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000001561c:	4c000020 	jirl	$r0,$r1,0

9000000000015620 <sysfile_rename>:

int
sysfile_rename(const char *__path1, const char *__path2) {
9000000000015620:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000015624:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000015628:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000001562c:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000015630:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
9000000000015634:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
    int ret;
    char *old_path, *new_path;
    if ((ret = copy_path(&old_path, __path1)) != 0) {
9000000000015638:	02ff82cc 	addi.d	$r12,$r22,-32(0xfe0)
900000000001563c:	28ff22c5 	ld.d	$r5,$r22,-56(0xfc8)
9000000000015640:	00150184 	move	$r4,$r12
9000000000015644:	57f853ff 	bl	-1968(0xffff850) # 9000000000014e94 <copy_path>
9000000000015648:	0015008c 	move	$r12,$r4
900000000001564c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000015650:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000015654:	40000d80 	beqz	$r12,12(0xc) # 9000000000015660 <sysfile_rename+0x40>
        return ret;
9000000000015658:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001565c:	50007000 	b	112(0x70) # 90000000000156cc <sysfile_rename+0xac>
    }
    if ((ret = copy_path(&new_path, __path2)) != 0) {
9000000000015660:	02ff62cc 	addi.d	$r12,$r22,-40(0xfd8)
9000000000015664:	28ff02c5 	ld.d	$r5,$r22,-64(0xfc0)
9000000000015668:	00150184 	move	$r4,$r12
900000000001566c:	57f82bff 	bl	-2008(0xffff828) # 9000000000014e94 <copy_path>
9000000000015670:	0015008c 	move	$r12,$r4
9000000000015674:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000015678:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001567c:	40001980 	beqz	$r12,24(0x18) # 9000000000015694 <sysfile_rename+0x74>
        kfree(old_path);
9000000000015680:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000015684:	00150184 	move	$r4,$r12
9000000000015688:	57248fff 	bl	-56180(0xfff248c) # 9000000000007b14 <kfree>
        return ret;
900000000001568c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000015690:	50003c00 	b	60(0x3c) # 90000000000156cc <sysfile_rename+0xac>
    }
    ret = vfs_rename(old_path, new_path);
9000000000015694:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000015698:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000001569c:	001501a5 	move	$r5,$r13
90000000000156a0:	00150184 	move	$r4,$r12
90000000000156a4:	541d7c00 	bl	7548(0x1d7c) # 9000000000017420 <vfs_rename>
90000000000156a8:	0015008c 	move	$r12,$r4
90000000000156ac:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    kfree(old_path), kfree(new_path);
90000000000156b0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000156b4:	00150184 	move	$r4,$r12
90000000000156b8:	57245fff 	bl	-56228(0xfff245c) # 9000000000007b14 <kfree>
90000000000156bc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000156c0:	00150184 	move	$r4,$r12
90000000000156c4:	572453ff 	bl	-56240(0xfff2450) # 9000000000007b14 <kfree>
    return ret;
90000000000156c8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
90000000000156cc:	00150184 	move	$r4,$r12
90000000000156d0:	28c0e061 	ld.d	$r1,$r3,56(0x38)
90000000000156d4:	28c0c076 	ld.d	$r22,$r3,48(0x30)
90000000000156d8:	02c10063 	addi.d	$r3,$r3,64(0x40)
90000000000156dc:	4c000020 	jirl	$r0,$r1,0

90000000000156e0 <sysfile_unlink>:

int
sysfile_unlink(const char *__path) {
90000000000156e0:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000000156e4:	29c0a061 	st.d	$r1,$r3,40(0x28)
90000000000156e8:	29c08076 	st.d	$r22,$r3,32(0x20)
90000000000156ec:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000000156f0:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
90000000000156f4:	02ff82cc 	addi.d	$r12,$r22,-32(0xfe0)
90000000000156f8:	28ff62c5 	ld.d	$r5,$r22,-40(0xfd8)
90000000000156fc:	00150184 	move	$r4,$r12
9000000000015700:	57f797ff 	bl	-2156(0xffff794) # 9000000000014e94 <copy_path>
9000000000015704:	0015008c 	move	$r12,$r4
9000000000015708:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000001570c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000015710:	40000d80 	beqz	$r12,12(0xc) # 900000000001571c <sysfile_unlink+0x3c>
        return ret;
9000000000015714:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000015718:	50002800 	b	40(0x28) # 9000000000015740 <sysfile_unlink+0x60>
    }
    ret = vfs_unlink(path);
900000000001571c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000015720:	00150184 	move	$r4,$r12
9000000000015724:	541cd800 	bl	7384(0x1cd8) # 90000000000173fc <vfs_unlink>
9000000000015728:	0015008c 	move	$r12,$r4
900000000001572c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    kfree(path);
9000000000015730:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000015734:	00150184 	move	$r4,$r12
9000000000015738:	5723dfff 	bl	-56356(0xfff23dc) # 9000000000007b14 <kfree>
    return ret;
900000000001573c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
9000000000015740:	00150184 	move	$r4,$r12
9000000000015744:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000015748:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000001574c:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000015750:	4c000020 	jirl	$r0,$r1,0

9000000000015754 <sysfile_getcwd>:

int
sysfile_getcwd(char *buf, size_t len) {
9000000000015754:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
9000000000015758:	29c16061 	st.d	$r1,$r3,88(0x58)
900000000001575c:	29c14076 	st.d	$r22,$r3,80(0x50)
9000000000015760:	02c18076 	addi.d	$r22,$r3,96(0x60)
9000000000015764:	29fea2c4 	st.d	$r4,$r22,-88(0xfa8)
9000000000015768:	29fe82c5 	st.d	$r5,$r22,-96(0xfa0)
    struct mm_struct *mm = current->mm;
900000000001576c:	1c00418c 	pcaddu12i	$r12,524(0x20c)
9000000000015770:	28c0518c 	ld.d	$r12,$r12,20(0x14)
9000000000015774:	28c0018c 	ld.d	$r12,$r12,0
9000000000015778:	28c0a18c 	ld.d	$r12,$r12,40(0x28)
900000000001577c:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    if (len == 0) {
9000000000015780:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
9000000000015784:	44000d80 	bnez	$r12,12(0xc) # 9000000000015790 <sysfile_getcwd+0x3c>
        return -E_INVAL;
9000000000015788:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
900000000001578c:	50006c00 	b	108(0x6c) # 90000000000157f8 <sysfile_getcwd+0xa4>
    }

    int ret = -E_INVAL;
9000000000015790:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
9000000000015794:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    lock_mm(mm);
9000000000015798:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
900000000001579c:	57f64bff 	bl	-2488(0xffff648) # 9000000000014de4 <lock_mm>
    {
        if (user_mem_check(mm, (uintptr_t)buf, len, 1)) {
90000000000157a0:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
90000000000157a4:	02800407 	addi.w	$r7,$r0,1(0x1)
90000000000157a8:	28fe82c6 	ld.d	$r6,$r22,-96(0xfa0)
90000000000157ac:	00150185 	move	$r5,$r12
90000000000157b0:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
90000000000157b4:	576ccfff 	bl	-37684(0xfff6ccc) # 900000000000c480 <user_mem_check>
90000000000157b8:	0015008c 	move	$r12,$r4
90000000000157bc:	40003180 	beqz	$r12,48(0x30) # 90000000000157ec <sysfile_getcwd+0x98>
            struct iobuf __iob, *iob = iobuf_init(&__iob, buf, len, 0);
90000000000157c0:	02fee2cc 	addi.d	$r12,$r22,-72(0xfb8)
90000000000157c4:	00150007 	move	$r7,$r0
90000000000157c8:	28fe82c6 	ld.d	$r6,$r22,-96(0xfa0)
90000000000157cc:	28fea2c5 	ld.d	$r5,$r22,-88(0xfa8)
90000000000157d0:	00150184 	move	$r4,$r12
90000000000157d4:	57f2ffff 	bl	-3332(0xffff2fc) # 9000000000014ad0 <iobuf_init>
90000000000157d8:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
            ret = vfs_getcwd(iob);
90000000000157dc:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
90000000000157e0:	54249c00 	bl	9372(0x249c) # 9000000000017c7c <vfs_getcwd>
90000000000157e4:	0015008c 	move	$r12,$r4
90000000000157e8:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
        }
    }
    unlock_mm(mm);
90000000000157ec:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
90000000000157f0:	57f65fff 	bl	-2468(0xffff65c) # 9000000000014e4c <unlock_mm>
    return ret;
90000000000157f4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
90000000000157f8:	00150184 	move	$r4,$r12
90000000000157fc:	28c16061 	ld.d	$r1,$r3,88(0x58)
9000000000015800:	28c14076 	ld.d	$r22,$r3,80(0x50)
9000000000015804:	02c18063 	addi.d	$r3,$r3,96(0x60)
9000000000015808:	4c000020 	jirl	$r0,$r1,0

900000000001580c <sysfile_getdirentry>:

int
sysfile_getdirentry(int fd, struct dirent *__direntp) {
900000000001580c:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000015810:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000015814:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000015818:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000001581c:	0015008c 	move	$r12,$r4
9000000000015820:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
9000000000015824:	0040818c 	slli.w	$r12,$r12,0x0
9000000000015828:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
    struct mm_struct *mm = current->mm;
900000000001582c:	1c00418c 	pcaddu12i	$r12,524(0x20c)
9000000000015830:	28fd518c 	ld.d	$r12,$r12,-172(0xf54)
9000000000015834:	28c0018c 	ld.d	$r12,$r12,0
9000000000015838:	28c0a18c 	ld.d	$r12,$r12,40(0x28)
900000000001583c:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    struct dirent *direntp;
    if ((direntp = kmalloc(sizeof(struct dirent))) == NULL) {
9000000000015840:	02842004 	addi.w	$r4,$r0,264(0x108)
9000000000015844:	571df7ff 	bl	-57868(0xfff1df4) # 9000000000007638 <kmalloc>
9000000000015848:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000001584c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000015850:	44000d80 	bnez	$r12,12(0xc) # 900000000001585c <sysfile_getdirentry+0x50>
        return -E_NO_MEM;
9000000000015854:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
9000000000015858:	5000b800 	b	184(0xb8) # 9000000000015910 <sysfile_getdirentry+0x104>
    }

    int ret = 0;
900000000001585c:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
    lock_mm(mm);
9000000000015860:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000015864:	57f583ff 	bl	-2688(0xffff580) # 9000000000014de4 <lock_mm>
    {
        if (!copy_from_user(mm, &(direntp->offset), &(__direntp->offset), sizeof(direntp->offset), 1)) {
9000000000015868:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001586c:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
9000000000015870:	02800408 	addi.w	$r8,$r0,1(0x1)
9000000000015874:	02802007 	addi.w	$r7,$r0,8(0x8)
9000000000015878:	001501a6 	move	$r6,$r13
900000000001587c:	00150185 	move	$r5,$r12
9000000000015880:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000015884:	5762d3ff 	bl	-40240(0xfff62d0) # 900000000000bb54 <copy_from_user>
9000000000015888:	0015008c 	move	$r12,$r4
900000000001588c:	44000d80 	bnez	$r12,12(0xc) # 9000000000015898 <sysfile_getdirentry+0x8c>
            ret = -E_INVAL;
9000000000015890:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
9000000000015894:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
        }
    }
    unlock_mm(mm);
9000000000015898:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
900000000001589c:	57f5b3ff 	bl	-2640(0xffff5b0) # 9000000000014e4c <unlock_mm>

    if (ret != 0 || (ret = file_getdirentry(fd, direntp)) != 0) {
90000000000158a0:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000158a4:	44005d80 	bnez	$r12,92(0x5c) # 9000000000015900 <sysfile_getdirentry+0xf4>
90000000000158a8:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
90000000000158ac:	28ff62c5 	ld.d	$r5,$r22,-40(0xfd8)
90000000000158b0:	00150184 	move	$r4,$r12
90000000000158b4:	57eb23ff 	bl	-5344(0xfffeb20) # 90000000000143d4 <file_getdirentry>
90000000000158b8:	0015008c 	move	$r12,$r4
90000000000158bc:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
90000000000158c0:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000158c4:	44003d80 	bnez	$r12,60(0x3c) # 9000000000015900 <sysfile_getdirentry+0xf4>
        goto out;
    }

    lock_mm(mm);
90000000000158c8:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
90000000000158cc:	57f51bff 	bl	-2792(0xffff518) # 9000000000014de4 <lock_mm>
    {
        if (!copy_to_user(mm, __direntp, direntp, sizeof(struct dirent))) {
90000000000158d0:	02842007 	addi.w	$r7,$r0,264(0x108)
90000000000158d4:	28ff62c6 	ld.d	$r6,$r22,-40(0xfd8)
90000000000158d8:	28ff02c5 	ld.d	$r5,$r22,-64(0xfc0)
90000000000158dc:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
90000000000158e0:	5762f7ff 	bl	-40204(0xfff62f4) # 900000000000bbd4 <copy_to_user>
90000000000158e4:	0015008c 	move	$r12,$r4
90000000000158e8:	44000d80 	bnez	$r12,12(0xc) # 90000000000158f4 <sysfile_getdirentry+0xe8>
            ret = -E_INVAL;
90000000000158ec:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
90000000000158f0:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
        }
    }
    unlock_mm(mm);
90000000000158f4:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
90000000000158f8:	57f557ff 	bl	-2732(0xffff554) # 9000000000014e4c <unlock_mm>
90000000000158fc:	50000800 	b	8(0x8) # 9000000000015904 <sysfile_getdirentry+0xf8>
        goto out;
9000000000015900:	03400000 	andi	$r0,$r0,0x0

out:
    kfree(direntp);
9000000000015904:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000015908:	57220fff 	bl	-56820(0xfff220c) # 9000000000007b14 <kfree>
    return ret;
900000000001590c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
9000000000015910:	00150184 	move	$r4,$r12
9000000000015914:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000000015918:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000001591c:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000015920:	4c000020 	jirl	$r0,$r1,0

9000000000015924 <sysfile_dup>:

int
sysfile_dup(int fd1, int fd2) {
9000000000015924:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000015928:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000001592c:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000015930:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000015934:	0015008d 	move	$r13,$r4
9000000000015938:	001500ac 	move	$r12,$r5
900000000001593c:	004081ad 	slli.w	$r13,$r13,0x0
9000000000015940:	29bfb2cd 	st.w	$r13,$r22,-20(0xfec)
9000000000015944:	0040818c 	slli.w	$r12,$r12,0x0
9000000000015948:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
    return file_dup(fd1, fd2);
900000000001594c:	28bfa2cd 	ld.w	$r13,$r22,-24(0xfe8)
9000000000015950:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000015954:	001501a5 	move	$r5,$r13
9000000000015958:	00150184 	move	$r4,$r12
900000000001595c:	57ebd3ff 	bl	-5168(0xfffebd0) # 900000000001452c <file_dup>
9000000000015960:	0015008c 	move	$r12,$r4
}
9000000000015964:	00150184 	move	$r4,$r12
9000000000015968:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000001596c:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000015970:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000015974:	4c000020 	jirl	$r0,$r1,0

9000000000015978 <sysfile_pipe>:

int
sysfile_pipe(int *fd_store) {
9000000000015978:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000001597c:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000015980:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000015984:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
	return -E_UNIMP;
9000000000015988:	02bfb00c 	addi.w	$r12,$r0,-20(0xfec)
}
900000000001598c:	00150184 	move	$r4,$r12
9000000000015990:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000015994:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000015998:	4c000020 	jirl	$r0,$r1,0

900000000001599c <sysfile_mkfifo>:

int
sysfile_mkfifo(const char *__name, uint32_t open_flags) {
900000000001599c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000000159a0:	29c06076 	st.d	$r22,$r3,24(0x18)
90000000000159a4:	02c08076 	addi.d	$r22,$r3,32(0x20)
90000000000159a8:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
90000000000159ac:	001500ac 	move	$r12,$r5
90000000000159b0:	0040818c 	slli.w	$r12,$r12,0x0
90000000000159b4:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
	return -E_UNIMP;
90000000000159b8:	02bfb00c 	addi.w	$r12,$r0,-20(0xfec)
}
90000000000159bc:	00150184 	move	$r4,$r12
90000000000159c0:	28c06076 	ld.d	$r22,$r3,24(0x18)
90000000000159c4:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000000159c8:	4c000020 	jirl	$r0,$r1,0

90000000000159cc <fence_i>:
static void fence_i(void *va_start, int size) {
90000000000159cc:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000000159d0:	29c0a076 	st.d	$r22,$r3,40(0x28)
90000000000159d4:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000000159d8:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
90000000000159dc:	001500ac 	move	$r12,$r5
90000000000159e0:	0040818c 	slli.w	$r12,$r12,0x0
90000000000159e4:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
90000000000159e8:	38720000 	dbar	0x0
    void *va_end = va_start + size;
90000000000159ec:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
90000000000159f0:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
90000000000159f4:	0010b1ac 	add.d	$r12,$r13,$r12
90000000000159f8:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
90000000000159fc:	50002000 	b	32(0x20) # 9000000000015a1c <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
9000000000015a00:	06000189 	cacop	0x9,$r12,0
9000000000015a04:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
9000000000015a08:	06000188 	cacop	0x8,$r12,0
9000000000015a0c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
9000000000015a10:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000015a14:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000015a18:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
9000000000015a1c:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000015a20:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000015a24:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 9000000000015a00 <fence_i+0x34>
9000000000015a28:	38728000 	ibar	0x0
}
9000000000015a2c:	03400000 	andi	$r0,$r0,0x0
9000000000015a30:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000015a34:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000015a38:	4c000020 	jirl	$r0,$r1,0

9000000000015a3c <__intr_save>:
{
9000000000015a3c:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000000015a40:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000000015a44:	02c04076 	addi.d	$r22,$r3,16(0x10)
	return __csrxchg(0, LISA_CSR_CRMD_IE, LISA_CSR_CRMD);
9000000000015a48:	0015000d 	move	$r13,$r0
9000000000015a4c:	0280100c 	addi.w	$r12,$r0,4(0x4)
9000000000015a50:	0400018d 	csrxchg	$r13,$r12,0x0
9000000000015a54:	001501ac 	move	$r12,$r13
9000000000015a58:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
}
9000000000015a5c:	00150184 	move	$r4,$r12
9000000000015a60:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000000015a64:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000000015a68:	4c000020 	jirl	$r0,$r1,0

9000000000015a6c <__intr_restore>:
{
9000000000015a6c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000015a70:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000015a74:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000015a78:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
	__csrxchg(flags, LISA_CSR_CRMD_IE, LISA_CSR_CRMD);
9000000000015a7c:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
9000000000015a80:	0280100d 	addi.w	$r13,$r0,4(0x4)
9000000000015a84:	040001ac 	csrxchg	$r12,$r13,0x0
}
9000000000015a88:	03400000 	andi	$r0,$r0,0x0
9000000000015a8c:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000015a90:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000015a94:	4c000020 	jirl	$r0,$r1,0

9000000000015a98 <inode_ref_count>:
#define vop_open_inc(node)                                          inode_open_inc(node)
#define vop_open_dec(node)                                          inode_open_dec(node)


static inline int
inode_ref_count(struct inode *node) {
9000000000015a98:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000015a9c:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000015aa0:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000015aa4:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    return atomic_read(&(node->ref_count));
9000000000015aa8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000015aac:	02c1518c 	addi.d	$r12,$r12,84(0x54)
9000000000015ab0:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
  return v->counter;
9000000000015ab4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000015ab8:	2880018c 	ld.w	$r12,$r12,0
}
9000000000015abc:	00150184 	move	$r4,$r12
9000000000015ac0:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000015ac4:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000015ac8:	4c000020 	jirl	$r0,$r1,0

9000000000015acc <inode_open_count>:

static inline int
inode_open_count(struct inode *node) {
9000000000015acc:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000015ad0:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000015ad4:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000015ad8:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    return atomic_read(&(node->open_count));
9000000000015adc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000015ae0:	02c1618c 	addi.d	$r12,$r12,88(0x58)
9000000000015ae4:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000015ae8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000015aec:	2880018c 	ld.w	$r12,$r12,0
}
9000000000015af0:	00150184 	move	$r4,$r12
9000000000015af4:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000015af8:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000015afc:	4c000020 	jirl	$r0,$r1,0

9000000000015b00 <__alloc_inode>:

/* *
 * __alloc_inode - alloc a inode structure and initialize in_type
 * */
struct inode *
__alloc_inode(int type) {
9000000000015b00:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000015b04:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000015b08:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000015b0c:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000015b10:	0015008c 	move	$r12,$r4
9000000000015b14:	0040818c 	slli.w	$r12,$r12,0x0
9000000000015b18:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
    struct inode *node;
    if ((node = kmalloc(sizeof(struct inode))) != NULL) {
9000000000015b1c:	0281c004 	addi.w	$r4,$r0,112(0x70)
9000000000015b20:	571b1bff 	bl	-58600(0xfff1b18) # 9000000000007638 <kmalloc>
9000000000015b24:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
9000000000015b28:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000015b2c:	40001180 	beqz	$r12,16(0x10) # 9000000000015b3c <__alloc_inode+0x3c>
        node->in_type = type;
9000000000015b30:	28bf72cd 	ld.w	$r13,$r22,-36(0xfdc)
9000000000015b34:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000015b38:	2981418d 	st.w	$r13,$r12,80(0x50)
    }
    return node;
9000000000015b3c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
}
9000000000015b40:	00150184 	move	$r4,$r12
9000000000015b44:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000015b48:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000015b4c:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000015b50:	4c000020 	jirl	$r0,$r1,0

9000000000015b54 <inode_init>:
/* *
 * inode_init - initialize a inode structure
 * invoked by vop_init
 * */
void
inode_init(struct inode *node, const struct inode_ops *ops, struct fs *fs) {
9000000000015b54:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
9000000000015b58:	29c12061 	st.d	$r1,$r3,72(0x48)
9000000000015b5c:	29c10076 	st.d	$r22,$r3,64(0x40)
9000000000015b60:	02c14076 	addi.d	$r22,$r3,80(0x50)
9000000000015b64:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
9000000000015b68:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
9000000000015b6c:	29fee2c6 	st.d	$r6,$r22,-72(0xfb8)
    atomic_set(&(node->ref_count), 0);
9000000000015b70:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000015b74:	02c1518c 	addi.d	$r12,$r12,84(0x54)
9000000000015b78:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
9000000000015b7c:	29bf52c0 	st.w	$r0,$r22,-44(0xfd4)
  v->counter = i;
9000000000015b80:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000015b84:	28bf52cd 	ld.w	$r13,$r22,-44(0xfd4)
9000000000015b88:	2980018d 	st.w	$r13,$r12,0
    atomic_set(&(node->open_count), 0);
9000000000015b8c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000015b90:	02c1618c 	addi.d	$r12,$r12,88(0x58)
9000000000015b94:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000015b98:	29bf92c0 	st.w	$r0,$r22,-28(0xfe4)
9000000000015b9c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000015ba0:	28bf92cd 	ld.w	$r13,$r22,-28(0xfe4)
9000000000015ba4:	2980018d 	st.w	$r13,$r12,0
    node->in_ops = ops, node->in_fs = fs;
9000000000015ba8:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000015bac:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
9000000000015bb0:	29c1a18d 	st.d	$r13,$r12,104(0x68)
9000000000015bb4:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000015bb8:	28fee2cd 	ld.d	$r13,$r22,-72(0xfb8)
9000000000015bbc:	29c1818d 	st.d	$r13,$r12,96(0x60)
    vop_ref_inc(node);
9000000000015bc0:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000015bc4:	54009800 	bl	152(0x98) # 9000000000015c5c <inode_ref_inc>
}
9000000000015bc8:	03400000 	andi	$r0,$r0,0x0
9000000000015bcc:	28c12061 	ld.d	$r1,$r3,72(0x48)
9000000000015bd0:	28c10076 	ld.d	$r22,$r3,64(0x40)
9000000000015bd4:	02c14063 	addi.d	$r3,$r3,80(0x50)
9000000000015bd8:	4c000020 	jirl	$r0,$r1,0

9000000000015bdc <inode_kill>:
/* *
 * inode_kill - kill a inode structure
 * invoked by vop_kill
 * */
void
inode_kill(struct inode *node) {
9000000000015bdc:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000015be0:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000015be4:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000015be8:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000015bec:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    assert(inode_ref_count(node) == 0);
9000000000015bf0:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000015bf4:	57fea7ff 	bl	-348(0xffffea4) # 9000000000015a98 <inode_ref_count>
9000000000015bf8:	0015008c 	move	$r12,$r4
9000000000015bfc:	40001d80 	beqz	$r12,28(0x1c) # 9000000000015c18 <inode_kill+0x3c>
9000000000015c00:	1c000186 	pcaddu12i	$r6,12(0xc)
9000000000015c04:	02d800c6 	addi.d	$r6,$r6,1536(0x600)
9000000000015c08:	0280a405 	addi.w	$r5,$r0,41(0x29)
9000000000015c0c:	1c000184 	pcaddu12i	$r4,12(0xc)
9000000000015c10:	02d89084 	addi.d	$r4,$r4,1572(0x624)
9000000000015c14:	57706fff 	bl	-36756(0xfff706c) # 900000000000cc80 <__panic>
    assert(inode_open_count(node) == 0);
9000000000015c18:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000015c1c:	57feb3ff 	bl	-336(0xffffeb0) # 9000000000015acc <inode_open_count>
9000000000015c20:	0015008c 	move	$r12,$r4
9000000000015c24:	40001d80 	beqz	$r12,28(0x1c) # 9000000000015c40 <inode_kill+0x64>
9000000000015c28:	1c000186 	pcaddu12i	$r6,12(0xc)
9000000000015c2c:	02d880c6 	addi.d	$r6,$r6,1568(0x620)
9000000000015c30:	0280a805 	addi.w	$r5,$r0,42(0x2a)
9000000000015c34:	1c000184 	pcaddu12i	$r4,12(0xc)
9000000000015c38:	02d7f084 	addi.d	$r4,$r4,1532(0x5fc)
9000000000015c3c:	577047ff 	bl	-36796(0xfff7044) # 900000000000cc80 <__panic>
    kfree(node);
9000000000015c40:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000015c44:	571ed3ff 	bl	-57648(0xfff1ed0) # 9000000000007b14 <kfree>
}
9000000000015c48:	03400000 	andi	$r0,$r0,0x0
9000000000015c4c:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000015c50:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000015c54:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000015c58:	4c000020 	jirl	$r0,$r1,0

9000000000015c5c <inode_ref_inc>:
/* *
 * inode_ref_inc - increment ref_count
 * invoked by vop_ref_inc
 * */
int
inode_ref_inc(struct inode *node) {
9000000000015c5c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000015c60:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000015c64:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000015c68:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000015c6c:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    return atomic_add_return(&(node->ref_count), 1);
9000000000015c70:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000015c74:	02c1518c 	addi.d	$r12,$r12,84(0x54)
9000000000015c78:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000015c7c:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000015c80:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
  local_intr_save (intr_flag);
9000000000015c84:	57fdbbff 	bl	-584(0xffffdb8) # 9000000000015a3c <__intr_save>
9000000000015c88:	0015008c 	move	$r12,$r4
9000000000015c8c:	29bf82cc 	st.w	$r12,$r22,-32(0xfe0)
  v->counter += i;
9000000000015c90:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000015c94:	2880018c 	ld.w	$r12,$r12,0
9000000000015c98:	28bf92cd 	ld.w	$r13,$r22,-28(0xfe4)
9000000000015c9c:	001031ac 	add.w	$r12,$r13,$r12
9000000000015ca0:	0015018d 	move	$r13,$r12
9000000000015ca4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000015ca8:	2980018d 	st.w	$r13,$r12,0
  local_intr_restore (intr_flag);
9000000000015cac:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
9000000000015cb0:	00150184 	move	$r4,$r12
9000000000015cb4:	57fdbbff 	bl	-584(0xffffdb8) # 9000000000015a6c <__intr_restore>
  return v->counter;
9000000000015cb8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000015cbc:	2880018c 	ld.w	$r12,$r12,0
}
9000000000015cc0:	00150184 	move	$r4,$r12
9000000000015cc4:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000015cc8:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000015ccc:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000015cd0:	4c000020 	jirl	$r0,$r1,0

9000000000015cd4 <inode_ref_dec>:
 * inode_ref_dec - decrement ref_count
 * invoked by vop_ref_dec
 * calls vop_reclaim if the ref_count hits zero
 * */
int
inode_ref_dec(struct inode *node) {
9000000000015cd4:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
9000000000015cd8:	29c16061 	st.d	$r1,$r3,88(0x58)
9000000000015cdc:	29c14076 	st.d	$r22,$r3,80(0x50)
9000000000015ce0:	02c18076 	addi.d	$r22,$r3,96(0x60)
9000000000015ce4:	29fea2c4 	st.d	$r4,$r22,-88(0xfa8)
    assert(inode_ref_count(node) > 0);
9000000000015ce8:	28fea2c4 	ld.d	$r4,$r22,-88(0xfa8)
9000000000015cec:	57fdafff 	bl	-596(0xffffdac) # 9000000000015a98 <inode_ref_count>
9000000000015cf0:	0015008c 	move	$r12,$r4
9000000000015cf4:	60001c0c 	blt	$r0,$r12,28(0x1c) # 9000000000015d10 <inode_ref_dec+0x3c>
9000000000015cf8:	1c000186 	pcaddu12i	$r6,12(0xc)
9000000000015cfc:	02d600c6 	addi.d	$r6,$r6,1408(0x580)
9000000000015d00:	0280f805 	addi.w	$r5,$r0,62(0x3e)
9000000000015d04:	1c000184 	pcaddu12i	$r4,12(0xc)
9000000000015d08:	02d4b084 	addi.d	$r4,$r4,1324(0x52c)
9000000000015d0c:	576f77ff 	bl	-37004(0xfff6f74) # 900000000000cc80 <__panic>
    int ref_count, ret;
    if ((ref_count = atomic_sub_return(&(node->ref_count), 1)) == 0) {
9000000000015d10:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
9000000000015d14:	02c1518c 	addi.d	$r12,$r12,84(0x54)
9000000000015d18:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
9000000000015d1c:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000015d20:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
  return atomic_add_return(v, -i);
9000000000015d24:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
9000000000015d28:	0011300c 	sub.w	$r12,$r0,$r12
9000000000015d2c:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000015d30:	29ff02cd 	st.d	$r13,$r22,-64(0xfc0)
9000000000015d34:	29bef2cc 	st.w	$r12,$r22,-68(0xfbc)
  local_intr_save (intr_flag);
9000000000015d38:	57fd07ff 	bl	-764(0xffffd04) # 9000000000015a3c <__intr_save>
9000000000015d3c:	0015008c 	move	$r12,$r4
9000000000015d40:	29bee2cc 	st.w	$r12,$r22,-72(0xfb8)
  v->counter += i;
9000000000015d44:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000015d48:	2880018c 	ld.w	$r12,$r12,0
9000000000015d4c:	28bef2cd 	ld.w	$r13,$r22,-68(0xfbc)
9000000000015d50:	001031ac 	add.w	$r12,$r13,$r12
9000000000015d54:	0015018d 	move	$r13,$r12
9000000000015d58:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000015d5c:	2980018d 	st.w	$r13,$r12,0
  local_intr_restore (intr_flag);
9000000000015d60:	28bee2cc 	ld.w	$r12,$r22,-72(0xfb8)
9000000000015d64:	00150184 	move	$r4,$r12
9000000000015d68:	57fd07ff 	bl	-764(0xffffd04) # 9000000000015a6c <__intr_restore>
  return v->counter;
9000000000015d6c:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000015d70:	2880018c 	ld.w	$r12,$r12,0
9000000000015d74:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000015d78:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000015d7c:	4400a180 	bnez	$r12,160(0xa0) # 9000000000015e1c <inode_ref_dec+0x148>
        if ((ret = vop_reclaim(node)) != 0 && ret != -E_BUSY) {
9000000000015d80:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
9000000000015d84:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000015d88:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000015d8c:	40002180 	beqz	$r12,32(0x20) # 9000000000015dac <inode_ref_dec+0xd8>
9000000000015d90:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000015d94:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000015d98:	40001580 	beqz	$r12,20(0x14) # 9000000000015dac <inode_ref_dec+0xd8>
9000000000015d9c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000015da0:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000015da4:	28c1218c 	ld.d	$r12,$r12,72(0x48)
9000000000015da8:	44001d80 	bnez	$r12,28(0x1c) # 9000000000015dc4 <inode_ref_dec+0xf0>
9000000000015dac:	1c000186 	pcaddu12i	$r6,12(0xc)
9000000000015db0:	02d3f0c6 	addi.d	$r6,$r6,1276(0x4fc)
9000000000015db4:	02810405 	addi.w	$r5,$r0,65(0x41)
9000000000015db8:	1c000184 	pcaddu12i	$r4,12(0xc)
9000000000015dbc:	02d1e084 	addi.d	$r4,$r4,1144(0x478)
9000000000015dc0:	576ec3ff 	bl	-37184(0xfff6ec0) # 900000000000cc80 <__panic>
9000000000015dc4:	1c000185 	pcaddu12i	$r5,12(0xc)
9000000000015dc8:	02d530a5 	addi.d	$r5,$r5,1356(0x54c)
9000000000015dcc:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000015dd0:	54022c00 	bl	556(0x22c) # 9000000000015ffc <inode_check>
9000000000015dd4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000015dd8:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000015ddc:	28c1218c 	ld.d	$r12,$r12,72(0x48)
9000000000015de0:	28fea2c4 	ld.d	$r4,$r22,-88(0xfa8)
9000000000015de4:	4c000181 	jirl	$r1,$r12,0
9000000000015de8:	0015008c 	move	$r12,$r4
9000000000015dec:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
9000000000015df0:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000015df4:	40002980 	beqz	$r12,40(0x28) # 9000000000015e1c <inode_ref_dec+0x148>
9000000000015df8:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000015dfc:	0015018d 	move	$r13,$r12
9000000000015e00:	02bfc40c 	addi.w	$r12,$r0,-15(0xff1)
9000000000015e04:	580019ac 	beq	$r13,$r12,24(0x18) # 9000000000015e1c <inode_ref_dec+0x148>
            kprintf("vfs: warning: vop_reclaim: %e.\n", ret);
9000000000015e08:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000015e0c:	00150185 	move	$r5,$r12
9000000000015e10:	1c000184 	pcaddu12i	$r4,12(0xc)
9000000000015e14:	02d42084 	addi.d	$r4,$r4,1288(0x508)
9000000000015e18:	56e007ff 	bl	-73724(0xffee004) # 9000000000003e1c <kprintf>
        }
    }
    return ref_count;
9000000000015e1c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
9000000000015e20:	00150184 	move	$r4,$r12
9000000000015e24:	28c16061 	ld.d	$r1,$r3,88(0x58)
9000000000015e28:	28c14076 	ld.d	$r22,$r3,80(0x50)
9000000000015e2c:	02c18063 	addi.d	$r3,$r3,96(0x60)
9000000000015e30:	4c000020 	jirl	$r0,$r1,0

9000000000015e34 <inode_open_inc>:
/* *
 * inode_open_inc - increment the open_count
 * invoked by vop_open_inc
 * */
int
inode_open_inc(struct inode *node) {
9000000000015e34:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000015e38:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000015e3c:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000015e40:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000015e44:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    return atomic_add_return(&(node->open_count), 1);
9000000000015e48:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000015e4c:	02c1618c 	addi.d	$r12,$r12,88(0x58)
9000000000015e50:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000015e54:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000015e58:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
  local_intr_save (intr_flag);
9000000000015e5c:	57fbe3ff 	bl	-1056(0xffffbe0) # 9000000000015a3c <__intr_save>
9000000000015e60:	0015008c 	move	$r12,$r4
9000000000015e64:	29bf82cc 	st.w	$r12,$r22,-32(0xfe0)
  v->counter += i;
9000000000015e68:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000015e6c:	2880018c 	ld.w	$r12,$r12,0
9000000000015e70:	28bf92cd 	ld.w	$r13,$r22,-28(0xfe4)
9000000000015e74:	001031ac 	add.w	$r12,$r13,$r12
9000000000015e78:	0015018d 	move	$r13,$r12
9000000000015e7c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000015e80:	2980018d 	st.w	$r13,$r12,0
  local_intr_restore (intr_flag);
9000000000015e84:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
9000000000015e88:	00150184 	move	$r4,$r12
9000000000015e8c:	57fbe3ff 	bl	-1056(0xffffbe0) # 9000000000015a6c <__intr_restore>
  return v->counter;
9000000000015e90:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000015e94:	2880018c 	ld.w	$r12,$r12,0
}
9000000000015e98:	00150184 	move	$r4,$r12
9000000000015e9c:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000015ea0:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000015ea4:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000015ea8:	4c000020 	jirl	$r0,$r1,0

9000000000015eac <inode_open_dec>:
 * inode_open_dec - decrement the open_count
 * invoked by vop_open_dec
 * calls vop_close if the open_count hits zero
 * */
int
inode_open_dec(struct inode *node) {
9000000000015eac:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
9000000000015eb0:	29c16061 	st.d	$r1,$r3,88(0x58)
9000000000015eb4:	29c14076 	st.d	$r22,$r3,80(0x50)
9000000000015eb8:	02c18076 	addi.d	$r22,$r3,96(0x60)
9000000000015ebc:	29fea2c4 	st.d	$r4,$r22,-88(0xfa8)
    assert(inode_open_count(node) > 0);
9000000000015ec0:	28fea2c4 	ld.d	$r4,$r22,-88(0xfa8)
9000000000015ec4:	57fc0bff 	bl	-1016(0xffffc08) # 9000000000015acc <inode_open_count>
9000000000015ec8:	0015008c 	move	$r12,$r4
9000000000015ecc:	60001c0c 	blt	$r0,$r12,28(0x1c) # 9000000000015ee8 <inode_open_dec+0x3c>
9000000000015ed0:	1c000186 	pcaddu12i	$r6,12(0xc)
9000000000015ed4:	02d1a0c6 	addi.d	$r6,$r6,1128(0x468)
9000000000015ed8:	02816005 	addi.w	$r5,$r0,88(0x58)
9000000000015edc:	1c000184 	pcaddu12i	$r4,12(0xc)
9000000000015ee0:	02cd5084 	addi.d	$r4,$r4,852(0x354)
9000000000015ee4:	576d9fff 	bl	-37476(0xfff6d9c) # 900000000000cc80 <__panic>
    int open_count, ret;
    if ((open_count = atomic_sub_return(&(node->open_count), 1)) == 0) {
9000000000015ee8:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
9000000000015eec:	02c1618c 	addi.d	$r12,$r12,88(0x58)
9000000000015ef0:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
9000000000015ef4:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000015ef8:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
  return atomic_add_return(v, -i);
9000000000015efc:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
9000000000015f00:	0011300c 	sub.w	$r12,$r0,$r12
9000000000015f04:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000015f08:	29ff02cd 	st.d	$r13,$r22,-64(0xfc0)
9000000000015f0c:	29bef2cc 	st.w	$r12,$r22,-68(0xfbc)
  local_intr_save (intr_flag);
9000000000015f10:	57fb2fff 	bl	-1236(0xffffb2c) # 9000000000015a3c <__intr_save>
9000000000015f14:	0015008c 	move	$r12,$r4
9000000000015f18:	29bee2cc 	st.w	$r12,$r22,-72(0xfb8)
  v->counter += i;
9000000000015f1c:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000015f20:	2880018c 	ld.w	$r12,$r12,0
9000000000015f24:	28bef2cd 	ld.w	$r13,$r22,-68(0xfbc)
9000000000015f28:	001031ac 	add.w	$r12,$r13,$r12
9000000000015f2c:	0015018d 	move	$r13,$r12
9000000000015f30:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000015f34:	2980018d 	st.w	$r13,$r12,0
  local_intr_restore (intr_flag);
9000000000015f38:	28bee2cc 	ld.w	$r12,$r22,-72(0xfb8)
9000000000015f3c:	00150184 	move	$r4,$r12
9000000000015f40:	57fb2fff 	bl	-1236(0xffffb2c) # 9000000000015a6c <__intr_restore>
  return v->counter;
9000000000015f44:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000015f48:	2880018c 	ld.w	$r12,$r12,0
9000000000015f4c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000015f50:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000015f54:	44009180 	bnez	$r12,144(0x90) # 9000000000015fe4 <inode_open_dec+0x138>
        if ((ret = vop_close(node)) != 0) {
9000000000015f58:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
9000000000015f5c:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000015f60:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000015f64:	40002180 	beqz	$r12,32(0x20) # 9000000000015f84 <inode_open_dec+0xd8>
9000000000015f68:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000015f6c:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000015f70:	40001580 	beqz	$r12,20(0x14) # 9000000000015f84 <inode_open_dec+0xd8>
9000000000015f74:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000015f78:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000015f7c:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000015f80:	44001d80 	bnez	$r12,28(0x1c) # 9000000000015f9c <inode_open_dec+0xf0>
9000000000015f84:	1c000186 	pcaddu12i	$r6,12(0xc)
9000000000015f88:	02cf90c6 	addi.d	$r6,$r6,996(0x3e4)
9000000000015f8c:	02816c05 	addi.w	$r5,$r0,91(0x5b)
9000000000015f90:	1c000184 	pcaddu12i	$r4,12(0xc)
9000000000015f94:	02ca8084 	addi.d	$r4,$r4,672(0x2a0)
9000000000015f98:	576cebff 	bl	-37656(0xfff6ce8) # 900000000000cc80 <__panic>
9000000000015f9c:	1c000185 	pcaddu12i	$r5,12(0xc)
9000000000015fa0:	02d0b0a5 	addi.d	$r5,$r5,1068(0x42c)
9000000000015fa4:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000015fa8:	54005400 	bl	84(0x54) # 9000000000015ffc <inode_check>
9000000000015fac:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000015fb0:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000015fb4:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000015fb8:	28fea2c4 	ld.d	$r4,$r22,-88(0xfa8)
9000000000015fbc:	4c000181 	jirl	$r1,$r12,0
9000000000015fc0:	0015008c 	move	$r12,$r4
9000000000015fc4:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
9000000000015fc8:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000015fcc:	40001980 	beqz	$r12,24(0x18) # 9000000000015fe4 <inode_open_dec+0x138>
            kprintf("vfs: warning: vop_close: %e.\n", ret);
9000000000015fd0:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000015fd4:	00150185 	move	$r5,$r12
9000000000015fd8:	1c000184 	pcaddu12i	$r4,12(0xc)
9000000000015fdc:	02cfe084 	addi.d	$r4,$r4,1016(0x3f8)
9000000000015fe0:	56de3fff 	bl	-74180(0xffede3c) # 9000000000003e1c <kprintf>
        }
    }
    return open_count;
9000000000015fe4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
9000000000015fe8:	00150184 	move	$r4,$r12
9000000000015fec:	28c16061 	ld.d	$r1,$r3,88(0x58)
9000000000015ff0:	28c14076 	ld.d	$r22,$r3,80(0x50)
9000000000015ff4:	02c18063 	addi.d	$r3,$r3,96(0x60)
9000000000015ff8:	4c000020 	jirl	$r0,$r1,0

9000000000015ffc <inode_check>:
/* *
 * inode_check - check the various things being valid
 * called before all vop_* calls
 * */
void
inode_check(struct inode *node, const char *opstr) {
9000000000015ffc:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000016000:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000016004:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000016008:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000001600c:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000016010:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
    assert(node != NULL && node->in_ops != NULL);
9000000000016014:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000016018:	40001180 	beqz	$r12,16(0x10) # 9000000000016028 <inode_check+0x2c>
900000000001601c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000016020:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000016024:	44001d80 	bnez	$r12,28(0x1c) # 9000000000016040 <inode_check+0x44>
9000000000016028:	1c000186 	pcaddu12i	$r6,12(0xc)
900000000001602c:	02cf20c6 	addi.d	$r6,$r6,968(0x3c8)
9000000000016030:	0281a005 	addi.w	$r5,$r0,104(0x68)
9000000000016034:	1c000184 	pcaddu12i	$r4,12(0xc)
9000000000016038:	02c7f084 	addi.d	$r4,$r4,508(0x1fc)
900000000001603c:	576c47ff 	bl	-37820(0xfff6c44) # 900000000000cc80 <__panic>
    assert(node->in_ops->vop_magic == VOP_MAGIC);
9000000000016040:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000016044:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000016048:	28c0018d 	ld.d	$r13,$r12,0
900000000001604c:	1518974c 	lu12i.w	$r12,-473926(0x8c4ba)
9000000000016050:	0391d98c 	ori	$r12,$r12,0x476
9000000000016054:	1600000c 	lu32i.d	$r12,0
9000000000016058:	58001dac 	beq	$r13,$r12,28(0x1c) # 9000000000016074 <inode_check+0x78>
900000000001605c:	1c000186 	pcaddu12i	$r6,12(0xc)
9000000000016060:	02cf30c6 	addi.d	$r6,$r6,972(0x3cc)
9000000000016064:	0281a405 	addi.w	$r5,$r0,105(0x69)
9000000000016068:	1c000184 	pcaddu12i	$r4,12(0xc)
900000000001606c:	02c72084 	addi.d	$r4,$r4,456(0x1c8)
9000000000016070:	576c13ff 	bl	-37872(0xfff6c10) # 900000000000cc80 <__panic>
    int ref_count = inode_ref_count(node), open_count = inode_open_count(node);
9000000000016074:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000016078:	57fa23ff 	bl	-1504(0xffffa20) # 9000000000015a98 <inode_ref_count>
900000000001607c:	0015008c 	move	$r12,$r4
9000000000016080:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000016084:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000016088:	57fa47ff 	bl	-1468(0xffffa44) # 9000000000015acc <inode_open_count>
900000000001608c:	0015008c 	move	$r12,$r4
9000000000016090:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
    assert(ref_count >= open_count && open_count >= 0);
9000000000016094:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
9000000000016098:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000001609c:	60000dac 	blt	$r13,$r12,12(0xc) # 90000000000160a8 <inode_check+0xac>
90000000000160a0:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
90000000000160a4:	64001d80 	bge	$r12,$r0,28(0x1c) # 90000000000160c0 <inode_check+0xc4>
90000000000160a8:	1c000186 	pcaddu12i	$r6,12(0xc)
90000000000160ac:	02cee0c6 	addi.d	$r6,$r6,952(0x3b8)
90000000000160b0:	0281ac05 	addi.w	$r5,$r0,107(0x6b)
90000000000160b4:	1c000184 	pcaddu12i	$r4,12(0xc)
90000000000160b8:	02c5f084 	addi.d	$r4,$r4,380(0x17c)
90000000000160bc:	576bc7ff 	bl	-37948(0xfff6bc4) # 900000000000cc80 <__panic>
    assert(ref_count < MAX_INODE_COUNT && open_count < MAX_INODE_COUNT);
90000000000160c0:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000160c4:	0015018d 	move	$r13,$r12
90000000000160c8:	1400020c 	lu12i.w	$r12,16(0x10)
90000000000160cc:	640015ac 	bge	$r13,$r12,20(0x14) # 90000000000160e0 <inode_check+0xe4>
90000000000160d0:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
90000000000160d4:	0015018d 	move	$r13,$r12
90000000000160d8:	1400020c 	lu12i.w	$r12,16(0x10)
90000000000160dc:	60001dac 	blt	$r13,$r12,28(0x1c) # 90000000000160f8 <inode_check+0xfc>
90000000000160e0:	1c000186 	pcaddu12i	$r6,12(0xc)
90000000000160e4:	02cf00c6 	addi.d	$r6,$r6,960(0x3c0)
90000000000160e8:	0281b005 	addi.w	$r5,$r0,108(0x6c)
90000000000160ec:	1c000184 	pcaddu12i	$r4,12(0xc)
90000000000160f0:	02c51084 	addi.d	$r4,$r4,324(0x144)
90000000000160f4:	576b8fff 	bl	-38004(0xfff6b8c) # 900000000000cc80 <__panic>
}
90000000000160f8:	03400000 	andi	$r0,$r0,0x0
90000000000160fc:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000016100:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000016104:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000016108:	4c000020 	jirl	$r0,$r1,0

900000000001610c <fence_i>:
static void fence_i(void *va_start, int size) {
900000000001610c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000016110:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000016114:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000016118:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000001611c:	001500ac 	move	$r12,$r5
9000000000016120:	0040818c 	slli.w	$r12,$r12,0x0
9000000000016124:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
9000000000016128:	38720000 	dbar	0x0
    void *va_end = va_start + size;
900000000001612c:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000016130:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000016134:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000016138:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
900000000001613c:	50002000 	b	32(0x20) # 900000000001615c <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
9000000000016140:	06000189 	cacop	0x9,$r12,0
9000000000016144:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
9000000000016148:	06000188 	cacop	0x8,$r12,0
900000000001614c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
9000000000016150:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000016154:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000016158:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
900000000001615c:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000016160:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000016164:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 9000000000016140 <fence_i+0x34>
9000000000016168:	38728000 	ibar	0x0
}
900000000001616c:	03400000 	andi	$r0,$r0,0x0
9000000000016170:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000016174:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000016178:	4c000020 	jirl	$r0,$r1,0

900000000001617c <__alloc_fs>:
static struct inode *bootfs_node = NULL;

extern void vfs_devlist_init(void);

struct fs *
__alloc_fs(int type) {
900000000001617c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000016180:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000016184:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000016188:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000001618c:	0015008c 	move	$r12,$r4
9000000000016190:	0040818c 	slli.w	$r12,$r12,0x0
9000000000016194:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
    struct fs *fs;
    if ((fs = kmalloc(sizeof(struct fs))) != NULL) {
9000000000016198:	02836004 	addi.w	$r4,$r0,216(0xd8)
900000000001619c:	57149fff 	bl	-60260(0xfff149c) # 9000000000007638 <kmalloc>
90000000000161a0:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
90000000000161a4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000161a8:	40001180 	beqz	$r12,16(0x10) # 90000000000161b8 <__alloc_fs+0x3c>
        fs->fs_type = type;
90000000000161ac:	28bf72cd 	ld.w	$r13,$r22,-36(0xfdc)
90000000000161b0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000161b4:	2982c18d 	st.w	$r13,$r12,176(0xb0)
    }
    return fs;
90000000000161b8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
}
90000000000161bc:	00150184 	move	$r4,$r12
90000000000161c0:	28c0a061 	ld.d	$r1,$r3,40(0x28)
90000000000161c4:	28c08076 	ld.d	$r22,$r3,32(0x20)
90000000000161c8:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000000161cc:	4c000020 	jirl	$r0,$r1,0

90000000000161d0 <vfs_init>:

void
vfs_init(void) {
90000000000161d0:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
90000000000161d4:	29c02061 	st.d	$r1,$r3,8(0x8)
90000000000161d8:	29c00076 	st.d	$r22,$r3,0
90000000000161dc:	02c04076 	addi.d	$r22,$r3,16(0x10)
    sem_init(&bootfs_sem, 1);
90000000000161e0:	02800405 	addi.w	$r5,$r0,1(0x1)
90000000000161e4:	1c004204 	pcaddu12i	$r4,528(0x210)
90000000000161e8:	02cb9084 	addi.d	$r4,$r4,740(0x2e4)
90000000000161ec:	5779e3ff 	bl	-34336(0xfff79e0) # 900000000000dbcc <sem_init>
    vfs_devlist_init();
90000000000161f0:	5402f000 	bl	752(0x2f0) # 90000000000164e0 <vfs_devlist_init>
}
90000000000161f4:	03400000 	andi	$r0,$r0,0x0
90000000000161f8:	28c02061 	ld.d	$r1,$r3,8(0x8)
90000000000161fc:	28c00076 	ld.d	$r22,$r3,0
9000000000016200:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000000016204:	4c000020 	jirl	$r0,$r1,0

9000000000016208 <lock_bootfs>:

static void
lock_bootfs(void) {
9000000000016208:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000001620c:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000000016210:	29c00076 	st.d	$r22,$r3,0
9000000000016214:	02c04076 	addi.d	$r22,$r3,16(0x10)
    down(&bootfs_sem);
9000000000016218:	1c004204 	pcaddu12i	$r4,528(0x210)
900000000001621c:	02cac084 	addi.d	$r4,$r4,688(0x2b0)
9000000000016220:	577c0bff 	bl	-33784(0xfff7c08) # 900000000000de28 <down>
}
9000000000016224:	03400000 	andi	$r0,$r0,0x0
9000000000016228:	28c02061 	ld.d	$r1,$r3,8(0x8)
900000000001622c:	28c00076 	ld.d	$r22,$r3,0
9000000000016230:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000000016234:	4c000020 	jirl	$r0,$r1,0

9000000000016238 <unlock_bootfs>:

static void
unlock_bootfs(void) {
9000000000016238:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000001623c:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000000016240:	29c00076 	st.d	$r22,$r3,0
9000000000016244:	02c04076 	addi.d	$r22,$r3,16(0x10)
    up(&bootfs_sem);
9000000000016248:	1c004204 	pcaddu12i	$r4,528(0x210)
900000000001624c:	02ca0084 	addi.d	$r4,$r4,640(0x280)
9000000000016250:	577ba7ff 	bl	-33884(0xfff7ba4) # 900000000000ddf4 <up>
}
9000000000016254:	03400000 	andi	$r0,$r0,0x0
9000000000016258:	28c02061 	ld.d	$r1,$r3,8(0x8)
900000000001625c:	28c00076 	ld.d	$r22,$r3,0
9000000000016260:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000000016264:	4c000020 	jirl	$r0,$r1,0

9000000000016268 <change_bootfs>:

static void
change_bootfs(struct inode *node) {
9000000000016268:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001626c:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000016270:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000016274:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000016278:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    struct inode *old;
    lock_bootfs();
900000000001627c:	57ff8fff 	bl	-116(0xfffff8c) # 9000000000016208 <lock_bootfs>
    {
        old = bootfs_node, bootfs_node = node;
9000000000016280:	1c00420c 	pcaddu12i	$r12,528(0x210)
9000000000016284:	02c9818c 	addi.d	$r12,$r12,608(0x260)
9000000000016288:	28c0018c 	ld.d	$r12,$r12,0
900000000001628c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000016290:	1c00420c 	pcaddu12i	$r12,528(0x210)
9000000000016294:	02c9418c 	addi.d	$r12,$r12,592(0x250)
9000000000016298:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000001629c:	29c0018d 	st.d	$r13,$r12,0
    }
    unlock_bootfs();
90000000000162a0:	57ff9bff 	bl	-104(0xfffff98) # 9000000000016238 <unlock_bootfs>
    if (old != NULL) {
90000000000162a4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000162a8:	40000d80 	beqz	$r12,12(0xc) # 90000000000162b4 <change_bootfs+0x4c>
        vop_ref_dec(old);
90000000000162ac:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
90000000000162b0:	57fa27ff 	bl	-1500(0xffffa24) # 9000000000015cd4 <inode_ref_dec>
    }
}
90000000000162b4:	03400000 	andi	$r0,$r0,0x0
90000000000162b8:	28c0a061 	ld.d	$r1,$r3,40(0x28)
90000000000162bc:	28c08076 	ld.d	$r22,$r3,32(0x20)
90000000000162c0:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000000162c4:	4c000020 	jirl	$r0,$r1,0

90000000000162c8 <vfs_set_bootfs>:

int
vfs_set_bootfs(char *fsname) {
90000000000162c8:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
90000000000162cc:	29c0e061 	st.d	$r1,$r3,56(0x38)
90000000000162d0:	29c0c076 	st.d	$r22,$r3,48(0x30)
90000000000162d4:	02c10076 	addi.d	$r22,$r3,64(0x40)
90000000000162d8:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
    struct inode *node = NULL;
90000000000162dc:	29ff62c0 	st.d	$r0,$r22,-40(0xfd8)
    if (fsname != NULL) {
90000000000162e0:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000162e4:	40007980 	beqz	$r12,120(0x78) # 900000000001635c <vfs_set_bootfs+0x94>
        char *s;
        if ((s = strchr(fsname, ':')) == NULL || s[1] != '\0') {
90000000000162e8:	0280e805 	addi.w	$r5,$r0,58(0x3a)
90000000000162ec:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
90000000000162f0:	56e16bff 	bl	-73368(0xffee168) # 9000000000004458 <strchr>
90000000000162f4:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
90000000000162f8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000162fc:	40001580 	beqz	$r12,20(0x14) # 9000000000016310 <vfs_set_bootfs+0x48>
9000000000016300:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000016304:	02c0058c 	addi.d	$r12,$r12,1(0x1)
9000000000016308:	2800018c 	ld.b	$r12,$r12,0
900000000001630c:	40000d80 	beqz	$r12,12(0xc) # 9000000000016318 <vfs_set_bootfs+0x50>
            return -E_INVAL;
9000000000016310:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
9000000000016314:	50005800 	b	88(0x58) # 900000000001636c <vfs_set_bootfs+0xa4>
        }
        int ret;
        if ((ret = vfs_chdir(fsname)) != 0) {
9000000000016318:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
900000000001631c:	5418f400 	bl	6388(0x18f4) # 9000000000017c10 <vfs_chdir>
9000000000016320:	0015008c 	move	$r12,$r4
9000000000016324:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
9000000000016328:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000001632c:	40000d80 	beqz	$r12,12(0xc) # 9000000000016338 <vfs_set_bootfs+0x70>
            return ret;
9000000000016330:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000016334:	50003800 	b	56(0x38) # 900000000001636c <vfs_set_bootfs+0xa4>
        }
        if ((ret = vfs_get_curdir(&node)) != 0) {
9000000000016338:	02ff62cc 	addi.d	$r12,$r22,-40(0xfd8)
900000000001633c:	00150184 	move	$r4,$r12
9000000000016340:	54174c00 	bl	5964(0x174c) # 9000000000017a8c <vfs_get_curdir>
9000000000016344:	0015008c 	move	$r12,$r4
9000000000016348:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
900000000001634c:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000016350:	40000d80 	beqz	$r12,12(0xc) # 900000000001635c <vfs_set_bootfs+0x94>
            return ret;
9000000000016354:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000016358:	50001400 	b	20(0x14) # 900000000001636c <vfs_set_bootfs+0xa4>
        }
    }
    change_bootfs(node);
900000000001635c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000016360:	00150184 	move	$r4,$r12
9000000000016364:	57ff07ff 	bl	-252(0xfffff04) # 9000000000016268 <change_bootfs>
    return 0;
9000000000016368:	0015000c 	move	$r12,$r0
}
900000000001636c:	00150184 	move	$r4,$r12
9000000000016370:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000000016374:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000000016378:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000001637c:	4c000020 	jirl	$r0,$r1,0

9000000000016380 <vfs_get_bootfs>:

int
vfs_get_bootfs(struct inode **node_store) {
9000000000016380:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000016384:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000016388:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000001638c:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000016390:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    struct inode *node = NULL;
9000000000016394:	29ffa2c0 	st.d	$r0,$r22,-24(0xfe8)
    if (bootfs_node != NULL) {
9000000000016398:	1c00420c 	pcaddu12i	$r12,528(0x210)
900000000001639c:	02c5218c 	addi.d	$r12,$r12,328(0x148)
90000000000163a0:	28c0018c 	ld.d	$r12,$r12,0
90000000000163a4:	40003980 	beqz	$r12,56(0x38) # 90000000000163dc <vfs_get_bootfs+0x5c>
        lock_bootfs();
90000000000163a8:	57fe63ff 	bl	-416(0xffffe60) # 9000000000016208 <lock_bootfs>
        {
            if ((node = bootfs_node) != NULL) {
90000000000163ac:	1c00420c 	pcaddu12i	$r12,528(0x210)
90000000000163b0:	02c4d18c 	addi.d	$r12,$r12,308(0x134)
90000000000163b4:	28c0018c 	ld.d	$r12,$r12,0
90000000000163b8:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
90000000000163bc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000163c0:	40001980 	beqz	$r12,24(0x18) # 90000000000163d8 <vfs_get_bootfs+0x58>
                vop_ref_inc(bootfs_node);
90000000000163c4:	1c00420c 	pcaddu12i	$r12,528(0x210)
90000000000163c8:	02c4718c 	addi.d	$r12,$r12,284(0x11c)
90000000000163cc:	28c0018c 	ld.d	$r12,$r12,0
90000000000163d0:	00150184 	move	$r4,$r12
90000000000163d4:	57f88bff 	bl	-1912(0xffff888) # 9000000000015c5c <inode_ref_inc>
            }
        }
        unlock_bootfs();
90000000000163d8:	57fe63ff 	bl	-416(0xffffe60) # 9000000000016238 <unlock_bootfs>
    }
    if (node == NULL) {
90000000000163dc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000163e0:	44000d80 	bnez	$r12,12(0xc) # 90000000000163ec <vfs_get_bootfs+0x6c>
        return -E_NOENT;
90000000000163e4:	02bfc00c 	addi.w	$r12,$r0,-16(0xff0)
90000000000163e8:	50001400 	b	20(0x14) # 90000000000163fc <vfs_get_bootfs+0x7c>
    }
    *node_store = node;
90000000000163ec:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000163f0:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
90000000000163f4:	29c0018d 	st.d	$r13,$r12,0
    return 0;
90000000000163f8:	0015000c 	move	$r12,$r0
}
90000000000163fc:	00150184 	move	$r4,$r12
9000000000016400:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000016404:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000016408:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001640c:	4c000020 	jirl	$r0,$r1,0

9000000000016410 <fence_i>:
static void fence_i(void *va_start, int size) {
9000000000016410:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000016414:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000016418:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000001641c:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000016420:	001500ac 	move	$r12,$r5
9000000000016424:	0040818c 	slli.w	$r12,$r12,0x0
9000000000016428:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
900000000001642c:	38720000 	dbar	0x0
    void *va_end = va_start + size;
9000000000016430:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000016434:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000016438:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001643c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
9000000000016440:	50002000 	b	32(0x20) # 9000000000016460 <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
9000000000016444:	06000189 	cacop	0x9,$r12,0
9000000000016448:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
900000000001644c:	06000188 	cacop	0x8,$r12,0
9000000000016450:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
9000000000016454:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000016458:	02c0418c 	addi.d	$r12,$r12,16(0x10)
900000000001645c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
9000000000016460:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000016464:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000016468:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 9000000000016444 <fence_i+0x34>
900000000001646c:	38728000 	ibar	0x0
}
9000000000016470:	03400000 	andi	$r0,$r0,0x0
9000000000016474:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000016478:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001647c:	4c000020 	jirl	$r0,$r1,0

9000000000016480 <lock_vdev_list>:

static list_entry_t vdev_list;
static semaphore_t vdev_list_sem;

static void
lock_vdev_list(void) {
9000000000016480:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000000016484:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000000016488:	29c00076 	st.d	$r22,$r3,0
900000000001648c:	02c04076 	addi.d	$r22,$r3,16(0x10)
    down(&vdev_list_sem);
9000000000016490:	1c004204 	pcaddu12i	$r4,528(0x210)
9000000000016494:	02c1a084 	addi.d	$r4,$r4,104(0x68)
9000000000016498:	577993ff 	bl	-34416(0xfff7990) # 900000000000de28 <down>
}
900000000001649c:	03400000 	andi	$r0,$r0,0x0
90000000000164a0:	28c02061 	ld.d	$r1,$r3,8(0x8)
90000000000164a4:	28c00076 	ld.d	$r22,$r3,0
90000000000164a8:	02c04063 	addi.d	$r3,$r3,16(0x10)
90000000000164ac:	4c000020 	jirl	$r0,$r1,0

90000000000164b0 <unlock_vdev_list>:

static void
unlock_vdev_list(void) {
90000000000164b0:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
90000000000164b4:	29c02061 	st.d	$r1,$r3,8(0x8)
90000000000164b8:	29c00076 	st.d	$r22,$r3,0
90000000000164bc:	02c04076 	addi.d	$r22,$r3,16(0x10)
    up(&vdev_list_sem);
90000000000164c0:	1c004204 	pcaddu12i	$r4,528(0x210)
90000000000164c4:	02c0e084 	addi.d	$r4,$r4,56(0x38)
90000000000164c8:	57792fff 	bl	-34516(0xfff792c) # 900000000000ddf4 <up>
}
90000000000164cc:	03400000 	andi	$r0,$r0,0x0
90000000000164d0:	28c02061 	ld.d	$r1,$r3,8(0x8)
90000000000164d4:	28c00076 	ld.d	$r22,$r3,0
90000000000164d8:	02c04063 	addi.d	$r3,$r3,16(0x10)
90000000000164dc:	4c000020 	jirl	$r0,$r1,0

90000000000164e0 <vfs_devlist_init>:

void
vfs_devlist_init(void) {
90000000000164e0:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000000164e4:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000000164e8:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000000164ec:	02c08076 	addi.d	$r22,$r3,32(0x20)
90000000000164f0:	1c00420c 	pcaddu12i	$r12,528(0x210)
90000000000164f4:	02ffe18c 	addi.d	$r12,$r12,-8(0xff8)
90000000000164f8:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    elm->prev = elm->next = elm;
90000000000164fc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000016500:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000016504:	29c0218d 	st.d	$r13,$r12,8(0x8)
9000000000016508:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001650c:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000016510:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000016514:	29c0018d 	st.d	$r13,$r12,0
    list_init(&vdev_list);
    sem_init(&vdev_list_sem, 1);
9000000000016518:	02800405 	addi.w	$r5,$r0,1(0x1)
900000000001651c:	1c004204 	pcaddu12i	$r4,528(0x210)
9000000000016520:	02ff7084 	addi.d	$r4,$r4,-36(0xfdc)
9000000000016524:	5776abff 	bl	-35160(0xfff76a8) # 900000000000dbcc <sem_init>
}
9000000000016528:	03400000 	andi	$r0,$r0,0x0
900000000001652c:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000016530:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000016534:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000016538:	4c000020 	jirl	$r0,$r1,0

900000000001653c <vfs_cleanup>:

void
vfs_cleanup(void) {
900000000001653c:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000016540:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000016544:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000016548:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000001654c:	1c00420c 	pcaddu12i	$r12,528(0x210)
9000000000016550:	02fe718c 	addi.d	$r12,$r12,-100(0xf9c)
9000000000016554:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    return list->next == list;
9000000000016558:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001655c:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000016560:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000016564:	0015b1ac 	xor	$r12,$r13,$r12
9000000000016568:	0240058c 	sltui	$r12,$r12,1(0x1)
900000000001656c:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
    if (!list_empty(&vdev_list)) {
9000000000016570:	44007980 	bnez	$r12,120(0x78) # 90000000000165e8 <vfs_cleanup+0xac>
        lock_vdev_list();
9000000000016574:	57ff0fff 	bl	-244(0xfffff0c) # 9000000000016480 <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
9000000000016578:	1c00420c 	pcaddu12i	$r12,528(0x210)
900000000001657c:	02fdc18c 	addi.d	$r12,$r12,-144(0xf70)
9000000000016580:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000016584:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000016588:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
            while ((le = list_next(le)) != list) {
900000000001658c:	50003800 	b	56(0x38) # 90000000000165c4 <vfs_cleanup+0x88>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
9000000000016590:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000016594:	02ff818c 	addi.d	$r12,$r12,-32(0xfe0)
9000000000016598:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
                if (vdev->fs != NULL) {
900000000001659c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000165a0:	28c0418c 	ld.d	$r12,$r12,16(0x10)
90000000000165a4:	40002180 	beqz	$r12,32(0x20) # 90000000000165c4 <vfs_cleanup+0x88>
                    fsop_cleanup(vdev->fs);
90000000000165a8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000165ac:	28c0418c 	ld.d	$r12,$r12,16(0x10)
90000000000165b0:	28c3418c 	ld.d	$r12,$r12,208(0xd0)
90000000000165b4:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
90000000000165b8:	28c041ad 	ld.d	$r13,$r13,16(0x10)
90000000000165bc:	001501a4 	move	$r4,$r13
90000000000165c0:	4c000181 	jirl	$r1,$r12,0
90000000000165c4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000165c8:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
    return listelm->next;
90000000000165cc:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000165d0:	28c0218c 	ld.d	$r12,$r12,8(0x8)
            while ((le = list_next(le)) != list) {
90000000000165d4:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
90000000000165d8:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
90000000000165dc:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000165e0:	5fffb1ac 	bne	$r13,$r12,-80(0x3ffb0) # 9000000000016590 <vfs_cleanup+0x54>
                }
            }
        }
        unlock_vdev_list();
90000000000165e4:	57fecfff 	bl	-308(0xffffecc) # 90000000000164b0 <unlock_vdev_list>
    }
}
90000000000165e8:	03400000 	andi	$r0,$r0,0x0
90000000000165ec:	28c0e061 	ld.d	$r1,$r3,56(0x38)
90000000000165f0:	28c0c076 	ld.d	$r22,$r3,48(0x30)
90000000000165f4:	02c10063 	addi.d	$r3,$r3,64(0x40)
90000000000165f8:	4c000020 	jirl	$r0,$r1,0

90000000000165fc <vfs_get_root>:

int
vfs_get_root(const char *devname, struct inode **node_store) {
90000000000165fc:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
9000000000016600:	29c16061 	st.d	$r1,$r3,88(0x58)
9000000000016604:	29c14076 	st.d	$r22,$r3,80(0x50)
9000000000016608:	02c18076 	addi.d	$r22,$r3,96(0x60)
900000000001660c:	29fea2c4 	st.d	$r4,$r22,-88(0xfa8)
9000000000016610:	29fe82c5 	st.d	$r5,$r22,-96(0xfa0)
    assert(devname != NULL);
9000000000016614:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
9000000000016618:	44001d80 	bnez	$r12,28(0x1c) # 9000000000016634 <vfs_get_root+0x38>
900000000001661c:	1c000186 	pcaddu12i	$r6,12(0xc)
9000000000016620:	02fb50c6 	addi.d	$r6,$r6,-300(0xed4)
9000000000016624:	0280fc05 	addi.w	$r5,$r0,63(0x3f)
9000000000016628:	1c000184 	pcaddu12i	$r4,12(0xc)
900000000001662c:	02fbc084 	addi.d	$r4,$r4,-272(0xef0)
9000000000016630:	576653ff 	bl	-39344(0xfff6650) # 900000000000cc80 <__panic>
    int ret = -E_NO_DEV;
9000000000016634:	02bfcc0c 	addi.w	$r12,$r0,-13(0xff3)
9000000000016638:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000001663c:	1c00420c 	pcaddu12i	$r12,528(0x210)
9000000000016640:	02fab18c 	addi.d	$r12,$r12,-340(0xeac)
9000000000016644:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
    return list->next == list;
9000000000016648:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000001664c:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000016650:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000016654:	0015b1ac 	xor	$r12,$r13,$r12
9000000000016658:	0240058c 	sltui	$r12,$r12,1(0x1)
900000000001665c:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
    if (!list_empty(&vdev_list)) {
9000000000016660:	4400f180 	bnez	$r12,240(0xf0) # 9000000000016750 <vfs_get_root+0x154>
        lock_vdev_list();
9000000000016664:	57fe1fff 	bl	-484(0xffffe1c) # 9000000000016480 <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
9000000000016668:	1c00420c 	pcaddu12i	$r12,528(0x210)
900000000001666c:	02fa018c 	addi.d	$r12,$r12,-384(0xe80)
9000000000016670:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
9000000000016674:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000016678:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
            while ((le = list_next(le)) != list) {
900000000001667c:	5000b000 	b	176(0xb0) # 900000000001672c <vfs_get_root+0x130>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
9000000000016680:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000016684:	02ff818c 	addi.d	$r12,$r12,-32(0xfe0)
9000000000016688:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
                if (strcmp(devname, vdev->devname) == 0) {
900000000001668c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000016690:	28c0018c 	ld.d	$r12,$r12,0
9000000000016694:	00150185 	move	$r5,$r12
9000000000016698:	28fea2c4 	ld.d	$r4,$r22,-88(0xfa8)
900000000001669c:	56dc97ff 	bl	-74604(0xffedc94) # 9000000000004330 <strcmp>
90000000000166a0:	0015008c 	move	$r12,$r4
90000000000166a4:	44008980 	bnez	$r12,136(0x88) # 900000000001672c <vfs_get_root+0x130>
                    struct inode *found = NULL;
90000000000166a8:	29ff62c0 	st.d	$r0,$r22,-40(0xfd8)
                    if (vdev->fs != NULL) {
90000000000166ac:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000166b0:	28c0418c 	ld.d	$r12,$r12,16(0x10)
90000000000166b4:	40002980 	beqz	$r12,40(0x28) # 90000000000166dc <vfs_get_root+0xe0>
                        found = fsop_get_root(vdev->fs);
90000000000166b8:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000166bc:	28c0418c 	ld.d	$r12,$r12,16(0x10)
90000000000166c0:	28c3018c 	ld.d	$r12,$r12,192(0xc0)
90000000000166c4:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
90000000000166c8:	28c041ad 	ld.d	$r13,$r13,16(0x10)
90000000000166cc:	001501a4 	move	$r4,$r13
90000000000166d0:	4c000181 	jirl	$r1,$r12,0
90000000000166d4:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
90000000000166d8:	50002c00 	b	44(0x2c) # 9000000000016704 <vfs_get_root+0x108>
                    }
                    else if (!vdev->mountable) {
90000000000166dc:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000166e0:	2880618c 	ld.w	$r12,$r12,24(0x18)
90000000000166e4:	44002180 	bnez	$r12,32(0x20) # 9000000000016704 <vfs_get_root+0x108>
                        vop_ref_inc(vdev->devnode);
90000000000166e8:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000166ec:	28c0218c 	ld.d	$r12,$r12,8(0x8)
90000000000166f0:	00150184 	move	$r4,$r12
90000000000166f4:	57f56bff 	bl	-2712(0xffff568) # 9000000000015c5c <inode_ref_inc>
                        found = vdev->devnode;
90000000000166f8:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000166fc:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000016700:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
                    }
                    if (found != NULL) {
9000000000016704:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000016708:	40001980 	beqz	$r12,24(0x18) # 9000000000016720 <vfs_get_root+0x124>
                        ret = 0, *node_store = found;
900000000001670c:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
9000000000016710:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
9000000000016714:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000016718:	29c0018d 	st.d	$r13,$r12,0
                    }
                    else {
                        ret = -E_NA_DEV;
                    }
                    break;
900000000001671c:	50003000 	b	48(0x30) # 900000000001674c <vfs_get_root+0x150>
                        ret = -E_NA_DEV;
9000000000016720:	02bfc80c 	addi.w	$r12,$r0,-14(0xff2)
9000000000016724:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
                    break;
9000000000016728:	50002400 	b	36(0x24) # 900000000001674c <vfs_get_root+0x150>
900000000001672c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000016730:	29fee2cc 	st.d	$r12,$r22,-72(0xfb8)
    return listelm->next;
9000000000016734:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000016738:	28c0218c 	ld.d	$r12,$r12,8(0x8)
            while ((le = list_next(le)) != list) {
900000000001673c:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000016740:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000016744:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000016748:	5fff39ac 	bne	$r13,$r12,-200(0x3ff38) # 9000000000016680 <vfs_get_root+0x84>
                }
            }
        }
        unlock_vdev_list();
900000000001674c:	57fd67ff 	bl	-668(0xffffd64) # 90000000000164b0 <unlock_vdev_list>
    }
    return ret;
9000000000016750:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
9000000000016754:	00150184 	move	$r4,$r12
9000000000016758:	28c16061 	ld.d	$r1,$r3,88(0x58)
900000000001675c:	28c14076 	ld.d	$r22,$r3,80(0x50)
9000000000016760:	02c18063 	addi.d	$r3,$r3,96(0x60)
9000000000016764:	4c000020 	jirl	$r0,$r1,0

9000000000016768 <vfs_get_devname>:

const char *
vfs_get_devname(struct fs *fs) {
9000000000016768:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000001676c:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000016770:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000016774:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000016778:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
    assert(fs != NULL);
900000000001677c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000016780:	44001d80 	bnez	$r12,28(0x1c) # 900000000001679c <vfs_get_devname+0x34>
9000000000016784:	1c000186 	pcaddu12i	$r6,12(0xc)
9000000000016788:	02f6b0c6 	addi.d	$r6,$r6,-596(0xdac)
900000000001678c:	02818405 	addi.w	$r5,$r0,97(0x61)
9000000000016790:	1c000184 	pcaddu12i	$r4,12(0xc)
9000000000016794:	02f62084 	addi.d	$r4,$r4,-632(0xd88)
9000000000016798:	5764ebff 	bl	-39704(0xfff64e8) # 900000000000cc80 <__panic>
    list_entry_t *list = &vdev_list, *le = list;
900000000001679c:	1c00420c 	pcaddu12i	$r12,528(0x210)
90000000000167a0:	02f5318c 	addi.d	$r12,$r12,-692(0xd4c)
90000000000167a4:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
90000000000167a8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000167ac:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while ((le = list_next(le)) != list) {
90000000000167b0:	50002c00 	b	44(0x2c) # 90000000000167dc <vfs_get_devname+0x74>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
90000000000167b4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000167b8:	02ff818c 	addi.d	$r12,$r12,-32(0xfe0)
90000000000167bc:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        if (vdev->fs == fs) {
90000000000167c0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000167c4:	28c0418c 	ld.d	$r12,$r12,16(0x10)
90000000000167c8:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
90000000000167cc:	5c0011ac 	bne	$r13,$r12,16(0x10) # 90000000000167dc <vfs_get_devname+0x74>
            return vdev->devname;
90000000000167d0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000167d4:	28c0018c 	ld.d	$r12,$r12,0
90000000000167d8:	50002800 	b	40(0x28) # 9000000000016800 <vfs_get_devname+0x98>
90000000000167dc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000167e0:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
90000000000167e4:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
90000000000167e8:	28c0218c 	ld.d	$r12,$r12,8(0x8)
    while ((le = list_next(le)) != list) {
90000000000167ec:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
90000000000167f0:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
90000000000167f4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000167f8:	5fffbdac 	bne	$r13,$r12,-68(0x3ffbc) # 90000000000167b4 <vfs_get_devname+0x4c>
        }
    }
    return NULL;
90000000000167fc:	0015000c 	move	$r12,$r0
}
9000000000016800:	00150184 	move	$r4,$r12
9000000000016804:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000000016808:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000001680c:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000016810:	4c000020 	jirl	$r0,$r1,0

9000000000016814 <check_devname_conflict>:

static bool
check_devname_conflict(const char *devname) {
9000000000016814:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000016818:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000001681c:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000016820:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000016824:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
    list_entry_t *list = &vdev_list, *le = list;
9000000000016828:	1c00420c 	pcaddu12i	$r12,528(0x210)
900000000001682c:	02f3018c 	addi.d	$r12,$r12,-832(0xcc0)
9000000000016830:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000016834:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000016838:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while ((le = list_next(le)) != list) {
900000000001683c:	50003400 	b	52(0x34) # 9000000000016870 <check_devname_conflict+0x5c>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
9000000000016840:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000016844:	02ff818c 	addi.d	$r12,$r12,-32(0xfe0)
9000000000016848:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        if (strcmp(vdev->devname, devname) == 0) {
900000000001684c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000016850:	28c0018c 	ld.d	$r12,$r12,0
9000000000016854:	28ff22c5 	ld.d	$r5,$r22,-56(0xfc8)
9000000000016858:	00150184 	move	$r4,$r12
900000000001685c:	56dad7ff 	bl	-75052(0xffedad4) # 9000000000004330 <strcmp>
9000000000016860:	0015008c 	move	$r12,$r4
9000000000016864:	44000d80 	bnez	$r12,12(0xc) # 9000000000016870 <check_devname_conflict+0x5c>
            return 0;
9000000000016868:	0015000c 	move	$r12,$r0
900000000001686c:	50002800 	b	40(0x28) # 9000000000016894 <check_devname_conflict+0x80>
9000000000016870:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000016874:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
9000000000016878:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001687c:	28c0218c 	ld.d	$r12,$r12,8(0x8)
    while ((le = list_next(le)) != list) {
9000000000016880:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000016884:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000016888:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001688c:	5fffb5ac 	bne	$r13,$r12,-76(0x3ffb4) # 9000000000016840 <check_devname_conflict+0x2c>
        }
    }
    return 1;
9000000000016890:	0280040c 	addi.w	$r12,$r0,1(0x1)
}
9000000000016894:	00150184 	move	$r4,$r12
9000000000016898:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000001689c:	28c0c076 	ld.d	$r22,$r3,48(0x30)
90000000000168a0:	02c10063 	addi.d	$r3,$r3,64(0x40)
90000000000168a4:	4c000020 	jirl	$r0,$r1,0

90000000000168a8 <vfs_do_add>:

static int
vfs_do_add(const char *devname, struct inode *devnode, struct fs *fs, bool mountable) {
90000000000168a8:	02fe0063 	addi.d	$r3,$r3,-128(0xf80)
90000000000168ac:	29c1e061 	st.d	$r1,$r3,120(0x78)
90000000000168b0:	29c1c076 	st.d	$r22,$r3,112(0x70)
90000000000168b4:	02c20076 	addi.d	$r22,$r3,128(0x80)
90000000000168b8:	29fe62c4 	st.d	$r4,$r22,-104(0xf98)
90000000000168bc:	29fe42c5 	st.d	$r5,$r22,-112(0xf90)
90000000000168c0:	29fe22c6 	st.d	$r6,$r22,-120(0xf88)
90000000000168c4:	001500ec 	move	$r12,$r7
90000000000168c8:	0040818c 	slli.w	$r12,$r12,0x0
90000000000168cc:	29be12cc 	st.w	$r12,$r22,-124(0xf84)
    assert(devname != NULL);
90000000000168d0:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
90000000000168d4:	44001d80 	bnez	$r12,28(0x1c) # 90000000000168f0 <vfs_do_add+0x48>
90000000000168d8:	1c000186 	pcaddu12i	$r6,12(0xc)
90000000000168dc:	02f060c6 	addi.d	$r6,$r6,-1000(0xc18)
90000000000168e0:	0281e805 	addi.w	$r5,$r0,122(0x7a)
90000000000168e4:	1c000184 	pcaddu12i	$r4,12(0xc)
90000000000168e8:	02f0d084 	addi.d	$r4,$r4,-972(0xc34)
90000000000168ec:	576397ff 	bl	-40044(0xfff6394) # 900000000000cc80 <__panic>
    assert((devnode == NULL && !mountable) || (devnode != NULL && check_inode_type(devnode, device)));
90000000000168f0:	28fe42cc 	ld.d	$r12,$r22,-112(0xf90)
90000000000168f4:	44000d80 	bnez	$r12,12(0xc) # 9000000000016900 <vfs_do_add+0x58>
90000000000168f8:	28be12cc 	ld.w	$r12,$r22,-124(0xf84)
90000000000168fc:	40003d80 	beqz	$r12,60(0x3c) # 9000000000016938 <vfs_do_add+0x90>
9000000000016900:	28fe42cc 	ld.d	$r12,$r22,-112(0xf90)
9000000000016904:	40001d80 	beqz	$r12,28(0x1c) # 9000000000016920 <vfs_do_add+0x78>
9000000000016908:	28fe42cc 	ld.d	$r12,$r22,-112(0xf90)
900000000001690c:	2881418c 	ld.w	$r12,$r12,80(0x50)
9000000000016910:	0015018d 	move	$r13,$r12
9000000000016914:	1400002c 	lu12i.w	$r12,1(0x1)
9000000000016918:	0388d18c 	ori	$r12,$r12,0x234
900000000001691c:	58001dac 	beq	$r13,$r12,28(0x1c) # 9000000000016938 <vfs_do_add+0x90>
9000000000016920:	1c000186 	pcaddu12i	$r6,12(0xc)
9000000000016924:	02f0c0c6 	addi.d	$r6,$r6,-976(0xc30)
9000000000016928:	0281ec05 	addi.w	$r5,$r0,123(0x7b)
900000000001692c:	1c000184 	pcaddu12i	$r4,12(0xc)
9000000000016930:	02efb084 	addi.d	$r4,$r4,-1044(0xbec)
9000000000016934:	57634fff 	bl	-40116(0xfff634c) # 900000000000cc80 <__panic>
    if (strlen(devname) > FS_MAX_DNAME_LEN) {
9000000000016938:	28fe62c4 	ld.d	$r4,$r22,-104(0xf98)
900000000001693c:	56d873ff 	bl	-75664(0xffed870) # 90000000000041ac <strlen>
9000000000016940:	0015008d 	move	$r13,$r4
9000000000016944:	02807c0c 	addi.w	$r12,$r0,31(0x1f)
9000000000016948:	6c000d8d 	bgeu	$r12,$r13,12(0xc) # 9000000000016954 <vfs_do_add+0xac>
        return -E_TOO_BIG;
900000000001694c:	02bfd00c 	addi.w	$r12,$r0,-12(0xff4)
9000000000016950:	50013400 	b	308(0x134) # 9000000000016a84 <vfs_do_add+0x1dc>
    }

    int ret = -E_NO_MEM;
9000000000016954:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
9000000000016958:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    char *s_devname;
    if ((s_devname = strdup(devname)) == NULL) {
900000000001695c:	28fe62c4 	ld.d	$r4,$r22,-104(0xf98)
9000000000016960:	56de23ff 	bl	-74208(0xffede20) # 9000000000004780 <strdup>
9000000000016964:	0015008c 	move	$r12,$r4
9000000000016968:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
900000000001696c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000016970:	44000d80 	bnez	$r12,12(0xc) # 900000000001697c <vfs_do_add+0xd4>
        return ret;
9000000000016974:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000016978:	50010c00 	b	268(0x10c) # 9000000000016a84 <vfs_do_add+0x1dc>
    }

    vfs_dev_t *vdev;
    if ((vdev = kmalloc(sizeof(vfs_dev_t))) == NULL) {
900000000001697c:	0280c004 	addi.w	$r4,$r0,48(0x30)
9000000000016980:	570cbbff 	bl	-62280(0xfff0cb8) # 9000000000007638 <kmalloc>
9000000000016984:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000016988:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001698c:	4000e980 	beqz	$r12,232(0xe8) # 9000000000016a74 <vfs_do_add+0x1cc>
        goto failed_cleanup_name;
    }

    ret = -E_EXISTS;
9000000000016990:	02bfa40c 	addi.w	$r12,$r0,-23(0xfe9)
9000000000016994:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    lock_vdev_list();
9000000000016998:	57faebff 	bl	-1304(0xffffae8) # 9000000000016480 <lock_vdev_list>
    if (!check_devname_conflict(s_devname)) {
900000000001699c:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
90000000000169a0:	57fe77ff 	bl	-396(0xffffe74) # 9000000000016814 <check_devname_conflict>
90000000000169a4:	0015008c 	move	$r12,$r4
90000000000169a8:	44001980 	bnez	$r12,24(0x18) # 90000000000169c0 <vfs_do_add+0x118>
        unlock_vdev_list();
90000000000169ac:	57fb07ff 	bl	-1276(0xffffb04) # 90000000000164b0 <unlock_vdev_list>
        goto failed_cleanup_vdev;
90000000000169b0:	03400000 	andi	$r0,$r0,0x0
    list_add(&vdev_list, &(vdev->vdev_link));
    unlock_vdev_list();
    return 0;

failed_cleanup_vdev:
    kfree(vdev);
90000000000169b4:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
90000000000169b8:	57115fff 	bl	-61092(0xfff115c) # 9000000000007b14 <kfree>
90000000000169bc:	5000bc00 	b	188(0xbc) # 9000000000016a78 <vfs_do_add+0x1d0>
    vdev->devname = s_devname;
90000000000169c0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000169c4:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
90000000000169c8:	29c0018d 	st.d	$r13,$r12,0
    vdev->devnode = devnode;
90000000000169cc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000169d0:	28fe42cd 	ld.d	$r13,$r22,-112(0xf90)
90000000000169d4:	29c0218d 	st.d	$r13,$r12,8(0x8)
    vdev->mountable = mountable;
90000000000169d8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000169dc:	28be12cd 	ld.w	$r13,$r22,-124(0xf84)
90000000000169e0:	2980618d 	st.w	$r13,$r12,24(0x18)
    vdev->fs = fs;
90000000000169e4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000169e8:	28fe22cd 	ld.d	$r13,$r22,-120(0xf88)
90000000000169ec:	29c0418d 	st.d	$r13,$r12,16(0x10)
    list_add(&vdev_list, &(vdev->vdev_link));
90000000000169f0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000169f4:	02c0818c 	addi.d	$r12,$r12,32(0x20)
90000000000169f8:	1c00420d 	pcaddu12i	$r13,528(0x210)
90000000000169fc:	02ebc1ad 	addi.d	$r13,$r13,-1296(0xaf0)
9000000000016a00:	29ff42cd 	st.d	$r13,$r22,-48(0xfd0)
9000000000016a04:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
9000000000016a08:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000016a0c:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
9000000000016a10:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000016a14:	29fee2cc 	st.d	$r12,$r22,-72(0xfb8)
    __list_add(elm, listelm, listelm->next);
9000000000016a18:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000016a1c:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000016a20:	28fee2cd 	ld.d	$r13,$r22,-72(0xfb8)
9000000000016a24:	29fec2cd 	st.d	$r13,$r22,-80(0xfb0)
9000000000016a28:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
9000000000016a2c:	29fea2cd 	st.d	$r13,$r22,-88(0xfa8)
9000000000016a30:	29fe82cc 	st.d	$r12,$r22,-96(0xfa0)
    prev->next = next->prev = elm;
9000000000016a34:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
9000000000016a38:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
9000000000016a3c:	29c0018d 	st.d	$r13,$r12,0
9000000000016a40:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
9000000000016a44:	28c0018d 	ld.d	$r13,$r12,0
9000000000016a48:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
9000000000016a4c:	29c0218d 	st.d	$r13,$r12,8(0x8)
    elm->next = next;
9000000000016a50:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
9000000000016a54:	28fe82cd 	ld.d	$r13,$r22,-96(0xfa0)
9000000000016a58:	29c0218d 	st.d	$r13,$r12,8(0x8)
    elm->prev = prev;
9000000000016a5c:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
9000000000016a60:	28fea2cd 	ld.d	$r13,$r22,-88(0xfa8)
9000000000016a64:	29c0018d 	st.d	$r13,$r12,0
    unlock_vdev_list();
9000000000016a68:	57fa4bff 	bl	-1464(0xffffa48) # 90000000000164b0 <unlock_vdev_list>
    return 0;
9000000000016a6c:	0015000c 	move	$r12,$r0
9000000000016a70:	50001400 	b	20(0x14) # 9000000000016a84 <vfs_do_add+0x1dc>
        goto failed_cleanup_name;
9000000000016a74:	03400000 	andi	$r0,$r0,0x0
failed_cleanup_name:
    kfree(s_devname);
9000000000016a78:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000016a7c:	57109bff 	bl	-61288(0xfff1098) # 9000000000007b14 <kfree>
    return ret;
9000000000016a80:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
9000000000016a84:	00150184 	move	$r4,$r12
9000000000016a88:	28c1e061 	ld.d	$r1,$r3,120(0x78)
9000000000016a8c:	28c1c076 	ld.d	$r22,$r3,112(0x70)
9000000000016a90:	02c20063 	addi.d	$r3,$r3,128(0x80)
9000000000016a94:	4c000020 	jirl	$r0,$r1,0

9000000000016a98 <vfs_add_fs>:

int
vfs_add_fs(const char *devname, struct fs *fs) {
9000000000016a98:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000016a9c:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000016aa0:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000016aa4:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000016aa8:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
9000000000016aac:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
    return vfs_do_add(devname, NULL, fs, 0);
9000000000016ab0:	00150007 	move	$r7,$r0
9000000000016ab4:	28ff82c6 	ld.d	$r6,$r22,-32(0xfe0)
9000000000016ab8:	00150005 	move	$r5,$r0
9000000000016abc:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000016ac0:	57fdebff 	bl	-536(0xffffde8) # 90000000000168a8 <vfs_do_add>
9000000000016ac4:	0015008c 	move	$r12,$r4
}
9000000000016ac8:	00150184 	move	$r4,$r12
9000000000016acc:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000016ad0:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000016ad4:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000016ad8:	4c000020 	jirl	$r0,$r1,0

9000000000016adc <vfs_add_dev>:

int
vfs_add_dev(const char *devname, struct inode *devnode, bool mountable) {
9000000000016adc:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000016ae0:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000016ae4:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000016ae8:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000016aec:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
9000000000016af0:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
9000000000016af4:	001500cc 	move	$r12,$r6
9000000000016af8:	0040818c 	slli.w	$r12,$r12,0x0
9000000000016afc:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
    return vfs_do_add(devname, devnode, NULL, mountable);
9000000000016b00:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000016b04:	00150187 	move	$r7,$r12
9000000000016b08:	00150006 	move	$r6,$r0
9000000000016b0c:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
9000000000016b10:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000016b14:	57fd97ff 	bl	-620(0xffffd94) # 90000000000168a8 <vfs_do_add>
9000000000016b18:	0015008c 	move	$r12,$r4
}
9000000000016b1c:	00150184 	move	$r4,$r12
9000000000016b20:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000016b24:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000016b28:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000016b2c:	4c000020 	jirl	$r0,$r1,0

9000000000016b30 <find_mount>:

static int
find_mount(const char *devname, vfs_dev_t **vdev_store) {
9000000000016b30:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000016b34:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000016b38:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000016b3c:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000016b40:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
9000000000016b44:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
    assert(devname != NULL);
9000000000016b48:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000016b4c:	44001d80 	bnez	$r12,28(0x1c) # 9000000000016b68 <find_mount+0x38>
9000000000016b50:	1c000186 	pcaddu12i	$r6,12(0xc)
9000000000016b54:	02e680c6 	addi.d	$r6,$r6,-1632(0x9a0)
9000000000016b58:	0282b405 	addi.w	$r5,$r0,173(0xad)
9000000000016b5c:	1c000184 	pcaddu12i	$r4,12(0xc)
9000000000016b60:	02e6f084 	addi.d	$r4,$r4,-1604(0x9bc)
9000000000016b64:	57611fff 	bl	-40676(0xfff611c) # 900000000000cc80 <__panic>
    list_entry_t *list = &vdev_list, *le = list;
9000000000016b68:	1c00420c 	pcaddu12i	$r12,528(0x210)
9000000000016b6c:	02e6018c 	addi.d	$r12,$r12,-1664(0x980)
9000000000016b70:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000016b74:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000016b78:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while ((le = list_next(le)) != list) {
9000000000016b7c:	50004c00 	b	76(0x4c) # 9000000000016bc8 <find_mount+0x98>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
9000000000016b80:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000016b84:	02ff818c 	addi.d	$r12,$r12,-32(0xfe0)
9000000000016b88:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        if (vdev->mountable && strcmp(vdev->devname, devname) == 0) {
9000000000016b8c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000016b90:	2880618c 	ld.w	$r12,$r12,24(0x18)
9000000000016b94:	40003580 	beqz	$r12,52(0x34) # 9000000000016bc8 <find_mount+0x98>
9000000000016b98:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000016b9c:	28c0018c 	ld.d	$r12,$r12,0
9000000000016ba0:	28ff22c5 	ld.d	$r5,$r22,-56(0xfc8)
9000000000016ba4:	00150184 	move	$r4,$r12
9000000000016ba8:	56d78bff 	bl	-75896(0xffed788) # 9000000000004330 <strcmp>
9000000000016bac:	0015008c 	move	$r12,$r4
9000000000016bb0:	44001980 	bnez	$r12,24(0x18) # 9000000000016bc8 <find_mount+0x98>
            *vdev_store = vdev;
9000000000016bb4:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000016bb8:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000016bbc:	29c0018d 	st.d	$r13,$r12,0
            return 0;
9000000000016bc0:	0015000c 	move	$r12,$r0
9000000000016bc4:	50002800 	b	40(0x28) # 9000000000016bec <find_mount+0xbc>
9000000000016bc8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000016bcc:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    return listelm->next;
9000000000016bd0:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000016bd4:	28c0218c 	ld.d	$r12,$r12,8(0x8)
    while ((le = list_next(le)) != list) {
9000000000016bd8:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000016bdc:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000016be0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000016be4:	5fff9dac 	bne	$r13,$r12,-100(0x3ff9c) # 9000000000016b80 <find_mount+0x50>
        }
    }
    return -E_NO_DEV;
9000000000016be8:	02bfcc0c 	addi.w	$r12,$r0,-13(0xff3)
}
9000000000016bec:	00150184 	move	$r4,$r12
9000000000016bf0:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000000016bf4:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000000016bf8:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000016bfc:	4c000020 	jirl	$r0,$r1,0

9000000000016c00 <vfs_mount>:

int
vfs_mount(const char *devname, int (*mountfunc)(struct device *dev, struct fs **fs_store)) {
9000000000016c00:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000016c04:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000016c08:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000016c0c:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000016c10:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
9000000000016c14:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
    int ret;
    lock_vdev_list();
9000000000016c18:	57f86bff 	bl	-1944(0xffff868) # 9000000000016480 <lock_vdev_list>
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
9000000000016c1c:	02ff42cc 	addi.d	$r12,$r22,-48(0xfd0)
9000000000016c20:	00150185 	move	$r5,$r12
9000000000016c24:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000016c28:	57ff0bff 	bl	-248(0xfffff08) # 9000000000016b30 <find_mount>
9000000000016c2c:	0015008c 	move	$r12,$r4
9000000000016c30:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000016c34:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000016c38:	44010180 	bnez	$r12,256(0x100) # 9000000000016d38 <vfs_mount+0x138>
        goto out;
    }
    if (vdev->fs != NULL) {
9000000000016c3c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000016c40:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000016c44:	40001180 	beqz	$r12,16(0x10) # 9000000000016c54 <vfs_mount+0x54>
        ret = -E_BUSY;
9000000000016c48:	02bfc40c 	addi.w	$r12,$r0,-15(0xff1)
9000000000016c4c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
        goto out;
9000000000016c50:	5000f400 	b	244(0xf4) # 9000000000016d44 <vfs_mount+0x144>
    }
    assert(vdev->devname != NULL && vdev->mountable);
9000000000016c54:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000016c58:	28c0018c 	ld.d	$r12,$r12,0
9000000000016c5c:	40001180 	beqz	$r12,16(0x10) # 9000000000016c6c <vfs_mount+0x6c>
9000000000016c60:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000016c64:	2880618c 	ld.w	$r12,$r12,24(0x18)
9000000000016c68:	44001d80 	bnez	$r12,28(0x1c) # 9000000000016c84 <vfs_mount+0x84>
9000000000016c6c:	1c000186 	pcaddu12i	$r6,12(0xc)
9000000000016c70:	02e550c6 	addi.d	$r6,$r6,-1708(0x954)
9000000000016c74:	02831405 	addi.w	$r5,$r0,197(0xc5)
9000000000016c78:	1c000184 	pcaddu12i	$r4,12(0xc)
9000000000016c7c:	02e28084 	addi.d	$r4,$r4,-1888(0x8a0)
9000000000016c80:	576003ff 	bl	-40960(0xfff6000) # 900000000000cc80 <__panic>

    struct device *dev = vop_info(vdev->devnode, device);
9000000000016c84:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000016c88:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000016c8c:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000016c90:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000016c94:	40001d80 	beqz	$r12,28(0x1c) # 9000000000016cb0 <vfs_mount+0xb0>
9000000000016c98:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000016c9c:	2881418c 	ld.w	$r12,$r12,80(0x50)
9000000000016ca0:	0015018d 	move	$r13,$r12
9000000000016ca4:	1400002c 	lu12i.w	$r12,1(0x1)
9000000000016ca8:	0388d18c 	ori	$r12,$r12,0x234
9000000000016cac:	58001dac 	beq	$r13,$r12,28(0x1c) # 9000000000016cc8 <vfs_mount+0xc8>
9000000000016cb0:	1c000186 	pcaddu12i	$r6,12(0xc)
9000000000016cb4:	02e540c6 	addi.d	$r6,$r6,-1712(0x950)
9000000000016cb8:	02831c05 	addi.w	$r5,$r0,199(0xc7)
9000000000016cbc:	1c000184 	pcaddu12i	$r4,12(0xc)
9000000000016cc0:	02e17084 	addi.d	$r4,$r4,-1956(0x85c)
9000000000016cc4:	575fbfff 	bl	-41028(0xfff5fbc) # 900000000000cc80 <__panic>
9000000000016cc8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000016ccc:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    if ((ret = mountfunc(dev, &(vdev->fs))) == 0) {
9000000000016cd0:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000016cd4:	02c0418d 	addi.d	$r13,$r12,16(0x10)
9000000000016cd8:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000016cdc:	001501a5 	move	$r5,$r13
9000000000016ce0:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000016ce4:	4c000181 	jirl	$r1,$r12,0
9000000000016ce8:	0015008c 	move	$r12,$r4
9000000000016cec:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000016cf0:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000016cf4:	44004d80 	bnez	$r12,76(0x4c) # 9000000000016d40 <vfs_mount+0x140>
        assert(vdev->fs != NULL);
9000000000016cf8:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000016cfc:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000016d00:	44001d80 	bnez	$r12,28(0x1c) # 9000000000016d1c <vfs_mount+0x11c>
9000000000016d04:	1c000186 	pcaddu12i	$r6,12(0xc)
9000000000016d08:	02e510c6 	addi.d	$r6,$r6,-1724(0x944)
9000000000016d0c:	02832405 	addi.w	$r5,$r0,201(0xc9)
9000000000016d10:	1c000184 	pcaddu12i	$r4,12(0xc)
9000000000016d14:	02e02084 	addi.d	$r4,$r4,-2040(0x808)
9000000000016d18:	575f6bff 	bl	-41112(0xfff5f68) # 900000000000cc80 <__panic>
        kprintf("vfs: mount %s.\n", vdev->devname);
9000000000016d1c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000016d20:	28c0018c 	ld.d	$r12,$r12,0
9000000000016d24:	00150185 	move	$r5,$r12
9000000000016d28:	1c000184 	pcaddu12i	$r4,12(0xc)
9000000000016d2c:	02e52084 	addi.d	$r4,$r4,-1720(0x948)
9000000000016d30:	56d0efff 	bl	-77588(0xffed0ec) # 9000000000003e1c <kprintf>
9000000000016d34:	50001000 	b	16(0x10) # 9000000000016d44 <vfs_mount+0x144>
        goto out;
9000000000016d38:	03400000 	andi	$r0,$r0,0x0
9000000000016d3c:	50000800 	b	8(0x8) # 9000000000016d44 <vfs_mount+0x144>
    }

out:
9000000000016d40:	03400000 	andi	$r0,$r0,0x0
    unlock_vdev_list();
9000000000016d44:	57f76fff 	bl	-2196(0xffff76c) # 90000000000164b0 <unlock_vdev_list>
    return ret;
9000000000016d48:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
9000000000016d4c:	00150184 	move	$r4,$r12
9000000000016d50:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000000016d54:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000000016d58:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000016d5c:	4c000020 	jirl	$r0,$r1,0

9000000000016d60 <vfs_unmount>:

int
vfs_unmount(const char *devname) {
9000000000016d60:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000016d64:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000016d68:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000016d6c:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000016d70:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    int ret;
    lock_vdev_list();
9000000000016d74:	57f70fff 	bl	-2292(0xffff70c) # 9000000000016480 <lock_vdev_list>
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
9000000000016d78:	02ff82cc 	addi.d	$r12,$r22,-32(0xfe0)
9000000000016d7c:	00150185 	move	$r5,$r12
9000000000016d80:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000016d84:	57fdafff 	bl	-596(0xffffdac) # 9000000000016b30 <find_mount>
9000000000016d88:	0015008c 	move	$r12,$r4
9000000000016d8c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000016d90:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000016d94:	4400c980 	bnez	$r12,200(0xc8) # 9000000000016e5c <vfs_unmount+0xfc>
        goto out;
    }
    if (vdev->fs == NULL) {
9000000000016d98:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000016d9c:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000016da0:	44001180 	bnez	$r12,16(0x10) # 9000000000016db0 <vfs_unmount+0x50>
        ret = -E_INVAL;
9000000000016da4:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
9000000000016da8:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
        goto out;
9000000000016dac:	5000c400 	b	196(0xc4) # 9000000000016e70 <vfs_unmount+0x110>
    }
    assert(vdev->devname != NULL && vdev->mountable);
9000000000016db0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000016db4:	28c0018c 	ld.d	$r12,$r12,0
9000000000016db8:	40001180 	beqz	$r12,16(0x10) # 9000000000016dc8 <vfs_unmount+0x68>
9000000000016dbc:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000016dc0:	2880618c 	ld.w	$r12,$r12,24(0x18)
9000000000016dc4:	44001d80 	bnez	$r12,28(0x1c) # 9000000000016de0 <vfs_unmount+0x80>
9000000000016dc8:	1c000166 	pcaddu12i	$r6,11(0xb)
9000000000016dcc:	02dfe0c6 	addi.d	$r6,$r6,2040(0x7f8)
9000000000016dd0:	02837805 	addi.w	$r5,$r0,222(0xde)
9000000000016dd4:	1c000164 	pcaddu12i	$r4,11(0xb)
9000000000016dd8:	02dd1084 	addi.d	$r4,$r4,1860(0x744)
9000000000016ddc:	575ea7ff 	bl	-41308(0xfff5ea4) # 900000000000cc80 <__panic>

    if ((ret = fsop_sync(vdev->fs)) != 0) {
9000000000016de0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000016de4:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000016de8:	28c2e18c 	ld.d	$r12,$r12,184(0xb8)
9000000000016dec:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000016df0:	28c041ad 	ld.d	$r13,$r13,16(0x10)
9000000000016df4:	001501a4 	move	$r4,$r13
9000000000016df8:	4c000181 	jirl	$r1,$r12,0
9000000000016dfc:	0015008c 	move	$r12,$r4
9000000000016e00:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000016e04:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000016e08:	44005d80 	bnez	$r12,92(0x5c) # 9000000000016e64 <vfs_unmount+0x104>
        goto out;
    }
    if ((ret = fsop_unmount(vdev->fs)) == 0) {
9000000000016e0c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000016e10:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000016e14:	28c3218c 	ld.d	$r12,$r12,200(0xc8)
9000000000016e18:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000016e1c:	28c041ad 	ld.d	$r13,$r13,16(0x10)
9000000000016e20:	001501a4 	move	$r4,$r13
9000000000016e24:	4c000181 	jirl	$r1,$r12,0
9000000000016e28:	0015008c 	move	$r12,$r4
9000000000016e2c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000016e30:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000016e34:	44003980 	bnez	$r12,56(0x38) # 9000000000016e6c <vfs_unmount+0x10c>
        vdev->fs = NULL;
9000000000016e38:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000016e3c:	29c04180 	st.d	$r0,$r12,16(0x10)
        kprintf("vfs: unmount %s.\n", vdev->devname);
9000000000016e40:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000016e44:	28c0018c 	ld.d	$r12,$r12,0
9000000000016e48:	00150185 	move	$r5,$r12
9000000000016e4c:	1c000184 	pcaddu12i	$r4,12(0xc)
9000000000016e50:	02e0d084 	addi.d	$r4,$r4,-1996(0x834)
9000000000016e54:	56cfcbff 	bl	-77880(0xffecfc8) # 9000000000003e1c <kprintf>
9000000000016e58:	50001800 	b	24(0x18) # 9000000000016e70 <vfs_unmount+0x110>
        goto out;
9000000000016e5c:	03400000 	andi	$r0,$r0,0x0
9000000000016e60:	50001000 	b	16(0x10) # 9000000000016e70 <vfs_unmount+0x110>
        goto out;
9000000000016e64:	03400000 	andi	$r0,$r0,0x0
9000000000016e68:	50000800 	b	8(0x8) # 9000000000016e70 <vfs_unmount+0x110>
    }

out:
9000000000016e6c:	03400000 	andi	$r0,$r0,0x0
    unlock_vdev_list();
9000000000016e70:	57f643ff 	bl	-2496(0xffff640) # 90000000000164b0 <unlock_vdev_list>
    return ret;
9000000000016e74:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
9000000000016e78:	00150184 	move	$r4,$r12
9000000000016e7c:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000016e80:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000016e84:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000016e88:	4c000020 	jirl	$r0,$r1,0

9000000000016e8c <vfs_unmount_all>:

int
vfs_unmount_all(void) {
9000000000016e8c:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000016e90:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000016e94:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000016e98:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000016e9c:	1c0041ec 	pcaddu12i	$r12,527(0x20f)
9000000000016ea0:	02d9318c 	addi.d	$r12,$r12,1612(0x64c)
9000000000016ea4:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
    return list->next == list;
9000000000016ea8:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000016eac:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000016eb0:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000016eb4:	0015b1ac 	xor	$r12,$r13,$r12
9000000000016eb8:	0240058c 	sltui	$r12,$r12,1(0x1)
9000000000016ebc:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
    if (!list_empty(&vdev_list)) {
9000000000016ec0:	44012980 	bnez	$r12,296(0x128) # 9000000000016fe8 <vfs_unmount_all+0x15c>
        lock_vdev_list();
9000000000016ec4:	57f5bfff 	bl	-2628(0xffff5bc) # 9000000000016480 <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
9000000000016ec8:	1c0041ec 	pcaddu12i	$r12,527(0x20f)
9000000000016ecc:	02d8818c 	addi.d	$r12,$r12,1568(0x620)
9000000000016ed0:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
9000000000016ed4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000016ed8:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
            while ((le = list_next(le)) != list) {
9000000000016edc:	5000e800 	b	232(0xe8) # 9000000000016fc4 <vfs_unmount_all+0x138>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
9000000000016ee0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000016ee4:	02ff818c 	addi.d	$r12,$r12,-32(0xfe0)
9000000000016ee8:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
                if (vdev->mountable && vdev->fs != NULL) {
9000000000016eec:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000016ef0:	2880618c 	ld.w	$r12,$r12,24(0x18)
9000000000016ef4:	4000d180 	beqz	$r12,208(0xd0) # 9000000000016fc4 <vfs_unmount_all+0x138>
9000000000016ef8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000016efc:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000016f00:	4000c580 	beqz	$r12,196(0xc4) # 9000000000016fc4 <vfs_unmount_all+0x138>
                    int ret;
                    if ((ret = fsop_sync(vdev->fs)) != 0) {
9000000000016f04:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000016f08:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000016f0c:	28c2e18c 	ld.d	$r12,$r12,184(0xb8)
9000000000016f10:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000016f14:	28c041ad 	ld.d	$r13,$r13,16(0x10)
9000000000016f18:	001501a4 	move	$r4,$r13
9000000000016f1c:	4c000181 	jirl	$r1,$r12,0
9000000000016f20:	0015008c 	move	$r12,$r4
9000000000016f24:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
9000000000016f28:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000016f2c:	40002980 	beqz	$r12,40(0x28) # 9000000000016f54 <vfs_unmount_all+0xc8>
                        kprintf("vfs: warning: sync failed for %s: %e.\n", vdev->devname, ret);
9000000000016f30:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000016f34:	28c0018c 	ld.d	$r12,$r12,0
9000000000016f38:	28bf52cd 	ld.w	$r13,$r22,-44(0xfd4)
9000000000016f3c:	001501a6 	move	$r6,$r13
9000000000016f40:	00150185 	move	$r5,$r12
9000000000016f44:	1c000164 	pcaddu12i	$r4,11(0xb)
9000000000016f48:	02dd5084 	addi.d	$r4,$r4,1876(0x754)
9000000000016f4c:	56ced3ff 	bl	-78128(0xffeced0) # 9000000000003e1c <kprintf>
                        continue ;
9000000000016f50:	50007400 	b	116(0x74) # 9000000000016fc4 <vfs_unmount_all+0x138>
                    }
                    if ((ret = fsop_unmount(vdev->fs)) != 0) {
9000000000016f54:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000016f58:	28c0418c 	ld.d	$r12,$r12,16(0x10)
9000000000016f5c:	28c3218c 	ld.d	$r12,$r12,200(0xc8)
9000000000016f60:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000016f64:	28c041ad 	ld.d	$r13,$r13,16(0x10)
9000000000016f68:	001501a4 	move	$r4,$r13
9000000000016f6c:	4c000181 	jirl	$r1,$r12,0
9000000000016f70:	0015008c 	move	$r12,$r4
9000000000016f74:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
9000000000016f78:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000016f7c:	40002980 	beqz	$r12,40(0x28) # 9000000000016fa4 <vfs_unmount_all+0x118>
                        kprintf("vfs: warning: unmount failed for %s: %e.\n", vdev->devname, ret);
9000000000016f80:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000016f84:	28c0018c 	ld.d	$r12,$r12,0
9000000000016f88:	28bf52cd 	ld.w	$r13,$r22,-44(0xfd4)
9000000000016f8c:	001501a6 	move	$r6,$r13
9000000000016f90:	00150185 	move	$r5,$r12
9000000000016f94:	1c000164 	pcaddu12i	$r4,11(0xb)
9000000000016f98:	02dcb084 	addi.d	$r4,$r4,1836(0x72c)
9000000000016f9c:	56ce83ff 	bl	-78208(0xffece80) # 9000000000003e1c <kprintf>
                        continue ;
9000000000016fa0:	50002400 	b	36(0x24) # 9000000000016fc4 <vfs_unmount_all+0x138>
                    }
                    vdev->fs = NULL;
9000000000016fa4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000016fa8:	29c04180 	st.d	$r0,$r12,16(0x10)
                    kprintf("vfs: unmount %s.\n", vdev->devname);
9000000000016fac:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000016fb0:	28c0018c 	ld.d	$r12,$r12,0
9000000000016fb4:	00150185 	move	$r5,$r12
9000000000016fb8:	1c000164 	pcaddu12i	$r4,11(0xb)
9000000000016fbc:	02db2084 	addi.d	$r4,$r4,1736(0x6c8)
9000000000016fc0:	56ce5fff 	bl	-78244(0xffece5c) # 9000000000003e1c <kprintf>
9000000000016fc4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000016fc8:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
    return listelm->next;
9000000000016fcc:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000016fd0:	28c0218c 	ld.d	$r12,$r12,8(0x8)
            while ((le = list_next(le)) != list) {
9000000000016fd4:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000016fd8:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000016fdc:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000016fe0:	5fff01ac 	bne	$r13,$r12,-256(0x3ff00) # 9000000000016ee0 <vfs_unmount_all+0x54>
                }
            }
        }
        unlock_vdev_list();
9000000000016fe4:	57f4cfff 	bl	-2868(0xffff4cc) # 90000000000164b0 <unlock_vdev_list>
    }
    return 0;
9000000000016fe8:	0015000c 	move	$r12,$r0
}
9000000000016fec:	00150184 	move	$r4,$r12
9000000000016ff0:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000000016ff4:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000000016ff8:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000016ffc:	4c000020 	jirl	$r0,$r1,0

9000000000017000 <fence_i>:
static void fence_i(void *va_start, int size) {
9000000000017000:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000017004:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000017008:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000001700c:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000017010:	001500ac 	move	$r12,$r5
9000000000017014:	0040818c 	slli.w	$r12,$r12,0x0
9000000000017018:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
900000000001701c:	38720000 	dbar	0x0
    void *va_end = va_start + size;
9000000000017020:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000017024:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000017028:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001702c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
9000000000017030:	50002000 	b	32(0x20) # 9000000000017050 <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
9000000000017034:	06000189 	cacop	0x9,$r12,0
9000000000017038:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
900000000001703c:	06000188 	cacop	0x8,$r12,0
9000000000017040:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
9000000000017044:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000017048:	02c0418c 	addi.d	$r12,$r12,16(0x10)
900000000001704c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
9000000000017050:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000017054:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000017058:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 9000000000017034 <fence_i+0x34>
900000000001705c:	38728000 	ibar	0x0
}
9000000000017060:	03400000 	andi	$r0,$r0,0x0
9000000000017064:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000017068:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001706c:	4c000020 	jirl	$r0,$r1,0

9000000000017070 <vfs_open>:
#include <unistd.h>
#include <error.h>
#include <assert.h>

int
vfs_open(char *path, uint32_t open_flags, struct inode **node_store) {
9000000000017070:	02fe4063 	addi.d	$r3,$r3,-112(0xf90)
9000000000017074:	29c1a061 	st.d	$r1,$r3,104(0x68)
9000000000017078:	29c18076 	st.d	$r22,$r3,96(0x60)
900000000001707c:	02c1c076 	addi.d	$r22,$r3,112(0x70)
9000000000017080:	29fea2c4 	st.d	$r4,$r22,-88(0xfa8)
9000000000017084:	001500ac 	move	$r12,$r5
9000000000017088:	29fe62c6 	st.d	$r6,$r22,-104(0xf98)
900000000001708c:	0040818c 	slli.w	$r12,$r12,0x0
9000000000017090:	29be92cc 	st.w	$r12,$r22,-92(0xfa4)
    bool can_write = 0;
9000000000017094:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
    switch (open_flags & O_ACCMODE) {
9000000000017098:	28be92cc 	ld.w	$r12,$r22,-92(0xfa4)
900000000001709c:	03400d8c 	andi	$r12,$r12,0x3
90000000000170a0:	40002580 	beqz	$r12,36(0x24) # 90000000000170c4 <vfs_open+0x54>
90000000000170a4:	0015018d 	move	$r13,$r12
90000000000170a8:	0280080c 	addi.w	$r12,$r0,2(0x2)
90000000000170ac:	6800118d 	bltu	$r12,$r13,16(0x10) # 90000000000170bc <vfs_open+0x4c>
    case O_RDONLY:
        break;
    case O_WRONLY:
    case O_RDWR:
        can_write = 1;
90000000000170b0:	0280040c 	addi.w	$r12,$r0,1(0x1)
90000000000170b4:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
        break;
90000000000170b8:	50001000 	b	16(0x10) # 90000000000170c8 <vfs_open+0x58>
    default:
        return -E_INVAL;
90000000000170bc:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
90000000000170c0:	5002ec00 	b	748(0x2ec) # 90000000000173ac <vfs_open+0x33c>
        break;
90000000000170c4:	03400000 	andi	$r0,$r0,0x0
    }

    if (open_flags & O_TRUNC) {
90000000000170c8:	28be92cc 	ld.w	$r12,$r22,-92(0xfa4)
90000000000170cc:	0340418c 	andi	$r12,$r12,0x10
90000000000170d0:	40001580 	beqz	$r12,20(0x14) # 90000000000170e4 <vfs_open+0x74>
        if (!can_write) {
90000000000170d4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000170d8:	44000d80 	bnez	$r12,12(0xc) # 90000000000170e4 <vfs_open+0x74>
            return -E_INVAL;
90000000000170dc:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
90000000000170e0:	5002cc00 	b	716(0x2cc) # 90000000000173ac <vfs_open+0x33c>
        }
    }

    int ret; 
	struct inode *node;
	bool excl = (open_flags & O_EXCL) != 0;
90000000000170e4:	28be92cc 	ld.w	$r12,$r22,-92(0xfa4)
90000000000170e8:	0340218c 	andi	$r12,$r12,0x8
90000000000170ec:	0012b00c 	sltu	$r12,$r0,$r12
90000000000170f0:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
90000000000170f4:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
	bool create = (open_flags & O_CREAT) != 0;
90000000000170f8:	28be92cc 	ld.w	$r12,$r22,-92(0xfa4)
90000000000170fc:	0340118c 	andi	$r12,$r12,0x4
9000000000017100:	0012b00c 	sltu	$r12,$r0,$r12
9000000000017104:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
9000000000017108:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
    ret = vfs_lookup(path, &node);
900000000001710c:	02ff02cc 	addi.d	$r12,$r22,-64(0xfc0)
9000000000017110:	00150185 	move	$r5,$r12
9000000000017114:	28fea2c4 	ld.d	$r4,$r22,-88(0xfa8)
9000000000017118:	54069400 	bl	1684(0x694) # 90000000000177ac <vfs_lookup>
900000000001711c:	0015008c 	move	$r12,$r4
9000000000017120:	29bf82cc 	st.w	$r12,$r22,-32(0xfe0)

    if (ret != 0) {
9000000000017124:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
9000000000017128:	4000e580 	beqz	$r12,228(0xe4) # 900000000001720c <vfs_open+0x19c>
		if (ret == -16 && (create)) {
900000000001712c:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
9000000000017130:	0015018d 	move	$r13,$r12
9000000000017134:	02bfc00c 	addi.w	$r12,$r0,-16(0xff0)
9000000000017138:	5c00cdac 	bne	$r13,$r12,204(0xcc) # 9000000000017204 <vfs_open+0x194>
900000000001713c:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000017140:	4000c580 	beqz	$r12,196(0xc4) # 9000000000017204 <vfs_open+0x194>
			char *name;
			struct inode *dir;
			if ((ret = vfs_lookup_parent(path, &dir, &name)) != 0) {
9000000000017144:	02fee2cd 	addi.d	$r13,$r22,-72(0xfb8)
9000000000017148:	02fec2cc 	addi.d	$r12,$r22,-80(0xfb0)
900000000001714c:	001501a6 	move	$r6,$r13
9000000000017150:	00150185 	move	$r5,$r12
9000000000017154:	28fea2c4 	ld.d	$r4,$r22,-88(0xfa8)
9000000000017158:	54076400 	bl	1892(0x764) # 90000000000178bc <vfs_lookup_parent>
900000000001715c:	0015008c 	move	$r12,$r4
9000000000017160:	29bf82cc 	st.w	$r12,$r22,-32(0xfe0)
9000000000017164:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
9000000000017168:	40000d80 	beqz	$r12,12(0xc) # 9000000000017174 <vfs_open+0x104>
				return ret;
900000000001716c:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
9000000000017170:	50023c00 	b	572(0x23c) # 90000000000173ac <vfs_open+0x33c>
			}
			ret = vop_create(dir, name, excl, &node);
9000000000017174:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
9000000000017178:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
900000000001717c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000017180:	40002180 	beqz	$r12,32(0x20) # 90000000000171a0 <vfs_open+0x130>
9000000000017184:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000017188:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
900000000001718c:	40001580 	beqz	$r12,20(0x14) # 90000000000171a0 <vfs_open+0x130>
9000000000017190:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000017194:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000017198:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
900000000001719c:	44001d80 	bnez	$r12,28(0x1c) # 90000000000171b8 <vfs_open+0x148>
90000000000171a0:	1c000166 	pcaddu12i	$r6,11(0xb)
90000000000171a4:	02d540c6 	addi.d	$r6,$r6,1360(0x550)
90000000000171a8:	0280a805 	addi.w	$r5,$r0,42(0x2a)
90000000000171ac:	1c000164 	pcaddu12i	$r4,11(0xb)
90000000000171b0:	02d6b084 	addi.d	$r4,$r4,1452(0x5ac)
90000000000171b4:	575acfff 	bl	-42292(0xfff5acc) # 900000000000cc80 <__panic>
90000000000171b8:	1c000165 	pcaddu12i	$r5,11(0xb)
90000000000171bc:	02d6e0a5 	addi.d	$r5,$r5,1464(0x5b8)
90000000000171c0:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
90000000000171c4:	57ee3bff 	bl	-4552(0xfffee38) # 9000000000015ffc <inode_check>
90000000000171c8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000171cc:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
90000000000171d0:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
90000000000171d4:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
90000000000171d8:	28fee2ce 	ld.d	$r14,$r22,-72(0xfb8)
90000000000171dc:	02ff02d0 	addi.d	$r16,$r22,-64(0xfc0)
90000000000171e0:	28bfa2cf 	ld.w	$r15,$r22,-24(0xfe8)
90000000000171e4:	00150207 	move	$r7,$r16
90000000000171e8:	001501e6 	move	$r6,$r15
90000000000171ec:	001501c5 	move	$r5,$r14
90000000000171f0:	001501a4 	move	$r4,$r13
90000000000171f4:	4c000181 	jirl	$r1,$r12,0
90000000000171f8:	0015008c 	move	$r12,$r4
90000000000171fc:	29bf82cc 	st.w	$r12,$r22,-32(0xfe0)
		if (ret == -16 && (create)) {
9000000000017200:	50002400 	b	36(0x24) # 9000000000017224 <vfs_open+0x1b4>
		} else return ret;
9000000000017204:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
9000000000017208:	5001a400 	b	420(0x1a4) # 90000000000173ac <vfs_open+0x33c>
    } else if (excl && create) {
900000000001720c:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
9000000000017210:	40001580 	beqz	$r12,20(0x14) # 9000000000017224 <vfs_open+0x1b4>
9000000000017214:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000017218:	40000d80 	beqz	$r12,12(0xc) # 9000000000017224 <vfs_open+0x1b4>
		return -E_EXISTS;
900000000001721c:	02bfa40c 	addi.w	$r12,$r0,-23(0xfe9)
9000000000017220:	50018c00 	b	396(0x18c) # 90000000000173ac <vfs_open+0x33c>
	}
    assert(node != NULL);
9000000000017224:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000017228:	44001d80 	bnez	$r12,28(0x1c) # 9000000000017244 <vfs_open+0x1d4>
900000000001722c:	1c000166 	pcaddu12i	$r6,11(0xb)
9000000000017230:	02d530c6 	addi.d	$r6,$r6,1356(0x54c)
9000000000017234:	0280bc05 	addi.w	$r5,$r0,47(0x2f)
9000000000017238:	1c000164 	pcaddu12i	$r4,11(0xb)
900000000001723c:	02d48084 	addi.d	$r4,$r4,1312(0x520)
9000000000017240:	575a43ff 	bl	-42432(0xfff5a40) # 900000000000cc80 <__panic>
	
    if ((ret = vop_open(node, open_flags)) != 0) {
9000000000017244:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000017248:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
900000000001724c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000017250:	40002180 	beqz	$r12,32(0x20) # 9000000000017270 <vfs_open+0x200>
9000000000017254:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000017258:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
900000000001725c:	40001580 	beqz	$r12,20(0x14) # 9000000000017270 <vfs_open+0x200>
9000000000017260:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000017264:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000017268:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000001726c:	44001d80 	bnez	$r12,28(0x1c) # 9000000000017288 <vfs_open+0x218>
9000000000017270:	1c000166 	pcaddu12i	$r6,11(0xb)
9000000000017274:	02d4a0c6 	addi.d	$r6,$r6,1320(0x528)
9000000000017278:	0280c405 	addi.w	$r5,$r0,49(0x31)
900000000001727c:	1c000164 	pcaddu12i	$r4,11(0xb)
9000000000017280:	02d37084 	addi.d	$r4,$r4,1244(0x4dc)
9000000000017284:	5759ffff 	bl	-42500(0xfff59fc) # 900000000000cc80 <__panic>
9000000000017288:	1c000165 	pcaddu12i	$r5,11(0xb)
900000000001728c:	02d5c0a5 	addi.d	$r5,$r5,1392(0x570)
9000000000017290:	28ff42c4 	ld.d	$r4,$r22,-48(0xfd0)
9000000000017294:	57ed6bff 	bl	-4760(0xfffed68) # 9000000000015ffc <inode_check>
9000000000017298:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001729c:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
90000000000172a0:	28c0218c 	ld.d	$r12,$r12,8(0x8)
90000000000172a4:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
90000000000172a8:	28be92ce 	ld.w	$r14,$r22,-92(0xfa4)
90000000000172ac:	001501c5 	move	$r5,$r14
90000000000172b0:	001501a4 	move	$r4,$r13
90000000000172b4:	4c000181 	jirl	$r1,$r12,0
90000000000172b8:	0015008c 	move	$r12,$r4
90000000000172bc:	29bf82cc 	st.w	$r12,$r22,-32(0xfe0)
90000000000172c0:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
90000000000172c4:	40001980 	beqz	$r12,24(0x18) # 90000000000172dc <vfs_open+0x26c>
        vop_ref_dec(node);
90000000000172c8:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
90000000000172cc:	00150184 	move	$r4,$r12
90000000000172d0:	57ea07ff 	bl	-5628(0xfffea04) # 9000000000015cd4 <inode_ref_dec>
        return ret;
90000000000172d4:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
90000000000172d8:	5000d400 	b	212(0xd4) # 90000000000173ac <vfs_open+0x33c>
    }

    vop_open_inc(node);
90000000000172dc:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
90000000000172e0:	00150184 	move	$r4,$r12
90000000000172e4:	57eb53ff 	bl	-5296(0xfffeb50) # 9000000000015e34 <inode_open_inc>
    if (open_flags & O_TRUNC || create) {
90000000000172e8:	28be92cc 	ld.w	$r12,$r22,-92(0xfa4)
90000000000172ec:	0340418c 	andi	$r12,$r12,0x10
90000000000172f0:	44000d80 	bnez	$r12,12(0xc) # 90000000000172fc <vfs_open+0x28c>
90000000000172f4:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
90000000000172f8:	4000a580 	beqz	$r12,164(0xa4) # 900000000001739c <vfs_open+0x32c>
        if ((ret = vop_truncate(node, 0)) != 0) {
90000000000172fc:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000017300:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
9000000000017304:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000017308:	40002180 	beqz	$r12,32(0x20) # 9000000000017328 <vfs_open+0x2b8>
900000000001730c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000017310:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000017314:	40001580 	beqz	$r12,20(0x14) # 9000000000017328 <vfs_open+0x2b8>
9000000000017318:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001731c:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000017320:	28c1818c 	ld.d	$r12,$r12,96(0x60)
9000000000017324:	44001d80 	bnez	$r12,28(0x1c) # 9000000000017340 <vfs_open+0x2d0>
9000000000017328:	1c000166 	pcaddu12i	$r6,11(0xb)
900000000001732c:	02d360c6 	addi.d	$r6,$r6,1240(0x4d8)
9000000000017330:	0280e005 	addi.w	$r5,$r0,56(0x38)
9000000000017334:	1c000164 	pcaddu12i	$r4,11(0xb)
9000000000017338:	02d09084 	addi.d	$r4,$r4,1060(0x424)
900000000001733c:	575947ff 	bl	-42684(0xfff5944) # 900000000000cc80 <__panic>
9000000000017340:	1c000165 	pcaddu12i	$r5,11(0xb)
9000000000017344:	02d4a0a5 	addi.d	$r5,$r5,1320(0x528)
9000000000017348:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
900000000001734c:	57ecb3ff 	bl	-4944(0xfffecb0) # 9000000000015ffc <inode_check>
9000000000017350:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000017354:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000017358:	28c1818c 	ld.d	$r12,$r12,96(0x60)
900000000001735c:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
9000000000017360:	00150005 	move	$r5,$r0
9000000000017364:	001501a4 	move	$r4,$r13
9000000000017368:	4c000181 	jirl	$r1,$r12,0
900000000001736c:	0015008c 	move	$r12,$r4
9000000000017370:	29bf82cc 	st.w	$r12,$r22,-32(0xfe0)
9000000000017374:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
9000000000017378:	40002580 	beqz	$r12,36(0x24) # 900000000001739c <vfs_open+0x32c>
            vop_open_dec(node);
900000000001737c:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000017380:	00150184 	move	$r4,$r12
9000000000017384:	57eb2bff 	bl	-5336(0xfffeb28) # 9000000000015eac <inode_open_dec>
            vop_ref_dec(node);
9000000000017388:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000001738c:	00150184 	move	$r4,$r12
9000000000017390:	57e947ff 	bl	-5820(0xfffe944) # 9000000000015cd4 <inode_ref_dec>
            return ret;
9000000000017394:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
9000000000017398:	50001400 	b	20(0x14) # 90000000000173ac <vfs_open+0x33c>
        }
    }
    *node_store = node;
900000000001739c:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
90000000000173a0:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
90000000000173a4:	29c0018d 	st.d	$r13,$r12,0
    return 0;
90000000000173a8:	0015000c 	move	$r12,$r0
}
90000000000173ac:	00150184 	move	$r4,$r12
90000000000173b0:	28c1a061 	ld.d	$r1,$r3,104(0x68)
90000000000173b4:	28c18076 	ld.d	$r22,$r3,96(0x60)
90000000000173b8:	02c1c063 	addi.d	$r3,$r3,112(0x70)
90000000000173bc:	4c000020 	jirl	$r0,$r1,0

90000000000173c0 <vfs_close>:

int
vfs_close(struct inode *node) {
90000000000173c0:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000000173c4:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000000173c8:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000000173cc:	02c08076 	addi.d	$r22,$r3,32(0x20)
90000000000173d0:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    vop_open_dec(node);
90000000000173d4:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
90000000000173d8:	57ead7ff 	bl	-5420(0xfffead4) # 9000000000015eac <inode_open_dec>
    vop_ref_dec(node);
90000000000173dc:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
90000000000173e0:	57e8f7ff 	bl	-5900(0xfffe8f4) # 9000000000015cd4 <inode_ref_dec>
    return 0;
90000000000173e4:	0015000c 	move	$r12,$r0
}
90000000000173e8:	00150184 	move	$r4,$r12
90000000000173ec:	28c06061 	ld.d	$r1,$r3,24(0x18)
90000000000173f0:	28c04076 	ld.d	$r22,$r3,16(0x10)
90000000000173f4:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000000173f8:	4c000020 	jirl	$r0,$r1,0

90000000000173fc <vfs_unlink>:

int
vfs_unlink(char *path) {
90000000000173fc:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000017400:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000017404:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000017408:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
	return -E_UNIMP;
900000000001740c:	02bfb00c 	addi.w	$r12,$r0,-20(0xfec)
}
9000000000017410:	00150184 	move	$r4,$r12
9000000000017414:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000017418:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000001741c:	4c000020 	jirl	$r0,$r1,0

9000000000017420 <vfs_rename>:


int
vfs_rename(char *old_path, char *new_path) {
9000000000017420:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000017424:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000017428:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000001742c:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
9000000000017430:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
	return -E_UNIMP;
9000000000017434:	02bfb00c 	addi.w	$r12,$r0,-20(0xfec)
}
9000000000017438:	00150184 	move	$r4,$r12
900000000001743c:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000017440:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000017444:	4c000020 	jirl	$r0,$r1,0

9000000000017448 <vfs_link>:

int
vfs_link(char *old_path, char *new_path) {
9000000000017448:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000001744c:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000017450:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000017454:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
9000000000017458:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
	return -E_UNIMP;
900000000001745c:	02bfb00c 	addi.w	$r12,$r0,-20(0xfec)
}
9000000000017460:	00150184 	move	$r4,$r12
9000000000017464:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000017468:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000001746c:	4c000020 	jirl	$r0,$r1,0

9000000000017470 <vfs_symlink>:

int
vfs_symlink(char *old_path, char *new_path) {
9000000000017470:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000017474:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000017478:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000001747c:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
9000000000017480:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
	return -E_UNIMP;
9000000000017484:	02bfb00c 	addi.w	$r12,$r0,-20(0xfec)
}
9000000000017488:	00150184 	move	$r4,$r12
900000000001748c:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000017490:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000017494:	4c000020 	jirl	$r0,$r1,0

9000000000017498 <vfs_readlink>:

int
vfs_readlink(char *path, struct iobuf *iob) {
9000000000017498:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000001749c:	29c06076 	st.d	$r22,$r3,24(0x18)
90000000000174a0:	02c08076 	addi.d	$r22,$r3,32(0x20)
90000000000174a4:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
90000000000174a8:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
	return -E_UNIMP;
90000000000174ac:	02bfb00c 	addi.w	$r12,$r0,-20(0xfec)
}
90000000000174b0:	00150184 	move	$r4,$r12
90000000000174b4:	28c06076 	ld.d	$r22,$r3,24(0x18)
90000000000174b8:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000000174bc:	4c000020 	jirl	$r0,$r1,0

90000000000174c0 <vfs_mkdir>:

int
vfs_mkdir(char *path){
90000000000174c0:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000000174c4:	29c06076 	st.d	$r22,$r3,24(0x18)
90000000000174c8:	02c08076 	addi.d	$r22,$r3,32(0x20)
90000000000174cc:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
	return -E_UNIMP;
90000000000174d0:	02bfb00c 	addi.w	$r12,$r0,-20(0xfec)
}
90000000000174d4:	00150184 	move	$r4,$r12
90000000000174d8:	28c06076 	ld.d	$r22,$r3,24(0x18)
90000000000174dc:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000000174e0:	4c000020 	jirl	$r0,$r1,0

90000000000174e4 <fence_i>:
static void fence_i(void *va_start, int size) {
90000000000174e4:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000000174e8:	29c0a076 	st.d	$r22,$r3,40(0x28)
90000000000174ec:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000000174f0:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
90000000000174f4:	001500ac 	move	$r12,$r5
90000000000174f8:	0040818c 	slli.w	$r12,$r12,0x0
90000000000174fc:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
9000000000017500:	38720000 	dbar	0x0
    void *va_end = va_start + size;
9000000000017504:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000017508:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000001750c:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000017510:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
9000000000017514:	50002000 	b	32(0x20) # 9000000000017534 <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
9000000000017518:	06000189 	cacop	0x9,$r12,0
900000000001751c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
9000000000017520:	06000188 	cacop	0x8,$r12,0
9000000000017524:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
9000000000017528:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001752c:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000017530:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
9000000000017534:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000017538:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001753c:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 9000000000017518 <fence_i+0x34>
9000000000017540:	38728000 	ibar	0x0
}
9000000000017544:	03400000 	andi	$r0,$r0,0x0
9000000000017548:	28c0a076 	ld.d	$r22,$r3,40(0x28)
900000000001754c:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000017550:	4c000020 	jirl	$r0,$r1,0

9000000000017554 <get_device>:
#include <inode.h>
#include <error.h>
#include <assert.h>

static int
get_device(char *path, char **subpath, struct inode **node_store) {
9000000000017554:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
9000000000017558:	29c12061 	st.d	$r1,$r3,72(0x48)
900000000001755c:	29c10076 	st.d	$r22,$r3,64(0x40)
9000000000017560:	02c14076 	addi.d	$r22,$r3,80(0x50)
9000000000017564:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
9000000000017568:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
900000000001756c:	29fee2c6 	st.d	$r6,$r22,-72(0xfb8)
    int i, slash = -1, colon = -1;
9000000000017570:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
9000000000017574:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
9000000000017578:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
900000000001757c:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
    for (i = 0; path[i] != '\0'; i ++) {
9000000000017580:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
9000000000017584:	50006000 	b	96(0x60) # 90000000000175e4 <get_device+0x90>
        if (path[i] == ':') { colon = i; break; }
9000000000017588:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001758c:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
9000000000017590:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000017594:	2800018c 	ld.b	$r12,$r12,0
9000000000017598:	0015018d 	move	$r13,$r12
900000000001759c:	0280e80c 	addi.w	$r12,$r0,58(0x3a)
90000000000175a0:	5c0011ac 	bne	$r13,$r12,16(0x10) # 90000000000175b0 <get_device+0x5c>
90000000000175a4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000175a8:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
90000000000175ac:	50004c00 	b	76(0x4c) # 90000000000175f8 <get_device+0xa4>
        if (path[i] == '/') { slash = i; break; }
90000000000175b0:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000175b4:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
90000000000175b8:	0010b1ac 	add.d	$r12,$r13,$r12
90000000000175bc:	2800018c 	ld.b	$r12,$r12,0
90000000000175c0:	0015018d 	move	$r13,$r12
90000000000175c4:	0280bc0c 	addi.w	$r12,$r0,47(0x2f)
90000000000175c8:	5c0011ac 	bne	$r13,$r12,16(0x10) # 90000000000175d8 <get_device+0x84>
90000000000175cc:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000175d0:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
90000000000175d4:	50002400 	b	36(0x24) # 90000000000175f8 <get_device+0xa4>
    for (i = 0; path[i] != '\0'; i ++) {
90000000000175d8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000175dc:	0280058c 	addi.w	$r12,$r12,1(0x1)
90000000000175e0:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
90000000000175e4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000175e8:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
90000000000175ec:	0010b1ac 	add.d	$r12,$r13,$r12
90000000000175f0:	2800018c 	ld.b	$r12,$r12,0
90000000000175f4:	47ff959f 	bnez	$r12,-108(0x7fff94) # 9000000000017588 <get_device+0x34>
    }
    if (colon < 0 && slash != 0) {
90000000000175f8:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
90000000000175fc:	64002980 	bge	$r12,$r0,40(0x28) # 9000000000017624 <get_device+0xd0>
9000000000017600:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
9000000000017604:	40002180 	beqz	$r12,32(0x20) # 9000000000017624 <get_device+0xd0>
        /* *
         * No colon before a slash, so no device name specified, and the slash isn't leading
         * or is also absent, so this is a relative path or just a bare filename. Start from
         * the current directory, and use the whole thing as the subpath.
         * */
        *subpath = path;
9000000000017608:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000001760c:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
9000000000017610:	29c0018d 	st.d	$r13,$r12,0
        return vfs_get_curdir(node_store);
9000000000017614:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
9000000000017618:	54047400 	bl	1140(0x474) # 9000000000017a8c <vfs_get_curdir>
900000000001761c:	0015008c 	move	$r12,$r4
9000000000017620:	50017800 	b	376(0x178) # 9000000000017798 <get_device+0x244>
    }
    if (colon > 0) {
9000000000017624:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000017628:	6400640c 	bge	$r0,$r12,100(0x64) # 900000000001768c <get_device+0x138>
        /* device:path - get root of device's filesystem */
        path[colon] = '\0';
900000000001762c:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000017630:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
9000000000017634:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000017638:	29000180 	st.b	$r0,$r12,0

        /* device:/path - skip slash, treat as device:path */
        while (path[++ colon] == '/');
900000000001763c:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000017640:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000017644:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
9000000000017648:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000001764c:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
9000000000017650:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000017654:	2800018c 	ld.b	$r12,$r12,0
9000000000017658:	0015018d 	move	$r13,$r12
900000000001765c:	0280bc0c 	addi.w	$r12,$r0,47(0x2f)
9000000000017660:	5bffddac 	beq	$r13,$r12,-36(0x3ffdc) # 900000000001763c <get_device+0xe8>
        *subpath = path + colon;
9000000000017664:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000017668:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
900000000001766c:	0010b1ad 	add.d	$r13,$r13,$r12
9000000000017670:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000017674:	29c0018d 	st.d	$r13,$r12,0
        return vfs_get_root(path, node_store);
9000000000017678:	28fee2c5 	ld.d	$r5,$r22,-72(0xfb8)
900000000001767c:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000017680:	57ef7fff 	bl	-4228(0xfffef7c) # 90000000000165fc <vfs_get_root>
9000000000017684:	0015008c 	move	$r12,$r4
9000000000017688:	50011000 	b	272(0x110) # 9000000000017798 <get_device+0x244>
     * we have either /path or :path
     * /path is a path relative to the root of the "boot filesystem"
     * :path is a path relative to the root of the current filesystem
     * */
    int ret;
    if (*path == '/') {
900000000001768c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000017690:	2800018c 	ld.b	$r12,$r12,0
9000000000017694:	0015018d 	move	$r13,$r12
9000000000017698:	0280bc0c 	addi.w	$r12,$r0,47(0x2f)
900000000001769c:	5c0025ac 	bne	$r13,$r12,36(0x24) # 90000000000176c0 <get_device+0x16c>
        if ((ret = vfs_get_bootfs(node_store)) != 0) {
90000000000176a0:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
90000000000176a4:	57ecdfff 	bl	-4900(0xfffecdc) # 9000000000016380 <vfs_get_bootfs>
90000000000176a8:	0015008c 	move	$r12,$r4
90000000000176ac:	29bf82cc 	st.w	$r12,$r22,-32(0xfe0)
90000000000176b0:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
90000000000176b4:	4000b580 	beqz	$r12,180(0xb4) # 9000000000017768 <get_device+0x214>
            return ret;
90000000000176b8:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
90000000000176bc:	5000dc00 	b	220(0xdc) # 9000000000017798 <get_device+0x244>
        }
    }
    else {
        assert(*path == ':');
90000000000176c0:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000176c4:	2800018c 	ld.b	$r12,$r12,0
90000000000176c8:	0015018d 	move	$r13,$r12
90000000000176cc:	0280e80c 	addi.w	$r12,$r0,58(0x3a)
90000000000176d0:	58001dac 	beq	$r13,$r12,28(0x1c) # 90000000000176ec <get_device+0x198>
90000000000176d4:	1c000166 	pcaddu12i	$r6,11(0xb)
90000000000176d8:	02c690c6 	addi.d	$r6,$r6,420(0x1a4)
90000000000176dc:	0280b805 	addi.w	$r5,$r0,46(0x2e)
90000000000176e0:	1c000164 	pcaddu12i	$r4,11(0xb)
90000000000176e4:	02c6e084 	addi.d	$r4,$r4,440(0x1b8)
90000000000176e8:	57559bff 	bl	-43624(0xfff5598) # 900000000000cc80 <__panic>
        struct inode *node;
        if ((ret = vfs_get_curdir(&node)) != 0) {
90000000000176ec:	02ff62cc 	addi.d	$r12,$r22,-40(0xfd8)
90000000000176f0:	00150184 	move	$r4,$r12
90000000000176f4:	54039800 	bl	920(0x398) # 9000000000017a8c <vfs_get_curdir>
90000000000176f8:	0015008c 	move	$r12,$r4
90000000000176fc:	29bf82cc 	st.w	$r12,$r22,-32(0xfe0)
9000000000017700:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
9000000000017704:	40000d80 	beqz	$r12,12(0xc) # 9000000000017710 <get_device+0x1bc>
            return ret;
9000000000017708:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
900000000001770c:	50008c00 	b	140(0x8c) # 9000000000017798 <get_device+0x244>
        }
        /* The current directory may not be a device, so it must have a fs. */
        assert(node->in_fs != NULL);
9000000000017710:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000017714:	28c1818c 	ld.d	$r12,$r12,96(0x60)
9000000000017718:	44001d80 	bnez	$r12,28(0x1c) # 9000000000017734 <get_device+0x1e0>
900000000001771c:	1c000166 	pcaddu12i	$r6,11(0xb)
9000000000017720:	02c650c6 	addi.d	$r6,$r6,404(0x194)
9000000000017724:	0280d005 	addi.w	$r5,$r0,52(0x34)
9000000000017728:	1c000164 	pcaddu12i	$r4,11(0xb)
900000000001772c:	02c5c084 	addi.d	$r4,$r4,368(0x170)
9000000000017730:	575553ff 	bl	-43696(0xfff5550) # 900000000000cc80 <__panic>
        *node_store = fsop_get_root(node->in_fs);
9000000000017734:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000017738:	28c1818c 	ld.d	$r12,$r12,96(0x60)
900000000001773c:	28c3018c 	ld.d	$r12,$r12,192(0xc0)
9000000000017740:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000017744:	28c181ad 	ld.d	$r13,$r13,96(0x60)
9000000000017748:	001501a4 	move	$r4,$r13
900000000001774c:	4c000181 	jirl	$r1,$r12,0
9000000000017750:	0015008d 	move	$r13,$r4
9000000000017754:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000017758:	29c0018d 	st.d	$r13,$r12,0
        vop_ref_dec(node);
900000000001775c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000017760:	00150184 	move	$r4,$r12
9000000000017764:	57e573ff 	bl	-6800(0xfffe570) # 9000000000015cd4 <inode_ref_dec>
    }

    /* ///... or :/... */
    while (*(++ path) == '/');
9000000000017768:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001776c:	02c0058c 	addi.d	$r12,$r12,1(0x1)
9000000000017770:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
9000000000017774:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000017778:	2800018c 	ld.b	$r12,$r12,0
900000000001777c:	0015018d 	move	$r13,$r12
9000000000017780:	0280bc0c 	addi.w	$r12,$r0,47(0x2f)
9000000000017784:	5bffe5ac 	beq	$r13,$r12,-28(0x3ffe4) # 9000000000017768 <get_device+0x214>
    *subpath = path;
9000000000017788:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000001778c:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
9000000000017790:	29c0018d 	st.d	$r13,$r12,0
    return 0;
9000000000017794:	0015000c 	move	$r12,$r0
}
9000000000017798:	00150184 	move	$r4,$r12
900000000001779c:	28c12061 	ld.d	$r1,$r3,72(0x48)
90000000000177a0:	28c10076 	ld.d	$r22,$r3,64(0x40)
90000000000177a4:	02c14063 	addi.d	$r3,$r3,80(0x50)
90000000000177a8:	4c000020 	jirl	$r0,$r1,0

90000000000177ac <vfs_lookup>:

int
vfs_lookup(char *path, struct inode **node_store) {
90000000000177ac:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
90000000000177b0:	29c0e061 	st.d	$r1,$r3,56(0x38)
90000000000177b4:	29c0c076 	st.d	$r22,$r3,48(0x30)
90000000000177b8:	02c10076 	addi.d	$r22,$r3,64(0x40)
90000000000177bc:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
90000000000177c0:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
    int ret;
    struct inode *node;
    if ((ret = get_device(path, &path, &node)) != 0) {
90000000000177c4:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000177c8:	02ff62ce 	addi.d	$r14,$r22,-40(0xfd8)
90000000000177cc:	02ff22cd 	addi.d	$r13,$r22,-56(0xfc8)
90000000000177d0:	001501c6 	move	$r6,$r14
90000000000177d4:	001501a5 	move	$r5,$r13
90000000000177d8:	00150184 	move	$r4,$r12
90000000000177dc:	57fd7bff 	bl	-648(0xffffd78) # 9000000000017554 <get_device>
90000000000177e0:	0015008c 	move	$r12,$r4
90000000000177e4:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
90000000000177e8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000177ec:	40000d80 	beqz	$r12,12(0xc) # 90000000000177f8 <vfs_lookup+0x4c>
        return ret;
90000000000177f0:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000177f4:	5000b400 	b	180(0xb4) # 90000000000178a8 <vfs_lookup+0xfc>
    }
    if (*path != '\0') {
90000000000177f8:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000177fc:	2800018c 	ld.b	$r12,$r12,0
9000000000017800:	40009980 	beqz	$r12,152(0x98) # 9000000000017898 <vfs_lookup+0xec>
        ret = vop_lookup(node, path, node_store);
9000000000017804:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000017808:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
900000000001780c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000017810:	40002180 	beqz	$r12,32(0x20) # 9000000000017830 <vfs_lookup+0x84>
9000000000017814:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000017818:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
900000000001781c:	40001580 	beqz	$r12,20(0x14) # 9000000000017830 <vfs_lookup+0x84>
9000000000017820:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000017824:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000017828:	28c1c18c 	ld.d	$r12,$r12,112(0x70)
900000000001782c:	44001d80 	bnez	$r12,28(0x1c) # 9000000000017848 <vfs_lookup+0x9c>
9000000000017830:	1c000166 	pcaddu12i	$r6,11(0xb)
9000000000017834:	02c2a0c6 	addi.d	$r6,$r6,168(0xa8)
9000000000017838:	02811c05 	addi.w	$r5,$r0,71(0x47)
900000000001783c:	1c000164 	pcaddu12i	$r4,11(0xb)
9000000000017840:	02c17084 	addi.d	$r4,$r4,92(0x5c)
9000000000017844:	57543fff 	bl	-43972(0xfff543c) # 900000000000cc80 <__panic>
9000000000017848:	1c000165 	pcaddu12i	$r5,11(0xb)
900000000001784c:	02c3e0a5 	addi.d	$r5,$r5,248(0xf8)
9000000000017850:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000017854:	57e7abff 	bl	-6232(0xfffe7a8) # 9000000000015ffc <inode_check>
9000000000017858:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001785c:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000017860:	28c1c18c 	ld.d	$r12,$r12,112(0x70)
9000000000017864:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000017868:	28ff22ce 	ld.d	$r14,$r22,-56(0xfc8)
900000000001786c:	28ff02c6 	ld.d	$r6,$r22,-64(0xfc0)
9000000000017870:	001501c5 	move	$r5,$r14
9000000000017874:	001501a4 	move	$r4,$r13
9000000000017878:	4c000181 	jirl	$r1,$r12,0
900000000001787c:	0015008c 	move	$r12,$r4
9000000000017880:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
        vop_ref_dec(node);
9000000000017884:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000017888:	00150184 	move	$r4,$r12
900000000001788c:	57e44bff 	bl	-7096(0xfffe448) # 9000000000015cd4 <inode_ref_dec>
        return ret;
9000000000017890:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000017894:	50001400 	b	20(0x14) # 90000000000178a8 <vfs_lookup+0xfc>
    }
    *node_store = node;
9000000000017898:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000001789c:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
90000000000178a0:	29c0018d 	st.d	$r13,$r12,0
    return 0;
90000000000178a4:	0015000c 	move	$r12,$r0
}
90000000000178a8:	00150184 	move	$r4,$r12
90000000000178ac:	28c0e061 	ld.d	$r1,$r3,56(0x38)
90000000000178b0:	28c0c076 	ld.d	$r22,$r3,48(0x30)
90000000000178b4:	02c10063 	addi.d	$r3,$r3,64(0x40)
90000000000178b8:	4c000020 	jirl	$r0,$r1,0

90000000000178bc <vfs_lookup_parent>:

int
vfs_lookup_parent(char *path, struct inode **node_store, char **endp){
90000000000178bc:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
90000000000178c0:	29c0e061 	st.d	$r1,$r3,56(0x38)
90000000000178c4:	29c0c076 	st.d	$r22,$r3,48(0x30)
90000000000178c8:	02c10076 	addi.d	$r22,$r3,64(0x40)
90000000000178cc:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
90000000000178d0:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
90000000000178d4:	29ff22c6 	st.d	$r6,$r22,-56(0xfc8)
	int ret;
	struct inode *node;
	if ((ret = get_device(path, &path, &node)) != 0) {
90000000000178d8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000178dc:	02ff82ce 	addi.d	$r14,$r22,-32(0xfe0)
90000000000178e0:	02ff62cd 	addi.d	$r13,$r22,-40(0xfd8)
90000000000178e4:	001501c6 	move	$r6,$r14
90000000000178e8:	001501a5 	move	$r5,$r13
90000000000178ec:	00150184 	move	$r4,$r12
90000000000178f0:	57fc67ff 	bl	-924(0xffffc64) # 9000000000017554 <get_device>
90000000000178f4:	0015008c 	move	$r12,$r4
90000000000178f8:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
90000000000178fc:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000017900:	40000d80 	beqz	$r12,12(0xc) # 900000000001790c <vfs_lookup_parent+0x50>
		return ret;
9000000000017904:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000017908:	50002000 	b	32(0x20) # 9000000000017928 <vfs_lookup_parent+0x6c>
	}
	*endp = path;
900000000001790c:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000017910:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000017914:	29c0018d 	st.d	$r13,$r12,0
	*node_store = node;
9000000000017918:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
900000000001791c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000017920:	29c0018d 	st.d	$r13,$r12,0
	return 0;
9000000000017924:	0015000c 	move	$r12,$r0
}
9000000000017928:	00150184 	move	$r4,$r12
900000000001792c:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000000017930:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000000017934:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000017938:	4c000020 	jirl	$r0,$r1,0

900000000001793c <fence_i>:
static void fence_i(void *va_start, int size) {
900000000001793c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000017940:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000017944:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000017948:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000001794c:	001500ac 	move	$r12,$r5
9000000000017950:	0040818c 	slli.w	$r12,$r12,0x0
9000000000017954:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
9000000000017958:	38720000 	dbar	0x0
    void *va_end = va_start + size;
900000000001795c:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000017960:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000017964:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000017968:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
900000000001796c:	50002000 	b	32(0x20) # 900000000001798c <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
9000000000017970:	06000189 	cacop	0x9,$r12,0
9000000000017974:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
9000000000017978:	06000188 	cacop	0x8,$r12,0
900000000001797c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
9000000000017980:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000017984:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000017988:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
900000000001798c:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000017990:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000017994:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 9000000000017970 <fence_i+0x34>
9000000000017998:	38728000 	ibar	0x0
}
900000000001799c:	03400000 	andi	$r0,$r0,0x0
90000000000179a0:	28c0a076 	ld.d	$r22,$r3,40(0x28)
90000000000179a4:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000000179a8:	4c000020 	jirl	$r0,$r1,0

90000000000179ac <get_cwd_nolock>:
#include <proc.h>
#include <error.h>
#include <assert.h>

static struct inode *
get_cwd_nolock(void) {
90000000000179ac:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
90000000000179b0:	29c02076 	st.d	$r22,$r3,8(0x8)
90000000000179b4:	02c04076 	addi.d	$r22,$r3,16(0x10)
    return current->fs_struct->pwd;
90000000000179b8:	1c00414c 	pcaddu12i	$r12,522(0x20a)
90000000000179bc:	28f7218c 	ld.d	$r12,$r12,-568(0xdc8)
90000000000179c0:	28c0018c 	ld.d	$r12,$r12,0
90000000000179c4:	28c4c18c 	ld.d	$r12,$r12,304(0x130)
90000000000179c8:	28c0018c 	ld.d	$r12,$r12,0
}
90000000000179cc:	00150184 	move	$r4,$r12
90000000000179d0:	28c02076 	ld.d	$r22,$r3,8(0x8)
90000000000179d4:	02c04063 	addi.d	$r3,$r3,16(0x10)
90000000000179d8:	4c000020 	jirl	$r0,$r1,0

90000000000179dc <set_cwd_nolock>:

static void
set_cwd_nolock(struct inode *pwd) {
90000000000179dc:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000000179e0:	29c06076 	st.d	$r22,$r3,24(0x18)
90000000000179e4:	02c08076 	addi.d	$r22,$r3,32(0x20)
90000000000179e8:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    current->fs_struct->pwd = pwd;
90000000000179ec:	1c00414c 	pcaddu12i	$r12,522(0x20a)
90000000000179f0:	28f6518c 	ld.d	$r12,$r12,-620(0xd94)
90000000000179f4:	28c0018c 	ld.d	$r12,$r12,0
90000000000179f8:	28c4c18c 	ld.d	$r12,$r12,304(0x130)
90000000000179fc:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000017a00:	29c0018d 	st.d	$r13,$r12,0
}
9000000000017a04:	03400000 	andi	$r0,$r0,0x0
9000000000017a08:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000017a0c:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000017a10:	4c000020 	jirl	$r0,$r1,0

9000000000017a14 <lock_cfs>:

static void
lock_cfs(void) {
9000000000017a14:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000000017a18:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000000017a1c:	29c00076 	st.d	$r22,$r3,0
9000000000017a20:	02c04076 	addi.d	$r22,$r3,16(0x10)
    lock_fs(current->fs_struct);
9000000000017a24:	1c00414c 	pcaddu12i	$r12,522(0x20a)
9000000000017a28:	28f5718c 	ld.d	$r12,$r12,-676(0xd5c)
9000000000017a2c:	28c0018c 	ld.d	$r12,$r12,0
9000000000017a30:	28c4c18c 	ld.d	$r12,$r12,304(0x130)
9000000000017a34:	00150184 	move	$r4,$r12
9000000000017a38:	57cca3ff 	bl	-13152(0xfffcca0) # 90000000000146d8 <lock_fs>
}
9000000000017a3c:	03400000 	andi	$r0,$r0,0x0
9000000000017a40:	28c02061 	ld.d	$r1,$r3,8(0x8)
9000000000017a44:	28c00076 	ld.d	$r22,$r3,0
9000000000017a48:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000000017a4c:	4c000020 	jirl	$r0,$r1,0

9000000000017a50 <unlock_cfs>:

static void
unlock_cfs(void) {
9000000000017a50:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000000017a54:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000000017a58:	29c00076 	st.d	$r22,$r3,0
9000000000017a5c:	02c04076 	addi.d	$r22,$r3,16(0x10)
    unlock_fs(current->fs_struct);
9000000000017a60:	1c00414c 	pcaddu12i	$r12,522(0x20a)
9000000000017a64:	28f4818c 	ld.d	$r12,$r12,-736(0xd20)
9000000000017a68:	28c0018c 	ld.d	$r12,$r12,0
9000000000017a6c:	28c4c18c 	ld.d	$r12,$r12,304(0x130)
9000000000017a70:	00150184 	move	$r4,$r12
9000000000017a74:	57cc9fff 	bl	-13156(0xfffcc9c) # 9000000000014710 <unlock_fs>
}
9000000000017a78:	03400000 	andi	$r0,$r0,0x0
9000000000017a7c:	28c02061 	ld.d	$r1,$r3,8(0x8)
9000000000017a80:	28c00076 	ld.d	$r22,$r3,0
9000000000017a84:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000000017a88:	4c000020 	jirl	$r0,$r1,0

9000000000017a8c <vfs_get_curdir>:

int
vfs_get_curdir(struct inode **dir_store) {
9000000000017a8c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000017a90:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000017a94:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000017a98:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000017a9c:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    struct inode *node;
    if ((node = get_cwd_nolock()) != NULL) {
9000000000017aa0:	57ff0fff 	bl	-244(0xfffff0c) # 90000000000179ac <get_cwd_nolock>
9000000000017aa4:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
9000000000017aa8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000017aac:	40002180 	beqz	$r12,32(0x20) # 9000000000017acc <vfs_get_curdir+0x40>
        vop_ref_inc(node);
9000000000017ab0:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000017ab4:	57e1abff 	bl	-7768(0xfffe1a8) # 9000000000015c5c <inode_ref_inc>
        *dir_store = node;
9000000000017ab8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000017abc:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000017ac0:	29c0018d 	st.d	$r13,$r12,0
        return 0;
9000000000017ac4:	0015000c 	move	$r12,$r0
9000000000017ac8:	50000800 	b	8(0x8) # 9000000000017ad0 <vfs_get_curdir+0x44>
    }
    return -E_NOENT;
9000000000017acc:	02bfc00c 	addi.w	$r12,$r0,-16(0xff0)
}
9000000000017ad0:	00150184 	move	$r4,$r12
9000000000017ad4:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000017ad8:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000017adc:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000017ae0:	4c000020 	jirl	$r0,$r1,0

9000000000017ae4 <vfs_set_curdir>:

int
vfs_set_curdir(struct inode *dir) {
9000000000017ae4:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000017ae8:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000017aec:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000017af0:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000017af4:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
    int ret = 0;
9000000000017af8:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
    lock_cfs();
9000000000017afc:	57ff1bff 	bl	-232(0xfffff18) # 9000000000017a14 <lock_cfs>
    struct inode *old_dir;
    if ((old_dir = get_cwd_nolock()) != dir) {
9000000000017b00:	57feafff 	bl	-340(0xffffeac) # 90000000000179ac <get_cwd_nolock>
9000000000017b04:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)
9000000000017b08:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000017b0c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000017b10:	5800d9ac 	beq	$r13,$r12,216(0xd8) # 9000000000017be8 <vfs_set_curdir+0x104>
        if (dir != NULL) {
9000000000017b14:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000017b18:	4000b580 	beqz	$r12,180(0xb4) # 9000000000017bcc <vfs_set_curdir+0xe8>
            uint32_t type;
            if ((ret = vop_gettype(dir, &type)) != 0) {
9000000000017b1c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000017b20:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
9000000000017b24:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000017b28:	40002180 	beqz	$r12,32(0x20) # 9000000000017b48 <vfs_set_curdir+0x64>
9000000000017b2c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000017b30:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000017b34:	40001580 	beqz	$r12,20(0x14) # 9000000000017b48 <vfs_set_curdir+0x64>
9000000000017b38:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000017b3c:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000017b40:	28c1418c 	ld.d	$r12,$r12,80(0x50)
9000000000017b44:	44001d80 	bnez	$r12,28(0x1c) # 9000000000017b60 <vfs_set_curdir+0x7c>
9000000000017b48:	1c000166 	pcaddu12i	$r6,11(0xb)
9000000000017b4c:	02f800c6 	addi.d	$r6,$r6,-512(0xe00)
9000000000017b50:	0280c805 	addi.w	$r5,$r0,50(0x32)
9000000000017b54:	1c000164 	pcaddu12i	$r4,11(0xb)
9000000000017b58:	02f97084 	addi.d	$r4,$r4,-420(0xe5c)
9000000000017b5c:	575127ff 	bl	-44764(0xfff5124) # 900000000000cc80 <__panic>
9000000000017b60:	1c000165 	pcaddu12i	$r5,11(0xb)
9000000000017b64:	02f9a0a5 	addi.d	$r5,$r5,-408(0xe68)
9000000000017b68:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000017b6c:	57e493ff 	bl	-7024(0xfffe490) # 9000000000015ffc <inode_check>
9000000000017b70:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000017b74:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000017b78:	28c1418c 	ld.d	$r12,$r12,80(0x50)
9000000000017b7c:	02ff52cd 	addi.d	$r13,$r22,-44(0xfd4)
9000000000017b80:	001501a5 	move	$r5,$r13
9000000000017b84:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000017b88:	4c000181 	jirl	$r1,$r12,0
9000000000017b8c:	0015008c 	move	$r12,$r4
9000000000017b90:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000017b94:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000017b98:	44005980 	bnez	$r12,88(0x58) # 9000000000017bf0 <vfs_set_curdir+0x10c>
                goto out;
            }
            if (!S_ISDIR(type)) {
9000000000017b9c:	28bf52cd 	ld.w	$r13,$r22,-44(0xfd4)
9000000000017ba0:	140000ec 	lu12i.w	$r12,7(0x7)
9000000000017ba4:	0014b1ac 	and	$r12,$r13,$r12
9000000000017ba8:	0015018d 	move	$r13,$r12
9000000000017bac:	1400004c 	lu12i.w	$r12,2(0x2)
9000000000017bb0:	580015ac 	beq	$r13,$r12,20(0x14) # 9000000000017bc4 <vfs_set_curdir+0xe0>
                ret = -E_NOTDIR;
9000000000017bb4:	02bfb80c 	addi.w	$r12,$r0,-18(0xfee)
9000000000017bb8:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
                goto out;
9000000000017bbc:	03400000 	andi	$r0,$r0,0x0
9000000000017bc0:	50003400 	b	52(0x34) # 9000000000017bf4 <vfs_set_curdir+0x110>
            }
            vop_ref_inc(dir);
9000000000017bc4:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000017bc8:	57e097ff 	bl	-8044(0xfffe094) # 9000000000015c5c <inode_ref_inc>
        }
        set_cwd_nolock(dir);
9000000000017bcc:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000017bd0:	57fe0fff 	bl	-500(0xffffe0c) # 90000000000179dc <set_cwd_nolock>
        if (old_dir != NULL) {
9000000000017bd4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000017bd8:	40001180 	beqz	$r12,16(0x10) # 9000000000017be8 <vfs_set_curdir+0x104>
            vop_ref_dec(old_dir);
9000000000017bdc:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000017be0:	57e0f7ff 	bl	-7948(0xfffe0f4) # 9000000000015cd4 <inode_ref_dec>
9000000000017be4:	50001000 	b	16(0x10) # 9000000000017bf4 <vfs_set_curdir+0x110>
        }
    }
out:
9000000000017be8:	03400000 	andi	$r0,$r0,0x0
9000000000017bec:	50000800 	b	8(0x8) # 9000000000017bf4 <vfs_set_curdir+0x110>
                goto out;
9000000000017bf0:	03400000 	andi	$r0,$r0,0x0
    unlock_cfs();
9000000000017bf4:	57fe5fff 	bl	-420(0xffffe5c) # 9000000000017a50 <unlock_cfs>
    return ret;
9000000000017bf8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
9000000000017bfc:	00150184 	move	$r4,$r12
9000000000017c00:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000000017c04:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000000017c08:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000017c0c:	4c000020 	jirl	$r0,$r1,0

9000000000017c10 <vfs_chdir>:

int
vfs_chdir(char *path) {
9000000000017c10:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000017c14:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000017c18:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000017c1c:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000017c20:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    int ret;
    struct inode *node;
    if ((ret = vfs_lookup(path, &node)) == 0) {
9000000000017c24:	02ff82cc 	addi.d	$r12,$r22,-32(0xfe0)
9000000000017c28:	00150185 	move	$r5,$r12
9000000000017c2c:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000017c30:	57fb7fff 	bl	-1156(0xffffb7c) # 90000000000177ac <vfs_lookup>
9000000000017c34:	0015008c 	move	$r12,$r4
9000000000017c38:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000017c3c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000017c40:	44002580 	bnez	$r12,36(0x24) # 9000000000017c64 <vfs_chdir+0x54>
		ret = vfs_set_curdir(node);
9000000000017c44:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000017c48:	00150184 	move	$r4,$r12
9000000000017c4c:	57fe9bff 	bl	-360(0xffffe98) # 9000000000017ae4 <vfs_set_curdir>
9000000000017c50:	0015008c 	move	$r12,$r4
9000000000017c54:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
        vop_ref_dec(node);
9000000000017c58:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000017c5c:	00150184 	move	$r4,$r12
9000000000017c60:	57e077ff 	bl	-8076(0xfffe074) # 9000000000015cd4 <inode_ref_dec>
    }
    return ret;
9000000000017c64:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
9000000000017c68:	00150184 	move	$r4,$r12
9000000000017c6c:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000017c70:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000017c74:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000017c78:	4c000020 	jirl	$r0,$r1,0

9000000000017c7c <vfs_getcwd>:

int
vfs_getcwd(struct iobuf *iob) {
9000000000017c7c:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
9000000000017c80:	29c12061 	st.d	$r1,$r3,72(0x48)
9000000000017c84:	29c10076 	st.d	$r22,$r3,64(0x40)
9000000000017c88:	02c14076 	addi.d	$r22,$r3,80(0x50)
9000000000017c8c:	29fee2c4 	st.d	$r4,$r22,-72(0xfb8)
    int ret;
    struct inode *node;
    if ((ret = vfs_get_curdir(&node)) != 0) {
9000000000017c90:	02ff42cc 	addi.d	$r12,$r22,-48(0xfd0)
9000000000017c94:	00150184 	move	$r4,$r12
9000000000017c98:	57fdf7ff 	bl	-524(0xffffdf4) # 9000000000017a8c <vfs_get_curdir>
9000000000017c9c:	0015008c 	move	$r12,$r4
9000000000017ca0:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000017ca4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000017ca8:	40000d80 	beqz	$r12,12(0xc) # 9000000000017cb4 <vfs_getcwd+0x38>
        return ret;
9000000000017cac:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000017cb0:	50013c00 	b	316(0x13c) # 9000000000017dec <vfs_getcwd+0x170>
    }
    assert(node->in_fs != NULL);
9000000000017cb4:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000017cb8:	28c1818c 	ld.d	$r12,$r12,96(0x60)
9000000000017cbc:	44001d80 	bnez	$r12,28(0x1c) # 9000000000017cd8 <vfs_getcwd+0x5c>
9000000000017cc0:	1c000166 	pcaddu12i	$r6,11(0xb)
9000000000017cc4:	02f440c6 	addi.d	$r6,$r6,-752(0xd10)
9000000000017cc8:	02815c05 	addi.w	$r5,$r0,87(0x57)
9000000000017ccc:	1c000164 	pcaddu12i	$r4,11(0xb)
9000000000017cd0:	02f39084 	addi.d	$r4,$r4,-796(0xce4)
9000000000017cd4:	574fafff 	bl	-45140(0xfff4fac) # 900000000000cc80 <__panic>

    const char *devname = vfs_get_devname(node->in_fs);
9000000000017cd8:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000017cdc:	28c1818c 	ld.d	$r12,$r12,96(0x60)
9000000000017ce0:	00150184 	move	$r4,$r12
9000000000017ce4:	57ea87ff 	bl	-5500(0xfffea84) # 9000000000016768 <vfs_get_devname>
9000000000017ce8:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)
    if ((ret = iobuf_move(iob, (char *)devname, strlen(devname), 1, NULL)) != 0) {
9000000000017cec:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000017cf0:	56c4bfff 	bl	-80708(0xffec4bc) # 90000000000041ac <strlen>
9000000000017cf4:	0015008c 	move	$r12,$r4
9000000000017cf8:	00150008 	move	$r8,$r0
9000000000017cfc:	02800407 	addi.w	$r7,$r0,1(0x1)
9000000000017d00:	00150186 	move	$r6,$r12
9000000000017d04:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
9000000000017d08:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
9000000000017d0c:	57ce2bff 	bl	-12760(0xfffce28) # 9000000000014b34 <iobuf_move>
9000000000017d10:	0015008c 	move	$r12,$r4
9000000000017d14:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000017d18:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000017d1c:	4400b580 	bnez	$r12,180(0xb4) # 9000000000017dd0 <vfs_getcwd+0x154>
        goto out;
    }
    char colon = ':';
9000000000017d20:	0280e80c 	addi.w	$r12,$r0,58(0x3a)
9000000000017d24:	293f3ecc 	st.b	$r12,$r22,-49(0xfcf)
    if ((ret = iobuf_move(iob, &colon, sizeof(colon), 1, NULL)) != 0) {
9000000000017d28:	02ff3ecc 	addi.d	$r12,$r22,-49(0xfcf)
9000000000017d2c:	00150008 	move	$r8,$r0
9000000000017d30:	02800407 	addi.w	$r7,$r0,1(0x1)
9000000000017d34:	02800406 	addi.w	$r6,$r0,1(0x1)
9000000000017d38:	00150185 	move	$r5,$r12
9000000000017d3c:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
9000000000017d40:	57cdf7ff 	bl	-12812(0xfffcdf4) # 9000000000014b34 <iobuf_move>
9000000000017d44:	0015008c 	move	$r12,$r4
9000000000017d48:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000017d4c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000017d50:	44008980 	bnez	$r12,136(0x88) # 9000000000017dd8 <vfs_getcwd+0x15c>
        goto out;
    }
    ret = vop_namefile(node, iob);
9000000000017d54:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000017d58:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
9000000000017d5c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000017d60:	40002180 	beqz	$r12,32(0x20) # 9000000000017d80 <vfs_getcwd+0x104>
9000000000017d64:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000017d68:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000017d6c:	40001580 	beqz	$r12,20(0x14) # 9000000000017d80 <vfs_getcwd+0x104>
9000000000017d70:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000017d74:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000017d78:	28c0e18c 	ld.d	$r12,$r12,56(0x38)
9000000000017d7c:	44001d80 	bnez	$r12,28(0x1c) # 9000000000017d98 <vfs_getcwd+0x11c>
9000000000017d80:	1c000166 	pcaddu12i	$r6,11(0xb)
9000000000017d84:	02f1e0c6 	addi.d	$r6,$r6,-904(0xc78)
9000000000017d88:	02818405 	addi.w	$r5,$r0,97(0x61)
9000000000017d8c:	1c000164 	pcaddu12i	$r4,11(0xb)
9000000000017d90:	02f09084 	addi.d	$r4,$r4,-988(0xc24)
9000000000017d94:	574eefff 	bl	-45332(0xfff4eec) # 900000000000cc80 <__panic>
9000000000017d98:	1c000165 	pcaddu12i	$r5,11(0xb)
9000000000017d9c:	02f320a5 	addi.d	$r5,$r5,-824(0xcc8)
9000000000017da0:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000017da4:	57e25bff 	bl	-7592(0xfffe258) # 9000000000015ffc <inode_check>
9000000000017da8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000017dac:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000017db0:	28c0e18c 	ld.d	$r12,$r12,56(0x38)
9000000000017db4:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000017db8:	28fee2c5 	ld.d	$r5,$r22,-72(0xfb8)
9000000000017dbc:	001501a4 	move	$r4,$r13
9000000000017dc0:	4c000181 	jirl	$r1,$r12,0
9000000000017dc4:	0015008c 	move	$r12,$r4
9000000000017dc8:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000017dcc:	50001000 	b	16(0x10) # 9000000000017ddc <vfs_getcwd+0x160>
        goto out;
9000000000017dd0:	03400000 	andi	$r0,$r0,0x0
9000000000017dd4:	50000800 	b	8(0x8) # 9000000000017ddc <vfs_getcwd+0x160>
        goto out;
9000000000017dd8:	03400000 	andi	$r0,$r0,0x0

out:
    vop_ref_dec(node);
9000000000017ddc:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000017de0:	00150184 	move	$r4,$r12
9000000000017de4:	57def3ff 	bl	-8464(0xfffdef0) # 9000000000015cd4 <inode_ref_dec>
    return ret;
9000000000017de8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
9000000000017dec:	00150184 	move	$r4,$r12
9000000000017df0:	28c12061 	ld.d	$r1,$r3,72(0x48)
9000000000017df4:	28c10076 	ld.d	$r22,$r3,64(0x40)
9000000000017df8:	02c14063 	addi.d	$r3,$r3,80(0x50)
9000000000017dfc:	4c000020 	jirl	$r0,$r1,0

9000000000017e00 <bitmap_create>:
    uint32_t nwords;
    WORD_TYPE *map;
};

struct bitmap *
bitmap_create(uint32_t nbits) {
9000000000017e00:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
9000000000017e04:	29c12061 	st.d	$r1,$r3,72(0x48)
9000000000017e08:	29c10076 	st.d	$r22,$r3,64(0x40)
9000000000017e0c:	02c14076 	addi.d	$r22,$r3,80(0x50)
9000000000017e10:	0015008c 	move	$r12,$r4
9000000000017e14:	0040818c 	slli.w	$r12,$r12,0x0
9000000000017e18:	29bef2cc 	st.w	$r12,$r22,-68(0xfbc)
    static_assert(WORD_BITS != 0);
    assert(nbits != 0 && nbits + WORD_BITS > nbits);
9000000000017e1c:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
9000000000017e20:	44001d80 	bnez	$r12,28(0x1c) # 9000000000017e3c <bitmap_create+0x3c>
9000000000017e24:	1c000166 	pcaddu12i	$r6,11(0xb)
9000000000017e28:	02f130c6 	addi.d	$r6,$r6,-948(0xc4c)
9000000000017e2c:	02805405 	addi.w	$r5,$r0,21(0x15)
9000000000017e30:	1c000164 	pcaddu12i	$r4,11(0xb)
9000000000017e34:	02f20084 	addi.d	$r4,$r4,-896(0xc80)
9000000000017e38:	574e4bff 	bl	-45496(0xfff4e48) # 900000000000cc80 <__panic>

    struct bitmap *bitmap;
    if ((bitmap = kmalloc(sizeof(struct bitmap))) == NULL) {
9000000000017e3c:	02804004 	addi.w	$r4,$r0,16(0x10)
9000000000017e40:	56f7fbff 	bl	-67592(0xffef7f8) # 9000000000007638 <kmalloc>
9000000000017e44:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)
9000000000017e48:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000017e4c:	44000d80 	bnez	$r12,12(0xc) # 9000000000017e58 <bitmap_create+0x58>
        return NULL;
9000000000017e50:	0015000c 	move	$r12,$r0
9000000000017e54:	50017c00 	b	380(0x17c) # 9000000000017fd0 <bitmap_create+0x1d0>
    }

    uint32_t nwords = ROUNDUP_DIV_2N(nbits, WORD_BITS_SHIFT);
9000000000017e58:	0280800c 	addi.w	$r12,$r0,32(0x20)
9000000000017e5c:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
9000000000017e60:	28bef2cd 	ld.w	$r13,$r22,-68(0xfbc)
9000000000017e64:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000017e68:	001031ac 	add.w	$r12,$r13,$r12
9000000000017e6c:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
9000000000017e70:	0044958c 	srli.w	$r12,$r12,0x5
9000000000017e74:	29bf62cc 	st.w	$r12,$r22,-40(0xfd8)
    WORD_TYPE *map;
    if ((map = kmalloc(sizeof(WORD_TYPE) * nwords)) == NULL) {
9000000000017e78:	2abf62cc 	ld.wu	$r12,$r22,-40(0xfd8)
9000000000017e7c:	0041098c 	slli.d	$r12,$r12,0x2
9000000000017e80:	00150184 	move	$r4,$r12
9000000000017e84:	56f7b7ff 	bl	-67660(0xffef7b4) # 9000000000007638 <kmalloc>
9000000000017e88:	29ff42c4 	st.d	$r4,$r22,-48(0xfd0)
9000000000017e8c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000017e90:	44001580 	bnez	$r12,20(0x14) # 9000000000017ea4 <bitmap_create+0xa4>
        kfree(bitmap);
9000000000017e94:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000017e98:	56fc7fff 	bl	-66436(0xffefc7c) # 9000000000007b14 <kfree>
        return NULL;
9000000000017e9c:	0015000c 	move	$r12,$r0
9000000000017ea0:	50013000 	b	304(0x130) # 9000000000017fd0 <bitmap_create+0x1d0>
    }

    bitmap->nbits = nbits, bitmap->nwords = nwords;
9000000000017ea4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000017ea8:	28bef2cd 	ld.w	$r13,$r22,-68(0xfbc)
9000000000017eac:	2980018d 	st.w	$r13,$r12,0
9000000000017eb0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000017eb4:	28bf62cd 	ld.w	$r13,$r22,-40(0xfd8)
9000000000017eb8:	2980118d 	st.w	$r13,$r12,4(0x4)
    bitmap->map = memset(map, 0xFF, sizeof(WORD_TYPE) * nwords);
9000000000017ebc:	2abf62cc 	ld.wu	$r12,$r22,-40(0xfd8)
9000000000017ec0:	0041098c 	slli.d	$r12,$r12,0x2
9000000000017ec4:	00150186 	move	$r6,$r12
9000000000017ec8:	02bffc05 	addi.w	$r5,$r0,-1(0xfff)
9000000000017ecc:	28ff42c4 	ld.d	$r4,$r22,-48(0xfd0)
9000000000017ed0:	56c653ff 	bl	-80304(0xffec650) # 9000000000004520 <memset>
9000000000017ed4:	0015008d 	move	$r13,$r4
9000000000017ed8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000017edc:	29c0218d 	st.d	$r13,$r12,8(0x8)

    /* mark any leftover bits at the end in use(0) */
    if (nbits != nwords * WORD_BITS) {
9000000000017ee0:	2abef2cd 	ld.wu	$r13,$r22,-68(0xfbc)
9000000000017ee4:	2abf62cc 	ld.wu	$r12,$r22,-40(0xfd8)
9000000000017ee8:	0041158c 	slli.d	$r12,$r12,0x5
9000000000017eec:	5800e1ac 	beq	$r13,$r12,224(0xe0) # 9000000000017fcc <bitmap_create+0x1cc>
        uint32_t ix = nwords - 1, overbits = nbits - ix * WORD_BITS;
9000000000017ef0:	28bf62cc 	ld.w	$r12,$r22,-40(0xfd8)
9000000000017ef4:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
9000000000017ef8:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
9000000000017efc:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
9000000000017f00:	0040958c 	slli.w	$r12,$r12,0x5
9000000000017f04:	28bef2cd 	ld.w	$r13,$r22,-68(0xfbc)
9000000000017f08:	001131ac 	sub.w	$r12,$r13,$r12
9000000000017f0c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)

        assert(nbits / WORD_BITS == ix);
9000000000017f10:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
9000000000017f14:	0044958c 	srli.w	$r12,$r12,0x5
9000000000017f18:	0015018d 	move	$r13,$r12
9000000000017f1c:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
9000000000017f20:	58001d8d 	beq	$r12,$r13,28(0x1c) # 9000000000017f3c <bitmap_create+0x13c>
9000000000017f24:	1c000166 	pcaddu12i	$r6,11(0xb)
9000000000017f28:	02ee90c6 	addi.d	$r6,$r6,-1116(0xba4)
9000000000017f2c:	0280a805 	addi.w	$r5,$r0,42(0x2a)
9000000000017f30:	1c000164 	pcaddu12i	$r4,11(0xb)
9000000000017f34:	02ee0084 	addi.d	$r4,$r4,-1152(0xb80)
9000000000017f38:	574d4bff 	bl	-45752(0xfff4d48) # 900000000000cc80 <__panic>
        assert(overbits > 0 && overbits < WORD_BITS);
9000000000017f3c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000017f40:	40001580 	beqz	$r12,20(0x14) # 9000000000017f54 <bitmap_create+0x154>
9000000000017f44:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000017f48:	0015018d 	move	$r13,$r12
9000000000017f4c:	02807c0c 	addi.w	$r12,$r0,31(0x1f)
9000000000017f50:	6c006d8d 	bgeu	$r12,$r13,108(0x6c) # 9000000000017fbc <bitmap_create+0x1bc>
9000000000017f54:	1c000166 	pcaddu12i	$r6,11(0xb)
9000000000017f58:	02ee90c6 	addi.d	$r6,$r6,-1116(0xba4)
9000000000017f5c:	0280ac05 	addi.w	$r5,$r0,43(0x2b)
9000000000017f60:	1c000164 	pcaddu12i	$r4,11(0xb)
9000000000017f64:	02ed4084 	addi.d	$r4,$r4,-1200(0xb50)
9000000000017f68:	574d1bff 	bl	-45800(0xfff4d18) # 900000000000cc80 <__panic>

        for (; overbits < WORD_BITS; overbits ++) {
            bitmap->map[ix] ^= (1 << overbits);
9000000000017f6c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000017f70:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000017f74:	2abf32cc 	ld.wu	$r12,$r22,-52(0xfcc)
9000000000017f78:	0041098c 	slli.d	$r12,$r12,0x2
9000000000017f7c:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000017f80:	2880018e 	ld.w	$r14,$r12,0
9000000000017f84:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000017f88:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000017f8c:	001731ac 	sll.w	$r12,$r13,$r12
9000000000017f90:	0015018d 	move	$r13,$r12
9000000000017f94:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000017f98:	28c0218f 	ld.d	$r15,$r12,8(0x8)
9000000000017f9c:	2abf32cc 	ld.wu	$r12,$r22,-52(0xfcc)
9000000000017fa0:	0041098c 	slli.d	$r12,$r12,0x2
9000000000017fa4:	0010b1ec 	add.d	$r12,$r15,$r12
9000000000017fa8:	0015b5cd 	xor	$r13,$r14,$r13
9000000000017fac:	2980018d 	st.w	$r13,$r12,0
        for (; overbits < WORD_BITS; overbits ++) {
9000000000017fb0:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000017fb4:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000017fb8:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000017fbc:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000017fc0:	0015018d 	move	$r13,$r12
9000000000017fc4:	02807c0c 	addi.w	$r12,$r0,31(0x1f)
9000000000017fc8:	6fffa58d 	bgeu	$r12,$r13,-92(0x3ffa4) # 9000000000017f6c <bitmap_create+0x16c>
        }
    }
    return bitmap;
9000000000017fcc:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
}
9000000000017fd0:	00150184 	move	$r4,$r12
9000000000017fd4:	28c12061 	ld.d	$r1,$r3,72(0x48)
9000000000017fd8:	28c10076 	ld.d	$r22,$r3,64(0x40)
9000000000017fdc:	02c14063 	addi.d	$r3,$r3,80(0x50)
9000000000017fe0:	4c000020 	jirl	$r0,$r1,0

9000000000017fe4 <bitmap_alloc>:

int
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
9000000000017fe4:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000017fe8:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000017fec:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000017ff0:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000017ff4:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
9000000000017ff8:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
    WORD_TYPE *map = bitmap->map;
9000000000017ffc:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000018000:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000018004:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    uint32_t ix, offset, nwords = bitmap->nwords;
9000000000018008:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001800c:	2880118c 	ld.w	$r12,$r12,4(0x4)
9000000000018010:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
    for (ix = 0; ix < nwords; ix ++) {
9000000000018014:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
9000000000018018:	5000e800 	b	232(0xe8) # 9000000000018100 <bitmap_alloc+0x11c>
        if (map[ix] != 0) {
900000000001801c:	2abfb2cc 	ld.wu	$r12,$r22,-20(0xfec)
9000000000018020:	0041098c 	slli.d	$r12,$r12,0x2
9000000000018024:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000018028:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001802c:	2880018c 	ld.w	$r12,$r12,0
9000000000018030:	4000c580 	beqz	$r12,196(0xc4) # 90000000000180f4 <bitmap_alloc+0x110>
            for (offset = 0; offset < WORD_BITS; offset ++) {
9000000000018034:	29bfa2c0 	st.w	$r0,$r22,-24(0xfe8)
9000000000018038:	50009400 	b	148(0x94) # 90000000000180cc <bitmap_alloc+0xe8>
                WORD_TYPE mask = (1 << offset);
900000000001803c:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000018040:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
9000000000018044:	001731ac 	sll.w	$r12,$r13,$r12
9000000000018048:	29bf62cc 	st.w	$r12,$r22,-40(0xfd8)
                if (map[ix] & mask) {
900000000001804c:	2abfb2cc 	ld.wu	$r12,$r22,-20(0xfec)
9000000000018050:	0041098c 	slli.d	$r12,$r12,0x2
9000000000018054:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000018058:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001805c:	2880018c 	ld.w	$r12,$r12,0
9000000000018060:	28bf62cd 	ld.w	$r13,$r22,-40(0xfd8)
9000000000018064:	0014b1ac 	and	$r12,$r13,$r12
9000000000018068:	40005980 	beqz	$r12,88(0x58) # 90000000000180c0 <bitmap_alloc+0xdc>
                    map[ix] ^= mask;
900000000001806c:	2abfb2cc 	ld.wu	$r12,$r22,-20(0xfec)
9000000000018070:	0041098c 	slli.d	$r12,$r12,0x2
9000000000018074:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000018078:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001807c:	2880018d 	ld.w	$r13,$r12,0
9000000000018080:	2abfb2cc 	ld.wu	$r12,$r22,-20(0xfec)
9000000000018084:	0041098c 	slli.d	$r12,$r12,0x2
9000000000018088:	28ff82ce 	ld.d	$r14,$r22,-32(0xfe0)
900000000001808c:	0010b1cc 	add.d	$r12,$r14,$r12
9000000000018090:	28bf62ce 	ld.w	$r14,$r22,-40(0xfd8)
9000000000018094:	0015b5cd 	xor	$r13,$r14,$r13
9000000000018098:	2980018d 	st.w	$r13,$r12,0
                    *index_store = ix * WORD_BITS + offset;
900000000001809c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000180a0:	0040958c 	slli.w	$r12,$r12,0x5
90000000000180a4:	28bfa2cd 	ld.w	$r13,$r22,-24(0xfe8)
90000000000180a8:	001031ac 	add.w	$r12,$r13,$r12
90000000000180ac:	0015018d 	move	$r13,$r12
90000000000180b0:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
90000000000180b4:	2980018d 	st.w	$r13,$r12,0
                    return 0;
90000000000180b8:	0015000c 	move	$r12,$r0
90000000000180bc:	50005400 	b	84(0x54) # 9000000000018110 <bitmap_alloc+0x12c>
            for (offset = 0; offset < WORD_BITS; offset ++) {
90000000000180c0:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
90000000000180c4:	0280058c 	addi.w	$r12,$r12,1(0x1)
90000000000180c8:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
90000000000180cc:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
90000000000180d0:	0015018d 	move	$r13,$r12
90000000000180d4:	02807c0c 	addi.w	$r12,$r0,31(0x1f)
90000000000180d8:	6fff658d 	bgeu	$r12,$r13,-156(0x3ff64) # 900000000001803c <bitmap_alloc+0x58>
                }
            }
            assert(0);
90000000000180dc:	1c000166 	pcaddu12i	$r6,11(0xb)
90000000000180e0:	02e950c6 	addi.d	$r6,$r6,-1452(0xa54)
90000000000180e4:	02810805 	addi.w	$r5,$r0,66(0x42)
90000000000180e8:	1c000164 	pcaddu12i	$r4,11(0xb)
90000000000180ec:	02e72084 	addi.d	$r4,$r4,-1592(0x9c8)
90000000000180f0:	574b93ff 	bl	-46192(0xfff4b90) # 900000000000cc80 <__panic>
    for (ix = 0; ix < nwords; ix ++) {
90000000000180f4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000180f8:	0280058c 	addi.w	$r12,$r12,1(0x1)
90000000000180fc:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000018100:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
9000000000018104:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000018108:	6bff15ac 	bltu	$r13,$r12,-236(0x3ff14) # 900000000001801c <bitmap_alloc+0x38>
        }
    }
    return -E_NO_MEM;
900000000001810c:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
}
9000000000018110:	00150184 	move	$r4,$r12
9000000000018114:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000000018118:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000001811c:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000018120:	4c000020 	jirl	$r0,$r1,0

9000000000018124 <bitmap_translate>:

static void
bitmap_translate(struct bitmap *bitmap, uint32_t index, WORD_TYPE **word, WORD_TYPE *mask) {
9000000000018124:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000018128:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000001812c:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000018130:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000018134:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000018138:	001500ac 	move	$r12,$r5
900000000001813c:	29ff22c6 	st.d	$r6,$r22,-56(0xfc8)
9000000000018140:	29ff02c7 	st.d	$r7,$r22,-64(0xfc0)
9000000000018144:	0040818c 	slli.w	$r12,$r12,0x0
9000000000018148:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
    assert(index < bitmap->nbits);
900000000001814c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000018150:	2880018d 	ld.w	$r13,$r12,0
9000000000018154:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000018158:	68001d8d 	bltu	$r12,$r13,28(0x1c) # 9000000000018174 <bitmap_translate+0x50>
900000000001815c:	1c000166 	pcaddu12i	$r6,11(0xb)
9000000000018160:	02e7b0c6 	addi.d	$r6,$r6,-1556(0x9ec)
9000000000018164:	02812805 	addi.w	$r5,$r0,74(0x4a)
9000000000018168:	1c000164 	pcaddu12i	$r4,11(0xb)
900000000001816c:	02e52084 	addi.d	$r4,$r4,-1720(0x948)
9000000000018170:	574b13ff 	bl	-46320(0xfff4b10) # 900000000000cc80 <__panic>
    uint32_t ix = index / WORD_BITS, offset = index % WORD_BITS;
9000000000018174:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000018178:	0044958c 	srli.w	$r12,$r12,0x5
900000000001817c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000018180:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000018184:	03407d8c 	andi	$r12,$r12,0x1f
9000000000018188:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
    *word = bitmap->map + ix;
900000000001818c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000018190:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000018194:	2abfb2cc 	ld.wu	$r12,$r22,-20(0xfec)
9000000000018198:	0041098c 	slli.d	$r12,$r12,0x2
900000000001819c:	0010b1ad 	add.d	$r13,$r13,$r12
90000000000181a0:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000181a4:	29c0018d 	st.d	$r13,$r12,0
    *mask = (1 << offset);
90000000000181a8:	0280040d 	addi.w	$r13,$r0,1(0x1)
90000000000181ac:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
90000000000181b0:	001731ac 	sll.w	$r12,$r13,$r12
90000000000181b4:	0015018d 	move	$r13,$r12
90000000000181b8:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
90000000000181bc:	2980018d 	st.w	$r13,$r12,0
}
90000000000181c0:	03400000 	andi	$r0,$r0,0x0
90000000000181c4:	28c0e061 	ld.d	$r1,$r3,56(0x38)
90000000000181c8:	28c0c076 	ld.d	$r22,$r3,48(0x30)
90000000000181cc:	02c10063 	addi.d	$r3,$r3,64(0x40)
90000000000181d0:	4c000020 	jirl	$r0,$r1,0

90000000000181d4 <bitmap_test>:

bool
bitmap_test(struct bitmap *bitmap, uint32_t index) {
90000000000181d4:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000000181d8:	29c0a061 	st.d	$r1,$r3,40(0x28)
90000000000181dc:	29c08076 	st.d	$r22,$r3,32(0x20)
90000000000181e0:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000000181e4:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
90000000000181e8:	001500ac 	move	$r12,$r5
90000000000181ec:	0040818c 	slli.w	$r12,$r12,0x0
90000000000181f0:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
    WORD_TYPE *word, mask;
    bitmap_translate(bitmap, index, &word, &mask);
90000000000181f4:	02ff92ce 	addi.d	$r14,$r22,-28(0xfe4)
90000000000181f8:	02ffa2cd 	addi.d	$r13,$r22,-24(0xfe8)
90000000000181fc:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000018200:	001501c7 	move	$r7,$r14
9000000000018204:	001501a6 	move	$r6,$r13
9000000000018208:	00150185 	move	$r5,$r12
900000000001820c:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000018210:	57ff17ff 	bl	-236(0xfffff14) # 9000000000018124 <bitmap_translate>
    return (*word & mask);
9000000000018214:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000018218:	2880018d 	ld.w	$r13,$r12,0
900000000001821c:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000018220:	0014b1ac 	and	$r12,$r13,$r12
}
9000000000018224:	00150184 	move	$r4,$r12
9000000000018228:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000001822c:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000018230:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000018234:	4c000020 	jirl	$r0,$r1,0

9000000000018238 <bitmap_free>:

void
bitmap_free(struct bitmap *bitmap, uint32_t index) {
9000000000018238:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001823c:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000018240:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000000018244:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000018248:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000001824c:	001500ac 	move	$r12,$r5
9000000000018250:	0040818c 	slli.w	$r12,$r12,0x0
9000000000018254:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
    WORD_TYPE *word, mask;
    bitmap_translate(bitmap, index, &word, &mask);
9000000000018258:	02ff92ce 	addi.d	$r14,$r22,-28(0xfe4)
900000000001825c:	02ffa2cd 	addi.d	$r13,$r22,-24(0xfe8)
9000000000018260:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000018264:	001501c7 	move	$r7,$r14
9000000000018268:	001501a6 	move	$r6,$r13
900000000001826c:	00150185 	move	$r5,$r12
9000000000018270:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000018274:	57feb3ff 	bl	-336(0xffffeb0) # 9000000000018124 <bitmap_translate>
    assert(!(*word & mask));
9000000000018278:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001827c:	2880018d 	ld.w	$r13,$r12,0
9000000000018280:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000018284:	0014b1ac 	and	$r12,$r13,$r12
9000000000018288:	40001d80 	beqz	$r12,28(0x1c) # 90000000000182a4 <bitmap_free+0x6c>
900000000001828c:	1c000166 	pcaddu12i	$r6,11(0xb)
9000000000018290:	02e390c6 	addi.d	$r6,$r6,-1820(0x8e4)
9000000000018294:	02816c05 	addi.w	$r5,$r0,91(0x5b)
9000000000018298:	1c000164 	pcaddu12i	$r4,11(0xb)
900000000001829c:	02e06084 	addi.d	$r4,$r4,-2024(0x818)
90000000000182a0:	5749e3ff 	bl	-46624(0xfff49e0) # 900000000000cc80 <__panic>
    *word |= mask;
90000000000182a4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000182a8:	2880018e 	ld.w	$r14,$r12,0
90000000000182ac:	28bf92cd 	ld.w	$r13,$r22,-28(0xfe4)
90000000000182b0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000182b4:	001535cd 	or	$r13,$r14,$r13
90000000000182b8:	2980018d 	st.w	$r13,$r12,0
}
90000000000182bc:	03400000 	andi	$r0,$r0,0x0
90000000000182c0:	28c0a061 	ld.d	$r1,$r3,40(0x28)
90000000000182c4:	28c08076 	ld.d	$r22,$r3,32(0x20)
90000000000182c8:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000000182cc:	4c000020 	jirl	$r0,$r1,0

90000000000182d0 <bitmap_destroy>:

void
bitmap_destroy(struct bitmap *bitmap) {
90000000000182d0:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000000182d4:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000000182d8:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000000182dc:	02c08076 	addi.d	$r22,$r3,32(0x20)
90000000000182e0:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    kfree(bitmap->map);
90000000000182e4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000182e8:	28c0218c 	ld.d	$r12,$r12,8(0x8)
90000000000182ec:	00150184 	move	$r4,$r12
90000000000182f0:	56f827ff 	bl	-67548(0xffef824) # 9000000000007b14 <kfree>
    kfree(bitmap);
90000000000182f4:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
90000000000182f8:	56f81fff 	bl	-67556(0xffef81c) # 9000000000007b14 <kfree>
}
90000000000182fc:	03400000 	andi	$r0,$r0,0x0
9000000000018300:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000018304:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000018308:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000001830c:	4c000020 	jirl	$r0,$r1,0

9000000000018310 <bitmap_getdata>:

void *
bitmap_getdata(struct bitmap *bitmap, size_t *len_store) {
9000000000018310:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000018314:	29c06076 	st.d	$r22,$r3,24(0x18)
9000000000018318:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000001831c:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
9000000000018320:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
    if (len_store != NULL) {
9000000000018324:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000018328:	40001d80 	beqz	$r12,28(0x1c) # 9000000000018344 <bitmap_getdata+0x34>
        *len_store = sizeof(WORD_TYPE) * bitmap->nwords;
900000000001832c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000018330:	2880118c 	ld.w	$r12,$r12,4(0x4)
9000000000018334:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
9000000000018338:	0041098d 	slli.d	$r13,$r12,0x2
900000000001833c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000018340:	29c0018d 	st.d	$r13,$r12,0
    }
    return bitmap->map;
9000000000018344:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000018348:	28c0218c 	ld.d	$r12,$r12,8(0x8)
}
900000000001834c:	00150184 	move	$r4,$r12
9000000000018350:	28c06076 	ld.d	$r22,$r3,24(0x18)
9000000000018354:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000018358:	4c000020 	jirl	$r0,$r1,0

900000000001835c <fence_i>:
static void fence_i(void *va_start, int size) {
900000000001835c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000018360:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000018364:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000018368:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000001836c:	001500ac 	move	$r12,$r5
9000000000018370:	0040818c 	slli.w	$r12,$r12,0x0
9000000000018374:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
9000000000018378:	38720000 	dbar	0x0
    void *va_end = va_start + size;
900000000001837c:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000018380:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000018384:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000018388:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
900000000001838c:	50002000 	b	32(0x20) # 90000000000183ac <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
9000000000018390:	06000189 	cacop	0x9,$r12,0
9000000000018394:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
9000000000018398:	06000188 	cacop	0x8,$r12,0
900000000001839c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
90000000000183a0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000183a4:	02c0418c 	addi.d	$r12,$r12,16(0x10)
90000000000183a8:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
90000000000183ac:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
90000000000183b0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000183b4:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 9000000000018390 <fence_i+0x34>
90000000000183b8:	38728000 	ibar	0x0
}
90000000000183bc:	03400000 	andi	$r0,$r0,0x0
90000000000183c0:	28c0a076 	ld.d	$r22,$r3,40(0x28)
90000000000183c4:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000000183c8:	4c000020 	jirl	$r0,$r1,0

90000000000183cc <sfs_init>:
#include <sfs.h>
#include <error.h>
#include <assert.h>

void
sfs_init(void) {
90000000000183cc:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000000183d0:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000000183d4:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000000183d8:	02c08076 	addi.d	$r22,$r3,32(0x20)
    int ret;
    if ((ret = sfs_mount("disk0")) != 0) {
90000000000183dc:	1c000144 	pcaddu12i	$r4,10(0xa)
90000000000183e0:	02def084 	addi.d	$r4,$r4,1980(0x7bc)
90000000000183e4:	540b4400 	bl	2884(0xb44) # 9000000000018f28 <sfs_mount>
90000000000183e8:	0015008c 	move	$r12,$r4
90000000000183ec:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
90000000000183f0:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000183f4:	40002580 	beqz	$r12,36(0x24) # 9000000000018418 <sfs_init+0x4c>
        panic("failed: sfs: sfs_mount: %e.\n", ret);
90000000000183f8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000183fc:	00150187 	move	$r7,$r12
9000000000018400:	1c000146 	pcaddu12i	$r6,10(0xa)
9000000000018404:	02de80c6 	addi.d	$r6,$r6,1952(0x7a0)
9000000000018408:	02802805 	addi.w	$r5,$r0,10(0xa)
900000000001840c:	1c000144 	pcaddu12i	$r4,10(0xa)
9000000000018410:	02ded084 	addi.d	$r4,$r4,1972(0x7b4)
9000000000018414:	57486fff 	bl	-46996(0xfff486c) # 900000000000cc80 <__panic>
    }
}
9000000000018418:	03400000 	andi	$r0,$r0,0x0
900000000001841c:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000018420:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000018424:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000018428:	4c000020 	jirl	$r0,$r1,0

900000000001842c <fence_i>:
static void fence_i(void *va_start, int size) {
900000000001842c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000018430:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000018434:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000018438:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000001843c:	001500ac 	move	$r12,$r5
9000000000018440:	0040818c 	slli.w	$r12,$r12,0x0
9000000000018444:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
9000000000018448:	38720000 	dbar	0x0
    void *va_end = va_start + size;
900000000001844c:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000018450:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000018454:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000018458:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
900000000001845c:	50002000 	b	32(0x20) # 900000000001847c <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
9000000000018460:	06000189 	cacop	0x9,$r12,0
9000000000018464:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
9000000000018468:	06000188 	cacop	0x8,$r12,0
900000000001846c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
9000000000018470:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000018474:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000018478:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
900000000001847c:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000018480:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000018484:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 9000000000018460 <fence_i+0x34>
9000000000018488:	38728000 	ibar	0x0
}
900000000001848c:	03400000 	andi	$r0,$r0,0x0
9000000000018490:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000018494:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000018498:	4c000020 	jirl	$r0,$r1,0

900000000001849c <sfs_sync>:
#include <bitmap.h>
#include <error.h>
#include <assert.h>

static int
sfs_sync(struct fs *fs) {
900000000001849c:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
90000000000184a0:	29c16061 	st.d	$r1,$r3,88(0x58)
90000000000184a4:	29c14076 	st.d	$r22,$r3,80(0x50)
90000000000184a8:	02c18076 	addi.d	$r22,$r3,96(0x60)
90000000000184ac:	29fea2c4 	st.d	$r4,$r22,-88(0xfa8)
    struct sfs_fs *sfs = fsop_info(fs, sfs);
90000000000184b0:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
90000000000184b4:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
90000000000184b8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000184bc:	40001180 	beqz	$r12,16(0x10) # 90000000000184cc <sfs_sync+0x30>
90000000000184c0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000184c4:	2882c18c 	ld.w	$r12,$r12,176(0xb0)
90000000000184c8:	40001d80 	beqz	$r12,28(0x1c) # 90000000000184e4 <sfs_sync+0x48>
90000000000184cc:	1c000146 	pcaddu12i	$r6,10(0xa)
90000000000184d0:	02dc30c6 	addi.d	$r6,$r6,1804(0x70c)
90000000000184d4:	02804805 	addi.w	$r5,$r0,18(0x12)
90000000000184d8:	1c000144 	pcaddu12i	$r4,10(0xa)
90000000000184dc:	02dd0084 	addi.d	$r4,$r4,1856(0x740)
90000000000184e0:	5747a3ff 	bl	-47200(0xfff47a0) # 900000000000cc80 <__panic>
90000000000184e4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000184e8:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    lock_sfs_fs(sfs);
90000000000184ec:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
90000000000184f0:	5440b800 	bl	16568(0x40b8) # 900000000001c5a8 <lock_sfs_fs>
    {
        list_entry_t *list = &(sfs->inode_list), *le = list;
90000000000184f4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000184f8:	02c2618c 	addi.d	$r12,$r12,152(0x98)
90000000000184fc:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
9000000000018500:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000018504:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
        while ((le = list_next(le)) != list) {
9000000000018508:	50007800 	b	120(0x78) # 9000000000018580 <sfs_sync+0xe4>
            struct sfs_inode *sin = le2sin(le, inode_link);
900000000001850c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000018510:	02ff418c 	addi.d	$r12,$r12,-48(0xfd0)
9000000000018514:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
            vop_fsync(info2node(sin, sfs_inode));
9000000000018518:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001851c:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
9000000000018520:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000018524:	40002180 	beqz	$r12,32(0x20) # 9000000000018544 <sfs_sync+0xa8>
9000000000018528:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000001852c:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000018530:	40001580 	beqz	$r12,20(0x14) # 9000000000018544 <sfs_sync+0xa8>
9000000000018534:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000018538:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
900000000001853c:	28c0c18c 	ld.d	$r12,$r12,48(0x30)
9000000000018540:	44001d80 	bnez	$r12,28(0x1c) # 900000000001855c <sfs_sync+0xc0>
9000000000018544:	1c000146 	pcaddu12i	$r6,10(0xa)
9000000000018548:	02dbb0c6 	addi.d	$r6,$r6,1772(0x6ec)
900000000001854c:	02806005 	addi.w	$r5,$r0,24(0x18)
9000000000018550:	1c000144 	pcaddu12i	$r4,10(0xa)
9000000000018554:	02db2084 	addi.d	$r4,$r4,1736(0x6c8)
9000000000018558:	57472bff 	bl	-47320(0xfff4728) # 900000000000cc80 <__panic>
900000000001855c:	1c000145 	pcaddu12i	$r5,10(0xa)
9000000000018560:	02dcd0a5 	addi.d	$r5,$r5,1844(0x734)
9000000000018564:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
9000000000018568:	57da97ff 	bl	-9580(0xfffda94) # 9000000000015ffc <inode_check>
900000000001856c:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000018570:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
9000000000018574:	28c0c18c 	ld.d	$r12,$r12,48(0x30)
9000000000018578:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
900000000001857c:	4c000181 	jirl	$r1,$r12,0
9000000000018580:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000018584:	29fec2cc 	st.d	$r12,$r22,-80(0xfb0)
9000000000018588:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000001858c:	28c0218c 	ld.d	$r12,$r12,8(0x8)
        while ((le = list_next(le)) != list) {
9000000000018590:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000018594:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000018598:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001859c:	5fff71ac 	bne	$r13,$r12,-144(0x3ff70) # 900000000001850c <sfs_sync+0x70>
        }
    }
    unlock_sfs_fs(sfs);
90000000000185a0:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
90000000000185a4:	5440ac00 	bl	16556(0x40ac) # 900000000001c650 <unlock_sfs_fs>

    int ret;
    if (sfs->super_dirty) {
90000000000185a8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000185ac:	2881018c 	ld.w	$r12,$r12,64(0x40)
90000000000185b0:	40006580 	beqz	$r12,100(0x64) # 9000000000018614 <sfs_sync+0x178>
        sfs->super_dirty = 0;
90000000000185b4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000185b8:	29810180 	st.w	$r0,$r12,64(0x40)
        if ((ret = sfs_sync_super(sfs)) != 0) {
90000000000185bc:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
90000000000185c0:	543d9400 	bl	15764(0x3d94) # 900000000001c354 <sfs_sync_super>
90000000000185c4:	0015008c 	move	$r12,$r4
90000000000185c8:	29bef2cc 	st.w	$r12,$r22,-68(0xfbc)
90000000000185cc:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
90000000000185d0:	40001980 	beqz	$r12,24(0x18) # 90000000000185e8 <sfs_sync+0x14c>
            sfs->super_dirty = 1;
90000000000185d4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000185d8:	0280040d 	addi.w	$r13,$r0,1(0x1)
90000000000185dc:	2981018d 	st.w	$r13,$r12,64(0x40)
            return ret;
90000000000185e0:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
90000000000185e4:	50003400 	b	52(0x34) # 9000000000018618 <sfs_sync+0x17c>
        }
        if ((ret = sfs_sync_freemap(sfs)) != 0) {
90000000000185e8:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
90000000000185ec:	543e0000 	bl	15872(0x3e00) # 900000000001c3ec <sfs_sync_freemap>
90000000000185f0:	0015008c 	move	$r12,$r4
90000000000185f4:	29bef2cc 	st.w	$r12,$r22,-68(0xfbc)
90000000000185f8:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
90000000000185fc:	40001980 	beqz	$r12,24(0x18) # 9000000000018614 <sfs_sync+0x178>
            sfs->super_dirty = 1;
9000000000018600:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000018604:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000018608:	2981018d 	st.w	$r13,$r12,64(0x40)
            return ret;
900000000001860c:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
9000000000018610:	50000800 	b	8(0x8) # 9000000000018618 <sfs_sync+0x17c>
        }
    }
    return 0;
9000000000018614:	0015000c 	move	$r12,$r0
}
9000000000018618:	00150184 	move	$r4,$r12
900000000001861c:	28c16061 	ld.d	$r1,$r3,88(0x58)
9000000000018620:	28c14076 	ld.d	$r22,$r3,80(0x50)
9000000000018624:	02c18063 	addi.d	$r3,$r3,96(0x60)
9000000000018628:	4c000020 	jirl	$r0,$r1,0

900000000001862c <sfs_get_root>:

static struct inode *
sfs_get_root(struct fs *fs) {
900000000001862c:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000018630:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000018634:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000018638:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000001863c:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
    struct inode *node;
    int ret;
    if ((ret = sfs_load_inode(fsop_info(fs, sfs), &node, SFS_BLKN_ROOT)) != 0) {
9000000000018640:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000018644:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000018648:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001864c:	40001180 	beqz	$r12,16(0x10) # 900000000001865c <sfs_get_root+0x30>
9000000000018650:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000018654:	2882c18c 	ld.w	$r12,$r12,176(0xb0)
9000000000018658:	40001d80 	beqz	$r12,28(0x1c) # 9000000000018674 <sfs_get_root+0x48>
900000000001865c:	1c000146 	pcaddu12i	$r6,10(0xa)
9000000000018660:	02d5f0c6 	addi.d	$r6,$r6,1404(0x57c)
9000000000018664:	0280c005 	addi.w	$r5,$r0,48(0x30)
9000000000018668:	1c000144 	pcaddu12i	$r4,10(0xa)
900000000001866c:	02d6c084 	addi.d	$r4,$r4,1456(0x5b0)
9000000000018670:	574613ff 	bl	-47600(0xfff4610) # 900000000000cc80 <__panic>
9000000000018674:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000018678:	02ff62cd 	addi.d	$r13,$r22,-40(0xfd8)
900000000001867c:	02800406 	addi.w	$r6,$r0,1(0x1)
9000000000018680:	001501a5 	move	$r5,$r13
9000000000018684:	00150184 	move	$r4,$r12
9000000000018688:	5410dc00 	bl	4316(0x10dc) # 9000000000019764 <sfs_load_inode>
900000000001868c:	0015008c 	move	$r12,$r4
9000000000018690:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
9000000000018694:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000018698:	40002580 	beqz	$r12,36(0x24) # 90000000000186bc <sfs_get_root+0x90>
        panic("load sfs root failed: %e", ret);
900000000001869c:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
90000000000186a0:	00150187 	move	$r7,$r12
90000000000186a4:	1c000146 	pcaddu12i	$r6,10(0xa)
90000000000186a8:	02d7d0c6 	addi.d	$r6,$r6,1524(0x5f4)
90000000000186ac:	0280c405 	addi.w	$r5,$r0,49(0x31)
90000000000186b0:	1c000144 	pcaddu12i	$r4,10(0xa)
90000000000186b4:	02d5a084 	addi.d	$r4,$r4,1384(0x568)
90000000000186b8:	5745cbff 	bl	-47672(0xfff45c8) # 900000000000cc80 <__panic>
    }
    return node;
90000000000186bc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
}
90000000000186c0:	00150184 	move	$r4,$r12
90000000000186c4:	28c0e061 	ld.d	$r1,$r3,56(0x38)
90000000000186c8:	28c0c076 	ld.d	$r22,$r3,48(0x30)
90000000000186cc:	02c10063 	addi.d	$r3,$r3,64(0x40)
90000000000186d0:	4c000020 	jirl	$r0,$r1,0

90000000000186d4 <sfs_unmount>:

static int
sfs_unmount(struct fs *fs) {
90000000000186d4:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
90000000000186d8:	29c0e061 	st.d	$r1,$r3,56(0x38)
90000000000186dc:	29c0c076 	st.d	$r22,$r3,48(0x30)
90000000000186e0:	02c10076 	addi.d	$r22,$r3,64(0x40)
90000000000186e4:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
    struct sfs_fs *sfs = fsop_info(fs, sfs);
90000000000186e8:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000186ec:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
90000000000186f0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000186f4:	40001180 	beqz	$r12,16(0x10) # 9000000000018704 <sfs_unmount+0x30>
90000000000186f8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000186fc:	2882c18c 	ld.w	$r12,$r12,176(0xb0)
9000000000018700:	40001d80 	beqz	$r12,28(0x1c) # 900000000001871c <sfs_unmount+0x48>
9000000000018704:	1c000146 	pcaddu12i	$r6,10(0xa)
9000000000018708:	02d350c6 	addi.d	$r6,$r6,1236(0x4d4)
900000000001870c:	0280e005 	addi.w	$r5,$r0,56(0x38)
9000000000018710:	1c000144 	pcaddu12i	$r4,10(0xa)
9000000000018714:	02d42084 	addi.d	$r4,$r4,1288(0x508)
9000000000018718:	57456bff 	bl	-47768(0xfff4568) # 900000000000cc80 <__panic>
900000000001871c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000018720:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    if (!list_empty(&(sfs->inode_list))) {
9000000000018724:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000018728:	02c2618c 	addi.d	$r12,$r12,152(0x98)
900000000001872c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    return list->next == list;
9000000000018730:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000018734:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000018738:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001873c:	0015b1ac 	xor	$r12,$r13,$r12
9000000000018740:	0240058c 	sltui	$r12,$r12,1(0x1)
9000000000018744:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
9000000000018748:	44000d80 	bnez	$r12,12(0xc) # 9000000000018754 <sfs_unmount+0x80>
        return -E_BUSY;
900000000001874c:	02bfc40c 	addi.w	$r12,$r0,-15(0xff1)
9000000000018750:	50006400 	b	100(0x64) # 90000000000187b4 <sfs_unmount+0xe0>
    }
    assert(!sfs->super_dirty);
9000000000018754:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000018758:	2881018c 	ld.w	$r12,$r12,64(0x40)
900000000001875c:	40001d80 	beqz	$r12,28(0x1c) # 9000000000018778 <sfs_unmount+0xa4>
9000000000018760:	1c000146 	pcaddu12i	$r6,10(0xa)
9000000000018764:	02d560c6 	addi.d	$r6,$r6,1368(0x558)
9000000000018768:	0280f005 	addi.w	$r5,$r0,60(0x3c)
900000000001876c:	1c000144 	pcaddu12i	$r4,10(0xa)
9000000000018770:	02d2b084 	addi.d	$r4,$r4,1196(0x4ac)
9000000000018774:	57450fff 	bl	-47860(0xfff450c) # 900000000000cc80 <__panic>
    bitmap_destroy(sfs->freemap);
9000000000018778:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001877c:	28c0e18c 	ld.d	$r12,$r12,56(0x38)
9000000000018780:	00150184 	move	$r4,$r12
9000000000018784:	57fb4fff 	bl	-1204(0xffffb4c) # 90000000000182d0 <bitmap_destroy>
    kfree(sfs->sfs_buffer);
9000000000018788:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001878c:	28c1218c 	ld.d	$r12,$r12,72(0x48)
9000000000018790:	00150184 	move	$r4,$r12
9000000000018794:	56f383ff 	bl	-68736(0xffef380) # 9000000000007b14 <kfree>
    kfree(sfs->hash_list);
9000000000018798:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001879c:	28c2a18c 	ld.d	$r12,$r12,168(0xa8)
90000000000187a0:	00150184 	move	$r4,$r12
90000000000187a4:	56f373ff 	bl	-68752(0xffef370) # 9000000000007b14 <kfree>
    kfree(sfs);
90000000000187a8:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
90000000000187ac:	56f36bff 	bl	-68760(0xffef368) # 9000000000007b14 <kfree>
    return 0;
90000000000187b0:	0015000c 	move	$r12,$r0
}
90000000000187b4:	00150184 	move	$r4,$r12
90000000000187b8:	28c0e061 	ld.d	$r1,$r3,56(0x38)
90000000000187bc:	28c0c076 	ld.d	$r22,$r3,48(0x30)
90000000000187c0:	02c10063 	addi.d	$r3,$r3,64(0x40)
90000000000187c4:	4c000020 	jirl	$r0,$r1,0

90000000000187c8 <sfs_cleanup>:

static void
sfs_cleanup(struct fs *fs) {
90000000000187c8:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
90000000000187cc:	29c0e061 	st.d	$r1,$r3,56(0x38)
90000000000187d0:	29c0c076 	st.d	$r22,$r3,48(0x30)
90000000000187d4:	02c10076 	addi.d	$r22,$r3,64(0x40)
90000000000187d8:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
    struct sfs_fs *sfs = fsop_info(fs, sfs);
90000000000187dc:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000187e0:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
90000000000187e4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000187e8:	40001180 	beqz	$r12,16(0x10) # 90000000000187f8 <sfs_cleanup+0x30>
90000000000187ec:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000187f0:	2882c18c 	ld.w	$r12,$r12,176(0xb0)
90000000000187f4:	40001d80 	beqz	$r12,28(0x1c) # 9000000000018810 <sfs_cleanup+0x48>
90000000000187f8:	1c000146 	pcaddu12i	$r6,10(0xa)
90000000000187fc:	02cf80c6 	addi.d	$r6,$r6,992(0x3e0)
9000000000018800:	02811805 	addi.w	$r5,$r0,70(0x46)
9000000000018804:	1c000144 	pcaddu12i	$r4,10(0xa)
9000000000018808:	02d05084 	addi.d	$r4,$r4,1044(0x414)
900000000001880c:	574477ff 	bl	-48012(0xfff4474) # 900000000000cc80 <__panic>
9000000000018810:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000018814:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    uint32_t blocks = sfs->super.blocks, unused_blocks = sfs->super.unused_blocks;
9000000000018818:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001881c:	2880118c 	ld.w	$r12,$r12,4(0x4)
9000000000018820:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
9000000000018824:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000018828:	2880218c 	ld.w	$r12,$r12,8(0x8)
900000000001882c:	29bf42cc 	st.w	$r12,$r22,-48(0xfd0)
    kprintf("sfs: cleanup: '%s' (%d/%d/%d)\n", sfs->super.info,
9000000000018830:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000018834:	02c0318e 	addi.d	$r14,$r12,12(0xc)
9000000000018838:	28bf52cd 	ld.w	$r13,$r22,-44(0xfd4)
900000000001883c:	28bf42cc 	ld.w	$r12,$r22,-48(0xfd0)
9000000000018840:	001131ac 	sub.w	$r12,$r13,$r12
9000000000018844:	28bf52cf 	ld.w	$r15,$r22,-44(0xfd4)
9000000000018848:	28bf42cd 	ld.w	$r13,$r22,-48(0xfd0)
900000000001884c:	001501e8 	move	$r8,$r15
9000000000018850:	001501a7 	move	$r7,$r13
9000000000018854:	00150186 	move	$r6,$r12
9000000000018858:	001501c5 	move	$r5,$r14
900000000001885c:	1c000144 	pcaddu12i	$r4,10(0xa)
9000000000018860:	02d21084 	addi.d	$r4,$r4,1156(0x484)
9000000000018864:	56b5bbff 	bl	-84552(0xffeb5b8) # 9000000000003e1c <kprintf>
            blocks - unused_blocks, unused_blocks, blocks);
    int i, ret;
    for (i = 0; i < 32; i ++) {
9000000000018868:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
900000000001886c:	50003000 	b	48(0x30) # 900000000001889c <sfs_cleanup+0xd4>
        if ((ret = fsop_sync(fs)) == 0) {
9000000000018870:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000018874:	28c2e18c 	ld.d	$r12,$r12,184(0xb8)
9000000000018878:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
900000000001887c:	4c000181 	jirl	$r1,$r12,0
9000000000018880:	0015008c 	move	$r12,$r4
9000000000018884:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
9000000000018888:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000001888c:	40002580 	beqz	$r12,36(0x24) # 90000000000188b0 <sfs_cleanup+0xe8>
    for (i = 0; i < 32; i ++) {
9000000000018890:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000018894:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000018898:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000001889c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000188a0:	0015018d 	move	$r13,$r12
90000000000188a4:	02807c0c 	addi.w	$r12,$r0,31(0x1f)
90000000000188a8:	67ffc98d 	bge	$r12,$r13,-56(0x3ffc8) # 9000000000018870 <sfs_cleanup+0xa8>
90000000000188ac:	50000800 	b	8(0x8) # 90000000000188b4 <sfs_cleanup+0xec>
            break;
90000000000188b0:	03400000 	andi	$r0,$r0,0x0
        }
    }
    if (ret != 0) {
90000000000188b4:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
90000000000188b8:	40003180 	beqz	$r12,48(0x30) # 90000000000188e8 <sfs_cleanup+0x120>
        warn("sfs: sync error: '%s': %e.\n", sfs->super.info, ret);
90000000000188bc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000188c0:	02c0318c 	addi.d	$r12,$r12,12(0xc)
90000000000188c4:	28bfa2cd 	ld.w	$r13,$r22,-24(0xfe8)
90000000000188c8:	001501a8 	move	$r8,$r13
90000000000188cc:	00150187 	move	$r7,$r12
90000000000188d0:	1c000146 	pcaddu12i	$r6,10(0xa)
90000000000188d4:	02d0c0c6 	addi.d	$r6,$r6,1072(0x430)
90000000000188d8:	02814405 	addi.w	$r5,$r0,81(0x51)
90000000000188dc:	1c000144 	pcaddu12i	$r4,10(0xa)
90000000000188e0:	02ccf084 	addi.d	$r4,$r4,828(0x33c)
90000000000188e4:	57444fff 	bl	-48052(0xfff444c) # 900000000000cd30 <__warn>
    }
}
90000000000188e8:	03400000 	andi	$r0,$r0,0x0
90000000000188ec:	28c0e061 	ld.d	$r1,$r3,56(0x38)
90000000000188f0:	28c0c076 	ld.d	$r22,$r3,48(0x30)
90000000000188f4:	02c10063 	addi.d	$r3,$r3,64(0x40)
90000000000188f8:	4c000020 	jirl	$r0,$r1,0

90000000000188fc <sfs_init_read>:

static int
sfs_init_read(struct device *dev, uint32_t blkno, void *blk_buffer) {
90000000000188fc:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
9000000000018900:	29c16061 	st.d	$r1,$r3,88(0x58)
9000000000018904:	29c14076 	st.d	$r22,$r3,80(0x50)
9000000000018908:	02c18076 	addi.d	$r22,$r3,96(0x60)
900000000001890c:	29fee2c4 	st.d	$r4,$r22,-72(0xfb8)
9000000000018910:	001500ac 	move	$r12,$r5
9000000000018914:	29fea2c6 	st.d	$r6,$r22,-88(0xfa8)
9000000000018918:	0040818c 	slli.w	$r12,$r12,0x0
900000000001891c:	29bed2cc 	st.w	$r12,$r22,-76(0xfb4)
    struct iobuf __iob, *iob = iobuf_init(&__iob, blk_buffer, SFS_BLKSIZE, blkno * SFS_BLKSIZE);
9000000000018920:	28bed2cc 	ld.w	$r12,$r22,-76(0xfb4)
9000000000018924:	0040b18c 	slli.w	$r12,$r12,0xc
9000000000018928:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
900000000001892c:	02ff22cd 	addi.d	$r13,$r22,-56(0xfc8)
9000000000018930:	00150187 	move	$r7,$r12
9000000000018934:	14000026 	lu12i.w	$r6,1(0x1)
9000000000018938:	28fea2c5 	ld.d	$r5,$r22,-88(0xfa8)
900000000001893c:	001501a4 	move	$r4,$r13
9000000000018940:	57c193ff 	bl	-15984(0xfffc190) # 9000000000014ad0 <iobuf_init>
9000000000018944:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    return dop_io(dev, iob, 0);
9000000000018948:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000001894c:	28c0818c 	ld.d	$r12,$r12,32(0x20)
9000000000018950:	00150006 	move	$r6,$r0
9000000000018954:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
9000000000018958:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
900000000001895c:	4c000181 	jirl	$r1,$r12,0
9000000000018960:	0015008c 	move	$r12,$r4
}
9000000000018964:	00150184 	move	$r4,$r12
9000000000018968:	28c16061 	ld.d	$r1,$r3,88(0x58)
900000000001896c:	28c14076 	ld.d	$r22,$r3,80(0x50)
9000000000018970:	02c18063 	addi.d	$r3,$r3,96(0x60)
9000000000018974:	4c000020 	jirl	$r0,$r1,0

9000000000018978 <sfs_init_freemap>:

static int
sfs_init_freemap(struct device *dev, struct bitmap *freemap, uint32_t blkno, uint32_t nblks, void *blk_buffer) {
9000000000018978:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
900000000001897c:	29c12061 	st.d	$r1,$r3,72(0x48)
9000000000018980:	29c10076 	st.d	$r22,$r3,64(0x40)
9000000000018984:	02c14076 	addi.d	$r22,$r3,80(0x50)
9000000000018988:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
900000000001898c:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
9000000000018990:	001500cd 	move	$r13,$r6
9000000000018994:	001500ec 	move	$r12,$r7
9000000000018998:	29fec2c8 	st.d	$r8,$r22,-80(0xfb0)
900000000001899c:	004081ad 	slli.w	$r13,$r13,0x0
90000000000189a0:	29bef2cd 	st.w	$r13,$r22,-68(0xfbc)
90000000000189a4:	0040818c 	slli.w	$r12,$r12,0x0
90000000000189a8:	29bee2cc 	st.w	$r12,$r22,-72(0xfb8)
    size_t len;
    void *data = bitmap_getdata(freemap, &len);
90000000000189ac:	02ff62cc 	addi.d	$r12,$r22,-40(0xfd8)
90000000000189b0:	00150185 	move	$r5,$r12
90000000000189b4:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
90000000000189b8:	57f95bff 	bl	-1704(0xffff958) # 9000000000018310 <bitmap_getdata>
90000000000189bc:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    assert(data != NULL && len == nblks * SFS_BLKSIZE);
90000000000189c0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000189c4:	40001980 	beqz	$r12,24(0x18) # 90000000000189dc <sfs_init_freemap+0x64>
90000000000189c8:	28bee2cc 	ld.w	$r12,$r22,-72(0xfb8)
90000000000189cc:	0040b18c 	slli.w	$r12,$r12,0xc
90000000000189d0:	00df018d 	bstrpick.d	$r13,$r12,0x1f,0x0
90000000000189d4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000189d8:	580071ac 	beq	$r13,$r12,112(0x70) # 9000000000018a48 <sfs_init_freemap+0xd0>
90000000000189dc:	1c000146 	pcaddu12i	$r6,10(0xa)
90000000000189e0:	02cd10c6 	addi.d	$r6,$r6,836(0x344)
90000000000189e4:	02817c05 	addi.w	$r5,$r0,95(0x5f)
90000000000189e8:	1c000144 	pcaddu12i	$r4,10(0xa)
90000000000189ec:	02c8c084 	addi.d	$r4,$r4,560(0x230)
90000000000189f0:	574293ff 	bl	-48496(0xfff4290) # 900000000000cc80 <__panic>
    while (nblks != 0) {
        int ret;
        if ((ret = sfs_init_read(dev, blkno, data)) != 0) {
90000000000189f4:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
90000000000189f8:	28ffa2c6 	ld.d	$r6,$r22,-24(0xfe8)
90000000000189fc:	00150185 	move	$r5,$r12
9000000000018a00:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000018a04:	57fefbff 	bl	-264(0xffffef8) # 90000000000188fc <sfs_init_read>
9000000000018a08:	0015008c 	move	$r12,$r4
9000000000018a0c:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
9000000000018a10:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000018a14:	40000d80 	beqz	$r12,12(0xc) # 9000000000018a20 <sfs_init_freemap+0xa8>
            return ret;
9000000000018a18:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000018a1c:	50003800 	b	56(0x38) # 9000000000018a54 <sfs_init_freemap+0xdc>
        }
        blkno ++, nblks --, data += SFS_BLKSIZE;
9000000000018a20:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
9000000000018a24:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000018a28:	29bef2cc 	st.w	$r12,$r22,-68(0xfbc)
9000000000018a2c:	28bee2cc 	ld.w	$r12,$r22,-72(0xfb8)
9000000000018a30:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
9000000000018a34:	29bee2cc 	st.w	$r12,$r22,-72(0xfb8)
9000000000018a38:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000018a3c:	1400002c 	lu12i.w	$r12,1(0x1)
9000000000018a40:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000018a44:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (nblks != 0) {
9000000000018a48:	28bee2cc 	ld.w	$r12,$r22,-72(0xfb8)
9000000000018a4c:	47ffa99f 	bnez	$r12,-88(0x7fffa8) # 90000000000189f4 <sfs_init_freemap+0x7c>
    }
    return 0;
9000000000018a50:	0015000c 	move	$r12,$r0
}
9000000000018a54:	00150184 	move	$r4,$r12
9000000000018a58:	28c12061 	ld.d	$r1,$r3,72(0x48)
9000000000018a5c:	28c10076 	ld.d	$r22,$r3,64(0x40)
9000000000018a60:	02c14063 	addi.d	$r3,$r3,80(0x50)
9000000000018a64:	4c000020 	jirl	$r0,$r1,0

9000000000018a68 <sfs_do_mount>:

static int
sfs_do_mount(struct device *dev, struct fs **fs_store) {
9000000000018a68:	02fd8063 	addi.d	$r3,$r3,-160(0xf60)
9000000000018a6c:	29c26061 	st.d	$r1,$r3,152(0x98)
9000000000018a70:	29c24076 	st.d	$r22,$r3,144(0x90)
9000000000018a74:	02c28076 	addi.d	$r22,$r3,160(0xa0)
9000000000018a78:	29fda2c4 	st.d	$r4,$r22,-152(0xf68)
9000000000018a7c:	29fd82c5 	st.d	$r5,$r22,-160(0xf60)
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_super));
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_disk_inode));
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_disk_entry));

    if (dev->d_blocksize != SFS_BLKSIZE) {
9000000000018a80:	28fda2cc 	ld.d	$r12,$r22,-152(0xf68)
9000000000018a84:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000018a88:	1400002c 	lu12i.w	$r12,1(0x1)
9000000000018a8c:	58000dac 	beq	$r13,$r12,12(0xc) # 9000000000018a98 <sfs_do_mount+0x30>
        return -E_NA_DEV;
9000000000018a90:	02bfc80c 	addi.w	$r12,$r0,-14(0xff2)
9000000000018a94:	50048000 	b	1152(0x480) # 9000000000018f14 <sfs_do_mount+0x4ac>
    }

    /* allocate fs structure */
    struct fs *fs;
    if ((fs = alloc_fs(sfs)) == NULL) {
9000000000018a98:	00150004 	move	$r4,$r0
9000000000018a9c:	57d6e3ff 	bl	-10528(0xfffd6e0) # 900000000001617c <__alloc_fs>
9000000000018aa0:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000018aa4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000018aa8:	44000d80 	bnez	$r12,12(0xc) # 9000000000018ab4 <sfs_do_mount+0x4c>
        return -E_NO_MEM;
9000000000018aac:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
9000000000018ab0:	50046400 	b	1124(0x464) # 9000000000018f14 <sfs_do_mount+0x4ac>
    }
    struct sfs_fs *sfs = fsop_info(fs, sfs);
9000000000018ab4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000018ab8:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
9000000000018abc:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000018ac0:	40001180 	beqz	$r12,16(0x10) # 9000000000018ad0 <sfs_do_mount+0x68>
9000000000018ac4:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000018ac8:	2882c18c 	ld.w	$r12,$r12,176(0xb0)
9000000000018acc:	40001d80 	beqz	$r12,28(0x1c) # 9000000000018ae8 <sfs_do_mount+0x80>
9000000000018ad0:	1c000146 	pcaddu12i	$r6,10(0xa)
9000000000018ad4:	02c420c6 	addi.d	$r6,$r6,264(0x108)
9000000000018ad8:	0281e405 	addi.w	$r5,$r0,121(0x79)
9000000000018adc:	1c000144 	pcaddu12i	$r4,10(0xa)
9000000000018ae0:	02c4f084 	addi.d	$r4,$r4,316(0x13c)
9000000000018ae4:	57419fff 	bl	-48740(0xfff419c) # 900000000000cc80 <__panic>
9000000000018ae8:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000018aec:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
    sfs->dev = dev;
9000000000018af0:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000018af4:	28fda2cd 	ld.d	$r13,$r22,-152(0xf68)
9000000000018af8:	29c0c18d 	st.d	$r13,$r12,48(0x30)

    int ret = -E_NO_MEM;
9000000000018afc:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
9000000000018b00:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)

    void *sfs_buffer;
    if ((sfs->sfs_buffer = sfs_buffer = kmalloc(SFS_BLKSIZE)) == NULL) {
9000000000018b04:	14000024 	lu12i.w	$r4,1(0x1)
9000000000018b08:	56eb33ff 	bl	-70864(0xffeeb30) # 9000000000007638 <kmalloc>
9000000000018b0c:	29ff02c4 	st.d	$r4,$r22,-64(0xfc0)
9000000000018b10:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000018b14:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
9000000000018b18:	29c1218d 	st.d	$r13,$r12,72(0x48)
9000000000018b1c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000018b20:	28c1218c 	ld.d	$r12,$r12,72(0x48)
9000000000018b24:	4003e180 	beqz	$r12,992(0x3e0) # 9000000000018f04 <sfs_do_mount+0x49c>
        goto failed_cleanup_fs;
    }

    /* load and check superblock */
    if ((ret = sfs_init_read(dev, SFS_BLKN_SUPER, sfs_buffer)) != 0) {
9000000000018b28:	28ff02c6 	ld.d	$r6,$r22,-64(0xfc0)
9000000000018b2c:	00150005 	move	$r5,$r0
9000000000018b30:	28fda2c4 	ld.d	$r4,$r22,-152(0xf68)
9000000000018b34:	57fdcbff 	bl	-568(0xffffdc8) # 90000000000188fc <sfs_init_read>
9000000000018b38:	0015008c 	move	$r12,$r4
9000000000018b3c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000018b40:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000018b44:	4403a980 	bnez	$r12,936(0x3a8) # 9000000000018eec <sfs_do_mount+0x484>
        goto failed_cleanup_sfs_buffer;
    }

    ret = -E_INVAL;
9000000000018b48:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
9000000000018b4c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)

    struct sfs_super *super = sfs_buffer;
9000000000018b50:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000018b54:	29fee2cc 	st.d	$r12,$r22,-72(0xfb8)
    if (super->magic != SFS_MAGIC) {
9000000000018b58:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000018b5c:	2880018c 	ld.w	$r12,$r12,0
9000000000018b60:	0015018d 	move	$r13,$r12
9000000000018b64:	145f1b6c 	lu12i.w	$r12,194779(0x2f8db)
9000000000018b68:	03b8a98c 	ori	$r12,$r12,0xe2a
9000000000018b6c:	580029ac 	beq	$r13,$r12,40(0x28) # 9000000000018b94 <sfs_do_mount+0x12c>
        kprintf("sfs: wrong magic in superblock. (%08x should be %08x).\n",
9000000000018b70:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000018b74:	2880018d 	ld.w	$r13,$r12,0
9000000000018b78:	145f1b6c 	lu12i.w	$r12,194779(0x2f8db)
9000000000018b7c:	03b8a986 	ori	$r6,$r12,0xe2a
9000000000018b80:	001501a5 	move	$r5,$r13
9000000000018b84:	1c000144 	pcaddu12i	$r4,10(0xa)
9000000000018b88:	02c77084 	addi.d	$r4,$r4,476(0x1dc)
9000000000018b8c:	56b293ff 	bl	-85360(0xffeb290) # 9000000000003e1c <kprintf>
                super->magic, SFS_MAGIC);
        goto failed_cleanup_sfs_buffer;
9000000000018b90:	50036800 	b	872(0x368) # 9000000000018ef8 <sfs_do_mount+0x490>
    }
    if (super->blocks > dev->d_blocks) {
9000000000018b94:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000018b98:	2880118c 	ld.w	$r12,$r12,4(0x4)
9000000000018b9c:	00df018d 	bstrpick.d	$r13,$r12,0x1f,0x0
9000000000018ba0:	28fda2cc 	ld.d	$r12,$r22,-152(0xf68)
9000000000018ba4:	28c0018c 	ld.d	$r12,$r12,0
9000000000018ba8:	6c002d8d 	bgeu	$r12,$r13,44(0x2c) # 9000000000018bd4 <sfs_do_mount+0x16c>
        kprintf("sfs: fs has %d blocks, device has %d blocks.\n",
9000000000018bac:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000018bb0:	2880118d 	ld.w	$r13,$r12,4(0x4)
9000000000018bb4:	28fda2cc 	ld.d	$r12,$r22,-152(0xf68)
9000000000018bb8:	28c0018c 	ld.d	$r12,$r12,0
9000000000018bbc:	00150186 	move	$r6,$r12
9000000000018bc0:	001501a5 	move	$r5,$r13
9000000000018bc4:	1c000144 	pcaddu12i	$r4,10(0xa)
9000000000018bc8:	02c75084 	addi.d	$r4,$r4,468(0x1d4)
9000000000018bcc:	56b253ff 	bl	-85424(0xffeb250) # 9000000000003e1c <kprintf>
                super->blocks, dev->d_blocks);
        goto failed_cleanup_sfs_buffer;
9000000000018bd0:	50032800 	b	808(0x328) # 9000000000018ef8 <sfs_do_mount+0x490>
    }
    super->info[SFS_MAX_INFO_LEN] = '\0';
9000000000018bd4:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000018bd8:	2900ad80 	st.b	$r0,$r12,43(0x2b)
    sfs->super = *super;
9000000000018bdc:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000018be0:	28fee2cd 	ld.d	$r13,$r22,-72(0xfb8)
9000000000018be4:	288001a6 	ld.w	$r6,$r13,0
9000000000018be8:	288011a5 	ld.w	$r5,$r13,4(0x4)
9000000000018bec:	288021a4 	ld.w	$r4,$r13,8(0x8)
9000000000018bf0:	288031b4 	ld.w	$r20,$r13,12(0xc)
9000000000018bf4:	288041b3 	ld.w	$r19,$r13,16(0x10)
9000000000018bf8:	288051b2 	ld.w	$r18,$r13,20(0x14)
9000000000018bfc:	288061b1 	ld.w	$r17,$r13,24(0x18)
9000000000018c00:	288071b0 	ld.w	$r16,$r13,28(0x1c)
9000000000018c04:	288081af 	ld.w	$r15,$r13,32(0x20)
9000000000018c08:	288091ae 	ld.w	$r14,$r13,36(0x24)
9000000000018c0c:	2880a1ad 	ld.w	$r13,$r13,40(0x28)
9000000000018c10:	29800186 	st.w	$r6,$r12,0
9000000000018c14:	29801185 	st.w	$r5,$r12,4(0x4)
9000000000018c18:	29802184 	st.w	$r4,$r12,8(0x8)
9000000000018c1c:	29803194 	st.w	$r20,$r12,12(0xc)
9000000000018c20:	29804193 	st.w	$r19,$r12,16(0x10)
9000000000018c24:	29805192 	st.w	$r18,$r12,20(0x14)
9000000000018c28:	29806191 	st.w	$r17,$r12,24(0x18)
9000000000018c2c:	29807190 	st.w	$r16,$r12,28(0x1c)
9000000000018c30:	2980818f 	st.w	$r15,$r12,32(0x20)
9000000000018c34:	2980918e 	st.w	$r14,$r12,36(0x24)
9000000000018c38:	2980a18d 	st.w	$r13,$r12,40(0x28)

    ret = -E_NO_MEM;
9000000000018c3c:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
9000000000018c40:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)

    uint32_t i;

    /* alloc and initialize hash list */
    list_entry_t *hash_list;
    if ((sfs->hash_list = hash_list = kmalloc(sizeof(list_entry_t) * SFS_HLIST_SIZE)) == NULL) {
9000000000018c44:	14000084 	lu12i.w	$r4,4(0x4)
9000000000018c48:	56e9f3ff 	bl	-71184(0xffee9f0) # 9000000000007638 <kmalloc>
9000000000018c4c:	29fec2c4 	st.d	$r4,$r22,-80(0xfb0)
9000000000018c50:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000018c54:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
9000000000018c58:	29c2a18d 	st.d	$r13,$r12,168(0xa8)
9000000000018c5c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000018c60:	28c2a18c 	ld.d	$r12,$r12,168(0xa8)
9000000000018c64:	40029180 	beqz	$r12,656(0x290) # 9000000000018ef4 <sfs_do_mount+0x48c>
        goto failed_cleanup_sfs_buffer;
    }
    for (i = 0; i < SFS_HLIST_SIZE; i ++) {
9000000000018c68:	29bfa2c0 	st.w	$r0,$r22,-24(0xfe8)
9000000000018c6c:	50004000 	b	64(0x40) # 9000000000018cac <sfs_do_mount+0x244>
        list_init(hash_list + i);
9000000000018c70:	2abfa2cc 	ld.wu	$r12,$r22,-24(0xfe8)
9000000000018c74:	0041118c 	slli.d	$r12,$r12,0x4
9000000000018c78:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
9000000000018c7c:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000018c80:	29fe02cc 	st.d	$r12,$r22,-128(0xf80)
    elm->prev = elm->next = elm;
9000000000018c84:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
9000000000018c88:	28fe02cd 	ld.d	$r13,$r22,-128(0xf80)
9000000000018c8c:	29c0218d 	st.d	$r13,$r12,8(0x8)
9000000000018c90:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
9000000000018c94:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000018c98:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
9000000000018c9c:	29c0018d 	st.d	$r13,$r12,0
    for (i = 0; i < SFS_HLIST_SIZE; i ++) {
9000000000018ca0:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
9000000000018ca4:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000018ca8:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
9000000000018cac:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
9000000000018cb0:	0015018d 	move	$r13,$r12
9000000000018cb4:	028ffc0c 	addi.w	$r12,$r0,1023(0x3ff)
9000000000018cb8:	6fffb98d 	bgeu	$r12,$r13,-72(0x3ffb8) # 9000000000018c70 <sfs_do_mount+0x208>
    }

    /* load and check freemap */
    struct bitmap *freemap;
    uint32_t freemap_size_nbits = sfs_freemap_bits(super);
9000000000018cbc:	02803c0c 	addi.w	$r12,$r0,15(0xf)
9000000000018cc0:	29fea2cc 	st.d	$r12,$r22,-88(0xfa8)
9000000000018cc4:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000018cc8:	2880118c 	ld.w	$r12,$r12,4(0x4)
9000000000018ccc:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
9000000000018cd0:	28bea2cd 	ld.w	$r13,$r22,-88(0xfa8)
9000000000018cd4:	004081ae 	slli.w	$r14,$r13,0x0
9000000000018cd8:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000018cdc:	001739ad 	sll.w	$r13,$r13,$r14
9000000000018ce0:	0010b58c 	add.d	$r12,$r12,$r13
9000000000018ce4:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
9000000000018ce8:	28bea2cd 	ld.w	$r13,$r22,-88(0xfa8)
9000000000018cec:	004081ad 	slli.w	$r13,$r13,0x0
9000000000018cf0:	0019358c 	srl.d	$r12,$r12,$r13
9000000000018cf4:	28bea2cd 	ld.w	$r13,$r22,-88(0xfa8)
9000000000018cf8:	004081ad 	slli.w	$r13,$r13,0x0
9000000000018cfc:	0018b58c 	sll.d	$r12,$r12,$r13
9000000000018d00:	0040818c 	slli.w	$r12,$r12,0x0
9000000000018d04:	29be92cc 	st.w	$r12,$r22,-92(0xfa4)
    if ((sfs->freemap = freemap = bitmap_create(freemap_size_nbits)) == NULL) {
9000000000018d08:	28be92cc 	ld.w	$r12,$r22,-92(0xfa4)
9000000000018d0c:	00150184 	move	$r4,$r12
9000000000018d10:	57f0f3ff 	bl	-3856(0xffff0f0) # 9000000000017e00 <bitmap_create>
9000000000018d14:	29fe62c4 	st.d	$r4,$r22,-104(0xf98)
9000000000018d18:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000018d1c:	28fe62cd 	ld.d	$r13,$r22,-104(0xf98)
9000000000018d20:	29c0e18d 	st.d	$r13,$r12,56(0x38)
9000000000018d24:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000018d28:	28c0e18c 	ld.d	$r12,$r12,56(0x38)
9000000000018d2c:	4001b180 	beqz	$r12,432(0x1b0) # 9000000000018edc <sfs_do_mount+0x474>
        goto failed_cleanup_hash_list;
    }
    uint32_t freemap_size_nblks = sfs_freemap_blocks(super);
9000000000018d30:	1400010c 	lu12i.w	$r12,8(0x8)
9000000000018d34:	29be52cc 	st.w	$r12,$r22,-108(0xf94)
9000000000018d38:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000018d3c:	2880118c 	ld.w	$r12,$r12,4(0x4)
9000000000018d40:	28be52cd 	ld.w	$r13,$r22,-108(0xf94)
9000000000018d44:	001031ac 	add.w	$r12,$r13,$r12
9000000000018d48:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
9000000000018d4c:	0044bd8c 	srli.w	$r12,$r12,0xf
9000000000018d50:	29be42cc 	st.w	$r12,$r22,-112(0xf90)
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
9000000000018d54:	28be42cc 	ld.w	$r12,$r22,-112(0xf90)
9000000000018d58:	28ff02c8 	ld.d	$r8,$r22,-64(0xfc0)
9000000000018d5c:	00150187 	move	$r7,$r12
9000000000018d60:	02800806 	addi.w	$r6,$r0,2(0x2)
9000000000018d64:	28fe62c5 	ld.d	$r5,$r22,-104(0xf98)
9000000000018d68:	28fda2c4 	ld.d	$r4,$r22,-152(0xf68)
9000000000018d6c:	57fc0fff 	bl	-1012(0xffffc0c) # 9000000000018978 <sfs_init_freemap>
9000000000018d70:	0015008c 	move	$r12,$r4
9000000000018d74:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000018d78:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000018d7c:	44015180 	bnez	$r12,336(0x150) # 9000000000018ecc <sfs_do_mount+0x464>
        goto failed_cleanup_freemap;
    }

    uint32_t blocks = sfs->super.blocks, unused_blocks = 0;
9000000000018d80:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000018d84:	2880118c 	ld.w	$r12,$r12,4(0x4)
9000000000018d88:	29be32cc 	st.w	$r12,$r22,-116(0xf8c)
9000000000018d8c:	29bf92c0 	st.w	$r0,$r22,-28(0xfe4)
    for (i = 0; i < freemap_size_nbits; i ++) {
9000000000018d90:	29bfa2c0 	st.w	$r0,$r22,-24(0xfe8)
9000000000018d94:	50003400 	b	52(0x34) # 9000000000018dc8 <sfs_do_mount+0x360>
        if (bitmap_test(freemap, i)) {
9000000000018d98:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
9000000000018d9c:	00150185 	move	$r5,$r12
9000000000018da0:	28fe62c4 	ld.d	$r4,$r22,-104(0xf98)
9000000000018da4:	57f433ff 	bl	-3024(0xffff430) # 90000000000181d4 <bitmap_test>
9000000000018da8:	0015008c 	move	$r12,$r4
9000000000018dac:	40001180 	beqz	$r12,16(0x10) # 9000000000018dbc <sfs_do_mount+0x354>
            unused_blocks ++;
9000000000018db0:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000018db4:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000018db8:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
    for (i = 0; i < freemap_size_nbits; i ++) {
9000000000018dbc:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
9000000000018dc0:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000018dc4:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
9000000000018dc8:	28bfa2cd 	ld.w	$r13,$r22,-24(0xfe8)
9000000000018dcc:	28be92cc 	ld.w	$r12,$r22,-92(0xfa4)
9000000000018dd0:	6bffc9ac 	bltu	$r13,$r12,-56(0x3ffc8) # 9000000000018d98 <sfs_do_mount+0x330>
        }
    }
    // assert(unused_blocks == sfs->super.unused_blocks);

    /* and other fields */
    sfs->super_dirty = 0;
9000000000018dd4:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000018dd8:	29810180 	st.w	$r0,$r12,64(0x40)
    sem_init(&(sfs->fs_sem), 1);
9000000000018ddc:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000018de0:	02c1418c 	addi.d	$r12,$r12,80(0x50)
9000000000018de4:	02800405 	addi.w	$r5,$r0,1(0x1)
9000000000018de8:	00150184 	move	$r4,$r12
9000000000018dec:	574de3ff 	bl	-45600(0xfff4de0) # 900000000000dbcc <sem_init>
    sem_init(&(sfs->io_sem), 1);
9000000000018df0:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000018df4:	02c1a18c 	addi.d	$r12,$r12,104(0x68)
9000000000018df8:	02800405 	addi.w	$r5,$r0,1(0x1)
9000000000018dfc:	00150184 	move	$r4,$r12
9000000000018e00:	574dcfff 	bl	-45620(0xfff4dcc) # 900000000000dbcc <sem_init>
    sem_init(&(sfs->mutex_sem), 1);
9000000000018e04:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000018e08:	02c2018c 	addi.d	$r12,$r12,128(0x80)
9000000000018e0c:	02800405 	addi.w	$r5,$r0,1(0x1)
9000000000018e10:	00150184 	move	$r4,$r12
9000000000018e14:	574dbbff 	bl	-45640(0xfff4db8) # 900000000000dbcc <sem_init>
    list_init(&(sfs->inode_list));
9000000000018e18:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000018e1c:	02c2618c 	addi.d	$r12,$r12,152(0x98)
9000000000018e20:	29fde2cc 	st.d	$r12,$r22,-136(0xf78)
9000000000018e24:	28fde2cc 	ld.d	$r12,$r22,-136(0xf78)
9000000000018e28:	28fde2cd 	ld.d	$r13,$r22,-136(0xf78)
9000000000018e2c:	29c0218d 	st.d	$r13,$r12,8(0x8)
9000000000018e30:	28fde2cc 	ld.d	$r12,$r22,-136(0xf78)
9000000000018e34:	28c0218d 	ld.d	$r13,$r12,8(0x8)
9000000000018e38:	28fde2cc 	ld.d	$r12,$r22,-136(0xf78)
9000000000018e3c:	29c0018d 	st.d	$r13,$r12,0
    kprintf("sfs: mount: '%s' (%d/%d/%d)\n", sfs->super.info,
9000000000018e40:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000018e44:	02c0318e 	addi.d	$r14,$r12,12(0xc)
9000000000018e48:	28be32cd 	ld.w	$r13,$r22,-116(0xf8c)
9000000000018e4c:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000018e50:	001131ac 	sub.w	$r12,$r13,$r12
9000000000018e54:	28be32cf 	ld.w	$r15,$r22,-116(0xf8c)
9000000000018e58:	28bf92cd 	ld.w	$r13,$r22,-28(0xfe4)
9000000000018e5c:	001501e8 	move	$r8,$r15
9000000000018e60:	001501a7 	move	$r7,$r13
9000000000018e64:	00150186 	move	$r6,$r12
9000000000018e68:	001501c5 	move	$r5,$r14
9000000000018e6c:	1c000144 	pcaddu12i	$r4,10(0xa)
9000000000018e70:	02fd7084 	addi.d	$r4,$r4,-164(0xf5c)
9000000000018e74:	56afabff 	bl	-86104(0xffeafa8) # 9000000000003e1c <kprintf>
            blocks - unused_blocks, unused_blocks, blocks);

    fs->fs_sync = sfs_sync;
9000000000018e78:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000018e7c:	1dffffed 	pcaddu12i	$r13,-1(0xfffff)
9000000000018e80:	02d881ad 	addi.d	$r13,$r13,1568(0x620)
9000000000018e84:	29c2e18d 	st.d	$r13,$r12,184(0xb8)
    fs->fs_get_root = sfs_get_root;
9000000000018e88:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000018e8c:	1dffffed 	pcaddu12i	$r13,-1(0xfffff)
9000000000018e90:	02de81ad 	addi.d	$r13,$r13,1952(0x7a0)
9000000000018e94:	29c3018d 	st.d	$r13,$r12,192(0xc0)
    fs->fs_unmount = sfs_unmount;
9000000000018e98:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000018e9c:	1c00000d 	pcaddu12i	$r13,0
9000000000018ea0:	02e0e1ad 	addi.d	$r13,$r13,-1992(0x838)
9000000000018ea4:	29c3218d 	st.d	$r13,$r12,200(0xc8)
    fs->fs_cleanup = sfs_cleanup;
9000000000018ea8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000018eac:	1c00000d 	pcaddu12i	$r13,0
9000000000018eb0:	02e471ad 	addi.d	$r13,$r13,-1764(0x91c)
9000000000018eb4:	29c3418d 	st.d	$r13,$r12,208(0xd0)
    *fs_store = fs;
9000000000018eb8:	28fd82cc 	ld.d	$r12,$r22,-160(0xf60)
9000000000018ebc:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000018ec0:	29c0018d 	st.d	$r13,$r12,0
    return 0;
9000000000018ec4:	0015000c 	move	$r12,$r0
9000000000018ec8:	50004c00 	b	76(0x4c) # 9000000000018f14 <sfs_do_mount+0x4ac>
        goto failed_cleanup_freemap;
9000000000018ecc:	03400000 	andi	$r0,$r0,0x0

failed_cleanup_freemap:
    bitmap_destroy(freemap);
9000000000018ed0:	28fe62c4 	ld.d	$r4,$r22,-104(0xf98)
9000000000018ed4:	57f3ffff 	bl	-3076(0xffff3fc) # 90000000000182d0 <bitmap_destroy>
9000000000018ed8:	50000800 	b	8(0x8) # 9000000000018ee0 <sfs_do_mount+0x478>
        goto failed_cleanup_hash_list;
9000000000018edc:	03400000 	andi	$r0,$r0,0x0
failed_cleanup_hash_list:
    kfree(hash_list);
9000000000018ee0:	28fec2c4 	ld.d	$r4,$r22,-80(0xfb0)
9000000000018ee4:	56ec33ff 	bl	-70608(0xffeec30) # 9000000000007b14 <kfree>
9000000000018ee8:	50001000 	b	16(0x10) # 9000000000018ef8 <sfs_do_mount+0x490>
        goto failed_cleanup_sfs_buffer;
9000000000018eec:	03400000 	andi	$r0,$r0,0x0
9000000000018ef0:	50000800 	b	8(0x8) # 9000000000018ef8 <sfs_do_mount+0x490>
        goto failed_cleanup_sfs_buffer;
9000000000018ef4:	03400000 	andi	$r0,$r0,0x0
failed_cleanup_sfs_buffer:
    kfree(sfs_buffer);
9000000000018ef8:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
9000000000018efc:	56ec1bff 	bl	-70632(0xffeec18) # 9000000000007b14 <kfree>
9000000000018f00:	50000800 	b	8(0x8) # 9000000000018f08 <sfs_do_mount+0x4a0>
        goto failed_cleanup_fs;
9000000000018f04:	03400000 	andi	$r0,$r0,0x0
failed_cleanup_fs:
    kfree(fs);
9000000000018f08:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000018f0c:	56ec0bff 	bl	-70648(0xffeec08) # 9000000000007b14 <kfree>
    return ret;
9000000000018f10:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
9000000000018f14:	00150184 	move	$r4,$r12
9000000000018f18:	28c26061 	ld.d	$r1,$r3,152(0x98)
9000000000018f1c:	28c24076 	ld.d	$r22,$r3,144(0x90)
9000000000018f20:	02c28063 	addi.d	$r3,$r3,160(0xa0)
9000000000018f24:	4c000020 	jirl	$r0,$r1,0

9000000000018f28 <sfs_mount>:

int
sfs_mount(const char *devname) {
9000000000018f28:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000018f2c:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000018f30:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000018f34:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000018f38:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    return vfs_mount(devname, sfs_do_mount);
9000000000018f3c:	1c000005 	pcaddu12i	$r5,0
9000000000018f40:	02ecb0a5 	addi.d	$r5,$r5,-1236(0xb2c)
9000000000018f44:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000000018f48:	57dcbbff 	bl	-9032(0xfffdcb8) # 9000000000016c00 <vfs_mount>
9000000000018f4c:	0015008c 	move	$r12,$r4
}
9000000000018f50:	00150184 	move	$r4,$r12
9000000000018f54:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000018f58:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000018f5c:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000018f60:	4c000020 	jirl	$r0,$r1,0

9000000000018f64 <fence_i>:
static void fence_i(void *va_start, int size) {
9000000000018f64:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000018f68:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000018f6c:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000018f70:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000018f74:	001500ac 	move	$r12,$r5
9000000000018f78:	0040818c 	slli.w	$r12,$r12,0x0
9000000000018f7c:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
9000000000018f80:	38720000 	dbar	0x0
    void *va_end = va_start + size;
9000000000018f84:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000018f88:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000018f8c:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000018f90:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
9000000000018f94:	50002000 	b	32(0x20) # 9000000000018fb4 <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
9000000000018f98:	06000189 	cacop	0x9,$r12,0
9000000000018f9c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
9000000000018fa0:	06000188 	cacop	0x8,$r12,0
9000000000018fa4:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
9000000000018fa8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000018fac:	02c0418c 	addi.d	$r12,$r12,16(0x10)
9000000000018fb0:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
9000000000018fb4:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000018fb8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000018fbc:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 9000000000018f98 <fence_i+0x34>
9000000000018fc0:	38728000 	ibar	0x0
}
9000000000018fc4:	03400000 	andi	$r0,$r0,0x0
9000000000018fc8:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000018fcc:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000018fd0:	4c000020 	jirl	$r0,$r1,0

9000000000018fd4 <inode_ref_count>:
inode_ref_count(struct inode *node) {
9000000000018fd4:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000018fd8:	29c0a076 	st.d	$r22,$r3,40(0x28)
9000000000018fdc:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000018fe0:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    return atomic_read(&(node->ref_count));
9000000000018fe4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000018fe8:	02c1518c 	addi.d	$r12,$r12,84(0x54)
9000000000018fec:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
  return v->counter;
9000000000018ff0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000018ff4:	2880018c 	ld.w	$r12,$r12,0
}
9000000000018ff8:	00150184 	move	$r4,$r12
9000000000018ffc:	28c0a076 	ld.d	$r22,$r3,40(0x28)
9000000000019000:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000019004:	4c000020 	jirl	$r0,$r1,0

9000000000019008 <lock_sin>:

static const struct inode_ops sfs_node_dirops;
static const struct inode_ops sfs_node_fileops;

static void
lock_sin(struct sfs_inode *sin) {
9000000000019008:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000001900c:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000019010:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000019014:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000019018:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    down(&(sin->sem));
900000000001901c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000019020:	02c0618c 	addi.d	$r12,$r12,24(0x18)
9000000000019024:	00150184 	move	$r4,$r12
9000000000019028:	574e03ff 	bl	-45568(0xfff4e00) # 900000000000de28 <down>
}
900000000001902c:	03400000 	andi	$r0,$r0,0x0
9000000000019030:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000000019034:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000019038:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000001903c:	4c000020 	jirl	$r0,$r1,0

9000000000019040 <unlock_sin>:

static void
unlock_sin(struct sfs_inode *sin) {
9000000000019040:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000000019044:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000019048:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000001904c:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000019050:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    up(&(sin->sem));
9000000000019054:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000019058:	02c0618c 	addi.d	$r12,$r12,24(0x18)
900000000001905c:	00150184 	move	$r4,$r12
9000000000019060:	574d97ff 	bl	-45676(0xfff4d94) # 900000000000ddf4 <up>
}
9000000000019064:	03400000 	andi	$r0,$r0,0x0
9000000000019068:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000001906c:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000019070:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000019074:	4c000020 	jirl	$r0,$r1,0

9000000000019078 <sfs_get_ops>:

static const struct inode_ops *
sfs_get_ops(uint32_t type) {
9000000000019078:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000001907c:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000019080:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000019084:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000019088:	0015008c 	move	$r12,$r4
900000000001908c:	0040818c 	slli.w	$r12,$r12,0x0
9000000000019090:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    switch (type) {
9000000000019094:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000019098:	0015018d 	move	$r13,$r12
900000000001909c:	0280040c 	addi.w	$r12,$r0,1(0x1)
90000000000190a0:	580021ac 	beq	$r13,$r12,32(0x20) # 90000000000190c0 <sfs_get_ops+0x48>
90000000000190a4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000190a8:	0015018d 	move	$r13,$r12
90000000000190ac:	0280080c 	addi.w	$r12,$r0,2(0x2)
90000000000190b0:	5c001dac 	bne	$r13,$r12,28(0x1c) # 90000000000190cc <sfs_get_ops+0x54>
    case SFS_TYPE_DIR:
        return &sfs_node_dirops;
90000000000190b4:	1c00014c 	pcaddu12i	$r12,10(0xa)
90000000000190b8:	02f4d18c 	addi.d	$r12,$r12,-716(0xd34)
90000000000190bc:	50003000 	b	48(0x30) # 90000000000190ec <sfs_get_ops+0x74>
    case SFS_TYPE_FILE:
        return &sfs_node_fileops;
90000000000190c0:	1c00014c 	pcaddu12i	$r12,10(0xa)
90000000000190c4:	02f6a18c 	addi.d	$r12,$r12,-600(0xda8)
90000000000190c8:	50002400 	b	36(0x24) # 90000000000190ec <sfs_get_ops+0x74>
    }
    panic("invalid file type %d.\n", type);
90000000000190cc:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000190d0:	00150187 	move	$r7,$r12
90000000000190d4:	1c000146 	pcaddu12i	$r6,10(0xa)
90000000000190d8:	02f850c6 	addi.d	$r6,$r6,-492(0xe14)
90000000000190dc:	02809405 	addi.w	$r5,$r0,37(0x25)
90000000000190e0:	1c000144 	pcaddu12i	$r4,10(0xa)
90000000000190e4:	02f88084 	addi.d	$r4,$r4,-480(0xe20)
90000000000190e8:	573b9bff 	bl	-50280(0xfff3b98) # 900000000000cc80 <__panic>
}
90000000000190ec:	00150184 	move	$r4,$r12
90000000000190f0:	28c06061 	ld.d	$r1,$r3,24(0x18)
90000000000190f4:	28c04076 	ld.d	$r22,$r3,16(0x10)
90000000000190f8:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000000190fc:	4c000020 	jirl	$r0,$r1,0

9000000000019100 <sfs_hash_list>:

static list_entry_t *
sfs_hash_list(struct sfs_fs *sfs, uint32_t ino) {
9000000000019100:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000000019104:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000000019108:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000001910c:	29c06077 	st.d	$r23,$r3,24(0x18)
9000000000019110:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000000019114:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
9000000000019118:	001500ac 	move	$r12,$r5
900000000001911c:	0040818c 	slli.w	$r12,$r12,0x0
9000000000019120:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
    return sfs->hash_list + sin_hashfn(ino);
9000000000019124:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000019128:	28c2a197 	ld.d	$r23,$r12,168(0xa8)
900000000001912c:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
9000000000019130:	02802805 	addi.w	$r5,$r0,10(0xa)
9000000000019134:	00150184 	move	$r4,$r12
9000000000019138:	568293ff 	bl	-97648(0xffe8290) # 90000000000013c8 <hash32>
900000000001913c:	0015008c 	move	$r12,$r4
9000000000019140:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
9000000000019144:	0041118c 	slli.d	$r12,$r12,0x4
9000000000019148:	0010b2ec 	add.d	$r12,$r23,$r12
}
900000000001914c:	00150184 	move	$r4,$r12
9000000000019150:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000000019154:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000000019158:	28c06077 	ld.d	$r23,$r3,24(0x18)
900000000001915c:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000000019160:	4c000020 	jirl	$r0,$r1,0

9000000000019164 <sfs_set_links>:

static void
sfs_set_links(struct sfs_fs *sfs, struct sfs_inode *sin) {
9000000000019164:	02fdc063 	addi.d	$r3,$r3,-144(0xf70)
9000000000019168:	29c22061 	st.d	$r1,$r3,136(0x88)
900000000001916c:	29c20076 	st.d	$r22,$r3,128(0x80)
9000000000019170:	02c24076 	addi.d	$r22,$r3,144(0x90)
9000000000019174:	29fde2c4 	st.d	$r4,$r22,-136(0xf78)
9000000000019178:	29fdc2c5 	st.d	$r5,$r22,-144(0xf70)
    list_add(&(sfs->inode_list), &(sin->inode_link));
900000000001917c:	28fde2cc 	ld.d	$r12,$r22,-136(0xf78)
9000000000019180:	02c2618d 	addi.d	$r13,$r12,152(0x98)
9000000000019184:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
9000000000019188:	02c0c18c 	addi.d	$r12,$r12,48(0x30)
900000000001918c:	29fec2cd 	st.d	$r13,$r22,-80(0xfb0)
9000000000019190:	29fea2cc 	st.d	$r12,$r22,-88(0xfa8)
9000000000019194:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
9000000000019198:	29fe82cc 	st.d	$r12,$r22,-96(0xfa0)
900000000001919c:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
90000000000191a0:	29fe62cc 	st.d	$r12,$r22,-104(0xf98)
    __list_add(elm, listelm, listelm->next);
90000000000191a4:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
90000000000191a8:	28c0218c 	ld.d	$r12,$r12,8(0x8)
90000000000191ac:	28fe62cd 	ld.d	$r13,$r22,-104(0xf98)
90000000000191b0:	29fe42cd 	st.d	$r13,$r22,-112(0xf90)
90000000000191b4:	28fe82cd 	ld.d	$r13,$r22,-96(0xfa0)
90000000000191b8:	29fe22cd 	st.d	$r13,$r22,-120(0xf88)
90000000000191bc:	29fe02cc 	st.d	$r12,$r22,-128(0xf80)
    prev->next = next->prev = elm;
90000000000191c0:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
90000000000191c4:	28fe42cd 	ld.d	$r13,$r22,-112(0xf90)
90000000000191c8:	29c0018d 	st.d	$r13,$r12,0
90000000000191cc:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
90000000000191d0:	28c0018d 	ld.d	$r13,$r12,0
90000000000191d4:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
90000000000191d8:	29c0218d 	st.d	$r13,$r12,8(0x8)
    elm->next = next;
90000000000191dc:	28fe42cc 	ld.d	$r12,$r22,-112(0xf90)
90000000000191e0:	28fe02cd 	ld.d	$r13,$r22,-128(0xf80)
90000000000191e4:	29c0218d 	st.d	$r13,$r12,8(0x8)
    elm->prev = prev;
90000000000191e8:	28fe42cc 	ld.d	$r12,$r22,-112(0xf90)
90000000000191ec:	28fe22cd 	ld.d	$r13,$r22,-120(0xf88)
90000000000191f0:	29c0018d 	st.d	$r13,$r12,0
    list_add(sfs_hash_list(sfs, sin->ino), &(sin->hash_link));
90000000000191f4:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
90000000000191f8:	2880218c 	ld.w	$r12,$r12,8(0x8)
90000000000191fc:	00150185 	move	$r5,$r12
9000000000019200:	28fde2c4 	ld.d	$r4,$r22,-136(0xf78)
9000000000019204:	57feffff 	bl	-260(0xffffefc) # 9000000000019100 <sfs_hash_list>
9000000000019208:	0015008d 	move	$r13,$r4
900000000001920c:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
9000000000019210:	02c1018c 	addi.d	$r12,$r12,64(0x40)
9000000000019214:	29ffa2cd 	st.d	$r13,$r22,-24(0xfe8)
9000000000019218:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
900000000001921c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000019220:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
9000000000019224:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000019228:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    __list_add(elm, listelm, listelm->next);
900000000001922c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000019230:	28c0218c 	ld.d	$r12,$r12,8(0x8)
9000000000019234:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
9000000000019238:	29ff22cd 	st.d	$r13,$r22,-56(0xfc8)
900000000001923c:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000019240:	29ff02cd 	st.d	$r13,$r22,-64(0xfc0)
9000000000019244:	29fee2cc 	st.d	$r12,$r22,-72(0xfb8)
    prev->next = next->prev = elm;
9000000000019248:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000001924c:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
9000000000019250:	29c0018d 	st.d	$r13,$r12,0
9000000000019254:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000000019258:	28c0018d 	ld.d	$r13,$r12,0
900000000001925c:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000019260:	29c0218d 	st.d	$r13,$r12,8(0x8)
    elm->next = next;
9000000000019264:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000019268:	28fee2cd 	ld.d	$r13,$r22,-72(0xfb8)
900000000001926c:	29c0218d 	st.d	$r13,$r12,8(0x8)
    elm->prev = prev;
9000000000019270:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000019274:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
9000000000019278:	29c0018d 	st.d	$r13,$r12,0
}
900000000001927c:	03400000 	andi	$r0,$r0,0x0
9000000000019280:	28c22061 	ld.d	$r1,$r3,136(0x88)
9000000000019284:	28c20076 	ld.d	$r22,$r3,128(0x80)
9000000000019288:	02c24063 	addi.d	$r3,$r3,144(0x90)
900000000001928c:	4c000020 	jirl	$r0,$r1,0

9000000000019290 <sfs_remove_links>:

static void
sfs_remove_links(struct sfs_inode *sin) {
9000000000019290:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
9000000000019294:	29c12076 	st.d	$r22,$r3,72(0x48)
9000000000019298:	02c14076 	addi.d	$r22,$r3,80(0x50)
900000000001929c:	29fee2c4 	st.d	$r4,$r22,-72(0xfb8)
    list_del(&(sin->inode_link));
90000000000192a0:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
90000000000192a4:	02c0c18c 	addi.d	$r12,$r12,48(0x30)
90000000000192a8:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    __list_del(listelm->prev, listelm->next);
90000000000192ac:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
90000000000192b0:	28c0018d 	ld.d	$r13,$r12,0
90000000000192b4:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
90000000000192b8:	28c0218c 	ld.d	$r12,$r12,8(0x8)
90000000000192bc:	29ff22cd 	st.d	$r13,$r22,-56(0xfc8)
90000000000192c0:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
    prev->next = next;
90000000000192c4:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000192c8:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
90000000000192cc:	29c0218d 	st.d	$r13,$r12,8(0x8)
    next->prev = prev;
90000000000192d0:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
90000000000192d4:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
90000000000192d8:	29c0018d 	st.d	$r13,$r12,0
    list_del(&(sin->hash_link));
90000000000192dc:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
90000000000192e0:	02c1018c 	addi.d	$r12,$r12,64(0x40)
90000000000192e4:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    __list_del(listelm->prev, listelm->next);
90000000000192e8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000192ec:	28c0018d 	ld.d	$r13,$r12,0
90000000000192f0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000192f4:	28c0218c 	ld.d	$r12,$r12,8(0x8)
90000000000192f8:	29ff82cd 	st.d	$r13,$r22,-32(0xfe0)
90000000000192fc:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    prev->next = next;
9000000000019300:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000019304:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
9000000000019308:	29c0218d 	st.d	$r13,$r12,8(0x8)
    next->prev = prev;
900000000001930c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000019310:	28ff82cd 	ld.d	$r13,$r22,-32(0xfe0)
9000000000019314:	29c0018d 	st.d	$r13,$r12,0
}
9000000000019318:	03400000 	andi	$r0,$r0,0x0
900000000001931c:	28c12076 	ld.d	$r22,$r3,72(0x48)
9000000000019320:	02c14063 	addi.d	$r3,$r3,80(0x50)
9000000000019324:	4c000020 	jirl	$r0,$r1,0

9000000000019328 <sfs_block_inuse>:

static bool
sfs_block_inuse(struct sfs_fs *sfs, uint32_t ino) {
9000000000019328:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000001932c:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000000019330:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000000019334:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000000019338:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000001933c:	001500ac 	move	$r12,$r5
9000000000019340:	0040818c 	slli.w	$r12,$r12,0x0
9000000000019344:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
    if (ino != 0 && ino < sfs->super.blocks) {
9000000000019348:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000001934c:	40003d80 	beqz	$r12,60(0x3c) # 9000000000019388 <sfs_block_inuse+0x60>
9000000000019350:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000019354:	2880118d 	ld.w	$r13,$r12,4(0x4)
9000000000019358:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000001935c:	6c002d8d 	bgeu	$r12,$r13,44(0x2c) # 9000000000019388 <sfs_block_inuse+0x60>
        return !bitmap_test(sfs->freemap, ino);
9000000000019360:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000019364:	28c0e18c 	ld.d	$r12,$r12,56(0x38)
9000000000019368:	28bf92cd 	ld.w	$r13,$r22,-28(0xfe4)
900000000001936c:	001501a5 	move	$r5,$r13
9000000000019370:	00150184 	move	$r4,$r12
9000000000019374:	57ee63ff 	bl	-4512(0xfffee60) # 90000000000181d4 <bitmap_test>
9000000000019378:	0015008c 	move	$r12,$r4
900000000001937c:	0240058c 	sltui	$r12,$r12,1(0x1)
9000000000019380:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
9000000000019384:	50003000 	b	48(0x30) # 90000000000193b4 <sfs_block_inuse+0x8c>
    }
    panic("sfs_block_inuse: called out of range (0, %d) %d.\n", sfs->super.blocks, ino);
9000000000019388:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001938c:	2880118c 	ld.w	$r12,$r12,4(0x4)
9000000000019390:	28bf92cd 	ld.w	$r13,$r22,-28(0xfe4)
9000000000019394:	001501a8 	move	$r8,$r13
9000000000019398:	00150187 	move	$r7,$r12
900000000001939c:	1c000146 	pcaddu12i	$r6,10(0xa)
90000000000193a0:	02edf0c6 	addi.d	$r6,$r6,-1156(0xb7c)
90000000000193a4:	0280f805 	addi.w	$r5,$r0,62(0x3e)
90000000000193a8:	1c000144 	pcaddu12i	$r4,10(0xa)
90000000000193ac:	02ed6084 	addi.d	$r4,$r4,-1192(0xb58)
90000000000193b0:	5738d3ff 	bl	-50992(0xfff38d0) # 900000000000cc80 <__panic>
}
90000000000193b4:	00150184 	move	$r4,$r12
90000000000193b8:	28c06061 	ld.d	$r1,$r3,24(0x18)
90000000000193bc:	28c04076 	ld.d	$r22,$r3,16(0x10)
90000000000193c0:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000000193c4:	4c000020 	jirl	$r0,$r1,0

90000000000193c8 <sfs_block_alloc>:

static int
sfs_block_alloc(struct sfs_fs *sfs, uint32_t *ino_store) {
90000000000193c8:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000000193cc:	29c0a061 	st.d	$r1,$r3,40(0x28)
90000000000193d0:	29c08076 	st.d	$r22,$r3,32(0x20)
90000000000193d4:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000000193d8:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
90000000000193dc:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
    int ret;
    if ((ret = bitmap_alloc(sfs->freemap, ino_store)) != 0) {
90000000000193e0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000193e4:	28c0e18c 	ld.d	$r12,$r12,56(0x38)
90000000000193e8:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
90000000000193ec:	00150184 	move	$r4,$r12
90000000000193f0:	57ebf7ff 	bl	-5132(0xfffebf4) # 9000000000017fe4 <bitmap_alloc>
90000000000193f4:	0015008c 	move	$r12,$r4
90000000000193f8:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
90000000000193fc:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000019400:	40000d80 	beqz	$r12,12(0xc) # 900000000001940c <sfs_block_alloc+0x44>
        return ret;
9000000000019404:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000019408:	50009c00 	b	156(0x9c) # 90000000000194a4 <sfs_block_alloc+0xdc>
    }
    assert(sfs->super.unused_blocks > 0);
900000000001940c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000019410:	2880218c 	ld.w	$r12,$r12,8(0x8)
9000000000019414:	44001d80 	bnez	$r12,28(0x1c) # 9000000000019430 <sfs_block_alloc+0x68>
9000000000019418:	1c000146 	pcaddu12i	$r6,10(0xa)
900000000001941c:	02ece0c6 	addi.d	$r6,$r6,-1224(0xb38)
9000000000019420:	02811c05 	addi.w	$r5,$r0,71(0x47)
9000000000019424:	1c000144 	pcaddu12i	$r4,10(0xa)
9000000000019428:	02eb7084 	addi.d	$r4,$r4,-1316(0xadc)
900000000001942c:	573857ff 	bl	-51116(0xfff3854) # 900000000000cc80 <__panic>
    sfs->super.unused_blocks --, sfs->super_dirty = 1;
9000000000019430:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000019434:	2880218c 	ld.w	$r12,$r12,8(0x8)
9000000000019438:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
900000000001943c:	0015018d 	move	$r13,$r12
9000000000019440:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000019444:	2980218d 	st.w	$r13,$r12,8(0x8)
9000000000019448:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001944c:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000019450:	2981018d 	st.w	$r13,$r12,64(0x40)
    assert(sfs_block_inuse(sfs, *ino_store));
9000000000019454:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000019458:	2880018c 	ld.w	$r12,$r12,0
900000000001945c:	00150185 	move	$r5,$r12
9000000000019460:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000000019464:	57fec7ff 	bl	-316(0xffffec4) # 9000000000019328 <sfs_block_inuse>
9000000000019468:	0015008c 	move	$r12,$r4
900000000001946c:	44001d80 	bnez	$r12,28(0x1c) # 9000000000019488 <sfs_block_alloc+0xc0>
9000000000019470:	1c000146 	pcaddu12i	$r6,10(0xa)
9000000000019474:	02ec40c6 	addi.d	$r6,$r6,-1264(0xb10)
9000000000019478:	02812405 	addi.w	$r5,$r0,73(0x49)
900000000001947c:	1c000144 	pcaddu12i	$r4,10(0xa)
9000000000019480:	02ea1084 	addi.d	$r4,$r4,-1404(0xa84)
9000000000019484:	5737ffff 	bl	-51204(0xfff37fc) # 900000000000cc80 <__panic>
    return sfs_clear_block(sfs, *ino_store, 1);
9000000000019488:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001948c:	2880018c 	ld.w	$r12,$r12,0
9000000000019490:	02800406 	addi.w	$r6,$r0,1(0x1)
9000000000019494:	00150185 	move	$r5,$r12
9000000000019498:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001949c:	542fd000 	bl	12240(0x2fd0) # 900000000001c46c <sfs_clear_block>
90000000000194a0:	0015008c 	move	$r12,$r4
}
90000000000194a4:	00150184 	move	$r4,$r12
90000000000194a8:	28c0a061 	ld.d	$r1,$r3,40(0x28)
90000000000194ac:	28c08076 	ld.d	$r22,$r3,32(0x20)
90000000000194b0:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000000194b4:	4c000020 	jirl	$r0,$r1,0

90000000000194b8 <sfs_block_free>:

static void
sfs_block_free(struct sfs_fs *sfs, uint32_t ino) {
90000000000194b8:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000000194bc:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000000194c0:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000000194c4:	02c08076 	addi.d	$r22,$r3,32(0x20)
90000000000194c8:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
90000000000194cc:	001500ac 	move	$r12,$r5
90000000000194d0:	0040818c 	slli.w	$r12,$r12,0x0
90000000000194d4:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
    assert(sfs_block_inuse(sfs, ino));
90000000000194d8:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
90000000000194dc:	00150185 	move	$r5,$r12
90000000000194e0:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
90000000000194e4:	57fe47ff 	bl	-444(0xffffe44) # 9000000000019328 <sfs_block_inuse>
90000000000194e8:	0015008c 	move	$r12,$r4
90000000000194ec:	44001d80 	bnez	$r12,28(0x1c) # 9000000000019508 <sfs_block_free+0x50>
90000000000194f0:	1c000146 	pcaddu12i	$r6,10(0xa)
90000000000194f4:	02eb20c6 	addi.d	$r6,$r6,-1336(0xac8)
90000000000194f8:	02813c05 	addi.w	$r5,$r0,79(0x4f)
90000000000194fc:	1c000144 	pcaddu12i	$r4,10(0xa)
9000000000019500:	02e81084 	addi.d	$r4,$r4,-1532(0xa04)
9000000000019504:	57377fff 	bl	-51332(0xfff377c) # 900000000000cc80 <__panic>
    bitmap_free(sfs->freemap, ino);
9000000000019508:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001950c:	28c0e18c 	ld.d	$r12,$r12,56(0x38)
9000000000019510:	28bf92cd 	ld.w	$r13,$r22,-28(0xfe4)
9000000000019514:	001501a5 	move	$r5,$r13
9000000000019518:	00150184 	move	$r4,$r12
900000000001951c:	57ed1fff 	bl	-4836(0xfffed1c) # 9000000000018238 <bitmap_free>
    sfs->super.unused_blocks ++, sfs->super_dirty = 1;
9000000000019520:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000019524:	2880218c 	ld.w	$r12,$r12,8(0x8)
9000000000019528:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000001952c:	0015018d 	move	$r13,$r12
9000000000019530:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000019534:	2980218d 	st.w	$r13,$r12,8(0x8)
9000000000019538:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001953c:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000019540:	2981018d 	st.w	$r13,$r12,64(0x40)
}
9000000000019544:	03400000 	andi	$r0,$r0,0x0
9000000000019548:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000001954c:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000000019550:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000000019554:	4c000020 	jirl	$r0,$r1,0

9000000000019558 <sfs_create_inode>:

static int
sfs_create_inode(struct sfs_fs *sfs, struct sfs_disk_inode *din, uint32_t ino, struct inode **node_store) {
9000000000019558:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
900000000001955c:	29c12061 	st.d	$r1,$r3,72(0x48)
9000000000019560:	29c10076 	st.d	$r22,$r3,64(0x40)
9000000000019564:	02c14076 	addi.d	$r22,$r3,80(0x50)
9000000000019568:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
900000000001956c:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
9000000000019570:	001500cc 	move	$r12,$r6
9000000000019574:	29fec2c7 	st.d	$r7,$r22,-80(0xfb0)
9000000000019578:	0040818c 	slli.w	$r12,$r12,0x0
900000000001957c:	29bef2cc 	st.w	$r12,$r22,-68(0xfbc)
    struct inode *node;
    if ((node = alloc_inode(sfs_inode)) != NULL) {
9000000000019580:	1400002c 	lu12i.w	$r12,1(0x1)
9000000000019584:	0388d584 	ori	$r4,$r12,0x235
9000000000019588:	57c57bff 	bl	-14984(0xfffc578) # 9000000000015b00 <__alloc_inode>
900000000001958c:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
9000000000019590:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000019594:	4000e580 	beqz	$r12,228(0xe4) # 9000000000019678 <sfs_create_inode+0x120>
        vop_init(node, sfs_get_ops(_SFS_INODE_GET_TYPE(din)), info2fs(sfs, sfs));
9000000000019598:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000001959c:	02c0118c 	addi.d	$r12,$r12,4(0x4)
90000000000195a0:	2880018c 	ld.w	$r12,$r12,0
90000000000195a4:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
90000000000195a8:	28bf92cd 	ld.w	$r13,$r22,-28(0xfe4)
90000000000195ac:	140001ec 	lu12i.w	$r12,15(0xf)
90000000000195b0:	03bffd8c 	ori	$r12,$r12,0xfff
90000000000195b4:	0014b1ac 	and	$r12,$r13,$r12
90000000000195b8:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
90000000000195bc:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
90000000000195c0:	00150184 	move	$r4,$r12
90000000000195c4:	57fab7ff 	bl	-1356(0xffffab4) # 9000000000019078 <sfs_get_ops>
90000000000195c8:	0015008c 	move	$r12,$r4
90000000000195cc:	28ff22c6 	ld.d	$r6,$r22,-56(0xfc8)
90000000000195d0:	00150185 	move	$r5,$r12
90000000000195d4:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
90000000000195d8:	57c57fff 	bl	-14980(0xfffc57c) # 9000000000015b54 <inode_init>
        struct sfs_inode *sin = vop_info(node, sfs_inode);
90000000000195dc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000195e0:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
90000000000195e4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000195e8:	40001d80 	beqz	$r12,28(0x1c) # 9000000000019604 <sfs_create_inode+0xac>
90000000000195ec:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000195f0:	2881418c 	ld.w	$r12,$r12,80(0x50)
90000000000195f4:	0015018d 	move	$r13,$r12
90000000000195f8:	1400002c 	lu12i.w	$r12,1(0x1)
90000000000195fc:	0388d58c 	ori	$r12,$r12,0x235
9000000000019600:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000001961c <sfs_create_inode+0xc4>
9000000000019604:	1c000146 	pcaddu12i	$r6,10(0xa)
9000000000019608:	02e790c6 	addi.d	$r6,$r6,-1564(0x9e4)
900000000001960c:	02816405 	addi.w	$r5,$r0,89(0x59)
9000000000019610:	1c000144 	pcaddu12i	$r4,10(0xa)
9000000000019614:	02e3c084 	addi.d	$r4,$r4,-1808(0x8f0)
9000000000019618:	57366bff 	bl	-51608(0xfff3668) # 900000000000cc80 <__panic>
900000000001961c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000019620:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
        sin->din = din, sin->ino = ino, sin->dirty = 0, sin->reclaim_count = 1;
9000000000019624:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000019628:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
900000000001962c:	29c0018d 	st.d	$r13,$r12,0
9000000000019630:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000019634:	28bef2cd 	ld.w	$r13,$r22,-68(0xfbc)
9000000000019638:	2980218d 	st.w	$r13,$r12,8(0x8)
900000000001963c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000019640:	29803180 	st.w	$r0,$r12,12(0xc)
9000000000019644:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000019648:	0280040d 	addi.w	$r13,$r0,1(0x1)
900000000001964c:	2980418d 	st.w	$r13,$r12,16(0x10)
        sem_init(&(sin->sem), 1);
9000000000019650:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000019654:	02c0618c 	addi.d	$r12,$r12,24(0x18)
9000000000019658:	02800405 	addi.w	$r5,$r0,1(0x1)
900000000001965c:	00150184 	move	$r4,$r12
9000000000019660:	57456fff 	bl	-47764(0xfff456c) # 900000000000dbcc <sem_init>
        *node_store = node;
9000000000019664:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
9000000000019668:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000001966c:	29c0018d 	st.d	$r13,$r12,0
        return 0;
9000000000019670:	0015000c 	move	$r12,$r0
9000000000019674:	50000800 	b	8(0x8) # 900000000001967c <sfs_create_inode+0x124>
    }
    return -E_NO_MEM;
9000000000019678:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
}
900000000001967c:	00150184 	move	$r4,$r12
9000000000019680:	28c12061 	ld.d	$r1,$r3,72(0x48)
9000000000019684:	28c10076 	ld.d	$r22,$r3,64(0x40)
9000000000019688:	02c14063 	addi.d	$r3,$r3,80(0x50)
900000000001968c:	4c000020 	jirl	$r0,$r1,0

9000000000019690 <lookup_sfs_nolock>:

static struct inode *
lookup_sfs_nolock(struct sfs_fs *sfs, uint32_t ino) {
9000000000019690:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
9000000000019694:	29c12061 	st.d	$r1,$r3,72(0x48)
9000000000019698:	29c10076 	st.d	$r22,$r3,64(0x40)
900000000001969c:	02c14076 	addi.d	$r22,$r3,80(0x50)
90000000000196a0:	29fee2c4 	st.d	$r4,$r22,-72(0xfb8)
90000000000196a4:	001500ac 	move	$r12,$r5
90000000000196a8:	0040818c 	slli.w	$r12,$r12,0x0
90000000000196ac:	29bed2cc 	st.w	$r12,$r22,-76(0xfb4)
    struct inode *node;
    list_entry_t *list = sfs_hash_list(sfs, ino), *le = list;
90000000000196b0:	28bed2cc 	ld.w	$r12,$r22,-76(0xfb4)
90000000000196b4:	00150185 	move	$r5,$r12
90000000000196b8:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
90000000000196bc:	57fa47ff 	bl	-1468(0xffffa44) # 9000000000019100 <sfs_hash_list>
90000000000196c0:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)
90000000000196c4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000196c8:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while ((le = list_next(le)) != list) {
90000000000196cc:	50006000 	b	96(0x60) # 900000000001972c <lookup_sfs_nolock+0x9c>
        struct sfs_inode *sin = le2sin(le, hash_link);
90000000000196d0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
90000000000196d4:	02ff018c 	addi.d	$r12,$r12,-64(0xfc0)
90000000000196d8:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        if (sin->ino == ino) {
90000000000196dc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000196e0:	2880218d 	ld.w	$r13,$r12,8(0x8)
90000000000196e4:	28bed2cc 	ld.w	$r12,$r22,-76(0xfb4)
90000000000196e8:	5c00458d 	bne	$r12,$r13,68(0x44) # 900000000001972c <lookup_sfs_nolock+0x9c>
            node = info2node(sin, sfs_inode);
90000000000196ec:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
90000000000196f0:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
            if (vop_ref_inc(node) == 1) {
90000000000196f4:	28ff42c4 	ld.d	$r4,$r22,-48(0xfd0)
90000000000196f8:	57c567ff 	bl	-15004(0xfffc564) # 9000000000015c5c <inode_ref_inc>
90000000000196fc:	0015008c 	move	$r12,$r4
9000000000019700:	0015018d 	move	$r13,$r12
9000000000019704:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000000019708:	5c001dac 	bne	$r13,$r12,28(0x1c) # 9000000000019724 <lookup_sfs_nolock+0x94>
                sin->reclaim_count ++;
900000000001970c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000019710:	2880418c 	ld.w	$r12,$r12,16(0x10)
9000000000019714:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000000019718:	0015018d 	move	$r13,$r12
900000000001971c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
9000000000019720:	2980418d 	st.w	$r13,$r12,16(0x10)
            }
            return node;
9000000000019724:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
9000000000019728:	50002800 	b	40(0x28) # 9000000000019750 <lookup_sfs_nolock+0xc0>
900000000001972c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000019730:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
    return listelm->next;
9000000000019734:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000019738:	28c0218c 	ld.d	$r12,$r12,8(0x8)
    while ((le = list_next(le)) != list) {
900000000001973c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
9000000000019740:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000019744:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
9000000000019748:	5fff89ac 	bne	$r13,$r12,-120(0x3ff88) # 90000000000196d0 <lookup_sfs_nolock+0x40>
        }
    }
    return NULL;
900000000001974c:	0015000c 	move	$r12,$r0
}
9000000000019750:	00150184 	move	$r4,$r12
9000000000019754:	28c12061 	ld.d	$r1,$r3,72(0x48)
9000000000019758:	28c10076 	ld.d	$r22,$r3,64(0x40)
900000000001975c:	02c14063 	addi.d	$r3,$r3,80(0x50)
9000000000019760:	4c000020 	jirl	$r0,$r1,0

9000000000019764 <sfs_load_inode>:

int
sfs_load_inode(struct sfs_fs *sfs, struct inode **node_store, uint32_t ino) {
9000000000019764:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
9000000000019768:	29c16061 	st.d	$r1,$r3,88(0x58)
900000000001976c:	29c14076 	st.d	$r22,$r3,80(0x50)
9000000000019770:	02c18076 	addi.d	$r22,$r3,96(0x60)
9000000000019774:	29fee2c4 	st.d	$r4,$r22,-72(0xfb8)
9000000000019778:	29fec2c5 	st.d	$r5,$r22,-80(0xfb0)
900000000001977c:	001500cc 	move	$r12,$r6
9000000000019780:	0040818c 	slli.w	$r12,$r12,0x0
9000000000019784:	29beb2cc 	st.w	$r12,$r22,-84(0xfac)
    lock_sfs_fs(sfs);
9000000000019788:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
900000000001978c:	542e1c00 	bl	11804(0x2e1c) # 900000000001c5a8 <lock_sfs_fs>
    struct inode *node;
    if ((node = lookup_sfs_nolock(sfs, ino)) != NULL) {
9000000000019790:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
9000000000019794:	00150185 	move	$r5,$r12
9000000000019798:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
900000000001979c:	57fef7ff 	bl	-268(0xffffef4) # 9000000000019690 <lookup_sfs_nolock>
90000000000197a0:	0015008c 	move	$r12,$r4
90000000000197a4:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
90000000000197a8:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
90000000000197ac:	44013980 	bnez	$r12,312(0x138) # 90000000000198e4 <sfs_load_inode+0x180>
        goto out_unlock;
    }

    int ret = -E_NO_MEM;
90000000000197b0:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
90000000000197b4:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    struct sfs_disk_inode *din;
    if ((din = kmalloc(sizeof(struct sfs_disk_inode))) == NULL) {
90000000000197b8:	02810004 	addi.w	$r4,$r0,64(0x40)
90000000000197bc:	56de7fff 	bl	-74116(0xffede7c) # 9000000000007638 <kmalloc>
90000000000197c0:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)
90000000000197c4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
90000000000197c8:	40015580 	beqz	$r12,340(0x154) # 900000000001991c <sfs_load_inode+0x1b8>
        goto failed_unlock;
    }

    assert(sfs_block_inuse(sfs, ino));
90000000000197cc:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
90000000000197d0:	00150185 	move	$r5,$r12
90000000000197d4:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
90000000000197d8:	57fb53ff 	bl	-1200(0xffffb50) # 9000000000019328 <sfs_block_inuse>
90000000000197dc:	0015008c 	move	$r12,$r4
90000000000197e0:	44001d80 	bnez	$r12,28(0x1c) # 90000000000197fc <sfs_load_inode+0x98>
90000000000197e4:	1c000126 	pcaddu12i	$r6,9(0x9)
90000000000197e8:	02df50c6 	addi.d	$r6,$r6,2004(0x7d4)
90000000000197ec:	02820405 	addi.w	$r5,$r0,129(0x81)
90000000000197f0:	1c000124 	pcaddu12i	$r4,9(0x9)
90000000000197f4:	02dc4084 	addi.d	$r4,$r4,1808(0x710)
90000000000197f8:	57348bff 	bl	-52088(0xfff3488) # 900000000000cc80 <__panic>
    if ((ret = sfs_rbuf(sfs, din, sizeof(struct sfs_disk_inode), ino, 0)) != 0) {
90000000000197fc:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
9000000000019800:	00150008 	move	$r8,$r0
9000000000019804:	00150187 	move	$r7,$r12
9000000000019808:	02810006 	addi.w	$r6,$r0,64(0x40)
900000000001980c:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
9000000000019810:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
9000000000019814:	54295400 	bl	10580(0x2954) # 900000000001c168 <sfs_rbuf>
9000000000019818:	0015008c 	move	$r12,$r4
900000000001981c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000019820:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000019824:	4400e180 	bnez	$r12,224(0xe0) # 9000000000019904 <sfs_load_inode+0x1a0>
        goto failed_cleanup_din;
    }

    assert(_SFS_INODE_GET_NLINKS(din) != 0);
9000000000019828:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001982c:	02c0118c 	addi.d	$r12,$r12,4(0x4)
9000000000019830:	2880018c 	ld.w	$r12,$r12,0
9000000000019834:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
9000000000019838:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
900000000001983c:	0044c18c 	srli.w	$r12,$r12,0x10
9000000000019840:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
9000000000019844:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000019848:	44001d80 	bnez	$r12,28(0x1c) # 9000000000019864 <sfs_load_inode+0x100>
900000000001984c:	1c000126 	pcaddu12i	$r6,9(0x9)
9000000000019850:	02df90c6 	addi.d	$r6,$r6,2020(0x7e4)
9000000000019854:	02821805 	addi.w	$r5,$r0,134(0x86)
9000000000019858:	1c000124 	pcaddu12i	$r4,9(0x9)
900000000001985c:	02daa084 	addi.d	$r4,$r4,1704(0x6a8)
9000000000019860:	573423ff 	bl	-52192(0xfff3420) # 900000000000cc80 <__panic>
    if ((ret = sfs_create_inode(sfs, din, ino, &node)) != 0) {
9000000000019864:	02ff22cd 	addi.d	$r13,$r22,-56(0xfc8)
9000000000019868:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
900000000001986c:	001501a7 	move	$r7,$r13
9000000000019870:	00150186 	move	$r6,$r12
9000000000019874:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
9000000000019878:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
900000000001987c:	57fcdfff 	bl	-804(0xffffcdc) # 9000000000019558 <sfs_create_inode>
9000000000019880:	0015008c 	move	$r12,$r4
9000000000019884:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000019888:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001988c:	44008180 	bnez	$r12,128(0x80) # 900000000001990c <sfs_load_inode+0x1a8>
        goto failed_cleanup_din;
    }
    sfs_set_links(sfs, vop_info(node, sfs_inode));
9000000000019890:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000000019894:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
9000000000019898:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001989c:	40001d80 	beqz	$r12,28(0x1c) # 90000000000198b8 <sfs_load_inode+0x154>
90000000000198a0:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
90000000000198a4:	2881418c 	ld.w	$r12,$r12,80(0x50)
90000000000198a8:	0015018d 	move	$r13,$r12
90000000000198ac:	1400002c 	lu12i.w	$r12,1(0x1)
90000000000198b0:	0388d58c 	ori	$r12,$r12,0x235
90000000000198b4:	58001dac 	beq	$r13,$r12,28(0x1c) # 90000000000198d0 <sfs_load_inode+0x16c>
90000000000198b8:	1c000126 	pcaddu12i	$r6,9(0x9)
90000000000198bc:	02dcc0c6 	addi.d	$r6,$r6,1840(0x730)
90000000000198c0:	02822805 	addi.w	$r5,$r0,138(0x8a)
90000000000198c4:	1c000124 	pcaddu12i	$r4,9(0x9)
90000000000198c8:	02d8f084 	addi.d	$r4,$r4,1596(0x63c)
90000000000198cc:	5733b7ff 	bl	-52300(0xfff33b4) # 900000000000cc80 <__panic>
90000000000198d0:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
90000000000198d4:	00150185 	move	$r5,$r12
90000000000198d8:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
90000000000198dc:	57f88bff 	bl	-1912(0xffff888) # 9000000000019164 <sfs_set_links>
90000000000198e0:	50000800 	b	8(0x8) # 90000000000198e8 <sfs_load_inode+0x184>
        goto out_unlock;
90000000000198e4:	03400000 	andi	$r0,$r0,0x0

out_unlock:
    unlock_sfs_fs(sfs);
90000000000198e8:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
90000000000198ec:	542d6400 	bl	11620(0x2d64) # 900000000001c650 <unlock_sfs_fs>
    *node_store = node;
90000000000198f0:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
90000000000198f4:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
90000000000198f8:	29c0018d 	st.d	$r13,$r12,0
    return 0;
90000000000198fc:	0015000c 	move	$r12,$r0
9000000000019900:	50002c00 	b	44(0x2c) # 900000000001992c <sfs_load_inode+0x1c8>
        goto failed_cleanup_din;
9000000000019904:	03400000 	andi	$r0,$r0,0x0
9000000000019908:	50000800 	b	8(0x8) # 9000000000019910 <sfs_load_inode+0x1ac>
        goto failed_cleanup_din;
900000000001990c:	03400000 	andi	$r0,$r0,0x0

failed_cleanup_din:
    kfree(din);
9000000000019910:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000000019914:	56e203ff 	bl	-73216(0xffee200) # 9000000000007b14 <kfree>
9000000000019918:	50000800 	b	8(0x8) # 9000000000019920 <sfs_load_inode+0x1bc>
        goto failed_unlock;
900000000001991c:	03400000 	andi	$r0,$r0,0x0
failed_unlock:
    unlock_sfs_fs(sfs);
9000000000019920:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
9000000000019924:	542d2c00 	bl	11564(0x2d2c) # 900000000001c650 <unlock_sfs_fs>
    return ret;
9000000000019928:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
900000000001992c:	00150184 	move	$r4,$r12
9000000000019930:	28c16061 	ld.d	$r1,$r3,88(0x58)
9000000000019934:	28c14076 	ld.d	$r22,$r3,80(0x50)
9000000000019938:	02c18063 	addi.d	$r3,$r3,96(0x60)
900000000001993c:	4c000020 	jirl	$r0,$r1,0

9000000000019940 <sfs_bmap_get_sub_nolock>:

static int
sfs_bmap_get_sub_nolock(struct sfs_fs *sfs, uint32_t *entp, uint32_t index, bool create, uint32_t *ino_store) {
9000000000019940:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
9000000000019944:	29c12061 	st.d	$r1,$r3,72(0x48)
9000000000019948:	29c10076 	st.d	$r22,$r3,64(0x40)
900000000001994c:	02c14076 	addi.d	$r22,$r3,80(0x50)
9000000000019950:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
9000000000019954:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
9000000000019958:	001500cd 	move	$r13,$r6
900000000001995c:	001500ec 	move	$r12,$r7
9000000000019960:	29fec2c8 	st.d	$r8,$r22,-80(0xfb0)
9000000000019964:	004081ad 	slli.w	$r13,$r13,0x0
9000000000019968:	29bef2cd 	st.w	$r13,$r22,-68(0xfbc)
900000000001996c:	0040818c 	slli.w	$r12,$r12,0x0
9000000000019970:	29bee2cc 	st.w	$r12,$r22,-72(0xfb8)
    assert(index < SFS_BLK_NENTRY);
9000000000019974:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
9000000000019978:	0015018d 	move	$r13,$r12
900000000001997c:	028ffc0c 	addi.w	$r12,$r0,1023(0x3ff)
9000000000019980:	6c001d8d 	bgeu	$r12,$r13,28(0x1c) # 900000000001999c <sfs_bmap_get_sub_nolock+0x5c>
9000000000019984:	1c000126 	pcaddu12i	$r6,9(0x9)
9000000000019988:	02db90c6 	addi.d	$r6,$r6,1764(0x6e4)
900000000001998c:	02826805 	addi.w	$r5,$r0,154(0x9a)
9000000000019990:	1c000124 	pcaddu12i	$r4,9(0x9)
9000000000019994:	02d5c084 	addi.d	$r4,$r4,1392(0x570)
9000000000019998:	5732ebff 	bl	-52504(0xfff32e8) # 900000000000cc80 <__panic>
    int ret;
    uint32_t ent, ino = 0;
900000000001999c:	29bf62c0 	st.w	$r0,$r22,-40(0xfd8)
    off_t offset = index * sizeof(uint32_t);
90000000000199a0:	2abef2cc 	ld.wu	$r12,$r22,-68(0xfbc)
90000000000199a4:	0041098c 	slli.d	$r12,$r12,0x2
90000000000199a8:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    if ((ent = *entp) != 0) {
90000000000199ac:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
90000000000199b0:	2880018c 	ld.w	$r12,$r12,0
90000000000199b4:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
90000000000199b8:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
90000000000199bc:	40005180 	beqz	$r12,80(0x50) # 9000000000019a0c <sfs_bmap_get_sub_nolock+0xcc>
        if ((ret = sfs_rbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
90000000000199c0:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
90000000000199c4:	02ff62cd 	addi.d	$r13,$r22,-40(0xfd8)
90000000000199c8:	28ff82c8 	ld.d	$r8,$r22,-32(0xfe0)
90000000000199cc:	00150187 	move	$r7,$r12
90000000000199d0:	02801006 	addi.w	$r6,$r0,4(0x4)
90000000000199d4:	001501a5 	move	$r5,$r13
90000000000199d8:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
90000000000199dc:	54278c00 	bl	10124(0x278c) # 900000000001c168 <sfs_rbuf>
90000000000199e0:	0015008c 	move	$r12,$r4
90000000000199e4:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
90000000000199e8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000199ec:	40000d80 	beqz	$r12,12(0xc) # 90000000000199f8 <sfs_bmap_get_sub_nolock+0xb8>
            return ret;
90000000000199f0:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000000199f4:	50011800 	b	280(0x118) # 9000000000019b0c <sfs_bmap_get_sub_nolock+0x1cc>
        }
        if (ino != 0 || !create) {
90000000000199f8:	28bf62cc 	ld.w	$r12,$r22,-40(0xfd8)
90000000000199fc:	4400a580 	bnez	$r12,164(0xa4) # 9000000000019aa0 <sfs_bmap_get_sub_nolock+0x160>
9000000000019a00:	28bee2cc 	ld.w	$r12,$r22,-72(0xfb8)
9000000000019a04:	44003980 	bnez	$r12,56(0x38) # 9000000000019a3c <sfs_bmap_get_sub_nolock+0xfc>
            goto out;
9000000000019a08:	50009800 	b	152(0x98) # 9000000000019aa0 <sfs_bmap_get_sub_nolock+0x160>
        }
    }
    else {
        if (!create) {
9000000000019a0c:	28bee2cc 	ld.w	$r12,$r22,-72(0xfb8)
9000000000019a10:	40009980 	beqz	$r12,152(0x98) # 9000000000019aa8 <sfs_bmap_get_sub_nolock+0x168>
            goto out;
        }
        if ((ret = sfs_block_alloc(sfs, &ent)) != 0) {
9000000000019a14:	02ff72cc 	addi.d	$r12,$r22,-36(0xfdc)
9000000000019a18:	00150185 	move	$r5,$r12
9000000000019a1c:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000019a20:	57f9abff 	bl	-1624(0xffff9a8) # 90000000000193c8 <sfs_block_alloc>
9000000000019a24:	0015008c 	move	$r12,$r4
9000000000019a28:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000019a2c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000019a30:	40000d80 	beqz	$r12,12(0xc) # 9000000000019a3c <sfs_bmap_get_sub_nolock+0xfc>
            return ret;
9000000000019a34:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000019a38:	5000d400 	b	212(0xd4) # 9000000000019b0c <sfs_bmap_get_sub_nolock+0x1cc>
        }
    }

    if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
9000000000019a3c:	02ff62cc 	addi.d	$r12,$r22,-40(0xfd8)
9000000000019a40:	00150185 	move	$r5,$r12
9000000000019a44:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000019a48:	57f983ff 	bl	-1664(0xffff980) # 90000000000193c8 <sfs_block_alloc>
9000000000019a4c:	0015008c 	move	$r12,$r4
9000000000019a50:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000019a54:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000019a58:	44008d80 	bnez	$r12,140(0x8c) # 9000000000019ae4 <sfs_bmap_get_sub_nolock+0x1a4>
        goto failed_cleanup;
    }
    if ((ret = sfs_wbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
9000000000019a5c:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000019a60:	02ff62cd 	addi.d	$r13,$r22,-40(0xfd8)
9000000000019a64:	28ff82c8 	ld.d	$r8,$r22,-32(0xfe0)
9000000000019a68:	00150187 	move	$r7,$r12
9000000000019a6c:	02801006 	addi.w	$r6,$r0,4(0x4)
9000000000019a70:	001501a5 	move	$r5,$r13
9000000000019a74:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000019a78:	5427d000 	bl	10192(0x27d0) # 900000000001c248 <sfs_wbuf>
9000000000019a7c:	0015008c 	move	$r12,$r4
9000000000019a80:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
9000000000019a84:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000000019a88:	40002980 	beqz	$r12,40(0x28) # 9000000000019ab0 <sfs_bmap_get_sub_nolock+0x170>
        sfs_block_free(sfs, ino);
9000000000019a8c:	28bf62cc 	ld.w	$r12,$r22,-40(0xfd8)
9000000000019a90:	00150185 	move	$r5,$r12
9000000000019a94:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000019a98:	57fa23ff 	bl	-1504(0xffffa20) # 90000000000194b8 <sfs_block_free>
        goto failed_cleanup;
9000000000019a9c:	50004c00 	b	76(0x4c) # 9000000000019ae8 <sfs_bmap_get_sub_nolock+0x1a8>
            goto out;
9000000000019aa0:	03400000 	andi	$r0,$r0,0x0
9000000000019aa4:	50001000 	b	16(0x10) # 9000000000019ab4 <sfs_bmap_get_sub_nolock+0x174>
            goto out;
9000000000019aa8:	03400000 	andi	$r0,$r0,0x0
9000000000019aac:	50000800 	b	8(0x8) # 9000000000019ab4 <sfs_bmap_get_sub_nolock+0x174>
    }

out:
9000000000019ab0:	03400000 	andi	$r0,$r0,0x0
    if (ent != *entp) {
9000000000019ab4:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000019ab8:	2880018d 	ld.w	$r13,$r12,0
9000000000019abc:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000019ac0:	580011ac 	beq	$r13,$r12,16(0x10) # 9000000000019ad0 <sfs_bmap_get_sub_nolock+0x190>
        *entp = ent;
9000000000019ac4:	28bf72cd 	ld.w	$r13,$r22,-36(0xfdc)
9000000000019ac8:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000019acc:	2980018d 	st.w	$r13,$r12,0
    }
    *ino_store = ino;
9000000000019ad0:	28bf62cd 	ld.w	$r13,$r22,-40(0xfd8)
9000000000019ad4:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
9000000000019ad8:	2980018d 	st.w	$r13,$r12,0
    return 0;
9000000000019adc:	0015000c 	move	$r12,$r0
9000000000019ae0:	50002c00 	b	44(0x2c) # 9000000000019b0c <sfs_bmap_get_sub_nolock+0x1cc>
        goto failed_cleanup;
9000000000019ae4:	03400000 	andi	$r0,$r0,0x0

failed_cleanup:
    if (ent != *entp) {
9000000000019ae8:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000019aec:	2880018d 	ld.w	$r13,$r12,0
9000000000019af0:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000019af4:	580015ac 	beq	$r13,$r12,20(0x14) # 9000000000019b08 <sfs_bmap_get_sub_nolock+0x1c8>
        sfs_block_free(sfs, ent);
9000000000019af8:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000019afc:	00150185 	move	$r5,$r12
9000000000019b00:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000019b04:	57f9b7ff 	bl	-1612(0xffff9b4) # 90000000000194b8 <sfs_block_free>
    }
    return ret;
9000000000019b08:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
9000000000019b0c:	00150184 	move	$r4,$r12
9000000000019b10:	28c12061 	ld.d	$r1,$r3,72(0x48)
9000000000019b14:	28c10076 	ld.d	$r22,$r3,64(0x40)
9000000000019b18:	02c14063 	addi.d	$r3,$r3,80(0x50)
9000000000019b1c:	4c000020 	jirl	$r0,$r1,0

9000000000019b20 <sfs_bmap_get_nolock>:

static int
sfs_bmap_get_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index, bool create, uint32_t *ino_store) {
9000000000019b20:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
9000000000019b24:	29c12061 	st.d	$r1,$r3,72(0x48)
9000000000019b28:	29c10076 	st.d	$r22,$r3,64(0x40)
9000000000019b2c:	02c14076 	addi.d	$r22,$r3,80(0x50)
9000000000019b30:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
9000000000019b34:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
9000000000019b38:	001500cd 	move	$r13,$r6
9000000000019b3c:	001500ec 	move	$r12,$r7
9000000000019b40:	29fec2c8 	st.d	$r8,$r22,-80(0xfb0)
9000000000019b44:	004081ad 	slli.w	$r13,$r13,0x0
9000000000019b48:	29bef2cd 	st.w	$r13,$r22,-68(0xfbc)
9000000000019b4c:	0040818c 	slli.w	$r12,$r12,0x0
9000000000019b50:	29bee2cc 	st.w	$r12,$r22,-72(0xfb8)
    struct sfs_disk_inode *din = sin->din;
9000000000019b54:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000019b58:	28c0018c 	ld.d	$r12,$r12,0
9000000000019b5c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    int ret;
    uint32_t ent, ino;
    if (index < SFS_NDIRECT) {
9000000000019b60:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
9000000000019b64:	0015018d 	move	$r13,$r12
9000000000019b68:	02802c0c 	addi.w	$r12,$r0,11(0xb)
9000000000019b6c:	68007d8d 	bltu	$r12,$r13,124(0x7c) # 9000000000019be8 <sfs_bmap_get_nolock+0xc8>
        if ((ino = din->direct[index]) == 0 && create) {
9000000000019b70:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000019b74:	2abef2cc 	ld.wu	$r12,$r22,-68(0xfbc)
9000000000019b78:	0041098c 	slli.d	$r12,$r12,0x2
9000000000019b7c:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000019b80:	2880318c 	ld.w	$r12,$r12,12(0xc)
9000000000019b84:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
9000000000019b88:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000019b8c:	44017580 	bnez	$r12,372(0x174) # 9000000000019d00 <sfs_bmap_get_nolock+0x1e0>
9000000000019b90:	28bee2cc 	ld.w	$r12,$r22,-72(0xfb8)
9000000000019b94:	40016d80 	beqz	$r12,364(0x16c) # 9000000000019d00 <sfs_bmap_get_nolock+0x1e0>
            if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
9000000000019b98:	02ff72cc 	addi.d	$r12,$r22,-36(0xfdc)
9000000000019b9c:	00150185 	move	$r5,$r12
9000000000019ba0:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000019ba4:	57f827ff 	bl	-2012(0xffff824) # 90000000000193c8 <sfs_block_alloc>
9000000000019ba8:	0015008c 	move	$r12,$r4
9000000000019bac:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
9000000000019bb0:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000019bb4:	40000d80 	beqz	$r12,12(0xc) # 9000000000019bc0 <sfs_bmap_get_nolock+0xa0>
                return ret;
9000000000019bb8:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000019bbc:	5001a000 	b	416(0x1a0) # 9000000000019d5c <sfs_bmap_get_nolock+0x23c>
            }
            din->direct[index] = ino;
9000000000019bc0:	28bf72cd 	ld.w	$r13,$r22,-36(0xfdc)
9000000000019bc4:	28ffa2ce 	ld.d	$r14,$r22,-24(0xfe8)
9000000000019bc8:	2abef2cc 	ld.wu	$r12,$r22,-68(0xfbc)
9000000000019bcc:	0041098c 	slli.d	$r12,$r12,0x2
9000000000019bd0:	0010b1cc 	add.d	$r12,$r14,$r12
9000000000019bd4:	2980318d 	st.w	$r13,$r12,12(0xc)
            sin->dirty = 1;
9000000000019bd8:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000019bdc:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000019be0:	2980318d 	st.w	$r13,$r12,12(0xc)
        }
        goto out;
9000000000019be4:	50011c00 	b	284(0x11c) # 9000000000019d00 <sfs_bmap_get_nolock+0x1e0>
    }

    index -= SFS_NDIRECT;
9000000000019be8:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
9000000000019bec:	02bfd18c 	addi.w	$r12,$r12,-12(0xff4)
9000000000019bf0:	29bef2cc 	st.w	$r12,$r22,-68(0xfbc)
    if (index < SFS_BLK_NENTRY) {
9000000000019bf4:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
9000000000019bf8:	0015018d 	move	$r13,$r12
9000000000019bfc:	028ffc0c 	addi.w	$r12,$r0,1023(0x3ff)
9000000000019c00:	6800a18d 	bltu	$r12,$r13,160(0xa0) # 9000000000019ca0 <sfs_bmap_get_nolock+0x180>
        ent = din->indirect;
9000000000019c04:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000019c08:	2880f18c 	ld.w	$r12,$r12,60(0x3c)
9000000000019c0c:	29bf82cc 	st.w	$r12,$r22,-32(0xfe0)
        if ((ret = sfs_bmap_get_sub_nolock(sfs, &ent, index, create, &ino)) != 0) {
9000000000019c10:	02ff72cf 	addi.d	$r15,$r22,-36(0xfdc)
9000000000019c14:	28bee2cd 	ld.w	$r13,$r22,-72(0xfb8)
9000000000019c18:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
9000000000019c1c:	02ff82ce 	addi.d	$r14,$r22,-32(0xfe0)
9000000000019c20:	001501e8 	move	$r8,$r15
9000000000019c24:	001501a7 	move	$r7,$r13
9000000000019c28:	00150186 	move	$r6,$r12
9000000000019c2c:	001501c5 	move	$r5,$r14
9000000000019c30:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000019c34:	57fd0fff 	bl	-756(0xffffd0c) # 9000000000019940 <sfs_bmap_get_sub_nolock>
9000000000019c38:	0015008c 	move	$r12,$r4
9000000000019c3c:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
9000000000019c40:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000019c44:	40000d80 	beqz	$r12,12(0xc) # 9000000000019c50 <sfs_bmap_get_nolock+0x130>
            return ret;
9000000000019c48:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000019c4c:	50011000 	b	272(0x110) # 9000000000019d5c <sfs_bmap_get_nolock+0x23c>
        }
        if (ent != din->indirect) {
9000000000019c50:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000019c54:	2880f18d 	ld.w	$r13,$r12,60(0x3c)
9000000000019c58:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
9000000000019c5c:	5800adac 	beq	$r13,$r12,172(0xac) # 9000000000019d08 <sfs_bmap_get_nolock+0x1e8>
            assert(din->indirect == 0);
9000000000019c60:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000019c64:	2880f18c 	ld.w	$r12,$r12,60(0x3c)
9000000000019c68:	40001d80 	beqz	$r12,28(0x1c) # 9000000000019c84 <sfs_bmap_get_nolock+0x164>
9000000000019c6c:	1c000126 	pcaddu12i	$r6,9(0x9)
9000000000019c70:	02d0b0c6 	addi.d	$r6,$r6,1068(0x42c)
9000000000019c74:	02837005 	addi.w	$r5,$r0,220(0xdc)
9000000000019c78:	1c000124 	pcaddu12i	$r4,9(0x9)
9000000000019c7c:	02ca2084 	addi.d	$r4,$r4,648(0x288)
9000000000019c80:	573003ff 	bl	-53248(0xfff3000) # 900000000000cc80 <__panic>
            din->indirect = ent;
9000000000019c84:	28bf82cd 	ld.w	$r13,$r22,-32(0xfe0)
9000000000019c88:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000019c8c:	2980f18d 	st.w	$r13,$r12,60(0x3c)
            sin->dirty = 1;
9000000000019c90:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000019c94:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000019c98:	2980318d 	st.w	$r13,$r12,12(0xc)
        }
        goto out;
9000000000019c9c:	50006c00 	b	108(0x6c) # 9000000000019d08 <sfs_bmap_get_nolock+0x1e8>
    }

    index -= SFS_BLK_NENTRY;
9000000000019ca0:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
9000000000019ca4:	02b0018c 	addi.w	$r12,$r12,-1024(0xc00)
9000000000019ca8:	29bef2cc 	st.w	$r12,$r22,-68(0xfbc)
    if ((ent = ino) != 0) {
9000000000019cac:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000019cb0:	29bf82cc 	st.w	$r12,$r22,-32(0xfe0)
9000000000019cb4:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
9000000000019cb8:	40005980 	beqz	$r12,88(0x58) # 9000000000019d10 <sfs_bmap_get_nolock+0x1f0>
        if ((ret = sfs_bmap_get_sub_nolock(sfs, &ent, index % SFS_BLK_NENTRY, create, &ino)) != 0) {
9000000000019cbc:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
9000000000019cc0:	034ffd8c 	andi	$r12,$r12,0x3ff
9000000000019cc4:	02ff72cf 	addi.d	$r15,$r22,-36(0xfdc)
9000000000019cc8:	28bee2cd 	ld.w	$r13,$r22,-72(0xfb8)
9000000000019ccc:	02ff82ce 	addi.d	$r14,$r22,-32(0xfe0)
9000000000019cd0:	001501e8 	move	$r8,$r15
9000000000019cd4:	001501a7 	move	$r7,$r13
9000000000019cd8:	00150186 	move	$r6,$r12
9000000000019cdc:	001501c5 	move	$r5,$r14
9000000000019ce0:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000019ce4:	57fc5fff 	bl	-932(0xffffc5c) # 9000000000019940 <sfs_bmap_get_sub_nolock>
9000000000019ce8:	0015008c 	move	$r12,$r4
9000000000019cec:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
9000000000019cf0:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000019cf4:	40001d80 	beqz	$r12,28(0x1c) # 9000000000019d10 <sfs_bmap_get_nolock+0x1f0>
            return ret;
9000000000019cf8:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000019cfc:	50006000 	b	96(0x60) # 9000000000019d5c <sfs_bmap_get_nolock+0x23c>
        goto out;
9000000000019d00:	03400000 	andi	$r0,$r0,0x0
9000000000019d04:	50001000 	b	16(0x10) # 9000000000019d14 <sfs_bmap_get_nolock+0x1f4>
        goto out;
9000000000019d08:	03400000 	andi	$r0,$r0,0x0
9000000000019d0c:	50000800 	b	8(0x8) # 9000000000019d14 <sfs_bmap_get_nolock+0x1f4>
        }
    }

out:
9000000000019d10:	03400000 	andi	$r0,$r0,0x0
    assert(ino == 0 || sfs_block_inuse(sfs, ino));
9000000000019d14:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000019d18:	40003580 	beqz	$r12,52(0x34) # 9000000000019d4c <sfs_bmap_get_nolock+0x22c>
9000000000019d1c:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000019d20:	00150185 	move	$r5,$r12
9000000000019d24:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000019d28:	57f603ff 	bl	-2560(0xffff600) # 9000000000019328 <sfs_block_inuse>
9000000000019d2c:	0015008c 	move	$r12,$r4
9000000000019d30:	44001d80 	bnez	$r12,28(0x1c) # 9000000000019d4c <sfs_bmap_get_nolock+0x22c>
9000000000019d34:	1c000126 	pcaddu12i	$r6,9(0x9)
9000000000019d38:	02ce30c6 	addi.d	$r6,$r6,908(0x38c)
9000000000019d3c:	0283ac05 	addi.w	$r5,$r0,235(0xeb)
9000000000019d40:	1c000124 	pcaddu12i	$r4,9(0x9)
9000000000019d44:	02c70084 	addi.d	$r4,$r4,448(0x1c0)
9000000000019d48:	572f3bff 	bl	-53448(0xfff2f38) # 900000000000cc80 <__panic>
    *ino_store = ino;
9000000000019d4c:	28bf72cd 	ld.w	$r13,$r22,-36(0xfdc)
9000000000019d50:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
9000000000019d54:	2980018d 	st.w	$r13,$r12,0
    return 0;
9000000000019d58:	0015000c 	move	$r12,$r0
}
9000000000019d5c:	00150184 	move	$r4,$r12
9000000000019d60:	28c12061 	ld.d	$r1,$r3,72(0x48)
9000000000019d64:	28c10076 	ld.d	$r22,$r3,64(0x40)
9000000000019d68:	02c14063 	addi.d	$r3,$r3,80(0x50)
9000000000019d6c:	4c000020 	jirl	$r0,$r1,0

9000000000019d70 <sfs_bmap_free_sub_nolock>:

static int
sfs_bmap_free_sub_nolock(struct sfs_fs *sfs, uint32_t ent, uint32_t index) {
9000000000019d70:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000000019d74:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000000019d78:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000000019d7c:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000000019d80:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
9000000000019d84:	001500ad 	move	$r13,$r5
9000000000019d88:	001500cc 	move	$r12,$r6
9000000000019d8c:	004081ad 	slli.w	$r13,$r13,0x0
9000000000019d90:	29bf12cd 	st.w	$r13,$r22,-60(0xfc4)
9000000000019d94:	0040818c 	slli.w	$r12,$r12,0x0
9000000000019d98:	29bf02cc 	st.w	$r12,$r22,-64(0xfc0)
    assert(sfs_block_inuse(sfs, ent) && index < SFS_BLK_NENTRY);
9000000000019d9c:	28bf12cc 	ld.w	$r12,$r22,-60(0xfc4)
9000000000019da0:	00150185 	move	$r5,$r12
9000000000019da4:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000019da8:	57f583ff 	bl	-2688(0xffff580) # 9000000000019328 <sfs_block_inuse>
9000000000019dac:	0015008c 	move	$r12,$r4
9000000000019db0:	40001580 	beqz	$r12,20(0x14) # 9000000000019dc4 <sfs_bmap_free_sub_nolock+0x54>
9000000000019db4:	28bf02cc 	ld.w	$r12,$r22,-64(0xfc0)
9000000000019db8:	0015018d 	move	$r13,$r12
9000000000019dbc:	028ffc0c 	addi.w	$r12,$r0,1023(0x3ff)
9000000000019dc0:	6c001d8d 	bgeu	$r12,$r13,28(0x1c) # 9000000000019ddc <sfs_bmap_free_sub_nolock+0x6c>
9000000000019dc4:	1c000126 	pcaddu12i	$r6,9(0x9)
9000000000019dc8:	02ccd0c6 	addi.d	$r6,$r6,820(0x334)
9000000000019dcc:	0283c805 	addi.w	$r5,$r0,242(0xf2)
9000000000019dd0:	1c000124 	pcaddu12i	$r4,9(0x9)
9000000000019dd4:	02c4c084 	addi.d	$r4,$r4,304(0x130)
9000000000019dd8:	572eabff 	bl	-53592(0xfff2ea8) # 900000000000cc80 <__panic>
    int ret;
    uint32_t ino, zero = 0;
9000000000019ddc:	29bf72c0 	st.w	$r0,$r22,-36(0xfdc)
    off_t offset = index * sizeof(uint32_t);
9000000000019de0:	2abf02cc 	ld.wu	$r12,$r22,-64(0xfc0)
9000000000019de4:	0041098c 	slli.d	$r12,$r12,0x2
9000000000019de8:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    if ((ret = sfs_rbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
9000000000019dec:	28bf12cc 	ld.w	$r12,$r22,-60(0xfc4)
9000000000019df0:	02ff82cd 	addi.d	$r13,$r22,-32(0xfe0)
9000000000019df4:	28ffa2c8 	ld.d	$r8,$r22,-24(0xfe8)
9000000000019df8:	00150187 	move	$r7,$r12
9000000000019dfc:	02801006 	addi.w	$r6,$r0,4(0x4)
9000000000019e00:	001501a5 	move	$r5,$r13
9000000000019e04:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000019e08:	54236000 	bl	9056(0x2360) # 900000000001c168 <sfs_rbuf>
9000000000019e0c:	0015008c 	move	$r12,$r4
9000000000019e10:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
9000000000019e14:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000019e18:	40000d80 	beqz	$r12,12(0xc) # 9000000000019e24 <sfs_bmap_free_sub_nolock+0xb4>
        return ret;
9000000000019e1c:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000019e20:	50005800 	b	88(0x58) # 9000000000019e78 <sfs_bmap_free_sub_nolock+0x108>
    }
    if (ino != 0) {
9000000000019e24:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
9000000000019e28:	40004d80 	beqz	$r12,76(0x4c) # 9000000000019e74 <sfs_bmap_free_sub_nolock+0x104>
        if ((ret = sfs_wbuf(sfs, &zero, sizeof(uint32_t), ent, offset)) != 0) {
9000000000019e2c:	28bf12cc 	ld.w	$r12,$r22,-60(0xfc4)
9000000000019e30:	02ff72cd 	addi.d	$r13,$r22,-36(0xfdc)
9000000000019e34:	28ffa2c8 	ld.d	$r8,$r22,-24(0xfe8)
9000000000019e38:	00150187 	move	$r7,$r12
9000000000019e3c:	02801006 	addi.w	$r6,$r0,4(0x4)
9000000000019e40:	001501a5 	move	$r5,$r13
9000000000019e44:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000019e48:	54240000 	bl	9216(0x2400) # 900000000001c248 <sfs_wbuf>
9000000000019e4c:	0015008c 	move	$r12,$r4
9000000000019e50:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
9000000000019e54:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000019e58:	40000d80 	beqz	$r12,12(0xc) # 9000000000019e64 <sfs_bmap_free_sub_nolock+0xf4>
            return ret;
9000000000019e5c:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000019e60:	50001800 	b	24(0x18) # 9000000000019e78 <sfs_bmap_free_sub_nolock+0x108>
        }
        sfs_block_free(sfs, ino);
9000000000019e64:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
9000000000019e68:	00150185 	move	$r5,$r12
9000000000019e6c:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000019e70:	57f64bff 	bl	-2488(0xffff648) # 90000000000194b8 <sfs_block_free>
    }
    return 0;
9000000000019e74:	0015000c 	move	$r12,$r0
}
9000000000019e78:	00150184 	move	$r4,$r12
9000000000019e7c:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000000019e80:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000000019e84:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000000019e88:	4c000020 	jirl	$r0,$r1,0

9000000000019e8c <sfs_bmap_free_nolock>:

static int
sfs_bmap_free_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index) {
9000000000019e8c:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
9000000000019e90:	29c12061 	st.d	$r1,$r3,72(0x48)
9000000000019e94:	29c10076 	st.d	$r22,$r3,64(0x40)
9000000000019e98:	02c14076 	addi.d	$r22,$r3,80(0x50)
9000000000019e9c:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
9000000000019ea0:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
9000000000019ea4:	001500cc 	move	$r12,$r6
9000000000019ea8:	0040818c 	slli.w	$r12,$r12,0x0
9000000000019eac:	29bef2cc 	st.w	$r12,$r22,-68(0xfbc)
    struct sfs_disk_inode *din = sin->din;
9000000000019eb0:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000019eb4:	28c0018c 	ld.d	$r12,$r12,0
9000000000019eb8:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    int ret;
    uint32_t ent, ino;
    if (index < SFS_NDIRECT) {
9000000000019ebc:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
9000000000019ec0:	0015018d 	move	$r13,$r12
9000000000019ec4:	02802c0c 	addi.w	$r12,$r0,11(0xb)
9000000000019ec8:	68005d8d 	bltu	$r12,$r13,92(0x5c) # 9000000000019f24 <sfs_bmap_free_nolock+0x98>
        if ((ino = din->direct[index]) != 0) {
9000000000019ecc:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000019ed0:	2abef2cc 	ld.wu	$r12,$r22,-68(0xfbc)
9000000000019ed4:	0041098c 	slli.d	$r12,$r12,0x2
9000000000019ed8:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000019edc:	2880318c 	ld.w	$r12,$r12,12(0xc)
9000000000019ee0:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
9000000000019ee4:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000019ee8:	40003580 	beqz	$r12,52(0x34) # 9000000000019f1c <sfs_bmap_free_nolock+0x90>
            sfs_block_free(sfs, ino);
9000000000019eec:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
9000000000019ef0:	00150185 	move	$r5,$r12
9000000000019ef4:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000019ef8:	57f5c3ff 	bl	-2624(0xffff5c0) # 90000000000194b8 <sfs_block_free>
            din->direct[index] = 0;
9000000000019efc:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
9000000000019f00:	2abef2cc 	ld.wu	$r12,$r22,-68(0xfbc)
9000000000019f04:	0041098c 	slli.d	$r12,$r12,0x2
9000000000019f08:	0010b1ac 	add.d	$r12,$r13,$r12
9000000000019f0c:	29803180 	st.w	$r0,$r12,12(0xc)
            sin->dirty = 1;
9000000000019f10:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000019f14:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000000019f18:	2980318d 	st.w	$r13,$r12,12(0xc)
        }
        return 0;
9000000000019f1c:	0015000c 	move	$r12,$r0
9000000000019f20:	50007c00 	b	124(0x7c) # 9000000000019f9c <sfs_bmap_free_nolock+0x110>
    }

    index -= SFS_NDIRECT;
9000000000019f24:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
9000000000019f28:	02bfd18c 	addi.w	$r12,$r12,-12(0xff4)
9000000000019f2c:	29bef2cc 	st.w	$r12,$r22,-68(0xfbc)
    if (index < SFS_BLK_NENTRY) {
9000000000019f30:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
9000000000019f34:	0015018d 	move	$r13,$r12
9000000000019f38:	028ffc0c 	addi.w	$r12,$r0,1023(0x3ff)
9000000000019f3c:	6800518d 	bltu	$r12,$r13,80(0x50) # 9000000000019f8c <sfs_bmap_free_nolock+0x100>
        if ((ent = din->indirect) != 0) {
9000000000019f40:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000019f44:	2880f18c 	ld.w	$r12,$r12,60(0x3c)
9000000000019f48:	29bf82cc 	st.w	$r12,$r22,-32(0xfe0)
9000000000019f4c:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
9000000000019f50:	40003580 	beqz	$r12,52(0x34) # 9000000000019f84 <sfs_bmap_free_nolock+0xf8>
            if ((ret = sfs_bmap_free_sub_nolock(sfs, ent, index)) != 0) {
9000000000019f54:	28bef2cd 	ld.w	$r13,$r22,-68(0xfbc)
9000000000019f58:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
9000000000019f5c:	001501a6 	move	$r6,$r13
9000000000019f60:	00150185 	move	$r5,$r12
9000000000019f64:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000000019f68:	57fe0bff 	bl	-504(0xffffe08) # 9000000000019d70 <sfs_bmap_free_sub_nolock>
9000000000019f6c:	0015008c 	move	$r12,$r4
9000000000019f70:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
9000000000019f74:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000019f78:	40000d80 	beqz	$r12,12(0xc) # 9000000000019f84 <sfs_bmap_free_nolock+0xf8>
                return ret;
9000000000019f7c:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000000019f80:	50001c00 	b	28(0x1c) # 9000000000019f9c <sfs_bmap_free_nolock+0x110>
            }
        }
        return 0;
9000000000019f84:	0015000c 	move	$r12,$r0
9000000000019f88:	50001400 	b	20(0x14) # 9000000000019f9c <sfs_bmap_free_nolock+0x110>
    }

    index -= SFS_BLK_NENTRY;
9000000000019f8c:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
9000000000019f90:	02b0018c 	addi.w	$r12,$r12,-1024(0xc00)
9000000000019f94:	29bef2cc 	st.w	$r12,$r22,-68(0xfbc)
    return 0;
9000000000019f98:	0015000c 	move	$r12,$r0
}
9000000000019f9c:	00150184 	move	$r4,$r12
9000000000019fa0:	28c12061 	ld.d	$r1,$r3,72(0x48)
9000000000019fa4:	28c10076 	ld.d	$r22,$r3,64(0x40)
9000000000019fa8:	02c14063 	addi.d	$r3,$r3,80(0x50)
9000000000019fac:	4c000020 	jirl	$r0,$r1,0

9000000000019fb0 <sfs_bmap_load_nolock>:

static int
sfs_bmap_load_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index, uint32_t *ino_store) {
9000000000019fb0:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
9000000000019fb4:	29c12061 	st.d	$r1,$r3,72(0x48)
9000000000019fb8:	29c10076 	st.d	$r22,$r3,64(0x40)
9000000000019fbc:	02c14076 	addi.d	$r22,$r3,80(0x50)
9000000000019fc0:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
9000000000019fc4:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
9000000000019fc8:	001500cc 	move	$r12,$r6
9000000000019fcc:	29fec2c7 	st.d	$r7,$r22,-80(0xfb0)
9000000000019fd0:	0040818c 	slli.w	$r12,$r12,0x0
9000000000019fd4:	29bef2cc 	st.w	$r12,$r22,-68(0xfbc)
    struct sfs_disk_inode *din = sin->din;
9000000000019fd8:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
9000000000019fdc:	28c0018c 	ld.d	$r12,$r12,0
9000000000019fe0:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    assert(index <= din->blocks);
9000000000019fe4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
9000000000019fe8:	2880218d 	ld.w	$r13,$r12,8(0x8)
9000000000019fec:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
9000000000019ff0:	6c001dac 	bgeu	$r13,$r12,28(0x1c) # 900000000001a00c <sfs_bmap_load_nolock+0x5c>
9000000000019ff4:	1c000126 	pcaddu12i	$r6,9(0x9)
9000000000019ff8:	02c530c6 	addi.d	$r6,$r6,332(0x14c)
9000000000019ffc:	02848405 	addi.w	$r5,$r0,289(0x121)
900000000001a000:	1c000124 	pcaddu12i	$r4,9(0x9)
900000000001a004:	02fc0084 	addi.d	$r4,$r4,-256(0xf00)
900000000001a008:	572c7bff 	bl	-54152(0xfff2c78) # 900000000000cc80 <__panic>
    int ret;
    uint32_t ino;
    bool create = (index == din->blocks);
900000000001a00c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001a010:	2880218d 	ld.w	$r13,$r12,8(0x8)
900000000001a014:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
900000000001a018:	0011b58c 	sub.d	$r12,$r12,$r13
900000000001a01c:	0240058c 	sltui	$r12,$r12,1(0x1)
900000000001a020:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
900000000001a024:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
    if ((ret = sfs_bmap_get_nolock(sfs, sin, index, create, &ino)) != 0) {
900000000001a028:	02ff72ce 	addi.d	$r14,$r22,-36(0xfdc)
900000000001a02c:	28bf92cd 	ld.w	$r13,$r22,-28(0xfe4)
900000000001a030:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
900000000001a034:	001501c8 	move	$r8,$r14
900000000001a038:	001501a7 	move	$r7,$r13
900000000001a03c:	00150186 	move	$r6,$r12
900000000001a040:	28ff02c5 	ld.d	$r5,$r22,-64(0xfc0)
900000000001a044:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
900000000001a048:	57fadbff 	bl	-1320(0xffffad8) # 9000000000019b20 <sfs_bmap_get_nolock>
900000000001a04c:	0015008c 	move	$r12,$r4
900000000001a050:	29bf82cc 	st.w	$r12,$r22,-32(0xfe0)
900000000001a054:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
900000000001a058:	40000d80 	beqz	$r12,12(0xc) # 900000000001a064 <sfs_bmap_load_nolock+0xb4>
        return ret;
900000000001a05c:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
900000000001a060:	50006c00 	b	108(0x6c) # 900000000001a0cc <sfs_bmap_load_nolock+0x11c>
    }
    assert(sfs_block_inuse(sfs, ino));
900000000001a064:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
900000000001a068:	00150185 	move	$r5,$r12
900000000001a06c:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
900000000001a070:	57f2bbff 	bl	-3400(0xffff2b8) # 9000000000019328 <sfs_block_inuse>
900000000001a074:	0015008c 	move	$r12,$r4
900000000001a078:	44001d80 	bnez	$r12,28(0x1c) # 900000000001a094 <sfs_bmap_load_nolock+0xe4>
900000000001a07c:	1c000126 	pcaddu12i	$r6,9(0x9)
900000000001a080:	02fcf0c6 	addi.d	$r6,$r6,-196(0xf3c)
900000000001a084:	0284a005 	addi.w	$r5,$r0,296(0x128)
900000000001a088:	1c000124 	pcaddu12i	$r4,9(0x9)
900000000001a08c:	02f9e084 	addi.d	$r4,$r4,-392(0xe78)
900000000001a090:	572bf3ff 	bl	-54288(0xfff2bf0) # 900000000000cc80 <__panic>
    if (create) {
900000000001a094:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000001a098:	40001d80 	beqz	$r12,28(0x1c) # 900000000001a0b4 <sfs_bmap_load_nolock+0x104>
        din->blocks ++;
900000000001a09c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001a0a0:	2880218c 	ld.w	$r12,$r12,8(0x8)
900000000001a0a4:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000001a0a8:	0015018d 	move	$r13,$r12
900000000001a0ac:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001a0b0:	2980218d 	st.w	$r13,$r12,8(0x8)
    }
    if (ino_store != NULL) {
900000000001a0b4:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000001a0b8:	40001180 	beqz	$r12,16(0x10) # 900000000001a0c8 <sfs_bmap_load_nolock+0x118>
        *ino_store = ino;
900000000001a0bc:	28bf72cd 	ld.w	$r13,$r22,-36(0xfdc)
900000000001a0c0:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000001a0c4:	2980018d 	st.w	$r13,$r12,0
    }
    return 0;
900000000001a0c8:	0015000c 	move	$r12,$r0
}
900000000001a0cc:	00150184 	move	$r4,$r12
900000000001a0d0:	28c12061 	ld.d	$r1,$r3,72(0x48)
900000000001a0d4:	28c10076 	ld.d	$r22,$r3,64(0x40)
900000000001a0d8:	02c14063 	addi.d	$r3,$r3,80(0x50)
900000000001a0dc:	4c000020 	jirl	$r0,$r1,0

900000000001a0e0 <sfs_bmap_truncate_nolock>:

static int
sfs_bmap_truncate_nolock(struct sfs_fs *sfs, struct sfs_inode *sin) {
900000000001a0e0:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001a0e4:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000001a0e8:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000001a0ec:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000001a0f0:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000001a0f4:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
    struct sfs_disk_inode *din = sin->din;
900000000001a0f8:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001a0fc:	28c0018c 	ld.d	$r12,$r12,0
900000000001a100:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    assert(din->blocks != 0);
900000000001a104:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001a108:	2880218c 	ld.w	$r12,$r12,8(0x8)
900000000001a10c:	44001d80 	bnez	$r12,28(0x1c) # 900000000001a128 <sfs_bmap_truncate_nolock+0x48>
900000000001a110:	1c000126 	pcaddu12i	$r6,9(0x9)
900000000001a114:	02c160c6 	addi.d	$r6,$r6,88(0x58)
900000000001a118:	0284d405 	addi.w	$r5,$r0,309(0x135)
900000000001a11c:	1c000124 	pcaddu12i	$r4,9(0x9)
900000000001a120:	02f79084 	addi.d	$r4,$r4,-540(0xde4)
900000000001a124:	572b5fff 	bl	-54436(0xfff2b5c) # 900000000000cc80 <__panic>
    int ret;
    if ((ret = sfs_bmap_free_nolock(sfs, sin, din->blocks - 1)) != 0) {
900000000001a128:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001a12c:	2880218c 	ld.w	$r12,$r12,8(0x8)
900000000001a130:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
900000000001a134:	00150186 	move	$r6,$r12
900000000001a138:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
900000000001a13c:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001a140:	57fd4fff 	bl	-692(0xffffd4c) # 9000000000019e8c <sfs_bmap_free_nolock>
900000000001a144:	0015008c 	move	$r12,$r4
900000000001a148:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
900000000001a14c:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000001a150:	40000d80 	beqz	$r12,12(0xc) # 900000000001a15c <sfs_bmap_truncate_nolock+0x7c>
        return ret;
900000000001a154:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000001a158:	50002c00 	b	44(0x2c) # 900000000001a184 <sfs_bmap_truncate_nolock+0xa4>
    }
    din->blocks --;
900000000001a15c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001a160:	2880218c 	ld.w	$r12,$r12,8(0x8)
900000000001a164:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
900000000001a168:	0015018d 	move	$r13,$r12
900000000001a16c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001a170:	2980218d 	st.w	$r13,$r12,8(0x8)
    sin->dirty = 1;
900000000001a174:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001a178:	0280040d 	addi.w	$r13,$r0,1(0x1)
900000000001a17c:	2980318d 	st.w	$r13,$r12,12(0xc)
    return 0;
900000000001a180:	0015000c 	move	$r12,$r0
}
900000000001a184:	00150184 	move	$r4,$r12
900000000001a188:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000001a18c:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000001a190:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001a194:	4c000020 	jirl	$r0,$r1,0

900000000001a198 <sfs_dirent_read_nolock>:

static int
sfs_dirent_read_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
900000000001a198:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000001a19c:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000001a1a0:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000001a1a4:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000001a1a8:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000001a1ac:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
900000000001a1b0:	001500cc 	move	$r12,$r6
900000000001a1b4:	29ff02c7 	st.d	$r7,$r22,-64(0xfc0)
900000000001a1b8:	0040818c 	slli.w	$r12,$r12,0x0
900000000001a1bc:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
    assert(_SFS_INODE_GET_TYPE(sin->din) == SFS_TYPE_DIR && (slot >= 0 && slot < sin->din->blocks));
900000000001a1c0:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001a1c4:	28c0018c 	ld.d	$r12,$r12,0
900000000001a1c8:	02c0118c 	addi.d	$r12,$r12,4(0x4)
900000000001a1cc:	2880018c 	ld.w	$r12,$r12,0
900000000001a1d0:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000001a1d4:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
900000000001a1d8:	140001ec 	lu12i.w	$r12,15(0xf)
900000000001a1dc:	03bffd8c 	ori	$r12,$r12,0xfff
900000000001a1e0:	0014b1ac 	and	$r12,$r13,$r12
900000000001a1e4:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000001a1e8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001a1ec:	0015018d 	move	$r13,$r12
900000000001a1f0:	0280080c 	addi.w	$r12,$r0,2(0x2)
900000000001a1f4:	5c0021ac 	bne	$r13,$r12,32(0x20) # 900000000001a214 <sfs_dirent_read_nolock+0x7c>
900000000001a1f8:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
900000000001a1fc:	60001980 	blt	$r12,$r0,24(0x18) # 900000000001a214 <sfs_dirent_read_nolock+0x7c>
900000000001a200:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001a204:	28c0018c 	ld.d	$r12,$r12,0
900000000001a208:	2880218d 	ld.w	$r13,$r12,8(0x8)
900000000001a20c:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
900000000001a210:	68001d8d 	bltu	$r12,$r13,28(0x1c) # 900000000001a22c <sfs_dirent_read_nolock+0x94>
900000000001a214:	1c000126 	pcaddu12i	$r6,9(0x9)
900000000001a218:	02fdf0c6 	addi.d	$r6,$r6,-132(0xf7c)
900000000001a21c:	02850405 	addi.w	$r5,$r0,321(0x141)
900000000001a220:	1c000124 	pcaddu12i	$r4,9(0x9)
900000000001a224:	02f38084 	addi.d	$r4,$r4,-800(0xce0)
900000000001a228:	572a5bff 	bl	-54696(0xfff2a58) # 900000000000cc80 <__panic>
    int ret;
    uint32_t ino;
    if ((ret = sfs_bmap_load_nolock(sfs, sin, slot, &ino)) != 0) {
900000000001a22c:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
900000000001a230:	02ff92cd 	addi.d	$r13,$r22,-28(0xfe4)
900000000001a234:	001501a7 	move	$r7,$r13
900000000001a238:	00150186 	move	$r6,$r12
900000000001a23c:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
900000000001a240:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001a244:	57fd6fff 	bl	-660(0xffffd6c) # 9000000000019fb0 <sfs_bmap_load_nolock>
900000000001a248:	0015008c 	move	$r12,$r4
900000000001a24c:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
900000000001a250:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000001a254:	40000d80 	beqz	$r12,12(0xc) # 900000000001a260 <sfs_dirent_read_nolock+0xc8>
        return ret;
900000000001a258:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000001a25c:	50007400 	b	116(0x74) # 900000000001a2d0 <sfs_dirent_read_nolock+0x138>
    }
    assert(sfs_block_inuse(sfs, ino));
900000000001a260:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000001a264:	00150185 	move	$r5,$r12
900000000001a268:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001a26c:	57f0bfff 	bl	-3908(0xffff0bc) # 9000000000019328 <sfs_block_inuse>
900000000001a270:	0015008c 	move	$r12,$r4
900000000001a274:	44001d80 	bnez	$r12,28(0x1c) # 900000000001a290 <sfs_dirent_read_nolock+0xf8>
900000000001a278:	1c000126 	pcaddu12i	$r6,9(0x9)
900000000001a27c:	02f500c6 	addi.d	$r6,$r6,-704(0xd40)
900000000001a280:	02851c05 	addi.w	$r5,$r0,327(0x147)
900000000001a284:	1c000124 	pcaddu12i	$r4,9(0x9)
900000000001a288:	02f1f084 	addi.d	$r4,$r4,-900(0xc7c)
900000000001a28c:	5729f7ff 	bl	-54796(0xfff29f4) # 900000000000cc80 <__panic>
    if ((ret = sfs_rbuf(sfs, entry, sizeof(struct sfs_disk_entry), ino, 0)) != 0) {
900000000001a290:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000001a294:	00150008 	move	$r8,$r0
900000000001a298:	00150187 	move	$r7,$r12
900000000001a29c:	02841006 	addi.w	$r6,$r0,260(0x104)
900000000001a2a0:	28ff02c5 	ld.d	$r5,$r22,-64(0xfc0)
900000000001a2a4:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001a2a8:	541ec000 	bl	7872(0x1ec0) # 900000000001c168 <sfs_rbuf>
900000000001a2ac:	0015008c 	move	$r12,$r4
900000000001a2b0:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
900000000001a2b4:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000001a2b8:	40000d80 	beqz	$r12,12(0xc) # 900000000001a2c4 <sfs_dirent_read_nolock+0x12c>
        return ret;
900000000001a2bc:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000001a2c0:	50001000 	b	16(0x10) # 900000000001a2d0 <sfs_dirent_read_nolock+0x138>
    }
    entry->name[SFS_MAX_FNAME_LEN] = '\0';
900000000001a2c4:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000001a2c8:	29040d80 	st.b	$r0,$r12,259(0x103)
    return 0;
900000000001a2cc:	0015000c 	move	$r12,$r0
}
900000000001a2d0:	00150184 	move	$r4,$r12
900000000001a2d4:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000001a2d8:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000001a2dc:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000001a2e0:	4c000020 	jirl	$r0,$r1,0

900000000001a2e4 <sfs_dirent_search_nolock>:
            warn("sfs_dirent_unlink error: %e.\n", err);                            \
        }                                                                           \
    } while (0)

static int
sfs_dirent_search_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, const char *name, uint32_t *ino_store, int *slot, int *empty_slot) {
900000000001a2e4:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
900000000001a2e8:	29c16061 	st.d	$r1,$r3,88(0x58)
900000000001a2ec:	29c14076 	st.d	$r22,$r3,80(0x50)
900000000001a2f0:	02c18076 	addi.d	$r22,$r3,96(0x60)
900000000001a2f4:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
900000000001a2f8:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
900000000001a2fc:	29fee2c6 	st.d	$r6,$r22,-72(0xfb8)
900000000001a300:	29fec2c7 	st.d	$r7,$r22,-80(0xfb0)
900000000001a304:	29fea2c8 	st.d	$r8,$r22,-88(0xfa8)
900000000001a308:	29fe82c9 	st.d	$r9,$r22,-96(0xfa0)
    assert(strlen(name) <= SFS_MAX_FNAME_LEN);
900000000001a30c:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
900000000001a310:	569e9fff 	bl	-90468(0xffe9e9c) # 90000000000041ac <strlen>
900000000001a314:	0015008d 	move	$r13,$r4
900000000001a318:	0283fc0c 	addi.w	$r12,$r0,255(0xff)
900000000001a31c:	6c001d8d 	bgeu	$r12,$r13,28(0x1c) # 900000000001a338 <sfs_dirent_search_nolock+0x54>
900000000001a320:	1c000126 	pcaddu12i	$r6,9(0x9)
900000000001a324:	02fb80c6 	addi.d	$r6,$r6,-288(0xee0)
900000000001a328:	02858805 	addi.w	$r5,$r0,354(0x162)
900000000001a32c:	1c000124 	pcaddu12i	$r4,9(0x9)
900000000001a330:	02ef5084 	addi.d	$r4,$r4,-1068(0xbd4)
900000000001a334:	57294fff 	bl	-54964(0xfff294c) # 900000000000cc80 <__panic>
    struct sfs_disk_entry *entry;
    if ((entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
900000000001a338:	02841004 	addi.w	$r4,$r0,260(0x104)
900000000001a33c:	56d2ffff 	bl	-77060(0xffed2fc) # 9000000000007638 <kmalloc>
900000000001a340:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)
900000000001a344:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001a348:	44000d80 	bnez	$r12,12(0xc) # 900000000001a354 <sfs_dirent_search_nolock+0x70>
        return -E_NO_MEM;
900000000001a34c:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
900000000001a350:	50010800 	b	264(0x108) # 900000000001a458 <sfs_dirent_search_nolock+0x174>
    }

#define set_pvalue(x, v)            do { if ((x) != NULL) { *(x) = (v); } } while (0)
    int ret, i, nslots = sin->din->blocks;
900000000001a354:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000001a358:	28c0018c 	ld.d	$r12,$r12,0
900000000001a35c:	2880218c 	ld.w	$r12,$r12,8(0x8)
900000000001a360:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
    set_pvalue(empty_slot, nslots);
900000000001a364:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
900000000001a368:	40001180 	beqz	$r12,16(0x10) # 900000000001a378 <sfs_dirent_search_nolock+0x94>
900000000001a36c:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
900000000001a370:	28bf72cd 	ld.w	$r13,$r22,-36(0xfdc)
900000000001a374:	2980018d 	st.w	$r13,$r12,0
    for (i = 0; i < nslots; i ++) {
900000000001a378:	29bfa2c0 	st.w	$r0,$r22,-24(0xfe8)
900000000001a37c:	5000ac00 	b	172(0xac) # 900000000001a428 <sfs_dirent_search_nolock+0x144>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
900000000001a380:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000001a384:	28ff82c7 	ld.d	$r7,$r22,-32(0xfe0)
900000000001a388:	00150186 	move	$r6,$r12
900000000001a38c:	28ff02c5 	ld.d	$r5,$r22,-64(0xfc0)
900000000001a390:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
900000000001a394:	57fe07ff 	bl	-508(0xffffe04) # 900000000001a198 <sfs_dirent_read_nolock>
900000000001a398:	0015008c 	move	$r12,$r4
900000000001a39c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000001a3a0:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001a3a4:	44009d80 	bnez	$r12,156(0x9c) # 900000000001a440 <sfs_dirent_search_nolock+0x15c>
            goto out;
        }
        if (entry->ino == 0) {
900000000001a3a8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001a3ac:	2880018c 	ld.w	$r12,$r12,0
900000000001a3b0:	44001d80 	bnez	$r12,28(0x1c) # 900000000001a3cc <sfs_dirent_search_nolock+0xe8>
            set_pvalue(empty_slot, i);
900000000001a3b4:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
900000000001a3b8:	40006180 	beqz	$r12,96(0x60) # 900000000001a418 <sfs_dirent_search_nolock+0x134>
900000000001a3bc:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
900000000001a3c0:	28bfa2cd 	ld.w	$r13,$r22,-24(0xfe8)
900000000001a3c4:	2980018d 	st.w	$r13,$r12,0
            continue ;
900000000001a3c8:	50005000 	b	80(0x50) # 900000000001a418 <sfs_dirent_search_nolock+0x134>
        }
        if (strcmp(name, entry->name) == 0) {
900000000001a3cc:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001a3d0:	02c0118c 	addi.d	$r12,$r12,4(0x4)
900000000001a3d4:	00150185 	move	$r5,$r12
900000000001a3d8:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
900000000001a3dc:	569f57ff 	bl	-90284(0xffe9f54) # 9000000000004330 <strcmp>
900000000001a3e0:	0015008c 	move	$r12,$r4
900000000001a3e4:	44003980 	bnez	$r12,56(0x38) # 900000000001a41c <sfs_dirent_search_nolock+0x138>
            set_pvalue(slot, i);
900000000001a3e8:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000001a3ec:	40001180 	beqz	$r12,16(0x10) # 900000000001a3fc <sfs_dirent_search_nolock+0x118>
900000000001a3f0:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000001a3f4:	28bfa2cd 	ld.w	$r13,$r22,-24(0xfe8)
900000000001a3f8:	2980018d 	st.w	$r13,$r12,0
            set_pvalue(ino_store, entry->ino);
900000000001a3fc:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000001a400:	40004980 	beqz	$r12,72(0x48) # 900000000001a448 <sfs_dirent_search_nolock+0x164>
900000000001a404:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001a408:	2880018d 	ld.w	$r13,$r12,0
900000000001a40c:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000001a410:	2980018d 	st.w	$r13,$r12,0
            goto out;
900000000001a414:	50003400 	b	52(0x34) # 900000000001a448 <sfs_dirent_search_nolock+0x164>
            continue ;
900000000001a418:	03400000 	andi	$r0,$r0,0x0
    for (i = 0; i < nslots; i ++) {
900000000001a41c:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000001a420:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000001a424:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
900000000001a428:	28bfa2cd 	ld.w	$r13,$r22,-24(0xfe8)
900000000001a42c:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
900000000001a430:	63ff51ac 	blt	$r13,$r12,-176(0x3ff50) # 900000000001a380 <sfs_dirent_search_nolock+0x9c>
        }
    }
#undef set_pvalue
    ret = -E_NOENT;
900000000001a434:	02bfc00c 	addi.w	$r12,$r0,-16(0xff0)
900000000001a438:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000001a43c:	50001000 	b	16(0x10) # 900000000001a44c <sfs_dirent_search_nolock+0x168>
            goto out;
900000000001a440:	03400000 	andi	$r0,$r0,0x0
900000000001a444:	50000800 	b	8(0x8) # 900000000001a44c <sfs_dirent_search_nolock+0x168>
            goto out;
900000000001a448:	03400000 	andi	$r0,$r0,0x0
out:
    kfree(entry);
900000000001a44c:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
900000000001a450:	56d6c7ff 	bl	-76092(0xffed6c4) # 9000000000007b14 <kfree>
    return ret;
900000000001a454:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
900000000001a458:	00150184 	move	$r4,$r12
900000000001a45c:	28c16061 	ld.d	$r1,$r3,88(0x58)
900000000001a460:	28c14076 	ld.d	$r22,$r3,80(0x50)
900000000001a464:	02c18063 	addi.d	$r3,$r3,96(0x60)
900000000001a468:	4c000020 	jirl	$r0,$r1,0

900000000001a46c <sfs_dirent_findino_nolock>:

static int
sfs_dirent_findino_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t ino, struct sfs_disk_entry *entry) {
900000000001a46c:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000001a470:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000001a474:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000001a478:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000001a47c:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000001a480:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
900000000001a484:	001500cc 	move	$r12,$r6
900000000001a488:	29ff02c7 	st.d	$r7,$r22,-64(0xfc0)
900000000001a48c:	0040818c 	slli.w	$r12,$r12,0x0
900000000001a490:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
    int ret, i, nslots = sin->din->blocks;
900000000001a494:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001a498:	28c0018c 	ld.d	$r12,$r12,0
900000000001a49c:	2880218c 	ld.w	$r12,$r12,8(0x8)
900000000001a4a0:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
    for (i = 0; i < nslots; i ++) {
900000000001a4a4:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
900000000001a4a8:	50005800 	b	88(0x58) # 900000000001a500 <sfs_dirent_findino_nolock+0x94>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
900000000001a4ac:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001a4b0:	28ff02c7 	ld.d	$r7,$r22,-64(0xfc0)
900000000001a4b4:	00150186 	move	$r6,$r12
900000000001a4b8:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
900000000001a4bc:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001a4c0:	57fcdbff 	bl	-808(0xffffcd8) # 900000000001a198 <sfs_dirent_read_nolock>
900000000001a4c4:	0015008c 	move	$r12,$r4
900000000001a4c8:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
900000000001a4cc:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000001a4d0:	40000d80 	beqz	$r12,12(0xc) # 900000000001a4dc <sfs_dirent_findino_nolock+0x70>
            return ret;
900000000001a4d4:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000001a4d8:	50003800 	b	56(0x38) # 900000000001a510 <sfs_dirent_findino_nolock+0xa4>
        }
        if (entry->ino == ino) {
900000000001a4dc:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000001a4e0:	2880018d 	ld.w	$r13,$r12,0
900000000001a4e4:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
900000000001a4e8:	5c000d8d 	bne	$r12,$r13,12(0xc) # 900000000001a4f4 <sfs_dirent_findino_nolock+0x88>
            return 0;
900000000001a4ec:	0015000c 	move	$r12,$r0
900000000001a4f0:	50002000 	b	32(0x20) # 900000000001a510 <sfs_dirent_findino_nolock+0xa4>
    for (i = 0; i < nslots; i ++) {
900000000001a4f4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001a4f8:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000001a4fc:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000001a500:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
900000000001a504:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000001a508:	63ffa5ac 	blt	$r13,$r12,-92(0x3ffa4) # 900000000001a4ac <sfs_dirent_findino_nolock+0x40>
        }
    }
    return -E_NOENT;
900000000001a50c:	02bfc00c 	addi.w	$r12,$r0,-16(0xff0)
}
900000000001a510:	00150184 	move	$r4,$r12
900000000001a514:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000001a518:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000001a51c:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000001a520:	4c000020 	jirl	$r0,$r1,0

900000000001a524 <sfs_lookup_once>:

static int
sfs_lookup_once(struct sfs_fs *sfs, struct sfs_inode *sin, const char *name, struct inode **node_store, int *slot) {
900000000001a524:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
900000000001a528:	29c12061 	st.d	$r1,$r3,72(0x48)
900000000001a52c:	29c10076 	st.d	$r22,$r3,64(0x40)
900000000001a530:	02c14076 	addi.d	$r22,$r3,80(0x50)
900000000001a534:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000001a538:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
900000000001a53c:	29ff22c6 	st.d	$r6,$r22,-56(0xfc8)
900000000001a540:	29ff02c7 	st.d	$r7,$r22,-64(0xfc0)
900000000001a544:	29fee2c8 	st.d	$r8,$r22,-72(0xfb8)
    int ret;
    uint32_t ino;
    lock_sin(sin);
900000000001a548:	28ff42c4 	ld.d	$r4,$r22,-48(0xfd0)
900000000001a54c:	57eabfff 	bl	-5444(0xfffeabc) # 9000000000019008 <lock_sin>
    {
        ret = sfs_dirent_search_nolock(sfs, sin, name, &ino, slot, NULL);
900000000001a550:	02ffa2cc 	addi.d	$r12,$r22,-24(0xfe8)
900000000001a554:	00150009 	move	$r9,$r0
900000000001a558:	28fee2c8 	ld.d	$r8,$r22,-72(0xfb8)
900000000001a55c:	00150187 	move	$r7,$r12
900000000001a560:	28ff22c6 	ld.d	$r6,$r22,-56(0xfc8)
900000000001a564:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
900000000001a568:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001a56c:	57fd7bff 	bl	-648(0xffffd78) # 900000000001a2e4 <sfs_dirent_search_nolock>
900000000001a570:	0015008c 	move	$r12,$r4
900000000001a574:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    }
    unlock_sin(sin);
900000000001a578:	28ff42c4 	ld.d	$r4,$r22,-48(0xfd0)
900000000001a57c:	57eac7ff 	bl	-5436(0xfffeac4) # 9000000000019040 <unlock_sin>
    if (ret == 0) {
900000000001a580:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001a584:	44002180 	bnez	$r12,32(0x20) # 900000000001a5a4 <sfs_lookup_once+0x80>
        ret = sfs_load_inode(sfs, node_store, ino);
900000000001a588:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000001a58c:	00150186 	move	$r6,$r12
900000000001a590:	28ff02c5 	ld.d	$r5,$r22,-64(0xfc0)
900000000001a594:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001a598:	57f1cfff 	bl	-3636(0xffff1cc) # 9000000000019764 <sfs_load_inode>
900000000001a59c:	0015008c 	move	$r12,$r4
900000000001a5a0:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    }
    return ret;
900000000001a5a4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
900000000001a5a8:	00150184 	move	$r4,$r12
900000000001a5ac:	28c12061 	ld.d	$r1,$r3,72(0x48)
900000000001a5b0:	28c10076 	ld.d	$r22,$r3,64(0x40)
900000000001a5b4:	02c14063 	addi.d	$r3,$r3,80(0x50)
900000000001a5b8:	4c000020 	jirl	$r0,$r1,0

900000000001a5bc <sfs_opendir>:

static int
sfs_opendir(struct inode *node, uint32_t open_flags) {
900000000001a5bc:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000001a5c0:	29c06076 	st.d	$r22,$r3,24(0x18)
900000000001a5c4:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000001a5c8:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000001a5cc:	001500ac 	move	$r12,$r5
900000000001a5d0:	0040818c 	slli.w	$r12,$r12,0x0
900000000001a5d4:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
    switch (open_flags & O_ACCMODE) {
900000000001a5d8:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000001a5dc:	03400d8c 	andi	$r12,$r12,0x3
900000000001a5e0:	40000d80 	beqz	$r12,12(0xc) # 900000000001a5ec <sfs_opendir+0x30>
    case O_RDONLY:
        break;
    case O_WRONLY:
    case O_RDWR:
    default:
        return -E_ISDIR;
900000000001a5e4:	02bfbc0c 	addi.w	$r12,$r0,-17(0xfef)
900000000001a5e8:	50002000 	b	32(0x20) # 900000000001a608 <sfs_opendir+0x4c>
        break;
900000000001a5ec:	03400000 	andi	$r0,$r0,0x0
    }
    if (open_flags & O_APPEND) {
900000000001a5f0:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000001a5f4:	0340818c 	andi	$r12,$r12,0x20
900000000001a5f8:	40000d80 	beqz	$r12,12(0xc) # 900000000001a604 <sfs_opendir+0x48>
        return -E_ISDIR;
900000000001a5fc:	02bfbc0c 	addi.w	$r12,$r0,-17(0xfef)
900000000001a600:	50000800 	b	8(0x8) # 900000000001a608 <sfs_opendir+0x4c>
    }
    return 0;
900000000001a604:	0015000c 	move	$r12,$r0
}
900000000001a608:	00150184 	move	$r4,$r12
900000000001a60c:	28c06076 	ld.d	$r22,$r3,24(0x18)
900000000001a610:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000001a614:	4c000020 	jirl	$r0,$r1,0

900000000001a618 <sfs_openfile>:

static int
sfs_openfile(struct inode *node, uint32_t open_flags) {
900000000001a618:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000001a61c:	29c06076 	st.d	$r22,$r3,24(0x18)
900000000001a620:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000001a624:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000001a628:	001500ac 	move	$r12,$r5
900000000001a62c:	0040818c 	slli.w	$r12,$r12,0x0
900000000001a630:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
    return 0;
900000000001a634:	0015000c 	move	$r12,$r0
}
900000000001a638:	00150184 	move	$r4,$r12
900000000001a63c:	28c06076 	ld.d	$r22,$r3,24(0x18)
900000000001a640:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000001a644:	4c000020 	jirl	$r0,$r1,0

900000000001a648 <sfs_close>:

static int
sfs_close(struct inode *node) {
900000000001a648:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001a64c:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000001a650:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000001a654:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000001a658:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    return vop_fsync(node);
900000000001a65c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001a660:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000001a664:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001a668:	40002180 	beqz	$r12,32(0x20) # 900000000001a688 <sfs_close+0x40>
900000000001a66c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001a670:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
900000000001a674:	40001580 	beqz	$r12,20(0x14) # 900000000001a688 <sfs_close+0x40>
900000000001a678:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001a67c:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
900000000001a680:	28c0c18c 	ld.d	$r12,$r12,48(0x30)
900000000001a684:	44001d80 	bnez	$r12,28(0x1c) # 900000000001a6a0 <sfs_close+0x58>
900000000001a688:	1c000126 	pcaddu12i	$r6,9(0x9)
900000000001a68c:	02eec0c6 	addi.d	$r6,$r6,-1104(0xbb0)
900000000001a690:	0286d005 	addi.w	$r5,$r0,436(0x1b4)
900000000001a694:	1c000124 	pcaddu12i	$r4,9(0x9)
900000000001a698:	02e1b084 	addi.d	$r4,$r4,-1940(0x86c)
900000000001a69c:	5725e7ff 	bl	-55836(0xfff25e4) # 900000000000cc80 <__panic>
900000000001a6a0:	1c000125 	pcaddu12i	$r5,9(0x9)
900000000001a6a4:	02efe0a5 	addi.d	$r5,$r5,-1032(0xbf8)
900000000001a6a8:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000001a6ac:	57b953ff 	bl	-18096(0xfffb950) # 9000000000015ffc <inode_check>
900000000001a6b0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001a6b4:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
900000000001a6b8:	28c0c18c 	ld.d	$r12,$r12,48(0x30)
900000000001a6bc:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001a6c0:	4c000181 	jirl	$r1,$r12,0
900000000001a6c4:	0015008c 	move	$r12,$r4
}
900000000001a6c8:	00150184 	move	$r4,$r12
900000000001a6cc:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000001a6d0:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000001a6d4:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001a6d8:	4c000020 	jirl	$r0,$r1,0

900000000001a6dc <sfs_io_nolock>:

static int
sfs_io_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, void *buf, off_t offset, size_t *alenp, bool write) {
900000000001a6dc:	02fd8063 	addi.d	$r3,$r3,-160(0xf60)
900000000001a6e0:	29c26061 	st.d	$r1,$r3,152(0x98)
900000000001a6e4:	29c24076 	st.d	$r22,$r3,144(0x90)
900000000001a6e8:	02c28076 	addi.d	$r22,$r3,160(0xa0)
900000000001a6ec:	29fe22c4 	st.d	$r4,$r22,-120(0xf88)
900000000001a6f0:	29fe02c5 	st.d	$r5,$r22,-128(0xf80)
900000000001a6f4:	29fde2c6 	st.d	$r6,$r22,-136(0xf78)
900000000001a6f8:	29fdc2c7 	st.d	$r7,$r22,-144(0xf70)
900000000001a6fc:	29fda2c8 	st.d	$r8,$r22,-152(0xf68)
900000000001a700:	0015012c 	move	$r12,$r9
900000000001a704:	0040818c 	slli.w	$r12,$r12,0x0
900000000001a708:	29bd92cc 	st.w	$r12,$r22,-156(0xf64)
    struct sfs_disk_inode *din = sin->din;
900000000001a70c:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
900000000001a710:	28c0018c 	ld.d	$r12,$r12,0
900000000001a714:	29fec2cc 	st.d	$r12,$r22,-80(0xfb0)
    assert(_SFS_INODE_GET_TYPE(din) != SFS_TYPE_DIR);
900000000001a718:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000001a71c:	02c0118c 	addi.d	$r12,$r12,4(0x4)
900000000001a720:	2880018c 	ld.w	$r12,$r12,0
900000000001a724:	29beb2cc 	st.w	$r12,$r22,-84(0xfac)
900000000001a728:	28beb2cd 	ld.w	$r13,$r22,-84(0xfac)
900000000001a72c:	140001ec 	lu12i.w	$r12,15(0xf)
900000000001a730:	03bffd8c 	ori	$r12,$r12,0xfff
900000000001a734:	0014b1ac 	and	$r12,$r13,$r12
900000000001a738:	29beb2cc 	st.w	$r12,$r22,-84(0xfac)
900000000001a73c:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
900000000001a740:	0015018d 	move	$r13,$r12
900000000001a744:	0280080c 	addi.w	$r12,$r0,2(0x2)
900000000001a748:	5c001dac 	bne	$r13,$r12,28(0x1c) # 900000000001a764 <sfs_io_nolock+0x88>
900000000001a74c:	1c000126 	pcaddu12i	$r6,9(0x9)
900000000001a750:	02ed50c6 	addi.d	$r6,$r6,-1196(0xb54)
900000000001a754:	0286e805 	addi.w	$r5,$r0,442(0x1ba)
900000000001a758:	1c000104 	pcaddu12i	$r4,8(0x8)
900000000001a75c:	02dea084 	addi.d	$r4,$r4,1960(0x7a8)
900000000001a760:	572523ff 	bl	-56032(0xfff2520) # 900000000000cc80 <__panic>
    off_t endpos = offset + *alenp, blkoff;
900000000001a764:	28fda2cc 	ld.d	$r12,$r22,-152(0xf68)
900000000001a768:	28c0018c 	ld.d	$r12,$r12,0
900000000001a76c:	28fdc2cd 	ld.d	$r13,$r22,-144(0xf70)
900000000001a770:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001a774:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    *alenp = 0;
900000000001a778:	28fda2cc 	ld.d	$r12,$r22,-152(0xf68)
900000000001a77c:	29c00180 	st.d	$r0,$r12,0
    if (offset < 0 || offset >= SFS_MAX_FILE_SIZE || offset > endpos) {
900000000001a780:	28fdc2cd 	ld.d	$r13,$r22,-144(0xf70)
900000000001a784:	1410000c 	lu12i.w	$r12,32768(0x8000)
900000000001a788:	6c0011ac 	bgeu	$r13,$r12,16(0x10) # 900000000001a798 <sfs_io_nolock+0xbc>
900000000001a78c:	28fdc2cd 	ld.d	$r13,$r22,-144(0xf70)
900000000001a790:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001a794:	6c000d8d 	bgeu	$r12,$r13,12(0xc) # 900000000001a7a0 <sfs_io_nolock+0xc4>
        return -E_INVAL;
900000000001a798:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
900000000001a79c:	50037800 	b	888(0x378) # 900000000001ab14 <sfs_io_nolock+0x438>
    }
    if (offset == endpos) {
900000000001a7a0:	28fdc2cd 	ld.d	$r13,$r22,-144(0xf70)
900000000001a7a4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001a7a8:	5c000dac 	bne	$r13,$r12,12(0xc) # 900000000001a7b4 <sfs_io_nolock+0xd8>
        return 0;
900000000001a7ac:	0015000c 	move	$r12,$r0
900000000001a7b0:	50036400 	b	868(0x364) # 900000000001ab14 <sfs_io_nolock+0x438>
    }
    if (endpos > SFS_MAX_FILE_SIZE) {
900000000001a7b4:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000001a7b8:	1410000c 	lu12i.w	$r12,32768(0x8000)
900000000001a7bc:	6c000d8d 	bgeu	$r12,$r13,12(0xc) # 900000000001a7c8 <sfs_io_nolock+0xec>
        endpos = SFS_MAX_FILE_SIZE;
900000000001a7c0:	1410000c 	lu12i.w	$r12,32768(0x8000)
900000000001a7c4:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    }
    if (!write) {
900000000001a7c8:	28bd92cc 	ld.w	$r12,$r22,-156(0xf64)
900000000001a7cc:	44004580 	bnez	$r12,68(0x44) # 900000000001a810 <sfs_io_nolock+0x134>
        if (offset >= din->size) {
900000000001a7d0:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000001a7d4:	2880018c 	ld.w	$r12,$r12,0
900000000001a7d8:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
900000000001a7dc:	28fdc2cd 	ld.d	$r13,$r22,-144(0xf70)
900000000001a7e0:	68000dac 	bltu	$r13,$r12,12(0xc) # 900000000001a7ec <sfs_io_nolock+0x110>
            return 0;
900000000001a7e4:	0015000c 	move	$r12,$r0
900000000001a7e8:	50032c00 	b	812(0x32c) # 900000000001ab14 <sfs_io_nolock+0x438>
        }
        if (endpos > din->size) {
900000000001a7ec:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000001a7f0:	2880018c 	ld.w	$r12,$r12,0
900000000001a7f4:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
900000000001a7f8:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000001a7fc:	6c00158d 	bgeu	$r12,$r13,20(0x14) # 900000000001a810 <sfs_io_nolock+0x134>
            endpos = din->size;
900000000001a800:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000001a804:	2880018c 	ld.w	$r12,$r12,0
900000000001a808:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
900000000001a80c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
        }
    }

    int (*sfs_buf_op)(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset);
    int (*sfs_block_op)(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks);
    if (write) {
900000000001a810:	28bd92cc 	ld.w	$r12,$r22,-156(0xf64)
900000000001a814:	40002180 	beqz	$r12,32(0x20) # 900000000001a834 <sfs_io_nolock+0x158>
        sfs_buf_op = sfs_wbuf, sfs_block_op = sfs_wblock;
900000000001a818:	1c0040ec 	pcaddu12i	$r12,519(0x207)
900000000001a81c:	28fee18c 	ld.d	$r12,$r12,-72(0xfb8)
900000000001a820:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
900000000001a824:	1c0040ec 	pcaddu12i	$r12,519(0x207)
900000000001a828:	28fe718c 	ld.d	$r12,$r12,-100(0xf9c)
900000000001a82c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
900000000001a830:	50001c00 	b	28(0x1c) # 900000000001a84c <sfs_io_nolock+0x170>
    }
    else {
        sfs_buf_op = sfs_rbuf, sfs_block_op = sfs_rblock;
900000000001a834:	1c0040ec 	pcaddu12i	$r12,519(0x207)
900000000001a838:	28fdb18c 	ld.d	$r12,$r12,-148(0xf6c)
900000000001a83c:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
900000000001a840:	1c0040ec 	pcaddu12i	$r12,519(0x207)
900000000001a844:	28fd218c 	ld.d	$r12,$r12,-184(0xf48)
900000000001a848:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    }

    int ret = 0;
900000000001a84c:	29bf52c0 	st.w	$r0,$r22,-44(0xfd4)
    size_t size, alen = 0;
900000000001a850:	29ff02c0 	st.d	$r0,$r22,-64(0xfc0)
    uint32_t ino;
    uint32_t blkno = offset / SFS_BLKSIZE;
900000000001a854:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
900000000001a858:	0045318c 	srli.d	$r12,$r12,0xc
900000000001a85c:	29bef2cc 	st.w	$r12,$r22,-68(0xfbc)
    uint32_t nblks = endpos / SFS_BLKSIZE - blkno;
900000000001a860:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001a864:	0045318c 	srli.d	$r12,$r12,0xc
900000000001a868:	0040818c 	slli.w	$r12,$r12,0x0
900000000001a86c:	0015018d 	move	$r13,$r12
900000000001a870:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
900000000001a874:	001131ac 	sub.w	$r12,$r13,$r12
900000000001a878:	29bee2cc 	st.w	$r12,$r22,-72(0xfb8)
	 * (2) Rd/Wr aligned blocks 
	 *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_block_op
     * (3) If end position isn't aligned with the last block, Rd/Wr some content from begin to the (endpos % SFS_BLKSIZE) of the last block
	 *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_buf_op	
	*/
        if((blkoff = offset % SFS_BLKSIZE)!= 0) {
900000000001a87c:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
900000000001a880:	037ffd8c 	andi	$r12,$r12,0xfff
900000000001a884:	29fe82cc 	st.d	$r12,$r22,-96(0xfa0)
900000000001a888:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
900000000001a88c:	4000cd80 	beqz	$r12,204(0xcc) # 900000000001a958 <sfs_io_nolock+0x27c>
            if(nblks){
900000000001a890:	28bee2cc 	ld.w	$r12,$r22,-72(0xfb8)
900000000001a894:	40001980 	beqz	$r12,24(0x18) # 900000000001a8ac <sfs_io_nolock+0x1d0>
            size = SFS_BLKSIZE - blkoff;
900000000001a898:	1400002d 	lu12i.w	$r13,1(0x1)
900000000001a89c:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
900000000001a8a0:	0011b1ac 	sub.d	$r12,$r13,$r12
900000000001a8a4:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
900000000001a8a8:	50001400 	b	20(0x14) # 900000000001a8bc <sfs_io_nolock+0x1e0>
            }else{
            size  = endpos - offset;
900000000001a8ac:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000001a8b0:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
900000000001a8b4:	0011b1ac 	sub.d	$r12,$r13,$r12
900000000001a8b8:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
            }
            if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
900000000001a8bc:	02fe72cd 	addi.d	$r13,$r22,-100(0xf9c)
900000000001a8c0:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
900000000001a8c4:	001501a7 	move	$r7,$r13
900000000001a8c8:	00150186 	move	$r6,$r12
900000000001a8cc:	28fe02c5 	ld.d	$r5,$r22,-128(0xf80)
900000000001a8d0:	28fe22c4 	ld.d	$r4,$r22,-120(0xf88)
900000000001a8d4:	57f6dfff 	bl	-2340(0xffff6dc) # 9000000000019fb0 <sfs_bmap_load_nolock>
900000000001a8d8:	0015008c 	move	$r12,$r4
900000000001a8dc:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
900000000001a8e0:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
900000000001a8e4:	44019d80 	bnez	$r12,412(0x19c) # 900000000001aa80 <sfs_io_nolock+0x3a4>
                goto out;
            }
            if ((ret = sfs_buf_op(sfs, buf, size, ino, blkoff)) != 0) {
900000000001a8e8:	28be72cd 	ld.w	$r13,$r22,-100(0xf9c)
900000000001a8ec:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001a8f0:	28fe82c8 	ld.d	$r8,$r22,-96(0xfa0)
900000000001a8f4:	001501a7 	move	$r7,$r13
900000000001a8f8:	28ff22c6 	ld.d	$r6,$r22,-56(0xfc8)
900000000001a8fc:	28fde2c5 	ld.d	$r5,$r22,-136(0xf78)
900000000001a900:	28fe22c4 	ld.d	$r4,$r22,-120(0xf88)
900000000001a904:	4c000181 	jirl	$r1,$r12,0
900000000001a908:	0015008c 	move	$r12,$r4
900000000001a90c:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
900000000001a910:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
900000000001a914:	44017580 	bnez	$r12,372(0x174) # 900000000001aa88 <sfs_io_nolock+0x3ac>
                goto out;
            }
            alen += size;
900000000001a918:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
900000000001a91c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001a920:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001a924:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
            if (nblks == 0) {
900000000001a928:	28bee2cc 	ld.w	$r12,$r22,-72(0xfb8)
900000000001a92c:	40016580 	beqz	$r12,356(0x164) # 900000000001aa90 <sfs_io_nolock+0x3b4>
                goto out;
            }
            buf += size, blkno ++, nblks --;
900000000001a930:	28fde2cd 	ld.d	$r13,$r22,-136(0xf78)
900000000001a934:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001a938:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001a93c:	29fde2cc 	st.d	$r12,$r22,-136(0xf78)
900000000001a940:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
900000000001a944:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000001a948:	29bef2cc 	st.w	$r12,$r22,-68(0xfbc)
900000000001a94c:	28bee2cc 	ld.w	$r12,$r22,-72(0xfb8)
900000000001a950:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
900000000001a954:	29bee2cc 	st.w	$r12,$r22,-72(0xfb8)
        }

        size = SFS_BLKSIZE;
900000000001a958:	1400002c 	lu12i.w	$r12,1(0x1)
900000000001a95c:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
        while(nblks != 0){
900000000001a960:	50009400 	b	148(0x94) # 900000000001a9f4 <sfs_io_nolock+0x318>
            if((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
900000000001a964:	02fe72cd 	addi.d	$r13,$r22,-100(0xf9c)
900000000001a968:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
900000000001a96c:	001501a7 	move	$r7,$r13
900000000001a970:	00150186 	move	$r6,$r12
900000000001a974:	28fe02c5 	ld.d	$r5,$r22,-128(0xf80)
900000000001a978:	28fe22c4 	ld.d	$r4,$r22,-120(0xf88)
900000000001a97c:	57f637ff 	bl	-2508(0xffff634) # 9000000000019fb0 <sfs_bmap_load_nolock>
900000000001a980:	0015008c 	move	$r12,$r4
900000000001a984:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
900000000001a988:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
900000000001a98c:	44010d80 	bnez	$r12,268(0x10c) # 900000000001aa98 <sfs_io_nolock+0x3bc>
                goto out;
            }
            if((ret = sfs_block_op(sfs, buf, ino, 1)) != 0) {
900000000001a990:	28be72cd 	ld.w	$r13,$r22,-100(0xf9c)
900000000001a994:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001a998:	02800407 	addi.w	$r7,$r0,1(0x1)
900000000001a99c:	001501a6 	move	$r6,$r13
900000000001a9a0:	28fde2c5 	ld.d	$r5,$r22,-136(0xf78)
900000000001a9a4:	28fe22c4 	ld.d	$r4,$r22,-120(0xf88)
900000000001a9a8:	4c000181 	jirl	$r1,$r12,0
900000000001a9ac:	0015008c 	move	$r12,$r4
900000000001a9b0:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
900000000001a9b4:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
900000000001a9b8:	4400e980 	bnez	$r12,232(0xe8) # 900000000001aaa0 <sfs_io_nolock+0x3c4>
                goto out;
            }
            alen += size, buf += size, blkno ++, nblks --;
900000000001a9bc:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
900000000001a9c0:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001a9c4:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001a9c8:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
900000000001a9cc:	28fde2cd 	ld.d	$r13,$r22,-136(0xf78)
900000000001a9d0:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001a9d4:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001a9d8:	29fde2cc 	st.d	$r12,$r22,-136(0xf78)
900000000001a9dc:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
900000000001a9e0:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000001a9e4:	29bef2cc 	st.w	$r12,$r22,-68(0xfbc)
900000000001a9e8:	28bee2cc 	ld.w	$r12,$r22,-72(0xfb8)
900000000001a9ec:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
900000000001a9f0:	29bee2cc 	st.w	$r12,$r22,-72(0xfb8)
        while(nblks != 0){
900000000001a9f4:	28bee2cc 	ld.w	$r12,$r22,-72(0xfb8)
900000000001a9f8:	47ff6d9f 	bnez	$r12,-148(0x7fff6c) # 900000000001a964 <sfs_io_nolock+0x288>
        }

        if((size = endpos % SFS_BLKSIZE) != 0) {
900000000001a9fc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001aa00:	037ffd8c 	andi	$r12,$r12,0xfff
900000000001aa04:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
900000000001aa08:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001aa0c:	40009d80 	beqz	$r12,156(0x9c) # 900000000001aaa8 <sfs_io_nolock+0x3cc>
            if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
900000000001aa10:	02fe72cd 	addi.d	$r13,$r22,-100(0xf9c)
900000000001aa14:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
900000000001aa18:	001501a7 	move	$r7,$r13
900000000001aa1c:	00150186 	move	$r6,$r12
900000000001aa20:	28fe02c5 	ld.d	$r5,$r22,-128(0xf80)
900000000001aa24:	28fe22c4 	ld.d	$r4,$r22,-120(0xf88)
900000000001aa28:	57f58bff 	bl	-2680(0xffff588) # 9000000000019fb0 <sfs_bmap_load_nolock>
900000000001aa2c:	0015008c 	move	$r12,$r4
900000000001aa30:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
900000000001aa34:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
900000000001aa38:	44007980 	bnez	$r12,120(0x78) # 900000000001aab0 <sfs_io_nolock+0x3d4>
                goto out;
            }
            if ((ret = sfs_buf_op(sfs, buf, size, ino, 0)) != 0) {
900000000001aa3c:	28be72cd 	ld.w	$r13,$r22,-100(0xf9c)
900000000001aa40:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001aa44:	00150008 	move	$r8,$r0
900000000001aa48:	001501a7 	move	$r7,$r13
900000000001aa4c:	28ff22c6 	ld.d	$r6,$r22,-56(0xfc8)
900000000001aa50:	28fde2c5 	ld.d	$r5,$r22,-136(0xf78)
900000000001aa54:	28fe22c4 	ld.d	$r4,$r22,-120(0xf88)
900000000001aa58:	4c000181 	jirl	$r1,$r12,0
900000000001aa5c:	0015008c 	move	$r12,$r4
900000000001aa60:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
900000000001aa64:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
900000000001aa68:	44005180 	bnez	$r12,80(0x50) # 900000000001aab8 <sfs_io_nolock+0x3dc>
                goto out;
            }
            alen += size;
900000000001aa6c:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
900000000001aa70:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001aa74:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001aa78:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
900000000001aa7c:	50004000 	b	64(0x40) # 900000000001aabc <sfs_io_nolock+0x3e0>
                goto out;
900000000001aa80:	03400000 	andi	$r0,$r0,0x0
900000000001aa84:	50003800 	b	56(0x38) # 900000000001aabc <sfs_io_nolock+0x3e0>
                goto out;
900000000001aa88:	03400000 	andi	$r0,$r0,0x0
900000000001aa8c:	50003000 	b	48(0x30) # 900000000001aabc <sfs_io_nolock+0x3e0>
                goto out;
900000000001aa90:	03400000 	andi	$r0,$r0,0x0
900000000001aa94:	50002800 	b	40(0x28) # 900000000001aabc <sfs_io_nolock+0x3e0>
                goto out;
900000000001aa98:	03400000 	andi	$r0,$r0,0x0
900000000001aa9c:	50002000 	b	32(0x20) # 900000000001aabc <sfs_io_nolock+0x3e0>
                goto out;
900000000001aaa0:	03400000 	andi	$r0,$r0,0x0
900000000001aaa4:	50001800 	b	24(0x18) # 900000000001aabc <sfs_io_nolock+0x3e0>
        }
    #endif
out:
900000000001aaa8:	03400000 	andi	$r0,$r0,0x0
900000000001aaac:	50001000 	b	16(0x10) # 900000000001aabc <sfs_io_nolock+0x3e0>
                goto out;
900000000001aab0:	03400000 	andi	$r0,$r0,0x0
900000000001aab4:	50000800 	b	8(0x8) # 900000000001aabc <sfs_io_nolock+0x3e0>
                goto out;
900000000001aab8:	03400000 	andi	$r0,$r0,0x0
    *alenp = alen;
900000000001aabc:	28fda2cc 	ld.d	$r12,$r22,-152(0xf68)
900000000001aac0:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
900000000001aac4:	29c0018d 	st.d	$r13,$r12,0
    if (offset + alen > sin->din->size) {
900000000001aac8:	28fdc2cd 	ld.d	$r13,$r22,-144(0xf70)
900000000001aacc:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000001aad0:	0010b1ad 	add.d	$r13,$r13,$r12
900000000001aad4:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
900000000001aad8:	28c0018c 	ld.d	$r12,$r12,0
900000000001aadc:	2880018c 	ld.w	$r12,$r12,0
900000000001aae0:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
900000000001aae4:	6c002d8d 	bgeu	$r12,$r13,44(0x2c) # 900000000001ab10 <sfs_io_nolock+0x434>
        sin->din->size = offset + alen;
900000000001aae8:	28fdc2cd 	ld.d	$r13,$r22,-144(0xf70)
900000000001aaec:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000001aaf0:	0010b1ad 	add.d	$r13,$r13,$r12
900000000001aaf4:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
900000000001aaf8:	28c0018c 	ld.d	$r12,$r12,0
900000000001aafc:	004081ad 	slli.w	$r13,$r13,0x0
900000000001ab00:	2980018d 	st.w	$r13,$r12,0
        sin->dirty = 1;
900000000001ab04:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
900000000001ab08:	0280040d 	addi.w	$r13,$r0,1(0x1)
900000000001ab0c:	2980318d 	st.w	$r13,$r12,12(0xc)
    }
    return ret;
900000000001ab10:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
}
900000000001ab14:	00150184 	move	$r4,$r12
900000000001ab18:	28c26061 	ld.d	$r1,$r3,152(0x98)
900000000001ab1c:	28c24076 	ld.d	$r22,$r3,144(0x90)
900000000001ab20:	02c28063 	addi.d	$r3,$r3,160(0xa0)
900000000001ab24:	4c000020 	jirl	$r0,$r1,0

900000000001ab28 <sfs_io>:

static inline int
sfs_io(struct inode *node, struct iobuf *iob, bool write) {
900000000001ab28:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
900000000001ab2c:	29c16061 	st.d	$r1,$r3,88(0x58)
900000000001ab30:	29c14076 	st.d	$r22,$r3,80(0x50)
900000000001ab34:	02c18076 	addi.d	$r22,$r3,96(0x60)
900000000001ab38:	29fee2c4 	st.d	$r4,$r22,-72(0xfb8)
900000000001ab3c:	29fec2c5 	st.d	$r5,$r22,-80(0xfb0)
900000000001ab40:	001500cc 	move	$r12,$r6
900000000001ab44:	0040818c 	slli.w	$r12,$r12,0x0
900000000001ab48:	29beb2cc 	st.w	$r12,$r22,-84(0xfac)
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
900000000001ab4c:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000001ab50:	28c1818c 	ld.d	$r12,$r12,96(0x60)
900000000001ab54:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000001ab58:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001ab5c:	40001180 	beqz	$r12,16(0x10) # 900000000001ab6c <sfs_io+0x44>
900000000001ab60:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001ab64:	2882c18c 	ld.w	$r12,$r12,176(0xb0)
900000000001ab68:	40001d80 	beqz	$r12,28(0x1c) # 900000000001ab84 <sfs_io+0x5c>
900000000001ab6c:	1c000106 	pcaddu12i	$r6,8(0x8)
900000000001ab70:	02ddd0c6 	addi.d	$r6,$r6,1908(0x774)
900000000001ab74:	02886c05 	addi.w	$r5,$r0,539(0x21b)
900000000001ab78:	1c000104 	pcaddu12i	$r4,8(0x8)
900000000001ab7c:	02ce2084 	addi.d	$r4,$r4,904(0x388)
900000000001ab80:	572103ff 	bl	-57088(0xfff2100) # 900000000000cc80 <__panic>
900000000001ab84:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001ab88:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
900000000001ab8c:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000001ab90:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
900000000001ab94:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001ab98:	40001d80 	beqz	$r12,28(0x1c) # 900000000001abb4 <sfs_io+0x8c>
900000000001ab9c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001aba0:	2881418c 	ld.w	$r12,$r12,80(0x50)
900000000001aba4:	0015018d 	move	$r13,$r12
900000000001aba8:	1400002c 	lu12i.w	$r12,1(0x1)
900000000001abac:	0388d58c 	ori	$r12,$r12,0x235
900000000001abb0:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000001abcc <sfs_io+0xa4>
900000000001abb4:	1c000106 	pcaddu12i	$r6,8(0x8)
900000000001abb8:	02d0d0c6 	addi.d	$r6,$r6,1076(0x434)
900000000001abbc:	02887005 	addi.w	$r5,$r0,540(0x21c)
900000000001abc0:	1c000104 	pcaddu12i	$r4,8(0x8)
900000000001abc4:	02cd0084 	addi.d	$r4,$r4,832(0x340)
900000000001abc8:	5720bbff 	bl	-57160(0xfff20b8) # 900000000000cc80 <__panic>
900000000001abcc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001abd0:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    int ret;
    //kprintf("s");
    lock_sin(sin);
900000000001abd4:	28ff42c4 	ld.d	$r4,$r22,-48(0xfd0)
900000000001abd8:	57e433ff 	bl	-7120(0xfffe430) # 9000000000019008 <lock_sin>
    {
        size_t alen = iob->io_resid;
900000000001abdc:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000001abe0:	28c0618c 	ld.d	$r12,$r12,24(0x18)
900000000001abe4:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
        ret = sfs_io_nolock(sfs, sin, iob->io_base, iob->io_offset, &alen, write);
900000000001abe8:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000001abec:	28c0018d 	ld.d	$r13,$r12,0
900000000001abf0:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000001abf4:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000001abf8:	28beb2ce 	ld.w	$r14,$r22,-84(0xfac)
900000000001abfc:	02ff02cf 	addi.d	$r15,$r22,-64(0xfc0)
900000000001ac00:	001501c9 	move	$r9,$r14
900000000001ac04:	001501e8 	move	$r8,$r15
900000000001ac08:	00150187 	move	$r7,$r12
900000000001ac0c:	001501a6 	move	$r6,$r13
900000000001ac10:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
900000000001ac14:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
900000000001ac18:	57fac7ff 	bl	-1340(0xffffac4) # 900000000001a6dc <sfs_io_nolock>
900000000001ac1c:	0015008c 	move	$r12,$r4
900000000001ac20:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
        if (alen != 0) {
900000000001ac24:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000001ac28:	40001580 	beqz	$r12,20(0x14) # 900000000001ac3c <sfs_io+0x114>
            iobuf_skip(iob, alen);
900000000001ac2c:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000001ac30:	00150185 	move	$r5,$r12
900000000001ac34:	28fec2c4 	ld.d	$r4,$r22,-80(0xfb0)
900000000001ac38:	57a0a3ff 	bl	-24416(0xfffa0a0) # 9000000000014cd8 <iobuf_skip>
        }
    }
    unlock_sin(sin);
900000000001ac3c:	28ff42c4 	ld.d	$r4,$r22,-48(0xfd0)
900000000001ac40:	57e403ff 	bl	-7168(0xfffe400) # 9000000000019040 <unlock_sin>
    return ret;
900000000001ac44:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
}
900000000001ac48:	00150184 	move	$r4,$r12
900000000001ac4c:	28c16061 	ld.d	$r1,$r3,88(0x58)
900000000001ac50:	28c14076 	ld.d	$r22,$r3,80(0x50)
900000000001ac54:	02c18063 	addi.d	$r3,$r3,96(0x60)
900000000001ac58:	4c000020 	jirl	$r0,$r1,0

900000000001ac5c <sfs_read>:

static int
sfs_read(struct inode *node, struct iobuf *iob) {
900000000001ac5c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000001ac60:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000001ac64:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000001ac68:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000001ac6c:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000001ac70:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
    return sfs_io(node, iob, 0);
900000000001ac74:	00150006 	move	$r6,$r0
900000000001ac78:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
900000000001ac7c:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000001ac80:	57feabff 	bl	-344(0xffffea8) # 900000000001ab28 <sfs_io>
900000000001ac84:	0015008c 	move	$r12,$r4
}
900000000001ac88:	00150184 	move	$r4,$r12
900000000001ac8c:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000001ac90:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000001ac94:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000001ac98:	4c000020 	jirl	$r0,$r1,0

900000000001ac9c <sfs_write>:

static int
sfs_write(struct inode *node, struct iobuf *iob) {
900000000001ac9c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000001aca0:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000001aca4:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000001aca8:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000001acac:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000001acb0:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
    return sfs_io(node, iob, 1);
900000000001acb4:	02800406 	addi.w	$r6,$r0,1(0x1)
900000000001acb8:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
900000000001acbc:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000001acc0:	57fe6bff 	bl	-408(0xffffe68) # 900000000001ab28 <sfs_io>
900000000001acc4:	0015008c 	move	$r12,$r4
}
900000000001acc8:	00150184 	move	$r4,$r12
900000000001accc:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000001acd0:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000001acd4:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000001acd8:	4c000020 	jirl	$r0,$r1,0

900000000001acdc <sfs_fstat>:

static int
sfs_fstat(struct inode *node, struct stat *stat) {
900000000001acdc:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
900000000001ace0:	29c12061 	st.d	$r1,$r3,72(0x48)
900000000001ace4:	29c10076 	st.d	$r22,$r3,64(0x40)
900000000001ace8:	02c14076 	addi.d	$r22,$r3,80(0x50)
900000000001acec:	29fee2c4 	st.d	$r4,$r22,-72(0xfb8)
900000000001acf0:	29fec2c5 	st.d	$r5,$r22,-80(0xfb0)
    int ret;
    memset(stat, 0, sizeof(struct stat));
900000000001acf4:	02808006 	addi.w	$r6,$r0,32(0x20)
900000000001acf8:	00150005 	move	$r5,$r0
900000000001acfc:	28fec2c4 	ld.d	$r4,$r22,-80(0xfb0)
900000000001ad00:	569823ff 	bl	-92128(0xffe9820) # 9000000000004520 <memset>
    if ((ret = vop_gettype(node, &(stat->st_mode))) != 0) {
900000000001ad04:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000001ad08:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000001ad0c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001ad10:	40002180 	beqz	$r12,32(0x20) # 900000000001ad30 <sfs_fstat+0x54>
900000000001ad14:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001ad18:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
900000000001ad1c:	40001580 	beqz	$r12,20(0x14) # 900000000001ad30 <sfs_fstat+0x54>
900000000001ad20:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001ad24:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
900000000001ad28:	28c1418c 	ld.d	$r12,$r12,80(0x50)
900000000001ad2c:	44001d80 	bnez	$r12,28(0x1c) # 900000000001ad48 <sfs_fstat+0x6c>
900000000001ad30:	1c000106 	pcaddu12i	$r6,8(0x8)
900000000001ad34:	02d7c0c6 	addi.d	$r6,$r6,1520(0x5f0)
900000000001ad38:	0288e405 	addi.w	$r5,$r0,569(0x239)
900000000001ad3c:	1c000104 	pcaddu12i	$r4,8(0x8)
900000000001ad40:	02c71084 	addi.d	$r4,$r4,452(0x1c4)
900000000001ad44:	571f3fff 	bl	-57540(0xfff1f3c) # 900000000000cc80 <__panic>
900000000001ad48:	1c000105 	pcaddu12i	$r5,8(0x8)
900000000001ad4c:	02d900a5 	addi.d	$r5,$r5,1600(0x640)
900000000001ad50:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000001ad54:	57b2abff 	bl	-19800(0xfffb2a8) # 9000000000015ffc <inode_check>
900000000001ad58:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001ad5c:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
900000000001ad60:	28c1418c 	ld.d	$r12,$r12,80(0x50)
900000000001ad64:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
900000000001ad68:	001501a5 	move	$r5,$r13
900000000001ad6c:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
900000000001ad70:	4c000181 	jirl	$r1,$r12,0
900000000001ad74:	0015008c 	move	$r12,$r4
900000000001ad78:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
900000000001ad7c:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000001ad80:	40000d80 	beqz	$r12,12(0xc) # 900000000001ad8c <sfs_fstat+0xb0>
        return ret;
900000000001ad84:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000001ad88:	5000a800 	b	168(0xa8) # 900000000001ae30 <sfs_fstat+0x154>
    }
    struct sfs_disk_inode *din = vop_info(node, sfs_inode)->din;
900000000001ad8c:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000001ad90:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
900000000001ad94:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001ad98:	40001d80 	beqz	$r12,28(0x1c) # 900000000001adb4 <sfs_fstat+0xd8>
900000000001ad9c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001ada0:	2881418c 	ld.w	$r12,$r12,80(0x50)
900000000001ada4:	0015018d 	move	$r13,$r12
900000000001ada8:	1400002c 	lu12i.w	$r12,1(0x1)
900000000001adac:	0388d58c 	ori	$r12,$r12,0x235
900000000001adb0:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000001adcc <sfs_fstat+0xf0>
900000000001adb4:	1c000106 	pcaddu12i	$r6,8(0x8)
900000000001adb8:	02c8d0c6 	addi.d	$r6,$r6,564(0x234)
900000000001adbc:	0288f005 	addi.w	$r5,$r0,572(0x23c)
900000000001adc0:	1c000104 	pcaddu12i	$r4,8(0x8)
900000000001adc4:	02c50084 	addi.d	$r4,$r4,320(0x140)
900000000001adc8:	571ebbff 	bl	-57672(0xfff1eb8) # 900000000000cc80 <__panic>
900000000001adcc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001add0:	28c0018c 	ld.d	$r12,$r12,0
900000000001add4:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    stat->st_nlinks = _SFS_INODE_GET_NLINKS(din);
900000000001add8:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001addc:	02c0118c 	addi.d	$r12,$r12,4(0x4)
900000000001ade0:	2880018c 	ld.w	$r12,$r12,0
900000000001ade4:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
900000000001ade8:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
900000000001adec:	0044c18c 	srli.w	$r12,$r12,0x10
900000000001adf0:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
900000000001adf4:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
900000000001adf8:	00df018d 	bstrpick.d	$r13,$r12,0x1f,0x0
900000000001adfc:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000001ae00:	29c0218d 	st.d	$r13,$r12,8(0x8)
    stat->st_blocks = din->blocks;
900000000001ae04:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001ae08:	2880218c 	ld.w	$r12,$r12,8(0x8)
900000000001ae0c:	00df018d 	bstrpick.d	$r13,$r12,0x1f,0x0
900000000001ae10:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000001ae14:	29c0418d 	st.d	$r13,$r12,16(0x10)
    stat->st_size = din->size;
900000000001ae18:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001ae1c:	2880018c 	ld.w	$r12,$r12,0
900000000001ae20:	00df018d 	bstrpick.d	$r13,$r12,0x1f,0x0
900000000001ae24:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000001ae28:	29c0618d 	st.d	$r13,$r12,24(0x18)
    return 0;
900000000001ae2c:	0015000c 	move	$r12,$r0
}
900000000001ae30:	00150184 	move	$r4,$r12
900000000001ae34:	28c12061 	ld.d	$r1,$r3,72(0x48)
900000000001ae38:	28c10076 	ld.d	$r22,$r3,64(0x40)
900000000001ae3c:	02c14063 	addi.d	$r3,$r3,80(0x50)
900000000001ae40:	4c000020 	jirl	$r0,$r1,0

900000000001ae44 <sfs_fsync>:

static int
sfs_fsync(struct inode *node) {
900000000001ae44:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
900000000001ae48:	29c12061 	st.d	$r1,$r3,72(0x48)
900000000001ae4c:	29c10076 	st.d	$r22,$r3,64(0x40)
900000000001ae50:	02c14076 	addi.d	$r22,$r3,80(0x50)
900000000001ae54:	29fee2c4 	st.d	$r4,$r22,-72(0xfb8)
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
900000000001ae58:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000001ae5c:	28c1818c 	ld.d	$r12,$r12,96(0x60)
900000000001ae60:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
900000000001ae64:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001ae68:	40001180 	beqz	$r12,16(0x10) # 900000000001ae78 <sfs_fsync+0x34>
900000000001ae6c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001ae70:	2882c18c 	ld.w	$r12,$r12,176(0xb0)
900000000001ae74:	40001d80 	beqz	$r12,28(0x1c) # 900000000001ae90 <sfs_fsync+0x4c>
900000000001ae78:	1c000106 	pcaddu12i	$r6,8(0x8)
900000000001ae7c:	02d1a0c6 	addi.d	$r6,$r6,1128(0x468)
900000000001ae80:	02891405 	addi.w	$r5,$r0,581(0x245)
900000000001ae84:	1c000104 	pcaddu12i	$r4,8(0x8)
900000000001ae88:	02c1f084 	addi.d	$r4,$r4,124(0x7c)
900000000001ae8c:	571df7ff 	bl	-57868(0xfff1df4) # 900000000000cc80 <__panic>
900000000001ae90:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001ae94:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
900000000001ae98:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000001ae9c:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
900000000001aea0:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001aea4:	40001d80 	beqz	$r12,28(0x1c) # 900000000001aec0 <sfs_fsync+0x7c>
900000000001aea8:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001aeac:	2881418c 	ld.w	$r12,$r12,80(0x50)
900000000001aeb0:	0015018d 	move	$r13,$r12
900000000001aeb4:	1400002c 	lu12i.w	$r12,1(0x1)
900000000001aeb8:	0388d58c 	ori	$r12,$r12,0x235
900000000001aebc:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000001aed8 <sfs_fsync+0x94>
900000000001aec0:	1c000106 	pcaddu12i	$r6,8(0x8)
900000000001aec4:	02c4a0c6 	addi.d	$r6,$r6,296(0x128)
900000000001aec8:	02891805 	addi.w	$r5,$r0,582(0x246)
900000000001aecc:	1c000104 	pcaddu12i	$r4,8(0x8)
900000000001aed0:	02c0d084 	addi.d	$r4,$r4,52(0x34)
900000000001aed4:	571dafff 	bl	-57940(0xfff1dac) # 900000000000cc80 <__panic>
900000000001aed8:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001aedc:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
    int ret = 0;
900000000001aee0:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
    if (sin->dirty) {
900000000001aee4:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001aee8:	2880318c 	ld.w	$r12,$r12,12(0xc)
900000000001aeec:	40006d80 	beqz	$r12,108(0x6c) # 900000000001af58 <sfs_fsync+0x114>
        lock_sin(sin);
900000000001aef0:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
900000000001aef4:	57e117ff 	bl	-7916(0xfffe114) # 9000000000019008 <lock_sin>
        {
            if (sin->dirty) {
900000000001aef8:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001aefc:	2880318c 	ld.w	$r12,$r12,12(0xc)
900000000001af00:	40005180 	beqz	$r12,80(0x50) # 900000000001af50 <sfs_fsync+0x10c>
                sin->dirty = 0;
900000000001af04:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001af08:	29803180 	st.w	$r0,$r12,12(0xc)
                if ((ret = sfs_wbuf(sfs, sin->din, sizeof(struct sfs_disk_inode), sin->ino, 0)) != 0) {
900000000001af0c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001af10:	28c0018d 	ld.d	$r13,$r12,0
900000000001af14:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001af18:	2880218c 	ld.w	$r12,$r12,8(0x8)
900000000001af1c:	00150008 	move	$r8,$r0
900000000001af20:	00150187 	move	$r7,$r12
900000000001af24:	02810006 	addi.w	$r6,$r0,64(0x40)
900000000001af28:	001501a5 	move	$r5,$r13
900000000001af2c:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001af30:	54131800 	bl	4888(0x1318) # 900000000001c248 <sfs_wbuf>
900000000001af34:	0015008c 	move	$r12,$r4
900000000001af38:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000001af3c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001af40:	40001180 	beqz	$r12,16(0x10) # 900000000001af50 <sfs_fsync+0x10c>
                    sin->dirty = 1;
900000000001af44:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001af48:	0280040d 	addi.w	$r13,$r0,1(0x1)
900000000001af4c:	2980318d 	st.w	$r13,$r12,12(0xc)
                }
            }
        }
        unlock_sin(sin);
900000000001af50:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
900000000001af54:	57e0efff 	bl	-7956(0xfffe0ec) # 9000000000019040 <unlock_sin>
    }
    return ret;
900000000001af58:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
900000000001af5c:	00150184 	move	$r4,$r12
900000000001af60:	28c12061 	ld.d	$r1,$r3,72(0x48)
900000000001af64:	28c10076 	ld.d	$r22,$r3,64(0x40)
900000000001af68:	02c14063 	addi.d	$r3,$r3,80(0x50)
900000000001af6c:	4c000020 	jirl	$r0,$r1,0

900000000001af70 <sfs_namefile>:

static int
sfs_namefile(struct inode *node, struct iobuf *iob) {
900000000001af70:	02fdc063 	addi.d	$r3,$r3,-144(0xf70)
900000000001af74:	29c22061 	st.d	$r1,$r3,136(0x88)
900000000001af78:	29c20076 	st.d	$r22,$r3,128(0x80)
900000000001af7c:	02c24076 	addi.d	$r22,$r3,144(0x90)
900000000001af80:	29fde2c4 	st.d	$r4,$r22,-136(0xf78)
900000000001af84:	29fdc2c5 	st.d	$r5,$r22,-144(0xf70)
    struct sfs_disk_entry *entry;
    if (iob->io_resid <= 2 || (entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
900000000001af88:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
900000000001af8c:	28c0618d 	ld.d	$r13,$r12,24(0x18)
900000000001af90:	0280080c 	addi.w	$r12,$r0,2(0x2)
900000000001af94:	6c00198d 	bgeu	$r12,$r13,24(0x18) # 900000000001afac <sfs_namefile+0x3c>
900000000001af98:	02841004 	addi.w	$r4,$r0,260(0x104)
900000000001af9c:	56c69fff 	bl	-80228(0xffec69c) # 9000000000007638 <kmalloc>
900000000001afa0:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
900000000001afa4:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001afa8:	44000d80 	bnez	$r12,12(0xc) # 900000000001afb4 <sfs_namefile+0x44>
        return -E_NO_MEM;
900000000001afac:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
900000000001afb0:	50032800 	b	808(0x328) # 900000000001b2d8 <sfs_namefile+0x368>
    }

    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
900000000001afb4:	28fde2cc 	ld.d	$r12,$r22,-136(0xf78)
900000000001afb8:	28c1818c 	ld.d	$r12,$r12,96(0x60)
900000000001afbc:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
900000000001afc0:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000001afc4:	40001180 	beqz	$r12,16(0x10) # 900000000001afd4 <sfs_namefile+0x64>
900000000001afc8:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000001afcc:	2882c18c 	ld.w	$r12,$r12,176(0xb0)
900000000001afd0:	40001d80 	beqz	$r12,28(0x1c) # 900000000001afec <sfs_namefile+0x7c>
900000000001afd4:	1c000106 	pcaddu12i	$r6,8(0x8)
900000000001afd8:	02cc30c6 	addi.d	$r6,$r6,780(0x30c)
900000000001afdc:	02897805 	addi.w	$r5,$r0,606(0x25e)
900000000001afe0:	1c000104 	pcaddu12i	$r4,8(0x8)
900000000001afe4:	02fc8084 	addi.d	$r4,$r4,-224(0xf20)
900000000001afe8:	571c9bff 	bl	-58216(0xfff1c98) # 900000000000cc80 <__panic>
900000000001afec:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000001aff0:	29fee2cc 	st.d	$r12,$r22,-72(0xfb8)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
900000000001aff4:	28fde2cc 	ld.d	$r12,$r22,-136(0xf78)
900000000001aff8:	29fec2cc 	st.d	$r12,$r22,-80(0xfb0)
900000000001affc:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000001b000:	40001d80 	beqz	$r12,28(0x1c) # 900000000001b01c <sfs_namefile+0xac>
900000000001b004:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000001b008:	2881418c 	ld.w	$r12,$r12,80(0x50)
900000000001b00c:	0015018d 	move	$r13,$r12
900000000001b010:	1400002c 	lu12i.w	$r12,1(0x1)
900000000001b014:	0388d58c 	ori	$r12,$r12,0x235
900000000001b018:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000001b034 <sfs_namefile+0xc4>
900000000001b01c:	1c000106 	pcaddu12i	$r6,8(0x8)
900000000001b020:	02ff30c6 	addi.d	$r6,$r6,-52(0xfcc)
900000000001b024:	02897c05 	addi.w	$r5,$r0,607(0x25f)
900000000001b028:	1c000104 	pcaddu12i	$r4,8(0x8)
900000000001b02c:	02fb6084 	addi.d	$r4,$r4,-296(0xed8)
900000000001b030:	571c53ff 	bl	-58288(0xfff1c50) # 900000000000cc80 <__panic>
900000000001b034:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000001b038:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)

    int ret;
    char *ptr = iob->io_base + iob->io_resid;
900000000001b03c:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
900000000001b040:	28c0018d 	ld.d	$r13,$r12,0
900000000001b044:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
900000000001b048:	28c0618c 	ld.d	$r12,$r12,24(0x18)
900000000001b04c:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001b050:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    size_t alen, resid = iob->io_resid - 2;
900000000001b054:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
900000000001b058:	28c0618c 	ld.d	$r12,$r12,24(0x18)
900000000001b05c:	02fff98c 	addi.d	$r12,$r12,-2(0xffe)
900000000001b060:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    vop_ref_inc(node);
900000000001b064:	28fde2c4 	ld.d	$r4,$r22,-136(0xf78)
900000000001b068:	57abf7ff 	bl	-21516(0xfffabf4) # 9000000000015c5c <inode_ref_inc>
    while (1) {
        struct inode *parent;
        if ((ret = sfs_lookup_once(sfs, sin, "..", &parent, NULL)) != 0) {
900000000001b06c:	02fe22cc 	addi.d	$r12,$r22,-120(0xf88)
900000000001b070:	00150008 	move	$r8,$r0
900000000001b074:	00150187 	move	$r7,$r12
900000000001b078:	1c000106 	pcaddu12i	$r6,8(0x8)
900000000001b07c:	02cc60c6 	addi.d	$r6,$r6,792(0x318)
900000000001b080:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
900000000001b084:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
900000000001b088:	57f49fff 	bl	-2916(0xffff49c) # 900000000001a524 <sfs_lookup_once>
900000000001b08c:	0015008c 	move	$r12,$r4
900000000001b090:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
900000000001b094:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000001b098:	44022180 	bnez	$r12,544(0x220) # 900000000001b2b8 <sfs_namefile+0x348>
            goto failed;
        }

        uint32_t ino = sin->ino;
900000000001b09c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001b0a0:	2880218c 	ld.w	$r12,$r12,8(0x8)
900000000001b0a4:	29beb2cc 	st.w	$r12,$r22,-84(0xfac)
        vop_ref_dec(node);
900000000001b0a8:	28fde2c4 	ld.d	$r4,$r22,-136(0xf78)
900000000001b0ac:	57ac2bff 	bl	-21464(0xfffac28) # 9000000000015cd4 <inode_ref_dec>
        if (node == parent) {
900000000001b0b0:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
900000000001b0b4:	28fde2cd 	ld.d	$r13,$r22,-136(0xf78)
900000000001b0b8:	5c0081ac 	bne	$r13,$r12,128(0x80) # 900000000001b138 <sfs_namefile+0x1c8>
            vop_ref_dec(node);
900000000001b0bc:	28fde2c4 	ld.d	$r4,$r22,-136(0xf78)
900000000001b0c0:	57ac17ff 	bl	-21484(0xfffac14) # 9000000000015cd4 <inode_ref_dec>
        }
        resid -= alen, ptr -= alen;
        memcpy(ptr, entry->name, alen - 1);
        ptr[alen - 1] = '/';
    }
    alen = iob->io_resid - resid - 2;
900000000001b0c4:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
900000000001b0c8:	28c0618d 	ld.d	$r13,$r12,24(0x18)
900000000001b0cc:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001b0d0:	0011b1ac 	sub.d	$r12,$r13,$r12
900000000001b0d4:	02fff98c 	addi.d	$r12,$r12,-2(0xffe)
900000000001b0d8:	29fe82cc 	st.d	$r12,$r22,-96(0xfa0)
    ptr = memmove(iob->io_base + 1, ptr, alen);
900000000001b0dc:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
900000000001b0e0:	28c0018c 	ld.d	$r12,$r12,0
900000000001b0e4:	02c0058c 	addi.d	$r12,$r12,1(0x1)
900000000001b0e8:	28fe82c6 	ld.d	$r6,$r22,-96(0xfa0)
900000000001b0ec:	28ff62c5 	ld.d	$r5,$r22,-40(0xfd8)
900000000001b0f0:	00150184 	move	$r4,$r12
900000000001b0f4:	569503ff 	bl	-92928(0xffe9500) # 90000000000045f4 <memmove>
900000000001b0f8:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    ptr[-1] = '/', ptr[alen] = '\0';
900000000001b0fc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001b100:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
900000000001b104:	0280bc0d 	addi.w	$r13,$r0,47(0x2f)
900000000001b108:	2900018d 	st.b	$r13,$r12,0
900000000001b10c:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000001b110:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
900000000001b114:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001b118:	29000180 	st.b	$r0,$r12,0
    iobuf_skip(iob, alen);
900000000001b11c:	28fe82c5 	ld.d	$r5,$r22,-96(0xfa0)
900000000001b120:	28fdc2c4 	ld.d	$r4,$r22,-144(0xf70)
900000000001b124:	579bb7ff 	bl	-25676(0xfff9bb4) # 9000000000014cd8 <iobuf_skip>
    kfree(entry);
900000000001b128:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
900000000001b12c:	56c9ebff 	bl	-79384(0xffec9e8) # 9000000000007b14 <kfree>
    return 0;
900000000001b130:	0015000c 	move	$r12,$r0
900000000001b134:	5001a400 	b	420(0x1a4) # 900000000001b2d8 <sfs_namefile+0x368>
        node = parent, sin = vop_info(node, sfs_inode);
900000000001b138:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
900000000001b13c:	29fde2cc 	st.d	$r12,$r22,-136(0xf78)
900000000001b140:	28fde2cc 	ld.d	$r12,$r22,-136(0xf78)
900000000001b144:	29fe62cc 	st.d	$r12,$r22,-104(0xf98)
900000000001b148:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
900000000001b14c:	40001d80 	beqz	$r12,28(0x1c) # 900000000001b168 <sfs_namefile+0x1f8>
900000000001b150:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
900000000001b154:	2881418c 	ld.w	$r12,$r12,80(0x50)
900000000001b158:	0015018d 	move	$r13,$r12
900000000001b15c:	1400002c 	lu12i.w	$r12,1(0x1)
900000000001b160:	0388d58c 	ori	$r12,$r12,0x235
900000000001b164:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000001b180 <sfs_namefile+0x210>
900000000001b168:	1c000106 	pcaddu12i	$r6,8(0x8)
900000000001b16c:	02fa00c6 	addi.d	$r6,$r6,-384(0xe80)
900000000001b170:	0289c805 	addi.w	$r5,$r0,626(0x272)
900000000001b174:	1c000104 	pcaddu12i	$r4,8(0x8)
900000000001b178:	02f63084 	addi.d	$r4,$r4,-628(0xd8c)
900000000001b17c:	571b07ff 	bl	-58620(0xfff1b04) # 900000000000cc80 <__panic>
900000000001b180:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
900000000001b184:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
        assert(ino != sin->ino && _SFS_INODE_GET_TYPE(sin->din) == SFS_TYPE_DIR);
900000000001b188:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001b18c:	2880218d 	ld.w	$r13,$r12,8(0x8)
900000000001b190:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
900000000001b194:	58003d8d 	beq	$r12,$r13,60(0x3c) # 900000000001b1d0 <sfs_namefile+0x260>
900000000001b198:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001b19c:	28c0018c 	ld.d	$r12,$r12,0
900000000001b1a0:	02c0118c 	addi.d	$r12,$r12,4(0x4)
900000000001b1a4:	2880018c 	ld.w	$r12,$r12,0
900000000001b1a8:	29be52cc 	st.w	$r12,$r22,-108(0xf94)
900000000001b1ac:	28be52cd 	ld.w	$r13,$r22,-108(0xf94)
900000000001b1b0:	140001ec 	lu12i.w	$r12,15(0xf)
900000000001b1b4:	03bffd8c 	ori	$r12,$r12,0xfff
900000000001b1b8:	0014b1ac 	and	$r12,$r13,$r12
900000000001b1bc:	29be52cc 	st.w	$r12,$r22,-108(0xf94)
900000000001b1c0:	28be52cc 	ld.w	$r12,$r22,-108(0xf94)
900000000001b1c4:	0015018d 	move	$r13,$r12
900000000001b1c8:	0280080c 	addi.w	$r12,$r0,2(0x2)
900000000001b1cc:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000001b1e8 <sfs_namefile+0x278>
900000000001b1d0:	1c000106 	pcaddu12i	$r6,8(0x8)
900000000001b1d4:	02c720c6 	addi.d	$r6,$r6,456(0x1c8)
900000000001b1d8:	0289cc05 	addi.w	$r5,$r0,627(0x273)
900000000001b1dc:	1c000104 	pcaddu12i	$r4,8(0x8)
900000000001b1e0:	02f49084 	addi.d	$r4,$r4,-732(0xd24)
900000000001b1e4:	571a9fff 	bl	-58724(0xfff1a9c) # 900000000000cc80 <__panic>
        lock_sin(sin);
900000000001b1e8:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000001b1ec:	57de1fff 	bl	-8676(0xfffde1c) # 9000000000019008 <lock_sin>
            ret = sfs_dirent_findino_nolock(sfs, sin, ino, entry);
900000000001b1f0:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
900000000001b1f4:	28ff22c7 	ld.d	$r7,$r22,-56(0xfc8)
900000000001b1f8:	00150186 	move	$r6,$r12
900000000001b1fc:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
900000000001b200:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
900000000001b204:	57f26bff 	bl	-3480(0xffff268) # 900000000001a46c <sfs_dirent_findino_nolock>
900000000001b208:	0015008c 	move	$r12,$r4
900000000001b20c:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
        unlock_sin(sin);
900000000001b210:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000001b214:	57de2fff 	bl	-8660(0xfffde2c) # 9000000000019040 <unlock_sin>
        if (ret != 0) {
900000000001b218:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000001b21c:	4400a580 	bnez	$r12,164(0xa4) # 900000000001b2c0 <sfs_namefile+0x350>
        if ((alen = strlen(entry->name) + 1) > resid) {
900000000001b220:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001b224:	02c0118c 	addi.d	$r12,$r12,4(0x4)
900000000001b228:	00150184 	move	$r4,$r12
900000000001b22c:	568f83ff 	bl	-94336(0xffe8f80) # 90000000000041ac <strlen>
900000000001b230:	0015008c 	move	$r12,$r4
900000000001b234:	02c0058c 	addi.d	$r12,$r12,1(0x1)
900000000001b238:	29fe82cc 	st.d	$r12,$r22,-96(0xfa0)
900000000001b23c:	28fe82cd 	ld.d	$r13,$r22,-96(0xfa0)
900000000001b240:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001b244:	6800658d 	bltu	$r12,$r13,100(0x64) # 900000000001b2a8 <sfs_namefile+0x338>
        resid -= alen, ptr -= alen;
900000000001b248:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000001b24c:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
900000000001b250:	0011b1ac 	sub.d	$r12,$r13,$r12
900000000001b254:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
900000000001b258:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
900000000001b25c:	0011b00c 	sub.d	$r12,$r0,$r12
900000000001b260:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000001b264:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001b268:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        memcpy(ptr, entry->name, alen - 1);
900000000001b26c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001b270:	02c0118d 	addi.d	$r13,$r12,4(0x4)
900000000001b274:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
900000000001b278:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
900000000001b27c:	00150186 	move	$r6,$r12
900000000001b280:	001501a5 	move	$r5,$r13
900000000001b284:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001b288:	5692ffff 	bl	-93444(0xffe92fc) # 9000000000004584 <memcpy>
        ptr[alen - 1] = '/';
900000000001b28c:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
900000000001b290:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
900000000001b294:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000001b298:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001b29c:	0280bc0d 	addi.w	$r13,$r0,47(0x2f)
900000000001b2a0:	2900018d 	st.b	$r13,$r12,0
    while (1) {
900000000001b2a4:	53fdcbff 	b	-568(0xffffdc8) # 900000000001b06c <sfs_namefile+0xfc>
            goto failed_nomem;
900000000001b2a8:	03400000 	andi	$r0,$r0,0x0

failed_nomem:
    ret = -E_NO_MEM;
900000000001b2ac:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
900000000001b2b0:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
900000000001b2b4:	50001000 	b	16(0x10) # 900000000001b2c4 <sfs_namefile+0x354>
            goto failed;
900000000001b2b8:	03400000 	andi	$r0,$r0,0x0
900000000001b2bc:	50000800 	b	8(0x8) # 900000000001b2c4 <sfs_namefile+0x354>
            goto failed;
900000000001b2c0:	03400000 	andi	$r0,$r0,0x0
failed:
    vop_ref_dec(node);
900000000001b2c4:	28fde2c4 	ld.d	$r4,$r22,-136(0xf78)
900000000001b2c8:	57aa0fff 	bl	-22004(0xfffaa0c) # 9000000000015cd4 <inode_ref_dec>
    kfree(entry);
900000000001b2cc:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
900000000001b2d0:	56c847ff 	bl	-79804(0xffec844) # 9000000000007b14 <kfree>
    return ret;
900000000001b2d4:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
}
900000000001b2d8:	00150184 	move	$r4,$r12
900000000001b2dc:	28c22061 	ld.d	$r1,$r3,136(0x88)
900000000001b2e0:	28c20076 	ld.d	$r22,$r3,128(0x80)
900000000001b2e4:	02c24063 	addi.d	$r3,$r3,144(0x90)
900000000001b2e8:	4c000020 	jirl	$r0,$r1,0

900000000001b2ec <sfs_getdirentry_sub_nolock>:

static int
sfs_getdirentry_sub_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
900000000001b2ec:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000001b2f0:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000001b2f4:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000001b2f8:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000001b2fc:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000001b300:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
900000000001b304:	001500cc 	move	$r12,$r6
900000000001b308:	29ff02c7 	st.d	$r7,$r22,-64(0xfc0)
900000000001b30c:	0040818c 	slli.w	$r12,$r12,0x0
900000000001b310:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
    int ret, i, nslots = sin->din->blocks;
900000000001b314:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001b318:	28c0018c 	ld.d	$r12,$r12,0
900000000001b31c:	2880218c 	ld.w	$r12,$r12,8(0x8)
900000000001b320:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
    for (i = 0; i < nslots; i ++) {
900000000001b324:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
900000000001b328:	50006800 	b	104(0x68) # 900000000001b390 <sfs_getdirentry_sub_nolock+0xa4>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
900000000001b32c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001b330:	28ff02c7 	ld.d	$r7,$r22,-64(0xfc0)
900000000001b334:	00150186 	move	$r6,$r12
900000000001b338:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
900000000001b33c:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001b340:	57ee5bff 	bl	-4520(0xfffee58) # 900000000001a198 <sfs_dirent_read_nolock>
900000000001b344:	0015008c 	move	$r12,$r4
900000000001b348:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
900000000001b34c:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000001b350:	40000d80 	beqz	$r12,12(0xc) # 900000000001b35c <sfs_getdirentry_sub_nolock+0x70>
            return ret;
900000000001b354:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000001b358:	50004800 	b	72(0x48) # 900000000001b3a0 <sfs_getdirentry_sub_nolock+0xb4>
        }
        if (entry->ino != 0) {
900000000001b35c:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000001b360:	2880018c 	ld.w	$r12,$r12,0
900000000001b364:	40002180 	beqz	$r12,32(0x20) # 900000000001b384 <sfs_getdirentry_sub_nolock+0x98>
            if (slot == 0) {
900000000001b368:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
900000000001b36c:	44000d80 	bnez	$r12,12(0xc) # 900000000001b378 <sfs_getdirentry_sub_nolock+0x8c>
                return 0;
900000000001b370:	0015000c 	move	$r12,$r0
900000000001b374:	50002c00 	b	44(0x2c) # 900000000001b3a0 <sfs_getdirentry_sub_nolock+0xb4>
            }
            slot --;
900000000001b378:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
900000000001b37c:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
900000000001b380:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
    for (i = 0; i < nslots; i ++) {
900000000001b384:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001b388:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000001b38c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000001b390:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
900000000001b394:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000001b398:	63ff95ac 	blt	$r13,$r12,-108(0x3ff94) # 900000000001b32c <sfs_getdirentry_sub_nolock+0x40>
        }
    }
    return -E_NOENT;
900000000001b39c:	02bfc00c 	addi.w	$r12,$r0,-16(0xff0)
}
900000000001b3a0:	00150184 	move	$r4,$r12
900000000001b3a4:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000001b3a8:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000001b3ac:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000001b3b0:	4c000020 	jirl	$r0,$r1,0

900000000001b3b4 <sfs_getdirentry>:

static int
sfs_getdirentry(struct inode *node, struct iobuf *iob) {
900000000001b3b4:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
900000000001b3b8:	29c16061 	st.d	$r1,$r3,88(0x58)
900000000001b3bc:	29c14076 	st.d	$r22,$r3,80(0x50)
900000000001b3c0:	02c18076 	addi.d	$r22,$r3,96(0x60)
900000000001b3c4:	29fea2c4 	st.d	$r4,$r22,-88(0xfa8)
900000000001b3c8:	29fe82c5 	st.d	$r5,$r22,-96(0xfa0)
    struct sfs_disk_entry *entry;
    if ((entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
900000000001b3cc:	02841004 	addi.w	$r4,$r0,260(0x104)
900000000001b3d0:	56c26bff 	bl	-81304(0xffec268) # 9000000000007638 <kmalloc>
900000000001b3d4:	29ff82c4 	st.d	$r4,$r22,-32(0xfe0)
900000000001b3d8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001b3dc:	44000d80 	bnez	$r12,12(0xc) # 900000000001b3e8 <sfs_getdirentry+0x34>
        return -E_NO_MEM;
900000000001b3e0:	02bff00c 	addi.w	$r12,$r0,-4(0xffc)
900000000001b3e4:	50015c00 	b	348(0x15c) # 900000000001b540 <sfs_getdirentry+0x18c>
    }

    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
900000000001b3e8:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000001b3ec:	28c1818c 	ld.d	$r12,$r12,96(0x60)
900000000001b3f0:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
900000000001b3f4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001b3f8:	40001180 	beqz	$r12,16(0x10) # 900000000001b408 <sfs_getdirentry+0x54>
900000000001b3fc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001b400:	2882c18c 	ld.w	$r12,$r12,176(0xb0)
900000000001b404:	40001d80 	beqz	$r12,28(0x1c) # 900000000001b420 <sfs_getdirentry+0x6c>
900000000001b408:	1c000106 	pcaddu12i	$r6,8(0x8)
900000000001b40c:	02fb60c6 	addi.d	$r6,$r6,-296(0xed8)
900000000001b410:	028ab405 	addi.w	$r5,$r0,685(0x2ad)
900000000001b414:	1c000104 	pcaddu12i	$r4,8(0x8)
900000000001b418:	02ebb084 	addi.d	$r4,$r4,-1300(0xaec)
900000000001b41c:	571867ff 	bl	-59292(0xfff1864) # 900000000000cc80 <__panic>
900000000001b420:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001b424:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
900000000001b428:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000001b42c:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
900000000001b430:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001b434:	40001d80 	beqz	$r12,28(0x1c) # 900000000001b450 <sfs_getdirentry+0x9c>
900000000001b438:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001b43c:	2881418c 	ld.w	$r12,$r12,80(0x50)
900000000001b440:	0015018d 	move	$r13,$r12
900000000001b444:	1400002c 	lu12i.w	$r12,1(0x1)
900000000001b448:	0388d58c 	ori	$r12,$r12,0x235
900000000001b44c:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000001b468 <sfs_getdirentry+0xb4>
900000000001b450:	1c000106 	pcaddu12i	$r6,8(0x8)
900000000001b454:	02ee60c6 	addi.d	$r6,$r6,-1128(0xb98)
900000000001b458:	028ab805 	addi.w	$r5,$r0,686(0x2ae)
900000000001b45c:	1c000104 	pcaddu12i	$r4,8(0x8)
900000000001b460:	02ea9084 	addi.d	$r4,$r4,-1372(0xaa4)
900000000001b464:	57181fff 	bl	-59364(0xfff181c) # 900000000000cc80 <__panic>
900000000001b468:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001b46c:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)

    int ret, slot;
    off_t offset = iob->io_offset;
900000000001b470:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
900000000001b474:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000001b478:	29fee2cc 	st.d	$r12,$r22,-72(0xfb8)
    if (offset < 0 || offset % sfs_dentry_size != 0) {
900000000001b47c:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000001b480:	0343fd8c 	andi	$r12,$r12,0xff
900000000001b484:	40001580 	beqz	$r12,20(0x14) # 900000000001b498 <sfs_getdirentry+0xe4>
        kfree(entry);
900000000001b488:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
900000000001b48c:	56c68bff 	bl	-80248(0xffec688) # 9000000000007b14 <kfree>
        return -E_INVAL;
900000000001b490:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
900000000001b494:	5000ac00 	b	172(0xac) # 900000000001b540 <sfs_getdirentry+0x18c>
    }
    if ((slot = offset / sfs_dentry_size) > sin->din->blocks) {
900000000001b498:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000001b49c:	0045218c 	srli.d	$r12,$r12,0x8
900000000001b4a0:	29bed2cc 	st.w	$r12,$r22,-76(0xfb4)
900000000001b4a4:	28bed2cd 	ld.w	$r13,$r22,-76(0xfb4)
900000000001b4a8:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000001b4ac:	28c0018c 	ld.d	$r12,$r12,0
900000000001b4b0:	2880218c 	ld.w	$r12,$r12,8(0x8)
900000000001b4b4:	6c00158d 	bgeu	$r12,$r13,20(0x14) # 900000000001b4c8 <sfs_getdirentry+0x114>
        kfree(entry);
900000000001b4b8:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
900000000001b4bc:	56c65bff 	bl	-80296(0xffec658) # 9000000000007b14 <kfree>
        return -E_NOENT;
900000000001b4c0:	02bfc00c 	addi.w	$r12,$r0,-16(0xff0)
900000000001b4c4:	50007c00 	b	124(0x7c) # 900000000001b540 <sfs_getdirentry+0x18c>
    }
    lock_sin(sin);
900000000001b4c8:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
900000000001b4cc:	57db3fff 	bl	-9412(0xfffdb3c) # 9000000000019008 <lock_sin>
    if ((ret = sfs_getdirentry_sub_nolock(sfs, sin, slot, entry)) != 0) {
900000000001b4d0:	28bed2cc 	ld.w	$r12,$r22,-76(0xfb4)
900000000001b4d4:	28ff82c7 	ld.d	$r7,$r22,-32(0xfe0)
900000000001b4d8:	00150186 	move	$r6,$r12
900000000001b4dc:	28ff02c5 	ld.d	$r5,$r22,-64(0xfc0)
900000000001b4e0:	28ff42c4 	ld.d	$r4,$r22,-48(0xfd0)
900000000001b4e4:	57fe0bff 	bl	-504(0xffffe08) # 900000000001b2ec <sfs_getdirentry_sub_nolock>
900000000001b4e8:	0015008c 	move	$r12,$r4
900000000001b4ec:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000001b4f0:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001b4f4:	40001180 	beqz	$r12,16(0x10) # 900000000001b504 <sfs_getdirentry+0x150>
        unlock_sin(sin);
900000000001b4f8:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
900000000001b4fc:	57db47ff 	bl	-9404(0xfffdb44) # 9000000000019040 <unlock_sin>
        goto out;
900000000001b500:	50003400 	b	52(0x34) # 900000000001b534 <sfs_getdirentry+0x180>
    }
    unlock_sin(sin);
900000000001b504:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
900000000001b508:	57db3bff 	bl	-9416(0xfffdb38) # 9000000000019040 <unlock_sin>
    ret = iobuf_move(iob, entry->name, sfs_dentry_size, 1, NULL);
900000000001b50c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001b510:	02c0118c 	addi.d	$r12,$r12,4(0x4)
900000000001b514:	00150008 	move	$r8,$r0
900000000001b518:	02800407 	addi.w	$r7,$r0,1(0x1)
900000000001b51c:	02840006 	addi.w	$r6,$r0,256(0x100)
900000000001b520:	00150185 	move	$r5,$r12
900000000001b524:	28fe82c4 	ld.d	$r4,$r22,-96(0xfa0)
900000000001b528:	57960fff 	bl	-27124(0xfff960c) # 9000000000014b34 <iobuf_move>
900000000001b52c:	0015008c 	move	$r12,$r4
900000000001b530:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
out:
    kfree(entry);
900000000001b534:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
900000000001b538:	56c5dfff 	bl	-80420(0xffec5dc) # 9000000000007b14 <kfree>
    return ret;
900000000001b53c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
900000000001b540:	00150184 	move	$r4,$r12
900000000001b544:	28c16061 	ld.d	$r1,$r3,88(0x58)
900000000001b548:	28c14076 	ld.d	$r22,$r3,80(0x50)
900000000001b54c:	02c18063 	addi.d	$r3,$r3,96(0x60)
900000000001b550:	4c000020 	jirl	$r0,$r1,0

900000000001b554 <sfs_reclaim>:

static int
sfs_reclaim(struct inode *node) {
900000000001b554:	02fe4063 	addi.d	$r3,$r3,-112(0xf90)
900000000001b558:	29c1a061 	st.d	$r1,$r3,104(0x68)
900000000001b55c:	29c18076 	st.d	$r22,$r3,96(0x60)
900000000001b560:	02c1c076 	addi.d	$r22,$r3,112(0x70)
900000000001b564:	29fe62c4 	st.d	$r4,$r22,-104(0xf98)
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
900000000001b568:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
900000000001b56c:	28c1818c 	ld.d	$r12,$r12,96(0x60)
900000000001b570:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
900000000001b574:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001b578:	40001180 	beqz	$r12,16(0x10) # 900000000001b588 <sfs_reclaim+0x34>
900000000001b57c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001b580:	2882c18c 	ld.w	$r12,$r12,176(0xb0)
900000000001b584:	40001d80 	beqz	$r12,28(0x1c) # 900000000001b5a0 <sfs_reclaim+0x4c>
900000000001b588:	1c000106 	pcaddu12i	$r6,8(0x8)
900000000001b58c:	02f560c6 	addi.d	$r6,$r6,-680(0xd58)
900000000001b590:	028b2005 	addi.w	$r5,$r0,712(0x2c8)
900000000001b594:	1c000104 	pcaddu12i	$r4,8(0x8)
900000000001b598:	02e5b084 	addi.d	$r4,$r4,-1684(0x96c)
900000000001b59c:	5716e7ff 	bl	-59676(0xfff16e4) # 900000000000cc80 <__panic>
900000000001b5a0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001b5a4:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
900000000001b5a8:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
900000000001b5ac:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
900000000001b5b0:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001b5b4:	40001d80 	beqz	$r12,28(0x1c) # 900000000001b5d0 <sfs_reclaim+0x7c>
900000000001b5b8:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001b5bc:	2881418c 	ld.w	$r12,$r12,80(0x50)
900000000001b5c0:	0015018d 	move	$r13,$r12
900000000001b5c4:	1400002c 	lu12i.w	$r12,1(0x1)
900000000001b5c8:	0388d58c 	ori	$r12,$r12,0x235
900000000001b5cc:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000001b5e8 <sfs_reclaim+0x94>
900000000001b5d0:	1c000106 	pcaddu12i	$r6,8(0x8)
900000000001b5d4:	02e860c6 	addi.d	$r6,$r6,-1512(0xa18)
900000000001b5d8:	028b2405 	addi.w	$r5,$r0,713(0x2c9)
900000000001b5dc:	1c000104 	pcaddu12i	$r4,8(0x8)
900000000001b5e0:	02e49084 	addi.d	$r4,$r4,-1756(0x924)
900000000001b5e4:	57169fff 	bl	-59748(0xfff169c) # 900000000000cc80 <__panic>
900000000001b5e8:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001b5ec:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)

    int  ret = -E_BUSY;
900000000001b5f0:	02bfc40c 	addi.w	$r12,$r0,-15(0xff1)
900000000001b5f4:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    uint32_t ent;
    lock_sfs_fs(sfs);
900000000001b5f8:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001b5fc:	540fac00 	bl	4012(0xfac) # 900000000001c5a8 <lock_sfs_fs>
    assert(sin->reclaim_count > 0);
900000000001b600:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001b604:	2880418c 	ld.w	$r12,$r12,16(0x10)
900000000001b608:	60001c0c 	blt	$r0,$r12,28(0x1c) # 900000000001b624 <sfs_reclaim+0xd0>
900000000001b60c:	1c000106 	pcaddu12i	$r6,8(0x8)
900000000001b610:	02f790c6 	addi.d	$r6,$r6,-540(0xde4)
900000000001b614:	028b3805 	addi.w	$r5,$r0,718(0x2ce)
900000000001b618:	1c000104 	pcaddu12i	$r4,8(0x8)
900000000001b61c:	02e3a084 	addi.d	$r4,$r4,-1816(0x8e8)
900000000001b620:	571663ff 	bl	-59808(0xfff1660) # 900000000000cc80 <__panic>
    if ((-- sin->reclaim_count) != 0 || inode_ref_count(node) != 0) {
900000000001b624:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001b628:	2880418c 	ld.w	$r12,$r12,16(0x10)
900000000001b62c:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
900000000001b630:	0015018d 	move	$r13,$r12
900000000001b634:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001b638:	2980418d 	st.w	$r13,$r12,16(0x10)
900000000001b63c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001b640:	2880418c 	ld.w	$r12,$r12,16(0x10)
900000000001b644:	4401d180 	bnez	$r12,464(0x1d0) # 900000000001b814 <sfs_reclaim+0x2c0>
900000000001b648:	28fe62c4 	ld.d	$r4,$r22,-104(0xf98)
900000000001b64c:	57d98bff 	bl	-9848(0xfffd988) # 9000000000018fd4 <inode_ref_count>
900000000001b650:	0015008c 	move	$r12,$r4
900000000001b654:	4401c180 	bnez	$r12,448(0x1c0) # 900000000001b814 <sfs_reclaim+0x2c0>
        goto failed_unlock;
    }
    if (_SFS_INODE_GET_NLINKS(sin->din) == 0) {
900000000001b658:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001b65c:	28c0018c 	ld.d	$r12,$r12,0
900000000001b660:	02c0118c 	addi.d	$r12,$r12,4(0x4)
900000000001b664:	2880018c 	ld.w	$r12,$r12,0
900000000001b668:	29bf12cc 	st.w	$r12,$r22,-60(0xfc4)
900000000001b66c:	28bf12cc 	ld.w	$r12,$r22,-60(0xfc4)
900000000001b670:	0044c18c 	srli.w	$r12,$r12,0x10
900000000001b674:	29bf12cc 	st.w	$r12,$r22,-60(0xfc4)
900000000001b678:	28bf12cc 	ld.w	$r12,$r22,-60(0xfc4)
900000000001b67c:	44008180 	bnez	$r12,128(0x80) # 900000000001b6fc <sfs_reclaim+0x1a8>
        if ((ret = vop_truncate(node, 0)) != 0) {
900000000001b680:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
900000000001b684:	29fee2cc 	st.d	$r12,$r22,-72(0xfb8)
900000000001b688:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000001b68c:	40002180 	beqz	$r12,32(0x20) # 900000000001b6ac <sfs_reclaim+0x158>
900000000001b690:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000001b694:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
900000000001b698:	40001580 	beqz	$r12,20(0x14) # 900000000001b6ac <sfs_reclaim+0x158>
900000000001b69c:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000001b6a0:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
900000000001b6a4:	28c1818c 	ld.d	$r12,$r12,96(0x60)
900000000001b6a8:	44001d80 	bnez	$r12,28(0x1c) # 900000000001b6c4 <sfs_reclaim+0x170>
900000000001b6ac:	1c000106 	pcaddu12i	$r6,8(0x8)
900000000001b6b0:	02f5d0c6 	addi.d	$r6,$r6,-652(0xd74)
900000000001b6b4:	028b4c05 	addi.w	$r5,$r0,723(0x2d3)
900000000001b6b8:	1c000104 	pcaddu12i	$r4,8(0x8)
900000000001b6bc:	02e12084 	addi.d	$r4,$r4,-1976(0x848)
900000000001b6c0:	5715c3ff 	bl	-59968(0xfff15c0) # 900000000000cc80 <__panic>
900000000001b6c4:	1c000105 	pcaddu12i	$r5,8(0x8)
900000000001b6c8:	02f710a5 	addi.d	$r5,$r5,-572(0xdc4)
900000000001b6cc:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
900000000001b6d0:	57a92fff 	bl	-22228(0xfffa92c) # 9000000000015ffc <inode_check>
900000000001b6d4:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000001b6d8:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
900000000001b6dc:	28c1818c 	ld.d	$r12,$r12,96(0x60)
900000000001b6e0:	00150005 	move	$r5,$r0
900000000001b6e4:	28fe62c4 	ld.d	$r4,$r22,-104(0xf98)
900000000001b6e8:	4c000181 	jirl	$r1,$r12,0
900000000001b6ec:	0015008c 	move	$r12,$r4
900000000001b6f0:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000001b6f4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001b6f8:	44012580 	bnez	$r12,292(0x124) # 900000000001b81c <sfs_reclaim+0x2c8>
            goto failed_unlock;
        }
    }
    if (sin->dirty) {
900000000001b6fc:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001b700:	2880318c 	ld.w	$r12,$r12,12(0xc)
900000000001b704:	40007d80 	beqz	$r12,124(0x7c) # 900000000001b780 <sfs_reclaim+0x22c>
        if ((ret = vop_fsync(node)) != 0) {
900000000001b708:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
900000000001b70c:	29fec2cc 	st.d	$r12,$r22,-80(0xfb0)
900000000001b710:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000001b714:	40002180 	beqz	$r12,32(0x20) # 900000000001b734 <sfs_reclaim+0x1e0>
900000000001b718:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000001b71c:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
900000000001b720:	40001580 	beqz	$r12,20(0x14) # 900000000001b734 <sfs_reclaim+0x1e0>
900000000001b724:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000001b728:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
900000000001b72c:	28c0c18c 	ld.d	$r12,$r12,48(0x30)
900000000001b730:	44001d80 	bnez	$r12,28(0x1c) # 900000000001b74c <sfs_reclaim+0x1f8>
900000000001b734:	1c000106 	pcaddu12i	$r6,8(0x8)
900000000001b738:	02ec10c6 	addi.d	$r6,$r6,-1276(0xb04)
900000000001b73c:	028b6005 	addi.w	$r5,$r0,728(0x2d8)
900000000001b740:	1c0000e4 	pcaddu12i	$r4,7(0x7)
900000000001b744:	02df0084 	addi.d	$r4,$r4,1984(0x7c0)
900000000001b748:	57153bff 	bl	-60104(0xfff1538) # 900000000000cc80 <__panic>
900000000001b74c:	1c000105 	pcaddu12i	$r5,8(0x8)
900000000001b750:	02ed30a5 	addi.d	$r5,$r5,-1204(0xb4c)
900000000001b754:	28fec2c4 	ld.d	$r4,$r22,-80(0xfb0)
900000000001b758:	57a8a7ff 	bl	-22364(0xfffa8a4) # 9000000000015ffc <inode_check>
900000000001b75c:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000001b760:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
900000000001b764:	28c0c18c 	ld.d	$r12,$r12,48(0x30)
900000000001b768:	28fe62c4 	ld.d	$r4,$r22,-104(0xf98)
900000000001b76c:	4c000181 	jirl	$r1,$r12,0
900000000001b770:	0015008c 	move	$r12,$r4
900000000001b774:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000001b778:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001b77c:	4400a980 	bnez	$r12,168(0xa8) # 900000000001b824 <sfs_reclaim+0x2d0>
            goto failed_unlock;
        }
    }
    sfs_remove_links(sin);
900000000001b780:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
900000000001b784:	57db0fff 	bl	-9460(0xfffdb0c) # 9000000000019290 <sfs_remove_links>
    unlock_sfs_fs(sfs);
900000000001b788:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001b78c:	540ec400 	bl	3780(0xec4) # 900000000001c650 <unlock_sfs_fs>

    if (_SFS_INODE_GET_NLINKS(sin->din) == 0) {
900000000001b790:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001b794:	28c0018c 	ld.d	$r12,$r12,0
900000000001b798:	02c0118c 	addi.d	$r12,$r12,4(0x4)
900000000001b79c:	2880018c 	ld.w	$r12,$r12,0
900000000001b7a0:	29beb2cc 	st.w	$r12,$r22,-84(0xfac)
900000000001b7a4:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
900000000001b7a8:	0044c18c 	srli.w	$r12,$r12,0x10
900000000001b7ac:	29beb2cc 	st.w	$r12,$r22,-84(0xfac)
900000000001b7b0:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
900000000001b7b4:	44004180 	bnez	$r12,64(0x40) # 900000000001b7f4 <sfs_reclaim+0x2a0>
        sfs_block_free(sfs, sin->ino);
900000000001b7b8:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001b7bc:	2880218c 	ld.w	$r12,$r12,8(0x8)
900000000001b7c0:	00150185 	move	$r5,$r12
900000000001b7c4:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001b7c8:	57dcf3ff 	bl	-8976(0xfffdcf0) # 90000000000194b8 <sfs_block_free>
        if ((ent = sin->din->indirect) != 0) {
900000000001b7cc:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001b7d0:	28c0018c 	ld.d	$r12,$r12,0
900000000001b7d4:	2880f18c 	ld.w	$r12,$r12,60(0x3c)
900000000001b7d8:	29bea2cc 	st.w	$r12,$r22,-88(0xfa8)
900000000001b7dc:	28bea2cc 	ld.w	$r12,$r22,-88(0xfa8)
900000000001b7e0:	40001580 	beqz	$r12,20(0x14) # 900000000001b7f4 <sfs_reclaim+0x2a0>
            sfs_block_free(sfs, ent);
900000000001b7e4:	28bea2cc 	ld.w	$r12,$r22,-88(0xfa8)
900000000001b7e8:	00150185 	move	$r5,$r12
900000000001b7ec:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001b7f0:	57dccbff 	bl	-9016(0xfffdcc8) # 90000000000194b8 <sfs_block_free>
        }
    }
    kfree(sin->din);
900000000001b7f4:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001b7f8:	28c0018c 	ld.d	$r12,$r12,0
900000000001b7fc:	00150184 	move	$r4,$r12
900000000001b800:	56c317ff 	bl	-81132(0xffec314) # 9000000000007b14 <kfree>
    vop_kill(node);
900000000001b804:	28fe62c4 	ld.d	$r4,$r22,-104(0xf98)
900000000001b808:	57a3d7ff 	bl	-23596(0xfffa3d4) # 9000000000015bdc <inode_kill>
    return 0;
900000000001b80c:	0015000c 	move	$r12,$r0
900000000001b810:	50002400 	b	36(0x24) # 900000000001b834 <sfs_reclaim+0x2e0>
        goto failed_unlock;
900000000001b814:	03400000 	andi	$r0,$r0,0x0
900000000001b818:	50001000 	b	16(0x10) # 900000000001b828 <sfs_reclaim+0x2d4>
            goto failed_unlock;
900000000001b81c:	03400000 	andi	$r0,$r0,0x0
900000000001b820:	50000800 	b	8(0x8) # 900000000001b828 <sfs_reclaim+0x2d4>
            goto failed_unlock;
900000000001b824:	03400000 	andi	$r0,$r0,0x0

failed_unlock:
    unlock_sfs_fs(sfs);
900000000001b828:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001b82c:	540e2400 	bl	3620(0xe24) # 900000000001c650 <unlock_sfs_fs>
    return ret;
900000000001b830:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
900000000001b834:	00150184 	move	$r4,$r12
900000000001b838:	28c1a061 	ld.d	$r1,$r3,104(0x68)
900000000001b83c:	28c18076 	ld.d	$r22,$r3,96(0x60)
900000000001b840:	02c1c063 	addi.d	$r3,$r3,112(0x70)
900000000001b844:	4c000020 	jirl	$r0,$r1,0

900000000001b848 <sfs_gettype>:

static int
sfs_gettype(struct inode *node, uint32_t *type_store) {
900000000001b848:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000001b84c:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000001b850:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000001b854:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000001b858:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
900000000001b85c:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
    struct sfs_disk_inode *din = vop_info(node, sfs_inode)->din;
900000000001b860:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001b864:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000001b868:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001b86c:	40001d80 	beqz	$r12,28(0x1c) # 900000000001b888 <sfs_gettype+0x40>
900000000001b870:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001b874:	2881418c 	ld.w	$r12,$r12,80(0x50)
900000000001b878:	0015018d 	move	$r13,$r12
900000000001b87c:	1400002c 	lu12i.w	$r12,1(0x1)
900000000001b880:	0388d58c 	ori	$r12,$r12,0x235
900000000001b884:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000001b8a0 <sfs_gettype+0x58>
900000000001b888:	1c0000e6 	pcaddu12i	$r6,7(0x7)
900000000001b88c:	02dd80c6 	addi.d	$r6,$r6,1888(0x760)
900000000001b890:	028bc005 	addi.w	$r5,$r0,752(0x2f0)
900000000001b894:	1c0000e4 	pcaddu12i	$r4,7(0x7)
900000000001b898:	02d9b084 	addi.d	$r4,$r4,1644(0x66c)
900000000001b89c:	5713e7ff 	bl	-60444(0xfff13e4) # 900000000000cc80 <__panic>
900000000001b8a0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001b8a4:	28c0018c 	ld.d	$r12,$r12,0
900000000001b8a8:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    switch (_SFS_INODE_GET_TYPE(din)) {
900000000001b8ac:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001b8b0:	02c0118c 	addi.d	$r12,$r12,4(0x4)
900000000001b8b4:	2880018c 	ld.w	$r12,$r12,0
900000000001b8b8:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
900000000001b8bc:	28bf72cd 	ld.w	$r13,$r22,-36(0xfdc)
900000000001b8c0:	140001ec 	lu12i.w	$r12,15(0xf)
900000000001b8c4:	03bffd8c 	ori	$r12,$r12,0xfff
900000000001b8c8:	0014b1ac 	and	$r12,$r13,$r12
900000000001b8cc:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
900000000001b8d0:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
900000000001b8d4:	0015018e 	move	$r14,$r12
900000000001b8d8:	0280080d 	addi.w	$r13,$r0,2(0x2)
900000000001b8dc:	580021cd 	beq	$r14,$r13,32(0x20) # 900000000001b8fc <sfs_gettype+0xb4>
900000000001b8e0:	0015018e 	move	$r14,$r12
900000000001b8e4:	02800c0d 	addi.w	$r13,$r0,3(0x3)
900000000001b8e8:	58003dcd 	beq	$r14,$r13,60(0x3c) # 900000000001b924 <sfs_gettype+0xdc>
900000000001b8ec:	0015018d 	move	$r13,$r12
900000000001b8f0:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000001b8f4:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000001b910 <sfs_gettype+0xc8>
900000000001b8f8:	50004000 	b	64(0x40) # 900000000001b938 <sfs_gettype+0xf0>
    case SFS_TYPE_DIR:
        *type_store = S_IFDIR;
900000000001b8fc:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000001b900:	1400004d 	lu12i.w	$r13,2(0x2)
900000000001b904:	2980018d 	st.w	$r13,$r12,0
        return 0;
900000000001b908:	0015000c 	move	$r12,$r0
900000000001b90c:	50007000 	b	112(0x70) # 900000000001b97c <sfs_gettype+0x134>
    case SFS_TYPE_FILE:
        *type_store = S_IFREG;
900000000001b910:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000001b914:	1400002d 	lu12i.w	$r13,1(0x1)
900000000001b918:	2980018d 	st.w	$r13,$r12,0
        return 0;
900000000001b91c:	0015000c 	move	$r12,$r0
900000000001b920:	50005c00 	b	92(0x5c) # 900000000001b97c <sfs_gettype+0x134>
    case SFS_TYPE_LINK:
        *type_store = S_IFLNK;
900000000001b924:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000001b928:	1400006d 	lu12i.w	$r13,3(0x3)
900000000001b92c:	2980018d 	st.w	$r13,$r12,0
        return 0;
900000000001b930:	0015000c 	move	$r12,$r0
900000000001b934:	50004800 	b	72(0x48) # 900000000001b97c <sfs_gettype+0x134>
    }
    panic("invalid file type %d.\n", _SFS_INODE_GET_TYPE(din));
900000000001b938:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001b93c:	02c0118c 	addi.d	$r12,$r12,4(0x4)
900000000001b940:	2880018c 	ld.w	$r12,$r12,0
900000000001b944:	29bf62cc 	st.w	$r12,$r22,-40(0xfd8)
900000000001b948:	28bf62cd 	ld.w	$r13,$r22,-40(0xfd8)
900000000001b94c:	140001ec 	lu12i.w	$r12,15(0xf)
900000000001b950:	03bffd8c 	ori	$r12,$r12,0xfff
900000000001b954:	0014b1ac 	and	$r12,$r13,$r12
900000000001b958:	29bf62cc 	st.w	$r12,$r22,-40(0xfd8)
900000000001b95c:	28bf62cc 	ld.w	$r12,$r22,-40(0xfd8)
900000000001b960:	00150187 	move	$r7,$r12
900000000001b964:	1c0000e6 	pcaddu12i	$r6,7(0x7)
900000000001b968:	02d610c6 	addi.d	$r6,$r6,1412(0x584)
900000000001b96c:	028bf005 	addi.w	$r5,$r0,764(0x2fc)
900000000001b970:	1c0000e4 	pcaddu12i	$r4,7(0x7)
900000000001b974:	02d64084 	addi.d	$r4,$r4,1424(0x590)
900000000001b978:	57130bff 	bl	-60664(0xfff1308) # 900000000000cc80 <__panic>
}
900000000001b97c:	00150184 	move	$r4,$r12
900000000001b980:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000001b984:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000001b988:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000001b98c:	4c000020 	jirl	$r0,$r1,0

900000000001b990 <sfs_tryseek>:

static int
sfs_tryseek(struct inode *node, off_t pos) {
900000000001b990:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000001b994:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000001b998:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000001b99c:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000001b9a0:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
900000000001b9a4:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
    if (pos < 0 || pos >= SFS_MAX_FILE_SIZE) {
900000000001b9a8:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
900000000001b9ac:	1410000c 	lu12i.w	$r12,32768(0x8000)
900000000001b9b0:	68000dac 	bltu	$r13,$r12,12(0xc) # 900000000001b9bc <sfs_tryseek+0x2c>
        return -E_INVAL;
900000000001b9b4:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
900000000001b9b8:	5000dc00 	b	220(0xdc) # 900000000001ba94 <sfs_tryseek+0x104>
    }
    struct sfs_inode *sin = vop_info(node, sfs_inode);
900000000001b9bc:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001b9c0:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000001b9c4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001b9c8:	40001d80 	beqz	$r12,28(0x1c) # 900000000001b9e4 <sfs_tryseek+0x54>
900000000001b9cc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001b9d0:	2881418c 	ld.w	$r12,$r12,80(0x50)
900000000001b9d4:	0015018d 	move	$r13,$r12
900000000001b9d8:	1400002c 	lu12i.w	$r12,1(0x1)
900000000001b9dc:	0388d58c 	ori	$r12,$r12,0x235
900000000001b9e0:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000001b9fc <sfs_tryseek+0x6c>
900000000001b9e4:	1c0000e6 	pcaddu12i	$r6,7(0x7)
900000000001b9e8:	02d810c6 	addi.d	$r6,$r6,1540(0x604)
900000000001b9ec:	028c1005 	addi.w	$r5,$r0,772(0x304)
900000000001b9f0:	1c0000e4 	pcaddu12i	$r4,7(0x7)
900000000001b9f4:	02d44084 	addi.d	$r4,$r4,1296(0x510)
900000000001b9f8:	57128bff 	bl	-60792(0xfff1288) # 900000000000cc80 <__panic>
900000000001b9fc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001ba00:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    if (pos > sin->din->size) {
900000000001ba04:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001ba08:	28c0018c 	ld.d	$r12,$r12,0
900000000001ba0c:	2880018c 	ld.w	$r12,$r12,0
900000000001ba10:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
900000000001ba14:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
900000000001ba18:	6c00798d 	bgeu	$r12,$r13,120(0x78) # 900000000001ba90 <sfs_tryseek+0x100>
        return vop_truncate(node, pos);
900000000001ba1c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001ba20:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
900000000001ba24:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001ba28:	40002180 	beqz	$r12,32(0x20) # 900000000001ba48 <sfs_tryseek+0xb8>
900000000001ba2c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001ba30:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
900000000001ba34:	40001580 	beqz	$r12,20(0x14) # 900000000001ba48 <sfs_tryseek+0xb8>
900000000001ba38:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001ba3c:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
900000000001ba40:	28c1818c 	ld.d	$r12,$r12,96(0x60)
900000000001ba44:	44001d80 	bnez	$r12,28(0x1c) # 900000000001ba60 <sfs_tryseek+0xd0>
900000000001ba48:	1c000106 	pcaddu12i	$r6,8(0x8)
900000000001ba4c:	02e760c6 	addi.d	$r6,$r6,-1576(0x9d8)
900000000001ba50:	028c1805 	addi.w	$r5,$r0,774(0x306)
900000000001ba54:	1c0000e4 	pcaddu12i	$r4,7(0x7)
900000000001ba58:	02d2b084 	addi.d	$r4,$r4,1196(0x4ac)
900000000001ba5c:	571227ff 	bl	-60892(0xfff1224) # 900000000000cc80 <__panic>
900000000001ba60:	1c000105 	pcaddu12i	$r5,8(0x8)
900000000001ba64:	02e8a0a5 	addi.d	$r5,$r5,-1496(0xa28)
900000000001ba68:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001ba6c:	57a593ff 	bl	-23152(0xfffa590) # 9000000000015ffc <inode_check>
900000000001ba70:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001ba74:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
900000000001ba78:	28c1818c 	ld.d	$r12,$r12,96(0x60)
900000000001ba7c:	28ff02c5 	ld.d	$r5,$r22,-64(0xfc0)
900000000001ba80:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
900000000001ba84:	4c000181 	jirl	$r1,$r12,0
900000000001ba88:	0015008c 	move	$r12,$r4
900000000001ba8c:	50000800 	b	8(0x8) # 900000000001ba94 <sfs_tryseek+0x104>
    }
    return 0;
900000000001ba90:	0015000c 	move	$r12,$r0
}
900000000001ba94:	00150184 	move	$r4,$r12
900000000001ba98:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000001ba9c:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000001baa0:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000001baa4:	4c000020 	jirl	$r0,$r1,0

900000000001baa8 <sfs_truncfile>:
static int
sfs_truncfile(struct inode *node, off_t len) {
900000000001baa8:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
900000000001baac:	29c16061 	st.d	$r1,$r3,88(0x58)
900000000001bab0:	29c14076 	st.d	$r22,$r3,80(0x50)
900000000001bab4:	02c18076 	addi.d	$r22,$r3,96(0x60)
900000000001bab8:	29fea2c4 	st.d	$r4,$r22,-88(0xfa8)
900000000001babc:	29fe82c5 	st.d	$r5,$r22,-96(0xfa0)
    if (len < 0 || len > SFS_MAX_FILE_SIZE) {
900000000001bac0:	28fe82cd 	ld.d	$r13,$r22,-96(0xfa0)
900000000001bac4:	1410000c 	lu12i.w	$r12,32768(0x8000)
900000000001bac8:	6c000d8d 	bgeu	$r12,$r13,12(0xc) # 900000000001bad4 <sfs_truncfile+0x2c>
        return -E_INVAL;
900000000001bacc:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
900000000001bad0:	50020800 	b	520(0x208) # 900000000001bcd8 <sfs_truncfile+0x230>
    }
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
900000000001bad4:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000001bad8:	28c1818c 	ld.d	$r12,$r12,96(0x60)
900000000001badc:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
900000000001bae0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001bae4:	40001180 	beqz	$r12,16(0x10) # 900000000001baf4 <sfs_truncfile+0x4c>
900000000001bae8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001baec:	2882c18c 	ld.w	$r12,$r12,176(0xb0)
900000000001baf0:	40001d80 	beqz	$r12,28(0x1c) # 900000000001bb0c <sfs_truncfile+0x64>
900000000001baf4:	1c0000e6 	pcaddu12i	$r6,7(0x7)
900000000001baf8:	02dfb0c6 	addi.d	$r6,$r6,2028(0x7ec)
900000000001bafc:	028c3c05 	addi.w	$r5,$r0,783(0x30f)
900000000001bb00:	1c0000e4 	pcaddu12i	$r4,7(0x7)
900000000001bb04:	02d00084 	addi.d	$r4,$r4,1024(0x400)
900000000001bb08:	57117bff 	bl	-61064(0xfff1178) # 900000000000cc80 <__panic>
900000000001bb0c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001bb10:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
900000000001bb14:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000001bb18:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
900000000001bb1c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001bb20:	40001d80 	beqz	$r12,28(0x1c) # 900000000001bb3c <sfs_truncfile+0x94>
900000000001bb24:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001bb28:	2881418c 	ld.w	$r12,$r12,80(0x50)
900000000001bb2c:	0015018d 	move	$r13,$r12
900000000001bb30:	1400002c 	lu12i.w	$r12,1(0x1)
900000000001bb34:	0388d58c 	ori	$r12,$r12,0x235
900000000001bb38:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000001bb54 <sfs_truncfile+0xac>
900000000001bb3c:	1c0000e6 	pcaddu12i	$r6,7(0x7)
900000000001bb40:	02d2b0c6 	addi.d	$r6,$r6,1196(0x4ac)
900000000001bb44:	028c4005 	addi.w	$r5,$r0,784(0x310)
900000000001bb48:	1c0000e4 	pcaddu12i	$r4,7(0x7)
900000000001bb4c:	02cee084 	addi.d	$r4,$r4,952(0x3b8)
900000000001bb50:	571133ff 	bl	-61136(0xfff1130) # 900000000000cc80 <__panic>
900000000001bb54:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001bb58:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
    struct sfs_disk_inode *din = sin->din;
900000000001bb5c:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001bb60:	28c0018c 	ld.d	$r12,$r12,0
900000000001bb64:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)

    int ret = 0;
900000000001bb68:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
    uint32_t nblks, tblks = ROUNDUP_DIV_2N(len, SFS_BLKSIZE_SHIFT);
900000000001bb6c:	1400002c 	lu12i.w	$r12,1(0x1)
900000000001bb70:	29bef2cc 	st.w	$r12,$r22,-68(0xfbc)
900000000001bb74:	2abef2cd 	ld.wu	$r13,$r22,-68(0xfbc)
900000000001bb78:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
900000000001bb7c:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001bb80:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
900000000001bb84:	0045318c 	srli.d	$r12,$r12,0xc
900000000001bb88:	29bee2cc 	st.w	$r12,$r22,-72(0xfb8)
    if (din->size == len) {
900000000001bb8c:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000001bb90:	2880018c 	ld.w	$r12,$r12,0
900000000001bb94:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
900000000001bb98:	28fe82cd 	ld.d	$r13,$r22,-96(0xfa0)
900000000001bb9c:	5c0035ac 	bne	$r13,$r12,52(0x34) # 900000000001bbd0 <sfs_truncfile+0x128>
        assert(tblks == din->blocks);
900000000001bba0:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000001bba4:	2880218d 	ld.w	$r13,$r12,8(0x8)
900000000001bba8:	28bee2cc 	ld.w	$r12,$r22,-72(0xfb8)
900000000001bbac:	58001d8d 	beq	$r12,$r13,28(0x1c) # 900000000001bbc8 <sfs_truncfile+0x120>
900000000001bbb0:	1c000106 	pcaddu12i	$r6,8(0x8)
900000000001bbb4:	02e3a0c6 	addi.d	$r6,$r6,-1816(0x8e8)
900000000001bbb8:	028c5805 	addi.w	$r5,$r0,790(0x316)
900000000001bbbc:	1c0000e4 	pcaddu12i	$r4,7(0x7)
900000000001bbc0:	02cd1084 	addi.d	$r4,$r4,836(0x344)
900000000001bbc4:	5710bfff 	bl	-61252(0xfff10bc) # 900000000000cc80 <__panic>
        return 0;
900000000001bbc8:	0015000c 	move	$r12,$r0
900000000001bbcc:	50010c00 	b	268(0x10c) # 900000000001bcd8 <sfs_truncfile+0x230>
    }

    lock_sin(sin);
900000000001bbd0:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
900000000001bbd4:	57d437ff 	bl	-11212(0xfffd434) # 9000000000019008 <lock_sin>
    nblks = din->blocks;
900000000001bbd8:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000001bbdc:	2880218c 	ld.w	$r12,$r12,8(0x8)
900000000001bbe0:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
    if (nblks < tblks) {
900000000001bbe4:	28bfa2cd 	ld.w	$r13,$r22,-24(0xfe8)
900000000001bbe8:	28bee2cc 	ld.w	$r12,$r22,-72(0xfb8)
900000000001bbec:	6c004dac 	bgeu	$r13,$r12,76(0x4c) # 900000000001bc38 <sfs_truncfile+0x190>
        while (nblks != tblks) {
900000000001bbf0:	50003800 	b	56(0x38) # 900000000001bc28 <sfs_truncfile+0x180>
            if ((ret = sfs_bmap_load_nolock(sfs, sin, nblks, NULL)) != 0) {
900000000001bbf4:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000001bbf8:	00150007 	move	$r7,$r0
900000000001bbfc:	00150186 	move	$r6,$r12
900000000001bc00:	28ff22c5 	ld.d	$r5,$r22,-56(0xfc8)
900000000001bc04:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001bc08:	57e3abff 	bl	-7256(0xfffe3a8) # 9000000000019fb0 <sfs_bmap_load_nolock>
900000000001bc0c:	0015008c 	move	$r12,$r4
900000000001bc10:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000001bc14:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001bc18:	4400a980 	bnez	$r12,168(0xa8) # 900000000001bcc0 <sfs_truncfile+0x218>
                goto out_unlock;
            }
            nblks ++;
900000000001bc1c:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000001bc20:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000001bc24:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
        while (nblks != tblks) {
900000000001bc28:	28bfa2cd 	ld.w	$r13,$r22,-24(0xfe8)
900000000001bc2c:	28bee2cc 	ld.w	$r12,$r22,-72(0xfb8)
900000000001bc30:	5fffc5ac 	bne	$r13,$r12,-60(0x3ffc4) # 900000000001bbf4 <sfs_truncfile+0x14c>
900000000001bc34:	50004800 	b	72(0x48) # 900000000001bc7c <sfs_truncfile+0x1d4>
        }
    }
    else if (tblks < nblks) {
900000000001bc38:	28bee2cd 	ld.w	$r13,$r22,-72(0xfb8)
900000000001bc3c:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000001bc40:	6c003dac 	bgeu	$r13,$r12,60(0x3c) # 900000000001bc7c <sfs_truncfile+0x1d4>
        while (tblks != nblks) {
900000000001bc44:	50002c00 	b	44(0x2c) # 900000000001bc70 <sfs_truncfile+0x1c8>
            if ((ret = sfs_bmap_truncate_nolock(sfs, sin)) != 0) {
900000000001bc48:	28ff22c5 	ld.d	$r5,$r22,-56(0xfc8)
900000000001bc4c:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001bc50:	57e493ff 	bl	-7024(0xfffe490) # 900000000001a0e0 <sfs_bmap_truncate_nolock>
900000000001bc54:	0015008c 	move	$r12,$r4
900000000001bc58:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000001bc5c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001bc60:	44006980 	bnez	$r12,104(0x68) # 900000000001bcc8 <sfs_truncfile+0x220>
                goto out_unlock;
            }
            nblks --;
900000000001bc64:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000001bc68:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
900000000001bc6c:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
        while (tblks != nblks) {
900000000001bc70:	28bee2cd 	ld.w	$r13,$r22,-72(0xfb8)
900000000001bc74:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000001bc78:	5fffd1ac 	bne	$r13,$r12,-48(0x3ffd0) # 900000000001bc48 <sfs_truncfile+0x1a0>
        }
    }
    assert(din->blocks == tblks);
900000000001bc7c:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000001bc80:	2880218d 	ld.w	$r13,$r12,8(0x8)
900000000001bc84:	28bee2cc 	ld.w	$r12,$r22,-72(0xfb8)
900000000001bc88:	58001d8d 	beq	$r12,$r13,28(0x1c) # 900000000001bca4 <sfs_truncfile+0x1fc>
900000000001bc8c:	1c000106 	pcaddu12i	$r6,8(0x8)
900000000001bc90:	02e0d0c6 	addi.d	$r6,$r6,-1996(0x834)
900000000001bc94:	028cb005 	addi.w	$r5,$r0,812(0x32c)
900000000001bc98:	1c0000e4 	pcaddu12i	$r4,7(0x7)
900000000001bc9c:	02c9a084 	addi.d	$r4,$r4,616(0x268)
900000000001bca0:	570fe3ff 	bl	-61472(0xfff0fe0) # 900000000000cc80 <__panic>
    din->size = len;
900000000001bca4:	28be82cd 	ld.w	$r13,$r22,-96(0xfa0)
900000000001bca8:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000001bcac:	2980018d 	st.w	$r13,$r12,0
    sin->dirty = 1;
900000000001bcb0:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001bcb4:	0280040d 	addi.w	$r13,$r0,1(0x1)
900000000001bcb8:	2980318d 	st.w	$r13,$r12,12(0xc)
900000000001bcbc:	50001000 	b	16(0x10) # 900000000001bccc <sfs_truncfile+0x224>
                goto out_unlock;
900000000001bcc0:	03400000 	andi	$r0,$r0,0x0
900000000001bcc4:	50000800 	b	8(0x8) # 900000000001bccc <sfs_truncfile+0x224>
                goto out_unlock;
900000000001bcc8:	03400000 	andi	$r0,$r0,0x0

out_unlock:
    unlock_sin(sin);
900000000001bccc:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
900000000001bcd0:	57d373ff 	bl	-11408(0xfffd370) # 9000000000019040 <unlock_sin>
    return ret;
900000000001bcd4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
900000000001bcd8:	00150184 	move	$r4,$r12
900000000001bcdc:	28c16061 	ld.d	$r1,$r3,88(0x58)
900000000001bce0:	28c14076 	ld.d	$r22,$r3,80(0x50)
900000000001bce4:	02c18063 	addi.d	$r3,$r3,96(0x60)
900000000001bce8:	4c000020 	jirl	$r0,$r1,0

900000000001bcec <sfs_lookup>:

static int
sfs_lookup(struct inode *node, char *path, struct inode **node_store) {
900000000001bcec:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
900000000001bcf0:	29c16061 	st.d	$r1,$r3,88(0x58)
900000000001bcf4:	29c14076 	st.d	$r22,$r3,80(0x50)
900000000001bcf8:	02c18076 	addi.d	$r22,$r3,96(0x60)
900000000001bcfc:	29fee2c4 	st.d	$r4,$r22,-72(0xfb8)
900000000001bd00:	29fec2c5 	st.d	$r5,$r22,-80(0xfb0)
900000000001bd04:	29fea2c6 	st.d	$r6,$r22,-88(0xfa8)
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
900000000001bd08:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000001bd0c:	28c1818c 	ld.d	$r12,$r12,96(0x60)
900000000001bd10:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000001bd14:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001bd18:	40001180 	beqz	$r12,16(0x10) # 900000000001bd28 <sfs_lookup+0x3c>
900000000001bd1c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001bd20:	2882c18c 	ld.w	$r12,$r12,176(0xb0)
900000000001bd24:	40001d80 	beqz	$r12,28(0x1c) # 900000000001bd40 <sfs_lookup+0x54>
900000000001bd28:	1c0000e6 	pcaddu12i	$r6,7(0x7)
900000000001bd2c:	02d6e0c6 	addi.d	$r6,$r6,1464(0x5b8)
900000000001bd30:	028cdc05 	addi.w	$r5,$r0,823(0x337)
900000000001bd34:	1c0000e4 	pcaddu12i	$r4,7(0x7)
900000000001bd38:	02c73084 	addi.d	$r4,$r4,460(0x1cc)
900000000001bd3c:	570f47ff 	bl	-61628(0xfff0f44) # 900000000000cc80 <__panic>
900000000001bd40:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001bd44:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    assert(*path != '\0' && *path != '/');
900000000001bd48:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000001bd4c:	2800018c 	ld.b	$r12,$r12,0
900000000001bd50:	40001980 	beqz	$r12,24(0x18) # 900000000001bd68 <sfs_lookup+0x7c>
900000000001bd54:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000001bd58:	2800018c 	ld.b	$r12,$r12,0
900000000001bd5c:	0015018d 	move	$r13,$r12
900000000001bd60:	0280bc0c 	addi.w	$r12,$r0,47(0x2f)
900000000001bd64:	5c001dac 	bne	$r13,$r12,28(0x1c) # 900000000001bd80 <sfs_lookup+0x94>
900000000001bd68:	1c0000e6 	pcaddu12i	$r6,7(0x7)
900000000001bd6c:	02de00c6 	addi.d	$r6,$r6,1920(0x780)
900000000001bd70:	028ce005 	addi.w	$r5,$r0,824(0x338)
900000000001bd74:	1c0000e4 	pcaddu12i	$r4,7(0x7)
900000000001bd78:	02c63084 	addi.d	$r4,$r4,396(0x18c)
900000000001bd7c:	570f07ff 	bl	-61692(0xfff0f04) # 900000000000cc80 <__panic>
    vop_ref_inc(node);
900000000001bd80:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
900000000001bd84:	579edbff 	bl	-24872(0xfff9ed8) # 9000000000015c5c <inode_ref_inc>
    struct sfs_inode *sin = vop_info(node, sfs_inode);
900000000001bd88:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000001bd8c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
900000000001bd90:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001bd94:	40001d80 	beqz	$r12,28(0x1c) # 900000000001bdb0 <sfs_lookup+0xc4>
900000000001bd98:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001bd9c:	2881418c 	ld.w	$r12,$r12,80(0x50)
900000000001bda0:	0015018d 	move	$r13,$r12
900000000001bda4:	1400002c 	lu12i.w	$r12,1(0x1)
900000000001bda8:	0388d58c 	ori	$r12,$r12,0x235
900000000001bdac:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000001bdc8 <sfs_lookup+0xdc>
900000000001bdb0:	1c0000e6 	pcaddu12i	$r6,7(0x7)
900000000001bdb4:	02c8e0c6 	addi.d	$r6,$r6,568(0x238)
900000000001bdb8:	028ce805 	addi.w	$r5,$r0,826(0x33a)
900000000001bdbc:	1c0000e4 	pcaddu12i	$r4,7(0x7)
900000000001bdc0:	02c51084 	addi.d	$r4,$r4,324(0x144)
900000000001bdc4:	570ebfff 	bl	-61764(0xfff0ebc) # 900000000000cc80 <__panic>
900000000001bdc8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001bdcc:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    if (_SFS_INODE_GET_TYPE(sin->din) != SFS_TYPE_DIR) {
900000000001bdd0:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001bdd4:	28c0018c 	ld.d	$r12,$r12,0
900000000001bdd8:	02c0118c 	addi.d	$r12,$r12,4(0x4)
900000000001bddc:	2880018c 	ld.w	$r12,$r12,0
900000000001bde0:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
900000000001bde4:	28bf32cd 	ld.w	$r13,$r22,-52(0xfcc)
900000000001bde8:	140001ec 	lu12i.w	$r12,15(0xf)
900000000001bdec:	03bffd8c 	ori	$r12,$r12,0xfff
900000000001bdf0:	0014b1ac 	and	$r12,$r13,$r12
900000000001bdf4:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
900000000001bdf8:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
900000000001bdfc:	0015018d 	move	$r13,$r12
900000000001be00:	0280080c 	addi.w	$r12,$r0,2(0x2)
900000000001be04:	580015ac 	beq	$r13,$r12,20(0x14) # 900000000001be18 <sfs_lookup+0x12c>
        vop_ref_dec(node);
900000000001be08:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
900000000001be0c:	579ecbff 	bl	-24888(0xfff9ec8) # 9000000000015cd4 <inode_ref_dec>
        return -E_NOTDIR;
900000000001be10:	02bfb80c 	addi.w	$r12,$r0,-18(0xfee)
900000000001be14:	50005000 	b	80(0x50) # 900000000001be64 <sfs_lookup+0x178>
    }
    struct inode *subnode;
    int ret = sfs_lookup_once(sfs, sin, path, &subnode, NULL);
900000000001be18:	02ff02cc 	addi.d	$r12,$r22,-64(0xfc0)
900000000001be1c:	00150008 	move	$r8,$r0
900000000001be20:	00150187 	move	$r7,$r12
900000000001be24:	28fec2c6 	ld.d	$r6,$r22,-80(0xfb0)
900000000001be28:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
900000000001be2c:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
900000000001be30:	57e6f7ff 	bl	-6412(0xfffe6f4) # 900000000001a524 <sfs_lookup_once>
900000000001be34:	0015008c 	move	$r12,$r4
900000000001be38:	29bf22cc 	st.w	$r12,$r22,-56(0xfc8)

	vop_ref_dec(node);
900000000001be3c:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
900000000001be40:	579e97ff 	bl	-24940(0xfff9e94) # 9000000000015cd4 <inode_ref_dec>
    if (ret != 0) {
900000000001be44:	28bf22cc 	ld.w	$r12,$r22,-56(0xfc8)
900000000001be48:	40000d80 	beqz	$r12,12(0xc) # 900000000001be54 <sfs_lookup+0x168>
        return ret;
900000000001be4c:	28bf22cc 	ld.w	$r12,$r22,-56(0xfc8)
900000000001be50:	50001400 	b	20(0x14) # 900000000001be64 <sfs_lookup+0x178>
    }
    *node_store = subnode;
900000000001be54:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
900000000001be58:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000001be5c:	29c0018d 	st.d	$r13,$r12,0
    return 0;
900000000001be60:	0015000c 	move	$r12,$r0
}
900000000001be64:	00150184 	move	$r4,$r12
900000000001be68:	28c16061 	ld.d	$r1,$r3,88(0x58)
900000000001be6c:	28c14076 	ld.d	$r22,$r3,80(0x50)
900000000001be70:	02c18063 	addi.d	$r3,$r3,96(0x60)
900000000001be74:	4c000020 	jirl	$r0,$r1,0

900000000001be78 <fence_i>:
static void fence_i(void *va_start, int size) {
900000000001be78:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001be7c:	29c0a076 	st.d	$r22,$r3,40(0x28)
900000000001be80:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000001be84:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000001be88:	001500ac 	move	$r12,$r5
900000000001be8c:	0040818c 	slli.w	$r12,$r12,0x0
900000000001be90:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
900000000001be94:	38720000 	dbar	0x0
    void *va_end = va_start + size;
900000000001be98:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
900000000001be9c:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000001bea0:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001bea4:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
900000000001bea8:	50002000 	b	32(0x20) # 900000000001bec8 <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
900000000001beac:	06000189 	cacop	0x9,$r12,0
900000000001beb0:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
900000000001beb4:	06000188 	cacop	0x8,$r12,0
900000000001beb8:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
900000000001bebc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001bec0:	02c0418c 	addi.d	$r12,$r12,16(0x10)
900000000001bec4:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
900000000001bec8:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000001becc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001bed0:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 900000000001beac <fence_i+0x34>
900000000001bed4:	38728000 	ibar	0x0
}
900000000001bed8:	03400000 	andi	$r0,$r0,0x0
900000000001bedc:	28c0a076 	ld.d	$r22,$r3,40(0x28)
900000000001bee0:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001bee4:	4c000020 	jirl	$r0,$r1,0

900000000001bee8 <sfs_rwblock_nolock>:
#include <iobuf.h>
#include <bitmap.h>
#include <assert.h>

static int
sfs_rwblock_nolock(struct sfs_fs *sfs, void *buf, uint32_t blkno, bool write, bool check) {
900000000001bee8:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
900000000001beec:	29c16061 	st.d	$r1,$r3,88(0x58)
900000000001bef0:	29c14076 	st.d	$r22,$r3,80(0x50)
900000000001bef4:	02c18076 	addi.d	$r22,$r3,96(0x60)
900000000001bef8:	29fee2c4 	st.d	$r4,$r22,-72(0xfb8)
900000000001befc:	29fec2c5 	st.d	$r5,$r22,-80(0xfb0)
900000000001bf00:	001500ce 	move	$r14,$r6
900000000001bf04:	001500ed 	move	$r13,$r7
900000000001bf08:	0015010c 	move	$r12,$r8
900000000001bf0c:	004081ce 	slli.w	$r14,$r14,0x0
900000000001bf10:	29beb2ce 	st.w	$r14,$r22,-84(0xfac)
900000000001bf14:	004081ad 	slli.w	$r13,$r13,0x0
900000000001bf18:	29bea2cd 	st.w	$r13,$r22,-88(0xfa8)
900000000001bf1c:	0040818c 	slli.w	$r12,$r12,0x0
900000000001bf20:	29be92cc 	st.w	$r12,$r22,-92(0xfa4)
    assert((blkno != 0 || !check) && blkno < sfs->super.blocks);
900000000001bf24:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
900000000001bf28:	44000d80 	bnez	$r12,12(0xc) # 900000000001bf34 <sfs_rwblock_nolock+0x4c>
900000000001bf2c:	28be92cc 	ld.w	$r12,$r22,-92(0xfa4)
900000000001bf30:	44001580 	bnez	$r12,20(0x14) # 900000000001bf44 <sfs_rwblock_nolock+0x5c>
900000000001bf34:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000001bf38:	2880118d 	ld.w	$r13,$r12,4(0x4)
900000000001bf3c:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
900000000001bf40:	68001d8d 	bltu	$r12,$r13,28(0x1c) # 900000000001bf5c <sfs_rwblock_nolock+0x74>
900000000001bf44:	1c0000e6 	pcaddu12i	$r6,7(0x7)
900000000001bf48:	02d750c6 	addi.d	$r6,$r6,1492(0x5d4)
900000000001bf4c:	02802c05 	addi.w	$r5,$r0,11(0xb)
900000000001bf50:	1c0000e4 	pcaddu12i	$r4,7(0x7)
900000000001bf54:	02d84084 	addi.d	$r4,$r4,1552(0x610)
900000000001bf58:	570d2bff 	bl	-62168(0xfff0d28) # 900000000000cc80 <__panic>
    struct iobuf __iob, *iob = iobuf_init(&__iob, buf, SFS_BLKSIZE, blkno * SFS_BLKSIZE);
900000000001bf5c:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
900000000001bf60:	0040b18c 	slli.w	$r12,$r12,0xc
900000000001bf64:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
900000000001bf68:	02ff22cd 	addi.d	$r13,$r22,-56(0xfc8)
900000000001bf6c:	00150187 	move	$r7,$r12
900000000001bf70:	14000026 	lu12i.w	$r6,1(0x1)
900000000001bf74:	28fec2c5 	ld.d	$r5,$r22,-80(0xfb0)
900000000001bf78:	001501a4 	move	$r4,$r13
900000000001bf7c:	578b57ff 	bl	-29868(0xfff8b54) # 9000000000014ad0 <iobuf_init>
900000000001bf80:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    return dop_io(sfs->dev, iob, write);
900000000001bf84:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000001bf88:	28c0c18c 	ld.d	$r12,$r12,48(0x30)
900000000001bf8c:	28c0818c 	ld.d	$r12,$r12,32(0x20)
900000000001bf90:	28fee2cd 	ld.d	$r13,$r22,-72(0xfb8)
900000000001bf94:	28c0c1ad 	ld.d	$r13,$r13,48(0x30)
900000000001bf98:	28bea2ce 	ld.w	$r14,$r22,-88(0xfa8)
900000000001bf9c:	001501c6 	move	$r6,$r14
900000000001bfa0:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
900000000001bfa4:	001501a4 	move	$r4,$r13
900000000001bfa8:	4c000181 	jirl	$r1,$r12,0
900000000001bfac:	0015008c 	move	$r12,$r4
}
900000000001bfb0:	00150184 	move	$r4,$r12
900000000001bfb4:	28c16061 	ld.d	$r1,$r3,88(0x58)
900000000001bfb8:	28c14076 	ld.d	$r22,$r3,80(0x50)
900000000001bfbc:	02c18063 	addi.d	$r3,$r3,96(0x60)
900000000001bfc0:	4c000020 	jirl	$r0,$r1,0

900000000001bfc4 <sfs_rwblock>:

static int
sfs_rwblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks, bool write) {
900000000001bfc4:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000001bfc8:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000001bfcc:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000001bfd0:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000001bfd4:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000001bfd8:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
900000000001bfdc:	001500ce 	move	$r14,$r6
900000000001bfe0:	001500ed 	move	$r13,$r7
900000000001bfe4:	0015010c 	move	$r12,$r8
900000000001bfe8:	004081ce 	slli.w	$r14,$r14,0x0
900000000001bfec:	29bf32ce 	st.w	$r14,$r22,-52(0xfcc)
900000000001bff0:	004081ad 	slli.w	$r13,$r13,0x0
900000000001bff4:	29bf22cd 	st.w	$r13,$r22,-56(0xfc8)
900000000001bff8:	0040818c 	slli.w	$r12,$r12,0x0
900000000001bffc:	29bf12cc 	st.w	$r12,$r22,-60(0xfc4)
    int ret = 0;
900000000001c000:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
    lock_sfs_io(sfs);
900000000001c004:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001c008:	5405d800 	bl	1496(0x5d8) # 900000000001c5e0 <lock_sfs_io>
    {
        while (nblks != 0) {
900000000001c00c:	50005c00 	b	92(0x5c) # 900000000001c068 <sfs_rwblock+0xa4>
            if ((ret = sfs_rwblock_nolock(sfs, buf, blkno, write, 1)) != 0) {
900000000001c010:	28bf12cd 	ld.w	$r13,$r22,-60(0xfc4)
900000000001c014:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
900000000001c018:	02800408 	addi.w	$r8,$r0,1(0x1)
900000000001c01c:	001501a7 	move	$r7,$r13
900000000001c020:	00150186 	move	$r6,$r12
900000000001c024:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
900000000001c028:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001c02c:	57febfff 	bl	-324(0xffffebc) # 900000000001bee8 <sfs_rwblock_nolock>
900000000001c030:	0015008c 	move	$r12,$r4
900000000001c034:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000001c038:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001c03c:	44003980 	bnez	$r12,56(0x38) # 900000000001c074 <sfs_rwblock+0xb0>
                break;
            }
            blkno ++, nblks --;
900000000001c040:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
900000000001c044:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000001c048:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
900000000001c04c:	28bf22cc 	ld.w	$r12,$r22,-56(0xfc8)
900000000001c050:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
900000000001c054:	29bf22cc 	st.w	$r12,$r22,-56(0xfc8)
            buf += SFS_BLKSIZE;
900000000001c058:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000001c05c:	1400002c 	lu12i.w	$r12,1(0x1)
900000000001c060:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001c064:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
        while (nblks != 0) {
900000000001c068:	28bf22cc 	ld.w	$r12,$r22,-56(0xfc8)
900000000001c06c:	47ffa59f 	bnez	$r12,-92(0x7fffa4) # 900000000001c010 <sfs_rwblock+0x4c>
900000000001c070:	50000800 	b	8(0x8) # 900000000001c078 <sfs_rwblock+0xb4>
                break;
900000000001c074:	03400000 	andi	$r0,$r0,0x0
        }
    }
    unlock_sfs_io(sfs);
900000000001c078:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001c07c:	54060c00 	bl	1548(0x60c) # 900000000001c688 <unlock_sfs_io>
    return ret;
900000000001c080:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
900000000001c084:	00150184 	move	$r4,$r12
900000000001c088:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000001c08c:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000001c090:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000001c094:	4c000020 	jirl	$r0,$r1,0

900000000001c098 <sfs_rblock>:

int
sfs_rblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks) {
900000000001c098:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001c09c:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000001c0a0:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000001c0a4:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000001c0a8:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000001c0ac:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
900000000001c0b0:	001500cd 	move	$r13,$r6
900000000001c0b4:	001500ec 	move	$r12,$r7
900000000001c0b8:	004081ad 	slli.w	$r13,$r13,0x0
900000000001c0bc:	29bf72cd 	st.w	$r13,$r22,-36(0xfdc)
900000000001c0c0:	0040818c 	slli.w	$r12,$r12,0x0
900000000001c0c4:	29bf62cc 	st.w	$r12,$r22,-40(0xfd8)
    return sfs_rwblock(sfs, buf, blkno, nblks, 0);
900000000001c0c8:	28bf62cd 	ld.w	$r13,$r22,-40(0xfd8)
900000000001c0cc:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
900000000001c0d0:	00150008 	move	$r8,$r0
900000000001c0d4:	001501a7 	move	$r7,$r13
900000000001c0d8:	00150186 	move	$r6,$r12
900000000001c0dc:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
900000000001c0e0:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000001c0e4:	57fee3ff 	bl	-288(0xffffee0) # 900000000001bfc4 <sfs_rwblock>
900000000001c0e8:	0015008c 	move	$r12,$r4
}
900000000001c0ec:	00150184 	move	$r4,$r12
900000000001c0f0:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000001c0f4:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000001c0f8:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001c0fc:	4c000020 	jirl	$r0,$r1,0

900000000001c100 <sfs_wblock>:

int
sfs_wblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks) {
900000000001c100:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001c104:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000001c108:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000001c10c:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000001c110:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000001c114:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
900000000001c118:	001500cd 	move	$r13,$r6
900000000001c11c:	001500ec 	move	$r12,$r7
900000000001c120:	004081ad 	slli.w	$r13,$r13,0x0
900000000001c124:	29bf72cd 	st.w	$r13,$r22,-36(0xfdc)
900000000001c128:	0040818c 	slli.w	$r12,$r12,0x0
900000000001c12c:	29bf62cc 	st.w	$r12,$r22,-40(0xfd8)
    return sfs_rwblock(sfs, buf, blkno, nblks, 1);
900000000001c130:	28bf62cd 	ld.w	$r13,$r22,-40(0xfd8)
900000000001c134:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
900000000001c138:	02800408 	addi.w	$r8,$r0,1(0x1)
900000000001c13c:	001501a7 	move	$r7,$r13
900000000001c140:	00150186 	move	$r6,$r12
900000000001c144:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
900000000001c148:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000001c14c:	57fe7bff 	bl	-392(0xffffe78) # 900000000001bfc4 <sfs_rwblock>
900000000001c150:	0015008c 	move	$r12,$r4
}
900000000001c154:	00150184 	move	$r4,$r12
900000000001c158:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000001c15c:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000001c160:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001c164:	4c000020 	jirl	$r0,$r1,0

900000000001c168 <sfs_rbuf>:

int
sfs_rbuf(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset) {
900000000001c168:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
900000000001c16c:	29c12061 	st.d	$r1,$r3,72(0x48)
900000000001c170:	29c10076 	st.d	$r22,$r3,64(0x40)
900000000001c174:	02c14076 	addi.d	$r22,$r3,80(0x50)
900000000001c178:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000001c17c:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
900000000001c180:	29ff22c6 	st.d	$r6,$r22,-56(0xfc8)
900000000001c184:	001500ec 	move	$r12,$r7
900000000001c188:	29fee2c8 	st.d	$r8,$r22,-72(0xfb8)
900000000001c18c:	0040818c 	slli.w	$r12,$r12,0x0
900000000001c190:	29bf12cc 	st.w	$r12,$r22,-60(0xfc4)
    assert(offset >= 0 && offset < SFS_BLKSIZE && offset + len <= SFS_BLKSIZE);
900000000001c194:	28fee2cd 	ld.d	$r13,$r22,-72(0xfb8)
900000000001c198:	03bffc0c 	ori	$r12,$r0,0xfff
900000000001c19c:	6800198d 	bltu	$r12,$r13,24(0x18) # 900000000001c1b4 <sfs_rbuf+0x4c>
900000000001c1a0:	28fee2cd 	ld.d	$r13,$r22,-72(0xfb8)
900000000001c1a4:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001c1a8:	0010b1ad 	add.d	$r13,$r13,$r12
900000000001c1ac:	1400002c 	lu12i.w	$r12,1(0x1)
900000000001c1b0:	6c001d8d 	bgeu	$r12,$r13,28(0x1c) # 900000000001c1cc <sfs_rbuf+0x64>
900000000001c1b4:	1c0000e6 	pcaddu12i	$r6,7(0x7)
900000000001c1b8:	02cf10c6 	addi.d	$r6,$r6,964(0x3c4)
900000000001c1bc:	0280b405 	addi.w	$r5,$r0,45(0x2d)
900000000001c1c0:	1c0000e4 	pcaddu12i	$r4,7(0x7)
900000000001c1c4:	02ce8084 	addi.d	$r4,$r4,928(0x3a0)
900000000001c1c8:	570abbff 	bl	-62792(0xfff0ab8) # 900000000000cc80 <__panic>
    int ret;
    lock_sfs_io(sfs);
900000000001c1cc:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001c1d0:	54041000 	bl	1040(0x410) # 900000000001c5e0 <lock_sfs_io>
    {
        if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 0, 1)) == 0) {
900000000001c1d4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001c1d8:	28c1218c 	ld.d	$r12,$r12,72(0x48)
900000000001c1dc:	28bf12cd 	ld.w	$r13,$r22,-60(0xfc4)
900000000001c1e0:	02800408 	addi.w	$r8,$r0,1(0x1)
900000000001c1e4:	00150007 	move	$r7,$r0
900000000001c1e8:	001501a6 	move	$r6,$r13
900000000001c1ec:	00150185 	move	$r5,$r12
900000000001c1f0:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001c1f4:	57fcf7ff 	bl	-780(0xffffcf4) # 900000000001bee8 <sfs_rwblock_nolock>
900000000001c1f8:	0015008c 	move	$r12,$r4
900000000001c1fc:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000001c200:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001c204:	44002580 	bnez	$r12,36(0x24) # 900000000001c228 <sfs_rbuf+0xc0>
            memcpy(buf, sfs->sfs_buffer + offset, len);
900000000001c208:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001c20c:	28c1218d 	ld.d	$r13,$r12,72(0x48)
900000000001c210:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000001c214:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001c218:	28ff22c6 	ld.d	$r6,$r22,-56(0xfc8)
900000000001c21c:	00150185 	move	$r5,$r12
900000000001c220:	28ff42c4 	ld.d	$r4,$r22,-48(0xfd0)
900000000001c224:	568363ff 	bl	-97440(0xffe8360) # 9000000000004584 <memcpy>
        }
    }
    unlock_sfs_io(sfs);
900000000001c228:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001c22c:	54045c00 	bl	1116(0x45c) # 900000000001c688 <unlock_sfs_io>
    return ret;
900000000001c230:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
900000000001c234:	00150184 	move	$r4,$r12
900000000001c238:	28c12061 	ld.d	$r1,$r3,72(0x48)
900000000001c23c:	28c10076 	ld.d	$r22,$r3,64(0x40)
900000000001c240:	02c14063 	addi.d	$r3,$r3,80(0x50)
900000000001c244:	4c000020 	jirl	$r0,$r1,0

900000000001c248 <sfs_wbuf>:

int
sfs_wbuf(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset) {
900000000001c248:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
900000000001c24c:	29c12061 	st.d	$r1,$r3,72(0x48)
900000000001c250:	29c10076 	st.d	$r22,$r3,64(0x40)
900000000001c254:	02c14076 	addi.d	$r22,$r3,80(0x50)
900000000001c258:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000001c25c:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
900000000001c260:	29ff22c6 	st.d	$r6,$r22,-56(0xfc8)
900000000001c264:	001500ec 	move	$r12,$r7
900000000001c268:	29fee2c8 	st.d	$r8,$r22,-72(0xfb8)
900000000001c26c:	0040818c 	slli.w	$r12,$r12,0x0
900000000001c270:	29bf12cc 	st.w	$r12,$r22,-60(0xfc4)
    assert(offset >= 0 && offset < SFS_BLKSIZE && offset + len <= SFS_BLKSIZE);
900000000001c274:	28fee2cd 	ld.d	$r13,$r22,-72(0xfb8)
900000000001c278:	03bffc0c 	ori	$r12,$r0,0xfff
900000000001c27c:	6800198d 	bltu	$r12,$r13,24(0x18) # 900000000001c294 <sfs_wbuf+0x4c>
900000000001c280:	28fee2cd 	ld.d	$r13,$r22,-72(0xfb8)
900000000001c284:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001c288:	0010b1ad 	add.d	$r13,$r13,$r12
900000000001c28c:	1400002c 	lu12i.w	$r12,1(0x1)
900000000001c290:	6c001d8d 	bgeu	$r12,$r13,28(0x1c) # 900000000001c2ac <sfs_wbuf+0x64>
900000000001c294:	1c0000e6 	pcaddu12i	$r6,7(0x7)
900000000001c298:	02cb90c6 	addi.d	$r6,$r6,740(0x2e4)
900000000001c29c:	0280ec05 	addi.w	$r5,$r0,59(0x3b)
900000000001c2a0:	1c0000e4 	pcaddu12i	$r4,7(0x7)
900000000001c2a4:	02cb0084 	addi.d	$r4,$r4,704(0x2c0)
900000000001c2a8:	5709dbff 	bl	-63016(0xfff09d8) # 900000000000cc80 <__panic>
    int ret;
    lock_sfs_io(sfs);
900000000001c2ac:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001c2b0:	54033000 	bl	816(0x330) # 900000000001c5e0 <lock_sfs_io>
    {
        if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 0, 1)) == 0) {
900000000001c2b4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001c2b8:	28c1218c 	ld.d	$r12,$r12,72(0x48)
900000000001c2bc:	28bf12cd 	ld.w	$r13,$r22,-60(0xfc4)
900000000001c2c0:	02800408 	addi.w	$r8,$r0,1(0x1)
900000000001c2c4:	00150007 	move	$r7,$r0
900000000001c2c8:	001501a6 	move	$r6,$r13
900000000001c2cc:	00150185 	move	$r5,$r12
900000000001c2d0:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001c2d4:	57fc17ff 	bl	-1004(0xffffc14) # 900000000001bee8 <sfs_rwblock_nolock>
900000000001c2d8:	0015008c 	move	$r12,$r4
900000000001c2dc:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000001c2e0:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001c2e4:	44005180 	bnez	$r12,80(0x50) # 900000000001c334 <sfs_wbuf+0xec>
            memcpy(sfs->sfs_buffer + offset, buf, len);
900000000001c2e8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001c2ec:	28c1218d 	ld.d	$r13,$r12,72(0x48)
900000000001c2f0:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000001c2f4:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001c2f8:	28ff22c6 	ld.d	$r6,$r22,-56(0xfc8)
900000000001c2fc:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
900000000001c300:	00150184 	move	$r4,$r12
900000000001c304:	568283ff 	bl	-97664(0xffe8280) # 9000000000004584 <memcpy>
            ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1);
900000000001c308:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001c30c:	28c1218c 	ld.d	$r12,$r12,72(0x48)
900000000001c310:	28bf12cd 	ld.w	$r13,$r22,-60(0xfc4)
900000000001c314:	02800408 	addi.w	$r8,$r0,1(0x1)
900000000001c318:	02800407 	addi.w	$r7,$r0,1(0x1)
900000000001c31c:	001501a6 	move	$r6,$r13
900000000001c320:	00150185 	move	$r5,$r12
900000000001c324:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001c328:	57fbc3ff 	bl	-1088(0xffffbc0) # 900000000001bee8 <sfs_rwblock_nolock>
900000000001c32c:	0015008c 	move	$r12,$r4
900000000001c330:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
        }
    }
    unlock_sfs_io(sfs);
900000000001c334:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001c338:	54035000 	bl	848(0x350) # 900000000001c688 <unlock_sfs_io>
    return ret;
900000000001c33c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
900000000001c340:	00150184 	move	$r4,$r12
900000000001c344:	28c12061 	ld.d	$r1,$r3,72(0x48)
900000000001c348:	28c10076 	ld.d	$r22,$r3,64(0x40)
900000000001c34c:	02c14063 	addi.d	$r3,$r3,80(0x50)
900000000001c350:	4c000020 	jirl	$r0,$r1,0

900000000001c354 <sfs_sync_super>:

int
sfs_sync_super(struct sfs_fs *sfs) {
900000000001c354:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001c358:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000001c35c:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000001c360:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000001c364:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    int ret;
    lock_sfs_io(sfs);
900000000001c368:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001c36c:	54027400 	bl	628(0x274) # 900000000001c5e0 <lock_sfs_io>
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
900000000001c370:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001c374:	28c1218c 	ld.d	$r12,$r12,72(0x48)
900000000001c378:	14000026 	lu12i.w	$r6,1(0x1)
900000000001c37c:	00150005 	move	$r5,$r0
900000000001c380:	00150184 	move	$r4,$r12
900000000001c384:	56819fff 	bl	-97892(0xffe819c) # 9000000000004520 <memset>
        memcpy(sfs->sfs_buffer, &(sfs->super), sizeof(sfs->super));
900000000001c388:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001c38c:	28c1218c 	ld.d	$r12,$r12,72(0x48)
900000000001c390:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000001c394:	0280b006 	addi.w	$r6,$r0,44(0x2c)
900000000001c398:	001501a5 	move	$r5,$r13
900000000001c39c:	00150184 	move	$r4,$r12
900000000001c3a0:	5681e7ff 	bl	-97820(0xffe81e4) # 9000000000004584 <memcpy>
        ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, SFS_BLKN_SUPER, 1, 0);
900000000001c3a4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001c3a8:	28c1218c 	ld.d	$r12,$r12,72(0x48)
900000000001c3ac:	00150008 	move	$r8,$r0
900000000001c3b0:	02800407 	addi.w	$r7,$r0,1(0x1)
900000000001c3b4:	00150006 	move	$r6,$r0
900000000001c3b8:	00150185 	move	$r5,$r12
900000000001c3bc:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001c3c0:	57fb2bff 	bl	-1240(0xffffb28) # 900000000001bee8 <sfs_rwblock_nolock>
900000000001c3c4:	0015008c 	move	$r12,$r4
900000000001c3c8:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
    }
    unlock_sfs_io(sfs);
900000000001c3cc:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001c3d0:	5402b800 	bl	696(0x2b8) # 900000000001c688 <unlock_sfs_io>
    return ret;
900000000001c3d4:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
900000000001c3d8:	00150184 	move	$r4,$r12
900000000001c3dc:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000001c3e0:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000001c3e4:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001c3e8:	4c000020 	jirl	$r0,$r1,0

900000000001c3ec <sfs_sync_freemap>:

int
sfs_sync_freemap(struct sfs_fs *sfs) {
900000000001c3ec:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001c3f0:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000001c3f4:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000001c3f8:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000001c3fc:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    uint32_t nblks = sfs_freemap_blocks(&(sfs->super));
900000000001c400:	1400010c 	lu12i.w	$r12,8(0x8)
900000000001c404:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000001c408:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001c40c:	2880118c 	ld.w	$r12,$r12,4(0x4)
900000000001c410:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
900000000001c414:	001031ac 	add.w	$r12,$r13,$r12
900000000001c418:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
900000000001c41c:	0044bd8c 	srli.w	$r12,$r12,0xf
900000000001c420:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
    return sfs_wblock(sfs, bitmap_getdata(sfs->freemap, NULL), SFS_BLKN_FREEMAP, nblks);
900000000001c424:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001c428:	28c0e18c 	ld.d	$r12,$r12,56(0x38)
900000000001c42c:	00150005 	move	$r5,$r0
900000000001c430:	00150184 	move	$r4,$r12
900000000001c434:	57bedfff 	bl	-16676(0xfffbedc) # 9000000000018310 <bitmap_getdata>
900000000001c438:	0015008d 	move	$r13,$r4
900000000001c43c:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000001c440:	00150187 	move	$r7,$r12
900000000001c444:	02800806 	addi.w	$r6,$r0,2(0x2)
900000000001c448:	001501a5 	move	$r5,$r13
900000000001c44c:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001c450:	57fcb3ff 	bl	-848(0xffffcb0) # 900000000001c100 <sfs_wblock>
900000000001c454:	0015008c 	move	$r12,$r4
}
900000000001c458:	00150184 	move	$r4,$r12
900000000001c45c:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000001c460:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000001c464:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001c468:	4c000020 	jirl	$r0,$r1,0

900000000001c46c <sfs_clear_block>:

int
sfs_clear_block(struct sfs_fs *sfs, uint32_t blkno, uint32_t nblks) {
900000000001c46c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001c470:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000001c474:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000001c478:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000001c47c:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000001c480:	001500ad 	move	$r13,$r5
900000000001c484:	001500cc 	move	$r12,$r6
900000000001c488:	004081ad 	slli.w	$r13,$r13,0x0
900000000001c48c:	29bf52cd 	st.w	$r13,$r22,-44(0xfd4)
900000000001c490:	0040818c 	slli.w	$r12,$r12,0x0
900000000001c494:	29bf42cc 	st.w	$r12,$r22,-48(0xfd0)
    int ret;
    lock_sfs_io(sfs);
900000000001c498:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001c49c:	54014400 	bl	324(0x144) # 900000000001c5e0 <lock_sfs_io>
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
900000000001c4a0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001c4a4:	28c1218c 	ld.d	$r12,$r12,72(0x48)
900000000001c4a8:	14000026 	lu12i.w	$r6,1(0x1)
900000000001c4ac:	00150005 	move	$r5,$r0
900000000001c4b0:	00150184 	move	$r4,$r12
900000000001c4b4:	56806fff 	bl	-98196(0xffe806c) # 9000000000004520 <memset>
        while (nblks != 0) {
900000000001c4b8:	50005000 	b	80(0x50) # 900000000001c508 <sfs_clear_block+0x9c>
            if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1)) != 0) {
900000000001c4bc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001c4c0:	28c1218c 	ld.d	$r12,$r12,72(0x48)
900000000001c4c4:	28bf52cd 	ld.w	$r13,$r22,-44(0xfd4)
900000000001c4c8:	02800408 	addi.w	$r8,$r0,1(0x1)
900000000001c4cc:	02800407 	addi.w	$r7,$r0,1(0x1)
900000000001c4d0:	001501a6 	move	$r6,$r13
900000000001c4d4:	00150185 	move	$r5,$r12
900000000001c4d8:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001c4dc:	57fa0fff 	bl	-1524(0xffffa0c) # 900000000001bee8 <sfs_rwblock_nolock>
900000000001c4e0:	0015008c 	move	$r12,$r4
900000000001c4e4:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000001c4e8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001c4ec:	44002980 	bnez	$r12,40(0x28) # 900000000001c514 <sfs_clear_block+0xa8>
                break;
            }
            blkno ++, nblks --;
900000000001c4f0:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
900000000001c4f4:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000001c4f8:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
900000000001c4fc:	28bf42cc 	ld.w	$r12,$r22,-48(0xfd0)
900000000001c500:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
900000000001c504:	29bf42cc 	st.w	$r12,$r22,-48(0xfd0)
        while (nblks != 0) {
900000000001c508:	28bf42cc 	ld.w	$r12,$r22,-48(0xfd0)
900000000001c50c:	47ffb19f 	bnez	$r12,-80(0x7fffb0) # 900000000001c4bc <sfs_clear_block+0x50>
900000000001c510:	50000800 	b	8(0x8) # 900000000001c518 <sfs_clear_block+0xac>
                break;
900000000001c514:	03400000 	andi	$r0,$r0,0x0
        }
    }
    unlock_sfs_io(sfs);
900000000001c518:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000001c51c:	54016c00 	bl	364(0x16c) # 900000000001c688 <unlock_sfs_io>
    return ret;
900000000001c520:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
900000000001c524:	00150184 	move	$r4,$r12
900000000001c528:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000001c52c:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000001c530:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001c534:	4c000020 	jirl	$r0,$r1,0

900000000001c538 <fence_i>:
static void fence_i(void *va_start, int size) {
900000000001c538:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001c53c:	29c0a076 	st.d	$r22,$r3,40(0x28)
900000000001c540:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000001c544:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000001c548:	001500ac 	move	$r12,$r5
900000000001c54c:	0040818c 	slli.w	$r12,$r12,0x0
900000000001c550:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
900000000001c554:	38720000 	dbar	0x0
    void *va_end = va_start + size;
900000000001c558:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
900000000001c55c:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000001c560:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001c564:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
900000000001c568:	50002000 	b	32(0x20) # 900000000001c588 <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
900000000001c56c:	06000189 	cacop	0x9,$r12,0
900000000001c570:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
900000000001c574:	06000188 	cacop	0x8,$r12,0
900000000001c578:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
900000000001c57c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001c580:	02c0418c 	addi.d	$r12,$r12,16(0x10)
900000000001c584:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
900000000001c588:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000001c58c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001c590:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 900000000001c56c <fence_i+0x34>
900000000001c594:	38728000 	ibar	0x0
}
900000000001c598:	03400000 	andi	$r0,$r0,0x0
900000000001c59c:	28c0a076 	ld.d	$r22,$r3,40(0x28)
900000000001c5a0:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001c5a4:	4c000020 	jirl	$r0,$r1,0

900000000001c5a8 <lock_sfs_fs>:
#include <defs.h>
#include <sem.h>
#include <sfs.h>

void
lock_sfs_fs(struct sfs_fs *sfs) {
900000000001c5a8:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000001c5ac:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000001c5b0:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000001c5b4:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000001c5b8:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    down(&(sfs->fs_sem));
900000000001c5bc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001c5c0:	02c1418c 	addi.d	$r12,$r12,80(0x50)
900000000001c5c4:	00150184 	move	$r4,$r12
900000000001c5c8:	571863ff 	bl	-59296(0xfff1860) # 900000000000de28 <down>
}
900000000001c5cc:	03400000 	andi	$r0,$r0,0x0
900000000001c5d0:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000001c5d4:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000001c5d8:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000001c5dc:	4c000020 	jirl	$r0,$r1,0

900000000001c5e0 <lock_sfs_io>:

void
lock_sfs_io(struct sfs_fs *sfs) {
900000000001c5e0:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000001c5e4:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000001c5e8:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000001c5ec:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000001c5f0:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    down(&(sfs->io_sem));
900000000001c5f4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001c5f8:	02c1a18c 	addi.d	$r12,$r12,104(0x68)
900000000001c5fc:	00150184 	move	$r4,$r12
900000000001c600:	57182bff 	bl	-59352(0xfff1828) # 900000000000de28 <down>
}
900000000001c604:	03400000 	andi	$r0,$r0,0x0
900000000001c608:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000001c60c:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000001c610:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000001c614:	4c000020 	jirl	$r0,$r1,0

900000000001c618 <lock_sfs_mutex>:

void
lock_sfs_mutex(struct sfs_fs *sfs) {
900000000001c618:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000001c61c:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000001c620:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000001c624:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000001c628:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    down(&(sfs->mutex_sem));
900000000001c62c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001c630:	02c2018c 	addi.d	$r12,$r12,128(0x80)
900000000001c634:	00150184 	move	$r4,$r12
900000000001c638:	5717f3ff 	bl	-59408(0xfff17f0) # 900000000000de28 <down>
}
900000000001c63c:	03400000 	andi	$r0,$r0,0x0
900000000001c640:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000001c644:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000001c648:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000001c64c:	4c000020 	jirl	$r0,$r1,0

900000000001c650 <unlock_sfs_fs>:

void
unlock_sfs_fs(struct sfs_fs *sfs) {
900000000001c650:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000001c654:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000001c658:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000001c65c:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000001c660:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    up(&(sfs->fs_sem));
900000000001c664:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001c668:	02c1418c 	addi.d	$r12,$r12,80(0x50)
900000000001c66c:	00150184 	move	$r4,$r12
900000000001c670:	571787ff 	bl	-59516(0xfff1784) # 900000000000ddf4 <up>
}
900000000001c674:	03400000 	andi	$r0,$r0,0x0
900000000001c678:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000001c67c:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000001c680:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000001c684:	4c000020 	jirl	$r0,$r1,0

900000000001c688 <unlock_sfs_io>:

void
unlock_sfs_io(struct sfs_fs *sfs) {
900000000001c688:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000001c68c:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000001c690:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000001c694:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000001c698:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    up(&(sfs->io_sem));
900000000001c69c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001c6a0:	02c1a18c 	addi.d	$r12,$r12,104(0x68)
900000000001c6a4:	00150184 	move	$r4,$r12
900000000001c6a8:	57174fff 	bl	-59572(0xfff174c) # 900000000000ddf4 <up>
}
900000000001c6ac:	03400000 	andi	$r0,$r0,0x0
900000000001c6b0:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000001c6b4:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000001c6b8:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000001c6bc:	4c000020 	jirl	$r0,$r1,0

900000000001c6c0 <unlock_sfs_mutex>:

void
unlock_sfs_mutex(struct sfs_fs *sfs) {
900000000001c6c0:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000001c6c4:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000001c6c8:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000001c6cc:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000001c6d0:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    up(&(sfs->mutex_sem));
900000000001c6d4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001c6d8:	02c2018c 	addi.d	$r12,$r12,128(0x80)
900000000001c6dc:	00150184 	move	$r4,$r12
900000000001c6e0:	571717ff 	bl	-59628(0xfff1714) # 900000000000ddf4 <up>
}
900000000001c6e4:	03400000 	andi	$r0,$r0,0x0
900000000001c6e8:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000001c6ec:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000001c6f0:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000001c6f4:	4c000020 	jirl	$r0,$r1,0

900000000001c6f8 <fence_i>:
static void fence_i(void *va_start, int size) {
900000000001c6f8:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001c6fc:	29c0a076 	st.d	$r22,$r3,40(0x28)
900000000001c700:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000001c704:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000001c708:	001500ac 	move	$r12,$r5
900000000001c70c:	0040818c 	slli.w	$r12,$r12,0x0
900000000001c710:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
900000000001c714:	38720000 	dbar	0x0
    void *va_end = va_start + size;
900000000001c718:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
900000000001c71c:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000001c720:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001c724:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
900000000001c728:	50002000 	b	32(0x20) # 900000000001c748 <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
900000000001c72c:	06000189 	cacop	0x9,$r12,0
900000000001c730:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
900000000001c734:	06000188 	cacop	0x8,$r12,0
900000000001c738:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
900000000001c73c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001c740:	02c0418c 	addi.d	$r12,$r12,16(0x10)
900000000001c744:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
900000000001c748:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000001c74c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001c750:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 900000000001c72c <fence_i+0x34>
900000000001c754:	38728000 	ibar	0x0
}
900000000001c758:	03400000 	andi	$r0,$r0,0x0
900000000001c75c:	28c0a076 	ld.d	$r22,$r3,40(0x28)
900000000001c760:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001c764:	4c000020 	jirl	$r0,$r1,0

900000000001c768 <dev_open>:
#include <inode.h>
#include <unistd.h>
#include <error.h>

static int
dev_open(struct inode *node, uint32_t open_flags) {
900000000001c768:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001c76c:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000001c770:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000001c774:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000001c778:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000001c77c:	001500ac 	move	$r12,$r5
900000000001c780:	0040818c 	slli.w	$r12,$r12,0x0
900000000001c784:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
    if (open_flags & (O_CREAT | O_TRUNC | O_EXCL | O_APPEND)) {
900000000001c788:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
900000000001c78c:	0340f18c 	andi	$r12,$r12,0x3c
900000000001c790:	40000d80 	beqz	$r12,12(0xc) # 900000000001c79c <dev_open+0x34>
        return -E_INVAL;
900000000001c794:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
900000000001c798:	50006800 	b	104(0x68) # 900000000001c800 <dev_open+0x98>
    }
    struct device *dev = vop_info(node, device);
900000000001c79c:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001c7a0:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000001c7a4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001c7a8:	40001d80 	beqz	$r12,28(0x1c) # 900000000001c7c4 <dev_open+0x5c>
900000000001c7ac:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001c7b0:	2881418c 	ld.w	$r12,$r12,80(0x50)
900000000001c7b4:	0015018d 	move	$r13,$r12
900000000001c7b8:	1400002c 	lu12i.w	$r12,1(0x1)
900000000001c7bc:	0388d18c 	ori	$r12,$r12,0x234
900000000001c7c0:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000001c7dc <dev_open+0x74>
900000000001c7c4:	1c0000e6 	pcaddu12i	$r6,7(0x7)
900000000001c7c8:	02f830c6 	addi.d	$r6,$r6,-500(0xe0c)
900000000001c7cc:	02803805 	addi.w	$r5,$r0,14(0xe)
900000000001c7d0:	1c0000e4 	pcaddu12i	$r4,7(0x7)
900000000001c7d4:	02f92084 	addi.d	$r4,$r4,-440(0xe48)
900000000001c7d8:	5704abff 	bl	-64344(0xfff04a8) # 900000000000cc80 <__panic>
900000000001c7dc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001c7e0:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    return dop_open(dev, open_flags);
900000000001c7e4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001c7e8:	28c0418c 	ld.d	$r12,$r12,16(0x10)
900000000001c7ec:	28bf52cd 	ld.w	$r13,$r22,-44(0xfd4)
900000000001c7f0:	001501a5 	move	$r5,$r13
900000000001c7f4:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
900000000001c7f8:	4c000181 	jirl	$r1,$r12,0
900000000001c7fc:	0015008c 	move	$r12,$r4
}
900000000001c800:	00150184 	move	$r4,$r12
900000000001c804:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000001c808:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000001c80c:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001c810:	4c000020 	jirl	$r0,$r1,0

900000000001c814 <dev_close>:

static int
dev_close(struct inode *node) {
900000000001c814:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001c818:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000001c81c:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000001c820:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000001c824:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
    struct device *dev = vop_info(node, device);
900000000001c828:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001c82c:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000001c830:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001c834:	40001d80 	beqz	$r12,28(0x1c) # 900000000001c850 <dev_close+0x3c>
900000000001c838:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001c83c:	2881418c 	ld.w	$r12,$r12,80(0x50)
900000000001c840:	0015018d 	move	$r13,$r12
900000000001c844:	1400002c 	lu12i.w	$r12,1(0x1)
900000000001c848:	0388d18c 	ori	$r12,$r12,0x234
900000000001c84c:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000001c868 <dev_close+0x54>
900000000001c850:	1c0000e6 	pcaddu12i	$r6,7(0x7)
900000000001c854:	02f600c6 	addi.d	$r6,$r6,-640(0xd80)
900000000001c858:	02805005 	addi.w	$r5,$r0,20(0x14)
900000000001c85c:	1c0000e4 	pcaddu12i	$r4,7(0x7)
900000000001c860:	02f6f084 	addi.d	$r4,$r4,-580(0xdbc)
900000000001c864:	57041fff 	bl	-64484(0xfff041c) # 900000000000cc80 <__panic>
900000000001c868:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001c86c:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    return dop_close(dev);
900000000001c870:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001c874:	28c0618c 	ld.d	$r12,$r12,24(0x18)
900000000001c878:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
900000000001c87c:	4c000181 	jirl	$r1,$r12,0
900000000001c880:	0015008c 	move	$r12,$r4
}
900000000001c884:	00150184 	move	$r4,$r12
900000000001c888:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000001c88c:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000001c890:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001c894:	4c000020 	jirl	$r0,$r1,0

900000000001c898 <dev_read>:

static int
dev_read(struct inode *node, struct iobuf *iob) {
900000000001c898:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001c89c:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000001c8a0:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000001c8a4:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000001c8a8:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000001c8ac:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
    struct device *dev = vop_info(node, device);
900000000001c8b0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001c8b4:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000001c8b8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001c8bc:	40001d80 	beqz	$r12,28(0x1c) # 900000000001c8d8 <dev_read+0x40>
900000000001c8c0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001c8c4:	2881418c 	ld.w	$r12,$r12,80(0x50)
900000000001c8c8:	0015018d 	move	$r13,$r12
900000000001c8cc:	1400002c 	lu12i.w	$r12,1(0x1)
900000000001c8d0:	0388d18c 	ori	$r12,$r12,0x234
900000000001c8d4:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000001c8f0 <dev_read+0x58>
900000000001c8d8:	1c0000e6 	pcaddu12i	$r6,7(0x7)
900000000001c8dc:	02f3e0c6 	addi.d	$r6,$r6,-776(0xcf8)
900000000001c8e0:	02806805 	addi.w	$r5,$r0,26(0x1a)
900000000001c8e4:	1c0000e4 	pcaddu12i	$r4,7(0x7)
900000000001c8e8:	02f4d084 	addi.d	$r4,$r4,-716(0xd34)
900000000001c8ec:	570397ff 	bl	-64620(0xfff0394) # 900000000000cc80 <__panic>
900000000001c8f0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001c8f4:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    return dop_io(dev, iob, 0);
900000000001c8f8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001c8fc:	28c0818c 	ld.d	$r12,$r12,32(0x20)
900000000001c900:	00150006 	move	$r6,$r0
900000000001c904:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
900000000001c908:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
900000000001c90c:	4c000181 	jirl	$r1,$r12,0
900000000001c910:	0015008c 	move	$r12,$r4
}
900000000001c914:	00150184 	move	$r4,$r12
900000000001c918:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000001c91c:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000001c920:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001c924:	4c000020 	jirl	$r0,$r1,0

900000000001c928 <dev_write>:

static int
dev_write(struct inode *node, struct iobuf *iob) {
900000000001c928:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001c92c:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000001c930:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000001c934:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000001c938:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000001c93c:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
    struct device *dev = vop_info(node, device);
900000000001c940:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001c944:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000001c948:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001c94c:	40001d80 	beqz	$r12,28(0x1c) # 900000000001c968 <dev_write+0x40>
900000000001c950:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001c954:	2881418c 	ld.w	$r12,$r12,80(0x50)
900000000001c958:	0015018d 	move	$r13,$r12
900000000001c95c:	1400002c 	lu12i.w	$r12,1(0x1)
900000000001c960:	0388d18c 	ori	$r12,$r12,0x234
900000000001c964:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000001c980 <dev_write+0x58>
900000000001c968:	1c0000e6 	pcaddu12i	$r6,7(0x7)
900000000001c96c:	02f1a0c6 	addi.d	$r6,$r6,-920(0xc68)
900000000001c970:	02808005 	addi.w	$r5,$r0,32(0x20)
900000000001c974:	1c0000e4 	pcaddu12i	$r4,7(0x7)
900000000001c978:	02f29084 	addi.d	$r4,$r4,-860(0xca4)
900000000001c97c:	570307ff 	bl	-64764(0xfff0304) # 900000000000cc80 <__panic>
900000000001c980:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001c984:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    return dop_io(dev, iob, 1);
900000000001c988:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001c98c:	28c0818c 	ld.d	$r12,$r12,32(0x20)
900000000001c990:	02800406 	addi.w	$r6,$r0,1(0x1)
900000000001c994:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
900000000001c998:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
900000000001c99c:	4c000181 	jirl	$r1,$r12,0
900000000001c9a0:	0015008c 	move	$r12,$r4
}
900000000001c9a4:	00150184 	move	$r4,$r12
900000000001c9a8:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000001c9ac:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000001c9b0:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001c9b4:	4c000020 	jirl	$r0,$r1,0

900000000001c9b8 <dev_ioctl>:

static int
dev_ioctl(struct inode *node, int op, void *data) {
900000000001c9b8:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000001c9bc:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000001c9c0:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000001c9c4:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000001c9c8:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000001c9cc:	001500ac 	move	$r12,$r5
900000000001c9d0:	29ff22c6 	st.d	$r6,$r22,-56(0xfc8)
900000000001c9d4:	0040818c 	slli.w	$r12,$r12,0x0
900000000001c9d8:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
    struct device *dev = vop_info(node, device);
900000000001c9dc:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001c9e0:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000001c9e4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001c9e8:	40001d80 	beqz	$r12,28(0x1c) # 900000000001ca04 <dev_ioctl+0x4c>
900000000001c9ec:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001c9f0:	2881418c 	ld.w	$r12,$r12,80(0x50)
900000000001c9f4:	0015018d 	move	$r13,$r12
900000000001c9f8:	1400002c 	lu12i.w	$r12,1(0x1)
900000000001c9fc:	0388d18c 	ori	$r12,$r12,0x234
900000000001ca00:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000001ca1c <dev_ioctl+0x64>
900000000001ca04:	1c0000e6 	pcaddu12i	$r6,7(0x7)
900000000001ca08:	02ef30c6 	addi.d	$r6,$r6,-1076(0xbcc)
900000000001ca0c:	02809805 	addi.w	$r5,$r0,38(0x26)
900000000001ca10:	1c0000e4 	pcaddu12i	$r4,7(0x7)
900000000001ca14:	02f02084 	addi.d	$r4,$r4,-1016(0xc08)
900000000001ca18:	57026bff 	bl	-64920(0xfff0268) # 900000000000cc80 <__panic>
900000000001ca1c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001ca20:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    return dop_ioctl(dev, op, data);
900000000001ca24:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001ca28:	28c0a18c 	ld.d	$r12,$r12,40(0x28)
900000000001ca2c:	28bf52cd 	ld.w	$r13,$r22,-44(0xfd4)
900000000001ca30:	28ff22c6 	ld.d	$r6,$r22,-56(0xfc8)
900000000001ca34:	001501a5 	move	$r5,$r13
900000000001ca38:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
900000000001ca3c:	4c000181 	jirl	$r1,$r12,0
900000000001ca40:	0015008c 	move	$r12,$r4
}
900000000001ca44:	00150184 	move	$r4,$r12
900000000001ca48:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000001ca4c:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000001ca50:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000001ca54:	4c000020 	jirl	$r0,$r1,0

900000000001ca58 <dev_fstat>:

static int
dev_fstat(struct inode *node, struct stat *stat) {
900000000001ca58:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000001ca5c:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000001ca60:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000001ca64:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000001ca68:	29ff22c4 	st.d	$r4,$r22,-56(0xfc8)
900000000001ca6c:	29ff02c5 	st.d	$r5,$r22,-64(0xfc0)
    int ret;
    memset(stat, 0, sizeof(struct stat));
900000000001ca70:	02808006 	addi.w	$r6,$r0,32(0x20)
900000000001ca74:	00150005 	move	$r5,$r0
900000000001ca78:	28ff02c4 	ld.d	$r4,$r22,-64(0xfc0)
900000000001ca7c:	567aa7ff 	bl	-99676(0xffe7aa4) # 9000000000004520 <memset>
    if ((ret = vop_gettype(node, &(stat->st_mode))) != 0) {
900000000001ca80:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001ca84:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000001ca88:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001ca8c:	40002180 	beqz	$r12,32(0x20) # 900000000001caac <dev_fstat+0x54>
900000000001ca90:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001ca94:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
900000000001ca98:	40001580 	beqz	$r12,20(0x14) # 900000000001caac <dev_fstat+0x54>
900000000001ca9c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001caa0:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
900000000001caa4:	28c1418c 	ld.d	$r12,$r12,80(0x50)
900000000001caa8:	44001d80 	bnez	$r12,28(0x1c) # 900000000001cac4 <dev_fstat+0x6c>
900000000001caac:	1c0000e6 	pcaddu12i	$r6,7(0x7)
900000000001cab0:	02ee10c6 	addi.d	$r6,$r6,-1148(0xb84)
900000000001cab4:	0280b805 	addi.w	$r5,$r0,46(0x2e)
900000000001cab8:	1c0000e4 	pcaddu12i	$r4,7(0x7)
900000000001cabc:	02ed8084 	addi.d	$r4,$r4,-1184(0xb60)
900000000001cac0:	5701c3ff 	bl	-65088(0xfff01c0) # 900000000000cc80 <__panic>
900000000001cac4:	1c0000e5 	pcaddu12i	$r5,7(0x7)
900000000001cac8:	02ef50a5 	addi.d	$r5,$r5,-1068(0xbd4)
900000000001cacc:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000001cad0:	57952fff 	bl	-27348(0xfff952c) # 9000000000015ffc <inode_check>
900000000001cad4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001cad8:	28c1a18c 	ld.d	$r12,$r12,104(0x68)
900000000001cadc:	28c1418c 	ld.d	$r12,$r12,80(0x50)
900000000001cae0:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
900000000001cae4:	001501a5 	move	$r5,$r13
900000000001cae8:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
900000000001caec:	4c000181 	jirl	$r1,$r12,0
900000000001caf0:	0015008c 	move	$r12,$r4
900000000001caf4:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
900000000001caf8:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000001cafc:	40000d80 	beqz	$r12,12(0xc) # 900000000001cb08 <dev_fstat+0xb0>
        return ret;
900000000001cb00:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000001cb04:	50008800 	b	136(0x88) # 900000000001cb8c <dev_fstat+0x134>
    }
    struct device *dev = vop_info(node, device);
900000000001cb08:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001cb0c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
900000000001cb10:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001cb14:	40001d80 	beqz	$r12,28(0x1c) # 900000000001cb30 <dev_fstat+0xd8>
900000000001cb18:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001cb1c:	2881418c 	ld.w	$r12,$r12,80(0x50)
900000000001cb20:	0015018d 	move	$r13,$r12
900000000001cb24:	1400002c 	lu12i.w	$r12,1(0x1)
900000000001cb28:	0388d18c 	ori	$r12,$r12,0x234
900000000001cb2c:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000001cb48 <dev_fstat+0xf0>
900000000001cb30:	1c0000e6 	pcaddu12i	$r6,7(0x7)
900000000001cb34:	02ea80c6 	addi.d	$r6,$r6,-1376(0xaa0)
900000000001cb38:	0280c405 	addi.w	$r5,$r0,49(0x31)
900000000001cb3c:	1c0000e4 	pcaddu12i	$r4,7(0x7)
900000000001cb40:	02eb7084 	addi.d	$r4,$r4,-1316(0xadc)
900000000001cb44:	57013fff 	bl	-65220(0xfff013c) # 900000000000cc80 <__panic>
900000000001cb48:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001cb4c:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    stat->st_nlinks = 1;
900000000001cb50:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000001cb54:	0280040d 	addi.w	$r13,$r0,1(0x1)
900000000001cb58:	29c0218d 	st.d	$r13,$r12,8(0x8)
    stat->st_blocks = dev->d_blocks;
900000000001cb5c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001cb60:	28c0018d 	ld.d	$r13,$r12,0
900000000001cb64:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000001cb68:	29c0418d 	st.d	$r13,$r12,16(0x10)
    stat->st_size = stat->st_blocks * dev->d_blocksize;
900000000001cb6c:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000001cb70:	28c0418d 	ld.d	$r13,$r12,16(0x10)
900000000001cb74:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001cb78:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000001cb7c:	001db1ad 	mul.d	$r13,$r13,$r12
900000000001cb80:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000001cb84:	29c0618d 	st.d	$r13,$r12,24(0x18)
    return 0;
900000000001cb88:	0015000c 	move	$r12,$r0
}
900000000001cb8c:	00150184 	move	$r4,$r12
900000000001cb90:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000001cb94:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000001cb98:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000001cb9c:	4c000020 	jirl	$r0,$r1,0

900000000001cba0 <dev_gettype>:

static int
dev_gettype(struct inode *node, uint32_t *type_store) {
900000000001cba0:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001cba4:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000001cba8:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000001cbac:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000001cbb0:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000001cbb4:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
    struct device *dev = vop_info(node, device);
900000000001cbb8:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001cbbc:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000001cbc0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001cbc4:	40001d80 	beqz	$r12,28(0x1c) # 900000000001cbe0 <dev_gettype+0x40>
900000000001cbc8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001cbcc:	2881418c 	ld.w	$r12,$r12,80(0x50)
900000000001cbd0:	0015018d 	move	$r13,$r12
900000000001cbd4:	1400002c 	lu12i.w	$r12,1(0x1)
900000000001cbd8:	0388d18c 	ori	$r12,$r12,0x234
900000000001cbdc:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000001cbf8 <dev_gettype+0x58>
900000000001cbe0:	1c0000e6 	pcaddu12i	$r6,7(0x7)
900000000001cbe4:	02e7c0c6 	addi.d	$r6,$r6,-1552(0x9f0)
900000000001cbe8:	0280e805 	addi.w	$r5,$r0,58(0x3a)
900000000001cbec:	1c0000e4 	pcaddu12i	$r4,7(0x7)
900000000001cbf0:	02e8b084 	addi.d	$r4,$r4,-1492(0xa2c)
900000000001cbf4:	57008fff 	bl	-65396(0xfff008c) # 900000000000cc80 <__panic>
900000000001cbf8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001cbfc:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    *type_store = (dev->d_blocks > 0) ? S_IFBLK : S_IFCHR;
900000000001cc00:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001cc04:	28c0018c 	ld.d	$r12,$r12,0
900000000001cc08:	40000d80 	beqz	$r12,12(0xc) # 900000000001cc14 <dev_gettype+0x74>
900000000001cc0c:	140000ac 	lu12i.w	$r12,5(0x5)
900000000001cc10:	50000800 	b	8(0x8) # 900000000001cc18 <dev_gettype+0x78>
900000000001cc14:	1400008c 	lu12i.w	$r12,4(0x4)
900000000001cc18:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000001cc1c:	298001ac 	st.w	$r12,$r13,0
    return 0;
900000000001cc20:	0015000c 	move	$r12,$r0
}
900000000001cc24:	00150184 	move	$r4,$r12
900000000001cc28:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000001cc2c:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000001cc30:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001cc34:	4c000020 	jirl	$r0,$r1,0

900000000001cc38 <dev_tryseek>:

static int
dev_tryseek(struct inode *node, off_t pos) {
900000000001cc38:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001cc3c:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000001cc40:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000001cc44:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000001cc48:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000001cc4c:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
    struct device *dev = vop_info(node, device);
900000000001cc50:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001cc54:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000001cc58:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001cc5c:	40001d80 	beqz	$r12,28(0x1c) # 900000000001cc78 <dev_tryseek+0x40>
900000000001cc60:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001cc64:	2881418c 	ld.w	$r12,$r12,80(0x50)
900000000001cc68:	0015018d 	move	$r13,$r12
900000000001cc6c:	1400002c 	lu12i.w	$r12,1(0x1)
900000000001cc70:	0388d18c 	ori	$r12,$r12,0x234
900000000001cc74:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000001cc90 <dev_tryseek+0x58>
900000000001cc78:	1c0000e6 	pcaddu12i	$r6,7(0x7)
900000000001cc7c:	02e560c6 	addi.d	$r6,$r6,-1704(0x958)
900000000001cc80:	02810405 	addi.w	$r5,$r0,65(0x41)
900000000001cc84:	1c0000e4 	pcaddu12i	$r4,7(0x7)
900000000001cc88:	02e65084 	addi.d	$r4,$r4,-1644(0x994)
900000000001cc8c:	56fff7ff 	bl	-65548(0xffefff4) # 900000000000cc80 <__panic>
900000000001cc90:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001cc94:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
    if (dev->d_blocks > 0) {
900000000001cc98:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001cc9c:	28c0018c 	ld.d	$r12,$r12,0
900000000001cca0:	40004580 	beqz	$r12,68(0x44) # 900000000001cce4 <dev_tryseek+0xac>
        if ((pos % dev->d_blocksize) == 0) {
900000000001cca4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001cca8:	28c0218d 	ld.d	$r13,$r12,8(0x8)
900000000001ccac:	28ff42ce 	ld.d	$r14,$r22,-48(0xfd0)
900000000001ccb0:	0023b5cc 	mod.du	$r12,$r14,$r13
900000000001ccb4:	5c0009a0 	bne	$r13,$r0,8(0x8) # 900000000001ccbc <dev_tryseek+0x84>
900000000001ccb8:	002a0007 	break	0x7
900000000001ccbc:	44002980 	bnez	$r12,40(0x28) # 900000000001cce4 <dev_tryseek+0xac>
            if (pos >= 0 && pos < dev->d_blocks * dev->d_blocksize) {
900000000001ccc0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001ccc4:	28c0018d 	ld.d	$r13,$r12,0
900000000001ccc8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001cccc:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000001ccd0:	001db1ac 	mul.d	$r12,$r13,$r12
900000000001ccd4:	28ff42cd 	ld.d	$r13,$r22,-48(0xfd0)
900000000001ccd8:	6c000dac 	bgeu	$r13,$r12,12(0xc) # 900000000001cce4 <dev_tryseek+0xac>
                return 0;
900000000001ccdc:	0015000c 	move	$r12,$r0
900000000001cce0:	50000800 	b	8(0x8) # 900000000001cce8 <dev_tryseek+0xb0>
            }
        }
    }
    return -E_INVAL;
900000000001cce4:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
}
900000000001cce8:	00150184 	move	$r4,$r12
900000000001ccec:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000001ccf0:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000001ccf4:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001ccf8:	4c000020 	jirl	$r0,$r1,0

900000000001ccfc <dev_lookup>:

static int
dev_lookup(struct inode *node, char *path, struct inode **node_store) {
900000000001ccfc:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001cd00:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000001cd04:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000001cd08:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000001cd0c:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000001cd10:	29ff82c5 	st.d	$r5,$r22,-32(0xfe0)
900000000001cd14:	29ff62c6 	st.d	$r6,$r22,-40(0xfd8)
    if (*path != '\0') {
900000000001cd18:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001cd1c:	2800018c 	ld.b	$r12,$r12,0
900000000001cd20:	40000d80 	beqz	$r12,12(0xc) # 900000000001cd2c <dev_lookup+0x30>
        return -E_NOENT;
900000000001cd24:	02bfc00c 	addi.w	$r12,$r0,-16(0xff0)
900000000001cd28:	50001c00 	b	28(0x1c) # 900000000001cd44 <dev_lookup+0x48>
    }
    vop_ref_inc(node);
900000000001cd2c:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000001cd30:	578f2fff 	bl	-28884(0xfff8f2c) # 9000000000015c5c <inode_ref_inc>
    *node_store = node;
900000000001cd34:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001cd38:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000001cd3c:	29c0018d 	st.d	$r13,$r12,0
    return 0;
900000000001cd40:	0015000c 	move	$r12,$r0
}
900000000001cd44:	00150184 	move	$r4,$r12
900000000001cd48:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000001cd4c:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000001cd50:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001cd54:	4c000020 	jirl	$r0,$r1,0

900000000001cd58 <dev_init>:
        extern void dev_init_##x(void);                 \
        dev_init_##x();                                 \
    } while (0)

void
dev_init(void) {
900000000001cd58:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000001cd5c:	29c02061 	st.d	$r1,$r3,8(0x8)
900000000001cd60:	29c00076 	st.d	$r22,$r3,0
900000000001cd64:	02c04076 	addi.d	$r22,$r3,16(0x10)
   // init_device(null);
    init_device(stdin);
900000000001cd68:	540c4c00 	bl	3148(0xc4c) # 900000000001d9b4 <dev_init_stdin>
    init_device(stdout);
900000000001cd6c:	540f3c00 	bl	3900(0xf3c) # 900000000001dca8 <dev_init_stdout>
    init_device(disk0);
900000000001cd70:	54067400 	bl	1652(0x674) # 900000000001d3e4 <dev_init_disk0>
}
900000000001cd74:	03400000 	andi	$r0,$r0,0x0
900000000001cd78:	28c02061 	ld.d	$r1,$r3,8(0x8)
900000000001cd7c:	28c00076 	ld.d	$r22,$r3,0
900000000001cd80:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000001cd84:	4c000020 	jirl	$r0,$r1,0

900000000001cd88 <dev_create_inode>:

struct inode *
dev_create_inode(void) {
900000000001cd88:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000001cd8c:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000001cd90:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000001cd94:	02c08076 	addi.d	$r22,$r3,32(0x20)
    struct inode *node;
    if ((node = alloc_inode(device)) != NULL) {
900000000001cd98:	1400002c 	lu12i.w	$r12,1(0x1)
900000000001cd9c:	0388d184 	ori	$r4,$r12,0x234
900000000001cda0:	578d63ff 	bl	-29344(0xfff8d60) # 9000000000015b00 <__alloc_inode>
900000000001cda4:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000001cda8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001cdac:	40001980 	beqz	$r12,24(0x18) # 900000000001cdc4 <dev_create_inode+0x3c>
        vop_init(node, &dev_node_ops, NULL);
900000000001cdb0:	00150006 	move	$r6,$r0
900000000001cdb4:	1c0000e5 	pcaddu12i	$r5,7(0x7)
900000000001cdb8:	02e3b0a5 	addi.d	$r5,$r5,-1812(0x8ec)
900000000001cdbc:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000001cdc0:	578d97ff 	bl	-29292(0xfff8d94) # 9000000000015b54 <inode_init>
    }
    return node;
900000000001cdc4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
}
900000000001cdc8:	00150184 	move	$r4,$r12
900000000001cdcc:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000001cdd0:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000001cdd4:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000001cdd8:	4c000020 	jirl	$r0,$r1,0

900000000001cddc <fence_i>:
static void fence_i(void *va_start, int size) {
900000000001cddc:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001cde0:	29c0a076 	st.d	$r22,$r3,40(0x28)
900000000001cde4:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000001cde8:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000001cdec:	001500ac 	move	$r12,$r5
900000000001cdf0:	0040818c 	slli.w	$r12,$r12,0x0
900000000001cdf4:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
900000000001cdf8:	38720000 	dbar	0x0
    void *va_end = va_start + size;
900000000001cdfc:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
900000000001ce00:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000001ce04:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001ce08:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
900000000001ce0c:	50002000 	b	32(0x20) # 900000000001ce2c <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
900000000001ce10:	06000189 	cacop	0x9,$r12,0
900000000001ce14:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
900000000001ce18:	06000188 	cacop	0x8,$r12,0
900000000001ce1c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
900000000001ce20:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001ce24:	02c0418c 	addi.d	$r12,$r12,16(0x10)
900000000001ce28:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
900000000001ce2c:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000001ce30:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001ce34:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 900000000001ce10 <fence_i+0x34>
900000000001ce38:	38728000 	ibar	0x0
}
900000000001ce3c:	03400000 	andi	$r0,$r0,0x0
900000000001ce40:	28c0a076 	ld.d	$r22,$r3,40(0x28)
900000000001ce44:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001ce48:	4c000020 	jirl	$r0,$r1,0

900000000001ce4c <lock_disk0>:

static char *disk0_buffer;
static semaphore_t disk0_sem;

static void
lock_disk0(void) {
900000000001ce4c:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000001ce50:	29c02061 	st.d	$r1,$r3,8(0x8)
900000000001ce54:	29c00076 	st.d	$r22,$r3,0
900000000001ce58:	02c04076 	addi.d	$r22,$r3,16(0x10)
    down(&(disk0_sem));
900000000001ce5c:	1c004124 	pcaddu12i	$r4,521(0x209)
900000000001ce60:	02daf084 	addi.d	$r4,$r4,1724(0x6bc)
900000000001ce64:	570fc7ff 	bl	-61500(0xfff0fc4) # 900000000000de28 <down>
}
900000000001ce68:	03400000 	andi	$r0,$r0,0x0
900000000001ce6c:	28c02061 	ld.d	$r1,$r3,8(0x8)
900000000001ce70:	28c00076 	ld.d	$r22,$r3,0
900000000001ce74:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000001ce78:	4c000020 	jirl	$r0,$r1,0

900000000001ce7c <unlock_disk0>:

static void
unlock_disk0(void) {
900000000001ce7c:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000001ce80:	29c02061 	st.d	$r1,$r3,8(0x8)
900000000001ce84:	29c00076 	st.d	$r22,$r3,0
900000000001ce88:	02c04076 	addi.d	$r22,$r3,16(0x10)
    up(&(disk0_sem));
900000000001ce8c:	1c004124 	pcaddu12i	$r4,521(0x209)
900000000001ce90:	02da3084 	addi.d	$r4,$r4,1676(0x68c)
900000000001ce94:	570f63ff 	bl	-61600(0xfff0f60) # 900000000000ddf4 <up>
}
900000000001ce98:	03400000 	andi	$r0,$r0,0x0
900000000001ce9c:	28c02061 	ld.d	$r1,$r3,8(0x8)
900000000001cea0:	28c00076 	ld.d	$r22,$r3,0
900000000001cea4:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000001cea8:	4c000020 	jirl	$r0,$r1,0

900000000001ceac <disk0_open>:

static int
disk0_open(struct device *dev, uint32_t open_flags) {
900000000001ceac:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000001ceb0:	29c06076 	st.d	$r22,$r3,24(0x18)
900000000001ceb4:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000001ceb8:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000001cebc:	001500ac 	move	$r12,$r5
900000000001cec0:	0040818c 	slli.w	$r12,$r12,0x0
900000000001cec4:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
    return 0;
900000000001cec8:	0015000c 	move	$r12,$r0
}
900000000001cecc:	00150184 	move	$r4,$r12
900000000001ced0:	28c06076 	ld.d	$r22,$r3,24(0x18)
900000000001ced4:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000001ced8:	4c000020 	jirl	$r0,$r1,0

900000000001cedc <disk0_close>:

static int
disk0_close(struct device *dev) {
900000000001cedc:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000001cee0:	29c06076 	st.d	$r22,$r3,24(0x18)
900000000001cee4:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000001cee8:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    return 0;
900000000001ceec:	0015000c 	move	$r12,$r0
}
900000000001cef0:	00150184 	move	$r4,$r12
900000000001cef4:	28c06076 	ld.d	$r22,$r3,24(0x18)
900000000001cef8:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000001cefc:	4c000020 	jirl	$r0,$r1,0

900000000001cf00 <disk0_read_blks_nolock>:

static void
disk0_read_blks_nolock(uint32_t blkno, uint32_t nblks) {
900000000001cf00:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001cf04:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000001cf08:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000001cf0c:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000001cf10:	0015008d 	move	$r13,$r4
900000000001cf14:	001500ac 	move	$r12,$r5
900000000001cf18:	004081ad 	slli.w	$r13,$r13,0x0
900000000001cf1c:	29bf72cd 	st.w	$r13,$r22,-36(0xfdc)
900000000001cf20:	0040818c 	slli.w	$r12,$r12,0x0
900000000001cf24:	29bf62cc 	st.w	$r12,$r22,-40(0xfd8)
    int ret;
    uint32_t sectno = blkno * DISK0_BLK_NSECT, nsecs = nblks * DISK0_BLK_NSECT;
900000000001cf28:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
900000000001cf2c:	00408d8c 	slli.w	$r12,$r12,0x3
900000000001cf30:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000001cf34:	28bf62cc 	ld.w	$r12,$r22,-40(0xfd8)
900000000001cf38:	00408d8c 	slli.w	$r12,$r12,0x3
900000000001cf3c:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
    if ((ret = ide_read_secs(DISK0_DEV_NO, sectno, disk0_buffer, nsecs)) != 0) {
900000000001cf40:	1c00412c 	pcaddu12i	$r12,521(0x209)
900000000001cf44:	02d7418c 	addi.d	$r12,$r12,1488(0x5d0)
900000000001cf48:	28c0018d 	ld.d	$r13,$r12,0
900000000001cf4c:	2abfa2ce 	ld.wu	$r14,$r22,-24(0xfe8)
900000000001cf50:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001cf54:	001501c7 	move	$r7,$r14
900000000001cf58:	001501a6 	move	$r6,$r13
900000000001cf5c:	00150185 	move	$r5,$r12
900000000001cf60:	02800804 	addi.w	$r4,$r0,2(0x2)
900000000001cf64:	563d0fff 	bl	-115444(0xffe3d0c) # 9000000000000c70 <ide_read_secs>
900000000001cf68:	0015008c 	move	$r12,$r4
900000000001cf6c:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
900000000001cf70:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000001cf74:	40004580 	beqz	$r12,68(0x44) # 900000000001cfb8 <disk0_read_blks_nolock+0xb8>
        panic("disk0: read blkno = %d (sectno = %d), nblks = %d (nsecs = %d): 0x%08x.\n",
900000000001cf78:	28bf92d0 	ld.w	$r16,$r22,-28(0xfe4)
900000000001cf7c:	28bfa2cf 	ld.w	$r15,$r22,-24(0xfe8)
900000000001cf80:	28bf62ce 	ld.w	$r14,$r22,-40(0xfd8)
900000000001cf84:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
900000000001cf88:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
900000000001cf8c:	0015020b 	move	$r11,$r16
900000000001cf90:	001501ea 	move	$r10,$r15
900000000001cf94:	001501c9 	move	$r9,$r14
900000000001cf98:	001501a8 	move	$r8,$r13
900000000001cf9c:	00150187 	move	$r7,$r12
900000000001cfa0:	1c0000c6 	pcaddu12i	$r6,6(0x6)
900000000001cfa4:	02de00c6 	addi.d	$r6,$r6,1920(0x780)
900000000001cfa8:	0280b805 	addi.w	$r5,$r0,46(0x2e)
900000000001cfac:	1c0000c4 	pcaddu12i	$r4,6(0x6)
900000000001cfb0:	02def084 	addi.d	$r4,$r4,1980(0x7bc)
900000000001cfb4:	56fccfff 	bl	-66356(0xffefccc) # 900000000000cc80 <__panic>
                blkno, sectno, nblks, nsecs, ret);
    }
}
900000000001cfb8:	03400000 	andi	$r0,$r0,0x0
900000000001cfbc:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000001cfc0:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000001cfc4:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001cfc8:	4c000020 	jirl	$r0,$r1,0

900000000001cfcc <disk0_write_blks_nolock>:

static void
disk0_write_blks_nolock(uint32_t blkno, uint32_t nblks) {
900000000001cfcc:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001cfd0:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000001cfd4:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000001cfd8:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000001cfdc:	0015008d 	move	$r13,$r4
900000000001cfe0:	001500ac 	move	$r12,$r5
900000000001cfe4:	004081ad 	slli.w	$r13,$r13,0x0
900000000001cfe8:	29bf72cd 	st.w	$r13,$r22,-36(0xfdc)
900000000001cfec:	0040818c 	slli.w	$r12,$r12,0x0
900000000001cff0:	29bf62cc 	st.w	$r12,$r22,-40(0xfd8)
    int ret;
    uint32_t sectno = blkno * DISK0_BLK_NSECT, nsecs = nblks * DISK0_BLK_NSECT;
900000000001cff4:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
900000000001cff8:	00408d8c 	slli.w	$r12,$r12,0x3
900000000001cffc:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000001d000:	28bf62cc 	ld.w	$r12,$r22,-40(0xfd8)
900000000001d004:	00408d8c 	slli.w	$r12,$r12,0x3
900000000001d008:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
    if ((ret = ide_write_secs(DISK0_DEV_NO, sectno, disk0_buffer, nsecs)) != 0) {
900000000001d00c:	1c00412c 	pcaddu12i	$r12,521(0x209)
900000000001d010:	02d4118c 	addi.d	$r12,$r12,1284(0x504)
900000000001d014:	28c0018d 	ld.d	$r13,$r12,0
900000000001d018:	2abfa2ce 	ld.wu	$r14,$r22,-24(0xfe8)
900000000001d01c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001d020:	001501c7 	move	$r7,$r14
900000000001d024:	001501a6 	move	$r6,$r13
900000000001d028:	00150185 	move	$r5,$r12
900000000001d02c:	02800804 	addi.w	$r4,$r0,2(0x2)
900000000001d030:	563d2fff 	bl	-115412(0xffe3d2c) # 9000000000000d5c <ide_write_secs>
900000000001d034:	0015008c 	move	$r12,$r4
900000000001d038:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
900000000001d03c:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000001d040:	40004580 	beqz	$r12,68(0x44) # 900000000001d084 <disk0_write_blks_nolock+0xb8>
        panic("disk0: write blkno = %d (sectno = %d), nblks = %d (nsecs = %d): 0x%08x.\n",
900000000001d044:	28bf92d0 	ld.w	$r16,$r22,-28(0xfe4)
900000000001d048:	28bfa2cf 	ld.w	$r15,$r22,-24(0xfe8)
900000000001d04c:	28bf62ce 	ld.w	$r14,$r22,-40(0xfd8)
900000000001d050:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
900000000001d054:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
900000000001d058:	0015020b 	move	$r11,$r16
900000000001d05c:	001501ea 	move	$r10,$r15
900000000001d060:	001501c9 	move	$r9,$r14
900000000001d064:	001501a8 	move	$r8,$r13
900000000001d068:	00150187 	move	$r7,$r12
900000000001d06c:	1c0000c6 	pcaddu12i	$r6,6(0x6)
900000000001d070:	02dc70c6 	addi.d	$r6,$r6,1820(0x71c)
900000000001d074:	0280e005 	addi.w	$r5,$r0,56(0x38)
900000000001d078:	1c0000c4 	pcaddu12i	$r4,6(0x6)
900000000001d07c:	02dbc084 	addi.d	$r4,$r4,1776(0x6f0)
900000000001d080:	56fc03ff 	bl	-66560(0xffefc00) # 900000000000cc80 <__panic>
                blkno, sectno, nblks, nsecs, ret);
    }
}
900000000001d084:	03400000 	andi	$r0,$r0,0x0
900000000001d088:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000001d08c:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000001d090:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001d094:	4c000020 	jirl	$r0,$r1,0

900000000001d098 <disk0_io>:

static int
disk0_io(struct device *dev, struct iobuf *iob, bool write) {
900000000001d098:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
900000000001d09c:	29c16061 	st.d	$r1,$r3,88(0x58)
900000000001d0a0:	29c14076 	st.d	$r22,$r3,80(0x50)
900000000001d0a4:	02c18076 	addi.d	$r22,$r3,96(0x60)
900000000001d0a8:	29fee2c4 	st.d	$r4,$r22,-72(0xfb8)
900000000001d0ac:	29fec2c5 	st.d	$r5,$r22,-80(0xfb0)
900000000001d0b0:	001500cc 	move	$r12,$r6
900000000001d0b4:	0040818c 	slli.w	$r12,$r12,0x0
900000000001d0b8:	29beb2cc 	st.w	$r12,$r22,-84(0xfac)
    off_t offset = iob->io_offset;
900000000001d0bc:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000001d0c0:	28c0218c 	ld.d	$r12,$r12,8(0x8)
900000000001d0c4:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
    size_t resid = iob->io_resid;
900000000001d0c8:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000001d0cc:	28c0618c 	ld.d	$r12,$r12,24(0x18)
900000000001d0d0:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    uint32_t blkno = offset / DISK0_BLKSIZE;
900000000001d0d4:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001d0d8:	0045318c 	srli.d	$r12,$r12,0xc
900000000001d0dc:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
    uint32_t nblks = resid / DISK0_BLKSIZE;
900000000001d0e0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001d0e4:	0045318c 	srli.d	$r12,$r12,0xc
900000000001d0e8:	29bf82cc 	st.w	$r12,$r22,-32(0xfe0)

    /* don't allow I/O that isn't block-aligned */
    if ((offset % DISK0_BLKSIZE) != 0 || (resid % DISK0_BLKSIZE) != 0) {
900000000001d0ec:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001d0f0:	037ffd8c 	andi	$r12,$r12,0xfff
900000000001d0f4:	44001180 	bnez	$r12,16(0x10) # 900000000001d104 <disk0_io+0x6c>
900000000001d0f8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001d0fc:	037ffd8c 	andi	$r12,$r12,0xfff
900000000001d100:	40000d80 	beqz	$r12,12(0xc) # 900000000001d10c <disk0_io+0x74>
        return -E_INVAL;
900000000001d104:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
900000000001d108:	50019000 	b	400(0x190) # 900000000001d298 <disk0_io+0x200>
    }

    /* don't allow I/O past the end of disk0 */
    if (blkno + nblks > dev->d_blocks) {
900000000001d10c:	28bf92cd 	ld.w	$r13,$r22,-28(0xfe4)
900000000001d110:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
900000000001d114:	001031ac 	add.w	$r12,$r13,$r12
900000000001d118:	00df018d 	bstrpick.d	$r13,$r12,0x1f,0x0
900000000001d11c:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
900000000001d120:	28c0018c 	ld.d	$r12,$r12,0
900000000001d124:	6c000d8d 	bgeu	$r12,$r13,12(0xc) # 900000000001d130 <disk0_io+0x98>
        return -E_INVAL;
900000000001d128:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
900000000001d12c:	50016c00 	b	364(0x16c) # 900000000001d298 <disk0_io+0x200>
    }

    /* read/write nothing ? */
    if (nblks == 0) {
900000000001d130:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
900000000001d134:	44000d80 	bnez	$r12,12(0xc) # 900000000001d140 <disk0_io+0xa8>
        return 0;
900000000001d138:	0015000c 	move	$r12,$r0
900000000001d13c:	50015c00 	b	348(0x15c) # 900000000001d298 <disk0_io+0x200>
    }

    lock_disk0();
900000000001d140:	57fd0fff 	bl	-756(0xffffd0c) # 900000000001ce4c <lock_disk0>
    while (resid != 0) {
900000000001d144:	50014400 	b	324(0x144) # 900000000001d288 <disk0_io+0x1f0>
        size_t copied, alen = DISK0_BUFSIZE;
900000000001d148:	1400008c 	lu12i.w	$r12,4(0x4)
900000000001d14c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        if (write) {
900000000001d150:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
900000000001d154:	40008980 	beqz	$r12,136(0x88) # 900000000001d1dc <disk0_io+0x144>
            iobuf_move(iob, disk0_buffer, alen, 0, &copied);
900000000001d158:	1c00412c 	pcaddu12i	$r12,521(0x209)
900000000001d15c:	02cee18c 	addi.d	$r12,$r12,952(0x3b8)
900000000001d160:	28c0018c 	ld.d	$r12,$r12,0
900000000001d164:	02ff22cd 	addi.d	$r13,$r22,-56(0xfc8)
900000000001d168:	001501a8 	move	$r8,$r13
900000000001d16c:	00150007 	move	$r7,$r0
900000000001d170:	28ff62c6 	ld.d	$r6,$r22,-40(0xfd8)
900000000001d174:	00150185 	move	$r5,$r12
900000000001d178:	28fec2c4 	ld.d	$r4,$r22,-80(0xfb0)
900000000001d17c:	5779bbff 	bl	-34376(0xfff79b8) # 9000000000014b34 <iobuf_move>
            assert(copied != 0 && copied <= resid && copied % DISK0_BLKSIZE == 0);
900000000001d180:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001d184:	40001d80 	beqz	$r12,28(0x1c) # 900000000001d1a0 <disk0_io+0x108>
900000000001d188:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001d18c:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000001d190:	680011ac 	bltu	$r13,$r12,16(0x10) # 900000000001d1a0 <disk0_io+0x108>
900000000001d194:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001d198:	037ffd8c 	andi	$r12,$r12,0xfff
900000000001d19c:	40001d80 	beqz	$r12,28(0x1c) # 900000000001d1b8 <disk0_io+0x120>
900000000001d1a0:	1c0000c6 	pcaddu12i	$r6,6(0x6)
900000000001d1a4:	02d8e0c6 	addi.d	$r6,$r6,1592(0x638)
900000000001d1a8:	02815c05 	addi.w	$r5,$r0,87(0x57)
900000000001d1ac:	1c0000c4 	pcaddu12i	$r4,6(0x6)
900000000001d1b0:	02d6f084 	addi.d	$r4,$r4,1468(0x5bc)
900000000001d1b4:	56facfff 	bl	-66868(0xffefacc) # 900000000000cc80 <__panic>
            nblks = copied / DISK0_BLKSIZE;
900000000001d1b8:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001d1bc:	0045318c 	srli.d	$r12,$r12,0xc
900000000001d1c0:	29bf82cc 	st.w	$r12,$r22,-32(0xfe0)
            disk0_write_blks_nolock(blkno, nblks);
900000000001d1c4:	28bf82cd 	ld.w	$r13,$r22,-32(0xfe0)
900000000001d1c8:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000001d1cc:	001501a5 	move	$r5,$r13
900000000001d1d0:	00150184 	move	$r4,$r12
900000000001d1d4:	57fdfbff 	bl	-520(0xffffdf8) # 900000000001cfcc <disk0_write_blks_nolock>
900000000001d1d8:	50009000 	b	144(0x90) # 900000000001d268 <disk0_io+0x1d0>
        }
        else {
            if (alen > resid) {
900000000001d1dc:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000001d1e0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001d1e4:	6c000d8d 	bgeu	$r12,$r13,12(0xc) # 900000000001d1f0 <disk0_io+0x158>
                alen = resid;
900000000001d1e8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001d1ec:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
            }
            nblks = alen / DISK0_BLKSIZE;
900000000001d1f0:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001d1f4:	0045318c 	srli.d	$r12,$r12,0xc
900000000001d1f8:	29bf82cc 	st.w	$r12,$r22,-32(0xfe0)
            disk0_read_blks_nolock(blkno, nblks);
900000000001d1fc:	28bf82cd 	ld.w	$r13,$r22,-32(0xfe0)
900000000001d200:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000001d204:	001501a5 	move	$r5,$r13
900000000001d208:	00150184 	move	$r4,$r12
900000000001d20c:	57fcf7ff 	bl	-780(0xffffcf4) # 900000000001cf00 <disk0_read_blks_nolock>
            iobuf_move(iob, disk0_buffer, alen, 1, &copied);
900000000001d210:	1c00412c 	pcaddu12i	$r12,521(0x209)
900000000001d214:	02cc018c 	addi.d	$r12,$r12,768(0x300)
900000000001d218:	28c0018c 	ld.d	$r12,$r12,0
900000000001d21c:	02ff22cd 	addi.d	$r13,$r22,-56(0xfc8)
900000000001d220:	001501a8 	move	$r8,$r13
900000000001d224:	02800407 	addi.w	$r7,$r0,1(0x1)
900000000001d228:	28ff62c6 	ld.d	$r6,$r22,-40(0xfd8)
900000000001d22c:	00150185 	move	$r5,$r12
900000000001d230:	28fec2c4 	ld.d	$r4,$r22,-80(0xfb0)
900000000001d234:	577903ff 	bl	-34560(0xfff7900) # 9000000000014b34 <iobuf_move>
            assert(copied == alen && copied % DISK0_BLKSIZE == 0);
900000000001d238:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001d23c:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000001d240:	5c0011ac 	bne	$r13,$r12,16(0x10) # 900000000001d250 <disk0_io+0x1b8>
900000000001d244:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001d248:	037ffd8c 	andi	$r12,$r12,0xfff
900000000001d24c:	40001d80 	beqz	$r12,28(0x1c) # 900000000001d268 <disk0_io+0x1d0>
900000000001d250:	1c0000c6 	pcaddu12i	$r6,6(0x6)
900000000001d254:	02d760c6 	addi.d	$r6,$r6,1496(0x5d8)
900000000001d258:	02818805 	addi.w	$r5,$r0,98(0x62)
900000000001d25c:	1c0000c4 	pcaddu12i	$r4,6(0x6)
900000000001d260:	02d43084 	addi.d	$r4,$r4,1292(0x50c)
900000000001d264:	56fa1fff 	bl	-67044(0xffefa1c) # 900000000000cc80 <__panic>
        }
        resid -= copied, blkno += nblks;
900000000001d268:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000001d26c:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000001d270:	0011b1ac 	sub.d	$r12,$r13,$r12
900000000001d274:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
900000000001d278:	28bf92cd 	ld.w	$r13,$r22,-28(0xfe4)
900000000001d27c:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
900000000001d280:	001031ac 	add.w	$r12,$r13,$r12
900000000001d284:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
    while (resid != 0) {
900000000001d288:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001d28c:	47febd9f 	bnez	$r12,-324(0x7ffebc) # 900000000001d148 <disk0_io+0xb0>
    }
    unlock_disk0();
900000000001d290:	57fbefff 	bl	-1044(0xffffbec) # 900000000001ce7c <unlock_disk0>
    return 0;
900000000001d294:	0015000c 	move	$r12,$r0
}
900000000001d298:	00150184 	move	$r4,$r12
900000000001d29c:	28c16061 	ld.d	$r1,$r3,88(0x58)
900000000001d2a0:	28c14076 	ld.d	$r22,$r3,80(0x50)
900000000001d2a4:	02c18063 	addi.d	$r3,$r3,96(0x60)
900000000001d2a8:	4c000020 	jirl	$r0,$r1,0

900000000001d2ac <disk0_ioctl>:

static int
disk0_ioctl(struct device *dev, int op, void *data) {
900000000001d2ac:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001d2b0:	29c0a076 	st.d	$r22,$r3,40(0x28)
900000000001d2b4:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000001d2b8:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000001d2bc:	001500ac 	move	$r12,$r5
900000000001d2c0:	29ff62c6 	st.d	$r6,$r22,-40(0xfd8)
900000000001d2c4:	0040818c 	slli.w	$r12,$r12,0x0
900000000001d2c8:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
    return -E_UNIMP;
900000000001d2cc:	02bfb00c 	addi.w	$r12,$r0,-20(0xfec)
}
900000000001d2d0:	00150184 	move	$r4,$r12
900000000001d2d4:	28c0a076 	ld.d	$r22,$r3,40(0x28)
900000000001d2d8:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001d2dc:	4c000020 	jirl	$r0,$r1,0

900000000001d2e0 <disk0_device_init>:

static void
disk0_device_init(struct device *dev) {
900000000001d2e0:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000001d2e4:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000001d2e8:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000001d2ec:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000001d2f0:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    static_assert(DISK0_BLKSIZE % SECTSIZE == 0);
    if (!ide_device_valid(DISK0_DEV_NO)) {
900000000001d2f4:	02800804 	addi.w	$r4,$r0,2(0x2)
900000000001d2f8:	5638abff 	bl	-116568(0xffe38a8) # 9000000000000ba0 <ide_device_valid>
900000000001d2fc:	0015008c 	move	$r12,$r4
900000000001d300:	44001d80 	bnez	$r12,28(0x1c) # 900000000001d31c <disk0_device_init+0x3c>
        panic("disk0 device isn't available.\n");
900000000001d304:	1c0000c6 	pcaddu12i	$r6,6(0x6)
900000000001d308:	02d590c6 	addi.d	$r6,$r6,1380(0x564)
900000000001d30c:	0281cc05 	addi.w	$r5,$r0,115(0x73)
900000000001d310:	1c0000c4 	pcaddu12i	$r4,6(0x6)
900000000001d314:	02d16084 	addi.d	$r4,$r4,1112(0x458)
900000000001d318:	56f96bff 	bl	-67224(0xffef968) # 900000000000cc80 <__panic>
    }
    dev->d_blocks = ide_device_size(DISK0_DEV_NO) / DISK0_BLK_NSECT;
900000000001d31c:	02800804 	addi.w	$r4,$r0,2(0x2)
900000000001d320:	5638e7ff 	bl	-116508(0xffe38e4) # 9000000000000c04 <ide_device_size>
900000000001d324:	0015008c 	move	$r12,$r4
900000000001d328:	00450d8d 	srli.d	$r13,$r12,0x3
900000000001d32c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001d330:	29c0018d 	st.d	$r13,$r12,0
    dev->d_blocksize = DISK0_BLKSIZE;
900000000001d334:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001d338:	1400002d 	lu12i.w	$r13,1(0x1)
900000000001d33c:	29c0218d 	st.d	$r13,$r12,8(0x8)
    dev->d_open = disk0_open;
900000000001d340:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001d344:	1c00000d 	pcaddu12i	$r13,0
900000000001d348:	02eda1ad 	addi.d	$r13,$r13,-1176(0xb68)
900000000001d34c:	29c0418d 	st.d	$r13,$r12,16(0x10)
    dev->d_close = disk0_close;
900000000001d350:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001d354:	1c00000d 	pcaddu12i	$r13,0
900000000001d358:	02ee21ad 	addi.d	$r13,$r13,-1144(0xb88)
900000000001d35c:	29c0618d 	st.d	$r13,$r12,24(0x18)
    dev->d_io = disk0_io;
900000000001d360:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001d364:	1c00000d 	pcaddu12i	$r13,0
900000000001d368:	02f4d1ad 	addi.d	$r13,$r13,-716(0xd34)
900000000001d36c:	29c0818d 	st.d	$r13,$r12,32(0x20)
    dev->d_ioctl = disk0_ioctl;
900000000001d370:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001d374:	1c00000d 	pcaddu12i	$r13,0
900000000001d378:	02fce1ad 	addi.d	$r13,$r13,-200(0xf38)
900000000001d37c:	29c0a18d 	st.d	$r13,$r12,40(0x28)
    sem_init(&(disk0_sem), 1);
900000000001d380:	02800405 	addi.w	$r5,$r0,1(0x1)
900000000001d384:	1c004124 	pcaddu12i	$r4,521(0x209)
900000000001d388:	02c65084 	addi.d	$r4,$r4,404(0x194)
900000000001d38c:	570843ff 	bl	-63424(0xfff0840) # 900000000000dbcc <sem_init>

    static_assert(DISK0_BUFSIZE % DISK0_BLKSIZE == 0);
    if ((disk0_buffer = kmalloc(DISK0_BUFSIZE)) == NULL) {
900000000001d390:	14000084 	lu12i.w	$r4,4(0x4)
900000000001d394:	56a2a7ff 	bl	-89436(0xffea2a4) # 9000000000007638 <kmalloc>
900000000001d398:	0015008d 	move	$r13,$r4
900000000001d39c:	1c00412c 	pcaddu12i	$r12,521(0x209)
900000000001d3a0:	02c5d18c 	addi.d	$r12,$r12,372(0x174)
900000000001d3a4:	29c0018d 	st.d	$r13,$r12,0
900000000001d3a8:	1c00412c 	pcaddu12i	$r12,521(0x209)
900000000001d3ac:	02c5a18c 	addi.d	$r12,$r12,360(0x168)
900000000001d3b0:	28c0018c 	ld.d	$r12,$r12,0
900000000001d3b4:	44001d80 	bnez	$r12,28(0x1c) # 900000000001d3d0 <disk0_device_init+0xf0>
        panic("disk0 alloc buffer failed.\n");
900000000001d3b8:	1c0000c6 	pcaddu12i	$r6,6(0x6)
900000000001d3bc:	02d340c6 	addi.d	$r6,$r6,1232(0x4d0)
900000000001d3c0:	0281fc05 	addi.w	$r5,$r0,127(0x7f)
900000000001d3c4:	1c0000c4 	pcaddu12i	$r4,6(0x6)
900000000001d3c8:	02ce9084 	addi.d	$r4,$r4,932(0x3a4)
900000000001d3cc:	56f8b7ff 	bl	-67404(0xffef8b4) # 900000000000cc80 <__panic>
    }
}
900000000001d3d0:	03400000 	andi	$r0,$r0,0x0
900000000001d3d4:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000001d3d8:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000001d3dc:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000001d3e0:	4c000020 	jirl	$r0,$r1,0

900000000001d3e4 <dev_init_disk0>:

void
dev_init_disk0(void) {
900000000001d3e4:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001d3e8:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000001d3ec:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000001d3f0:	02c0c076 	addi.d	$r22,$r3,48(0x30)
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
900000000001d3f4:	57f997ff 	bl	-1644(0xffff994) # 900000000001cd88 <dev_create_inode>
900000000001d3f8:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000001d3fc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001d400:	44001d80 	bnez	$r12,28(0x1c) # 900000000001d41c <dev_init_disk0+0x38>
        panic("disk0: dev_create_node.\n");
900000000001d404:	1c0000c6 	pcaddu12i	$r6,6(0x6)
900000000001d408:	02d290c6 	addi.d	$r6,$r6,1188(0x4a4)
900000000001d40c:	02821c05 	addi.w	$r5,$r0,135(0x87)
900000000001d410:	1c0000c4 	pcaddu12i	$r4,6(0x6)
900000000001d414:	02cd6084 	addi.d	$r4,$r4,856(0x358)
900000000001d418:	56f86bff 	bl	-67480(0xffef868) # 900000000000cc80 <__panic>
    }
    disk0_device_init(vop_info(node, device));
900000000001d41c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001d420:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
900000000001d424:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001d428:	40001d80 	beqz	$r12,28(0x1c) # 900000000001d444 <dev_init_disk0+0x60>
900000000001d42c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001d430:	2881418c 	ld.w	$r12,$r12,80(0x50)
900000000001d434:	0015018d 	move	$r13,$r12
900000000001d438:	1400002c 	lu12i.w	$r12,1(0x1)
900000000001d43c:	0388d18c 	ori	$r12,$r12,0x234
900000000001d440:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000001d45c <dev_init_disk0+0x78>
900000000001d444:	1c0000c6 	pcaddu12i	$r6,6(0x6)
900000000001d448:	02d210c6 	addi.d	$r6,$r6,1156(0x484)
900000000001d44c:	02822405 	addi.w	$r5,$r0,137(0x89)
900000000001d450:	1c0000c4 	pcaddu12i	$r4,6(0x6)
900000000001d454:	02cc6084 	addi.d	$r4,$r4,792(0x318)
900000000001d458:	56f82bff 	bl	-67544(0xffef828) # 900000000000cc80 <__panic>
900000000001d45c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001d460:	00150184 	move	$r4,$r12
900000000001d464:	57fe7fff 	bl	-388(0xffffe7c) # 900000000001d2e0 <disk0_device_init>

    int ret;
    if ((ret = vfs_add_dev("disk0", node, 1)) != 0) {
900000000001d468:	02800406 	addi.w	$r6,$r0,1(0x1)
900000000001d46c:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
900000000001d470:	1c0000c4 	pcaddu12i	$r4,6(0x6)
900000000001d474:	02d28084 	addi.d	$r4,$r4,1184(0x4a0)
900000000001d478:	579667ff 	bl	-27036(0xfff9664) # 9000000000016adc <vfs_add_dev>
900000000001d47c:	0015008c 	move	$r12,$r4
900000000001d480:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
900000000001d484:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
900000000001d488:	40002580 	beqz	$r12,36(0x24) # 900000000001d4ac <dev_init_disk0+0xc8>
        panic("disk0: vfs_add_dev: %e.\n", ret);
900000000001d48c:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
900000000001d490:	00150187 	move	$r7,$r12
900000000001d494:	1c0000c6 	pcaddu12i	$r6,6(0x6)
900000000001d498:	02d210c6 	addi.d	$r6,$r6,1156(0x484)
900000000001d49c:	02823405 	addi.w	$r5,$r0,141(0x8d)
900000000001d4a0:	1c0000c4 	pcaddu12i	$r4,6(0x6)
900000000001d4a4:	02cb2084 	addi.d	$r4,$r4,712(0x2c8)
900000000001d4a8:	56f7dbff 	bl	-67624(0xffef7d8) # 900000000000cc80 <__panic>
    }
}
900000000001d4ac:	03400000 	andi	$r0,$r0,0x0
900000000001d4b0:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000001d4b4:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000001d4b8:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001d4bc:	4c000020 	jirl	$r0,$r1,0

900000000001d4c0 <fence_i>:
static void fence_i(void *va_start, int size) {
900000000001d4c0:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001d4c4:	29c0a076 	st.d	$r22,$r3,40(0x28)
900000000001d4c8:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000001d4cc:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000001d4d0:	001500ac 	move	$r12,$r5
900000000001d4d4:	0040818c 	slli.w	$r12,$r12,0x0
900000000001d4d8:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
900000000001d4dc:	38720000 	dbar	0x0
    void *va_end = va_start + size;
900000000001d4e0:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
900000000001d4e4:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000001d4e8:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001d4ec:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
900000000001d4f0:	50002000 	b	32(0x20) # 900000000001d510 <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
900000000001d4f4:	06000189 	cacop	0x9,$r12,0
900000000001d4f8:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
900000000001d4fc:	06000188 	cacop	0x8,$r12,0
900000000001d500:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
900000000001d504:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001d508:	02c0418c 	addi.d	$r12,$r12,16(0x10)
900000000001d50c:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
900000000001d510:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000001d514:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001d518:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 900000000001d4f4 <fence_i+0x34>
900000000001d51c:	38728000 	ibar	0x0
}
900000000001d520:	03400000 	andi	$r0,$r0,0x0
900000000001d524:	28c0a076 	ld.d	$r22,$r3,40(0x28)
900000000001d528:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001d52c:	4c000020 	jirl	$r0,$r1,0

900000000001d530 <__intr_save>:
{
900000000001d530:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000001d534:	29c02076 	st.d	$r22,$r3,8(0x8)
900000000001d538:	02c04076 	addi.d	$r22,$r3,16(0x10)
	return __csrxchg(0, LISA_CSR_CRMD_IE, LISA_CSR_CRMD);
900000000001d53c:	0015000d 	move	$r13,$r0
900000000001d540:	0280100c 	addi.w	$r12,$r0,4(0x4)
900000000001d544:	0400018d 	csrxchg	$r13,$r12,0x0
900000000001d548:	001501ac 	move	$r12,$r13
900000000001d54c:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
}
900000000001d550:	00150184 	move	$r4,$r12
900000000001d554:	28c02076 	ld.d	$r22,$r3,8(0x8)
900000000001d558:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000001d55c:	4c000020 	jirl	$r0,$r1,0

900000000001d560 <__intr_restore>:
{
900000000001d560:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000001d564:	29c06076 	st.d	$r22,$r3,24(0x18)
900000000001d568:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000001d56c:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
	__csrxchg(flags, LISA_CSR_CRMD_IE, LISA_CSR_CRMD);
900000000001d570:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000001d574:	0280100d 	addi.w	$r13,$r0,4(0x4)
900000000001d578:	040001ac 	csrxchg	$r12,$r13,0x0
}
900000000001d57c:	03400000 	andi	$r0,$r0,0x0
900000000001d580:	28c06076 	ld.d	$r22,$r3,24(0x18)
900000000001d584:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000001d588:	4c000020 	jirl	$r0,$r1,0

900000000001d58c <dev_stdin_write>:
static char stdin_buffer[STDIN_BUFSIZE];
static off_t p_rpos, p_wpos;
static wait_queue_t __wait_queue, *wait_queue = &__wait_queue;

void
dev_stdin_write(char c) {
900000000001d58c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001d590:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000001d594:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000001d598:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000001d59c:	0015008c 	move	$r12,$r4
900000000001d5a0:	0040818c 	slli.w	$r12,$r12,0x0
900000000001d5a4:	293f7ecc 	st.b	$r12,$r22,-33(0xfdf)
    bool intr_flag;
    if (c != '\0') {
900000000001d5a8:	283f7ecc 	ld.b	$r12,$r22,-33(0xfdf)
900000000001d5ac:	4000bd80 	beqz	$r12,188(0xbc) # 900000000001d668 <dev_stdin_write+0xdc>
        local_intr_save(intr_flag);
900000000001d5b0:	57ff83ff 	bl	-128(0xfffff80) # 900000000001d530 <__intr_save>
900000000001d5b4:	0015008c 	move	$r12,$r4
900000000001d5b8:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
        {
            stdin_buffer[p_wpos % STDIN_BUFSIZE] = c;
900000000001d5bc:	1c00414c 	pcaddu12i	$r12,522(0x20a)
900000000001d5c0:	02fdf18c 	addi.d	$r12,$r12,-132(0xf7c)
900000000001d5c4:	28c0018c 	ld.d	$r12,$r12,0
900000000001d5c8:	037ffd8c 	andi	$r12,$r12,0xfff
900000000001d5cc:	1c00412d 	pcaddu12i	$r13,521(0x209)
900000000001d5d0:	02fd91ad 	addi.d	$r13,$r13,-156(0xf64)
900000000001d5d4:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001d5d8:	2a3f7ecd 	ld.bu	$r13,$r22,-33(0xfdf)
900000000001d5dc:	2900018d 	st.b	$r13,$r12,0
            if (p_wpos - p_rpos < STDIN_BUFSIZE) {
900000000001d5e0:	1c00414c 	pcaddu12i	$r12,522(0x20a)
900000000001d5e4:	02fd618c 	addi.d	$r12,$r12,-168(0xf58)
900000000001d5e8:	28c0018d 	ld.d	$r13,$r12,0
900000000001d5ec:	1c00414c 	pcaddu12i	$r12,522(0x20a)
900000000001d5f0:	02fd118c 	addi.d	$r12,$r12,-188(0xf44)
900000000001d5f4:	28c0018c 	ld.d	$r12,$r12,0
900000000001d5f8:	0011b1ad 	sub.d	$r13,$r13,$r12
900000000001d5fc:	03bffc0c 	ori	$r12,$r0,0xfff
900000000001d600:	6800218d 	bltu	$r12,$r13,32(0x20) # 900000000001d620 <dev_stdin_write+0x94>
                p_wpos ++;
900000000001d604:	1c00414c 	pcaddu12i	$r12,522(0x20a)
900000000001d608:	02fcd18c 	addi.d	$r12,$r12,-204(0xf34)
900000000001d60c:	28c0018c 	ld.d	$r12,$r12,0
900000000001d610:	02c0058d 	addi.d	$r13,$r12,1(0x1)
900000000001d614:	1c00414c 	pcaddu12i	$r12,522(0x20a)
900000000001d618:	02fc918c 	addi.d	$r12,$r12,-220(0xf24)
900000000001d61c:	29c0018d 	st.d	$r13,$r12,0
            }
            if (!wait_queue_empty(wait_queue)) {
900000000001d620:	1c0000ec 	pcaddu12i	$r12,7(0x7)
900000000001d624:	02fac18c 	addi.d	$r12,$r12,-336(0xeb0)
900000000001d628:	28c0018c 	ld.d	$r12,$r12,0
900000000001d62c:	00150184 	move	$r4,$r12
900000000001d630:	570dafff 	bl	-62036(0xfff0dac) # 900000000000e3dc <wait_queue_empty>
900000000001d634:	0015008c 	move	$r12,$r4
900000000001d638:	44002580 	bnez	$r12,36(0x24) # 900000000001d65c <dev_stdin_write+0xd0>
                wakeup_queue(wait_queue, WT_KBD, 1);
900000000001d63c:	1c0000ec 	pcaddu12i	$r12,7(0x7)
900000000001d640:	02fa518c 	addi.d	$r12,$r12,-364(0xe94)
900000000001d644:	28c0018d 	ld.d	$r13,$r12,0
900000000001d648:	02800406 	addi.w	$r6,$r0,1(0x1)
900000000001d64c:	1500000c 	lu12i.w	$r12,-524288(0x80000)
900000000001d650:	03801185 	ori	$r5,$r12,0x4
900000000001d654:	001501a4 	move	$r4,$r13
900000000001d658:	570ef7ff 	bl	-61708(0xfff0ef4) # 900000000000e54c <wakeup_queue>
            }
        }
        local_intr_restore(intr_flag);
900000000001d65c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001d660:	00150184 	move	$r4,$r12
900000000001d664:	57feffff 	bl	-260(0xffffefc) # 900000000001d560 <__intr_restore>
    }
    // kprintf("writed %c\n",c);
    // kprintf("p_rpos at  ");printhex(p_rpos);
    // kprintf("p_wpos at  ");printhex(p_wpos);
    
}
900000000001d668:	03400000 	andi	$r0,$r0,0x0
900000000001d66c:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000001d670:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000001d674:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001d678:	4c000020 	jirl	$r0,$r1,0

900000000001d67c <dev_stdin_read>:

static int
dev_stdin_read(char *buf, size_t len) {
900000000001d67c:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
900000000001d680:	29c16061 	st.d	$r1,$r3,88(0x58)
900000000001d684:	29c14076 	st.d	$r22,$r3,80(0x50)
900000000001d688:	02c18076 	addi.d	$r22,$r3,96(0x60)
900000000001d68c:	29fea2c4 	st.d	$r4,$r22,-88(0xfa8)
900000000001d690:	29fe82c5 	st.d	$r5,$r22,-96(0xfa0)
    int ret = 0;
900000000001d694:	29bfb2c0 	st.w	$r0,$r22,-20(0xfec)
    bool intr_flag;
    // kprintf("\ndevlen is %d",len);
    local_intr_save(intr_flag);
900000000001d698:	57fe9bff 	bl	-360(0xffffe98) # 900000000001d530 <__intr_save>
900000000001d69c:	0015008c 	move	$r12,$r4
900000000001d6a0:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
    {
        for (; ret < len; ret ++, p_rpos ++) {
900000000001d6a4:	50010800 	b	264(0x108) # 900000000001d7ac <dev_stdin_read+0x130>
        try_again:
900000000001d6a8:	03400000 	andi	$r0,$r0,0x0
            if (p_rpos < p_wpos) {
900000000001d6ac:	1c00414c 	pcaddu12i	$r12,522(0x20a)
900000000001d6b0:	02fa118c 	addi.d	$r12,$r12,-380(0xe84)
900000000001d6b4:	28c0018d 	ld.d	$r13,$r12,0
900000000001d6b8:	1c00414c 	pcaddu12i	$r12,522(0x20a)
900000000001d6bc:	02fa018c 	addi.d	$r12,$r12,-384(0xe80)
900000000001d6c0:	28c0018c 	ld.d	$r12,$r12,0
900000000001d6c4:	6c0039ac 	bgeu	$r13,$r12,56(0x38) # 900000000001d6fc <dev_stdin_read+0x80>
                *buf ++ = stdin_buffer[p_rpos % STDIN_BUFSIZE];
900000000001d6c8:	1c00414c 	pcaddu12i	$r12,522(0x20a)
900000000001d6cc:	02f9a18c 	addi.d	$r12,$r12,-408(0xe68)
900000000001d6d0:	28c0018c 	ld.d	$r12,$r12,0
900000000001d6d4:	037ffd8d 	andi	$r13,$r12,0xfff
900000000001d6d8:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
900000000001d6dc:	02c0058e 	addi.d	$r14,$r12,1(0x1)
900000000001d6e0:	29fea2ce 	st.d	$r14,$r22,-88(0xfa8)
900000000001d6e4:	1c00412e 	pcaddu12i	$r14,521(0x209)
900000000001d6e8:	02f931ce 	addi.d	$r14,$r14,-436(0xe4c)
900000000001d6ec:	0010b5cd 	add.d	$r13,$r14,$r13
900000000001d6f0:	280001ad 	ld.b	$r13,$r13,0
900000000001d6f4:	2900018d 	st.b	$r13,$r12,0
900000000001d6f8:	50008c00 	b	140(0x8c) # 900000000001d784 <dev_stdin_read+0x108>
            }
            else {
                wait_t __wait, *wait = &__wait;
900000000001d6fc:	02fee2cc 	addi.d	$r12,$r22,-72(0xfb8)
900000000001d700:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
                wait_current_set(wait_queue, wait, WT_KBD);
900000000001d704:	1c0000ec 	pcaddu12i	$r12,7(0x7)
900000000001d708:	02f7318c 	addi.d	$r12,$r12,-564(0xdcc)
900000000001d70c:	28c0018d 	ld.d	$r13,$r12,0
900000000001d710:	1500000c 	lu12i.w	$r12,-524288(0x80000)
900000000001d714:	03801186 	ori	$r6,$r12,0x4
900000000001d718:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
900000000001d71c:	001501a4 	move	$r4,$r13
900000000001d720:	570eebff 	bl	-61720(0xfff0ee8) # 900000000000e608 <wait_current_set>
                local_intr_restore(intr_flag);
900000000001d724:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000001d728:	00150184 	move	$r4,$r12
900000000001d72c:	57fe37ff 	bl	-460(0xffffe34) # 900000000001d560 <__intr_restore>
                schedule();
900000000001d730:	574bc3ff 	bl	-46144(0xfff4bc0) # 90000000000122f0 <schedule>

                local_intr_save(intr_flag);
900000000001d734:	57fdffff 	bl	-516(0xffffdfc) # 900000000001d530 <__intr_save>
900000000001d738:	0015008c 	move	$r12,$r4
900000000001d73c:	29bfa2cc 	st.w	$r12,$r22,-24(0xfe8)
                wait_current_del(wait_queue, wait);
900000000001d740:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
900000000001d744:	570cdbff 	bl	-62248(0xfff0cd8) # 900000000000e41c <wait_in_queue>
900000000001d748:	0015008c 	move	$r12,$r4
900000000001d74c:	40001d80 	beqz	$r12,28(0x1c) # 900000000001d768 <dev_stdin_read+0xec>
900000000001d750:	1c0000ec 	pcaddu12i	$r12,7(0x7)
900000000001d754:	02f6018c 	addi.d	$r12,$r12,-640(0xd80)
900000000001d758:	28c0018c 	ld.d	$r12,$r12,0
900000000001d75c:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
900000000001d760:	00150184 	move	$r4,$r12
900000000001d764:	570997ff 	bl	-63084(0xfff0994) # 900000000000e0f8 <wait_queue_del>
                if (wait->wakeup_flags == WT_KBD) {
900000000001d768:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001d76c:	2880218c 	ld.w	$r12,$r12,8(0x8)
900000000001d770:	0015018d 	move	$r13,$r12
900000000001d774:	1500000c 	lu12i.w	$r12,-524288(0x80000)
900000000001d778:	0380118c 	ori	$r12,$r12,0x4
900000000001d77c:	5c0041ac 	bne	$r13,$r12,64(0x40) # 900000000001d7bc <dev_stdin_read+0x140>
900000000001d780:	53ff2fff 	b	-212(0xfffff2c) # 900000000001d6ac <dev_stdin_read+0x30>
        for (; ret < len; ret ++, p_rpos ++) {
900000000001d784:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001d788:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000001d78c:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000001d790:	1c00414c 	pcaddu12i	$r12,522(0x20a)
900000000001d794:	02f6818c 	addi.d	$r12,$r12,-608(0xda0)
900000000001d798:	28c0018c 	ld.d	$r12,$r12,0
900000000001d79c:	02c0058d 	addi.d	$r13,$r12,1(0x1)
900000000001d7a0:	1c00414c 	pcaddu12i	$r12,522(0x20a)
900000000001d7a4:	02f6418c 	addi.d	$r12,$r12,-624(0xd90)
900000000001d7a8:	29c0018d 	st.d	$r13,$r12,0
900000000001d7ac:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001d7b0:	28fe82cd 	ld.d	$r13,$r22,-96(0xfa0)
900000000001d7b4:	6bfef58d 	bltu	$r12,$r13,-268(0x3fef4) # 900000000001d6a8 <dev_stdin_read+0x2c>
900000000001d7b8:	50000800 	b	8(0x8) # 900000000001d7c0 <dev_stdin_read+0x144>
                    goto try_again;
                }
                break;
900000000001d7bc:	03400000 	andi	$r0,$r0,0x0
            }
        }
    }
    local_intr_restore(intr_flag);
900000000001d7c0:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
900000000001d7c4:	00150184 	move	$r4,$r12
900000000001d7c8:	57fd9bff 	bl	-616(0xffffd98) # 900000000001d560 <__intr_restore>
    // kprintf("read a char\n");
    return ret;
900000000001d7cc:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
}
900000000001d7d0:	00150184 	move	$r4,$r12
900000000001d7d4:	28c16061 	ld.d	$r1,$r3,88(0x58)
900000000001d7d8:	28c14076 	ld.d	$r22,$r3,80(0x50)
900000000001d7dc:	02c18063 	addi.d	$r3,$r3,96(0x60)
900000000001d7e0:	4c000020 	jirl	$r0,$r1,0

900000000001d7e4 <stdin_open>:

static int
stdin_open(struct device *dev, uint32_t open_flags) {
900000000001d7e4:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000001d7e8:	29c06076 	st.d	$r22,$r3,24(0x18)
900000000001d7ec:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000001d7f0:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000001d7f4:	001500ac 	move	$r12,$r5
900000000001d7f8:	0040818c 	slli.w	$r12,$r12,0x0
900000000001d7fc:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
    if (open_flags != O_RDONLY) {
900000000001d800:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000001d804:	40000d80 	beqz	$r12,12(0xc) # 900000000001d810 <stdin_open+0x2c>
        return -E_INVAL;
900000000001d808:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
900000000001d80c:	50000800 	b	8(0x8) # 900000000001d814 <stdin_open+0x30>
    }
    return 0;
900000000001d810:	0015000c 	move	$r12,$r0
}
900000000001d814:	00150184 	move	$r4,$r12
900000000001d818:	28c06076 	ld.d	$r22,$r3,24(0x18)
900000000001d81c:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000001d820:	4c000020 	jirl	$r0,$r1,0

900000000001d824 <stdin_close>:

static int
stdin_close(struct device *dev) {
900000000001d824:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000001d828:	29c06076 	st.d	$r22,$r3,24(0x18)
900000000001d82c:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000001d830:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    return 0;
900000000001d834:	0015000c 	move	$r12,$r0
}
900000000001d838:	00150184 	move	$r4,$r12
900000000001d83c:	28c06076 	ld.d	$r22,$r3,24(0x18)
900000000001d840:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000001d844:	4c000020 	jirl	$r0,$r1,0

900000000001d848 <stdin_io>:

static int
stdin_io(struct device *dev, struct iobuf *iob, bool write) {
900000000001d848:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000001d84c:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000001d850:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000001d854:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000001d858:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000001d85c:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
900000000001d860:	001500cc 	move	$r12,$r6
900000000001d864:	0040818c 	slli.w	$r12,$r12,0x0
900000000001d868:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
    if (!write) {
900000000001d86c:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
900000000001d870:	44005180 	bnez	$r12,80(0x50) # 900000000001d8c0 <stdin_io+0x78>
        int ret;
        if ((ret = dev_stdin_read(iob->io_base, iob->io_resid)) > 0) {
900000000001d874:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001d878:	28c0018d 	ld.d	$r13,$r12,0
900000000001d87c:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001d880:	28c0618c 	ld.d	$r12,$r12,24(0x18)
900000000001d884:	00150185 	move	$r5,$r12
900000000001d888:	001501a4 	move	$r4,$r13
900000000001d88c:	57fdf3ff 	bl	-528(0xffffdf0) # 900000000001d67c <dev_stdin_read>
900000000001d890:	0015008c 	move	$r12,$r4
900000000001d894:	29bfb2cc 	st.w	$r12,$r22,-20(0xfec)
900000000001d898:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001d89c:	64001c0c 	bge	$r0,$r12,28(0x1c) # 900000000001d8b8 <stdin_io+0x70>
            iob->io_resid -= ret;
900000000001d8a0:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001d8a4:	28c0618d 	ld.d	$r13,$r12,24(0x18)
900000000001d8a8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001d8ac:	0011b1ad 	sub.d	$r13,$r13,$r12
900000000001d8b0:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001d8b4:	29c0618d 	st.d	$r13,$r12,24(0x18)
        }
        return ret;
900000000001d8b8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000001d8bc:	50000800 	b	8(0x8) # 900000000001d8c4 <stdin_io+0x7c>
    }
    return -E_INVAL;
900000000001d8c0:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
}
900000000001d8c4:	00150184 	move	$r4,$r12
900000000001d8c8:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000001d8cc:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000001d8d0:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000001d8d4:	4c000020 	jirl	$r0,$r1,0

900000000001d8d8 <stdin_ioctl>:

static int
stdin_ioctl(struct device *dev, int op, void *data) {
900000000001d8d8:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001d8dc:	29c0a076 	st.d	$r22,$r3,40(0x28)
900000000001d8e0:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000001d8e4:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000001d8e8:	001500ac 	move	$r12,$r5
900000000001d8ec:	29ff62c6 	st.d	$r6,$r22,-40(0xfd8)
900000000001d8f0:	0040818c 	slli.w	$r12,$r12,0x0
900000000001d8f4:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
    return -E_INVAL;
900000000001d8f8:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
}
900000000001d8fc:	00150184 	move	$r4,$r12
900000000001d900:	28c0a076 	ld.d	$r22,$r3,40(0x28)
900000000001d904:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001d908:	4c000020 	jirl	$r0,$r1,0

900000000001d90c <stdin_device_init>:

static void
stdin_device_init(struct device *dev) {
900000000001d90c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000001d910:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000001d914:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000001d918:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000001d91c:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    dev->d_blocks = 0;
900000000001d920:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001d924:	29c00180 	st.d	$r0,$r12,0
    dev->d_blocksize = 1;
900000000001d928:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001d92c:	0280040d 	addi.w	$r13,$r0,1(0x1)
900000000001d930:	29c0218d 	st.d	$r13,$r12,8(0x8)
    dev->d_open = stdin_open;
900000000001d934:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001d938:	1c00000d 	pcaddu12i	$r13,0
900000000001d93c:	02fab1ad 	addi.d	$r13,$r13,-340(0xeac)
900000000001d940:	29c0418d 	st.d	$r13,$r12,16(0x10)
    dev->d_close = stdin_close;
900000000001d944:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001d948:	1c00000d 	pcaddu12i	$r13,0
900000000001d94c:	02fb71ad 	addi.d	$r13,$r13,-292(0xedc)
900000000001d950:	29c0618d 	st.d	$r13,$r12,24(0x18)
    dev->d_io = stdin_io;
900000000001d954:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001d958:	1c00000d 	pcaddu12i	$r13,0
900000000001d95c:	02fbc1ad 	addi.d	$r13,$r13,-272(0xef0)
900000000001d960:	29c0818d 	st.d	$r13,$r12,32(0x20)
    dev->d_ioctl = stdin_ioctl;
900000000001d964:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001d968:	1c00000d 	pcaddu12i	$r13,0
900000000001d96c:	02fdc1ad 	addi.d	$r13,$r13,-144(0xf70)
900000000001d970:	29c0a18d 	st.d	$r13,$r12,40(0x28)

    p_rpos = 0;
900000000001d974:	1c00414c 	pcaddu12i	$r12,522(0x20a)
900000000001d978:	02eef18c 	addi.d	$r12,$r12,-1092(0xbbc)
900000000001d97c:	29c00180 	st.d	$r0,$r12,0
    p_wpos = 0;
900000000001d980:	1c00414c 	pcaddu12i	$r12,522(0x20a)
900000000001d984:	02eee18c 	addi.d	$r12,$r12,-1096(0xbb8)
900000000001d988:	29c00180 	st.d	$r0,$r12,0
    wait_queue_init(wait_queue);
900000000001d98c:	1c0000ec 	pcaddu12i	$r12,7(0x7)
900000000001d990:	02ed118c 	addi.d	$r12,$r12,-1212(0xb44)
900000000001d994:	28c0018c 	ld.d	$r12,$r12,0
900000000001d998:	00150184 	move	$r4,$r12
900000000001d99c:	570633ff 	bl	-63952(0xfff0630) # 900000000000dfcc <wait_queue_init>
}
900000000001d9a0:	03400000 	andi	$r0,$r0,0x0
900000000001d9a4:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000001d9a8:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000001d9ac:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000001d9b0:	4c000020 	jirl	$r0,$r1,0

900000000001d9b4 <dev_init_stdin>:

void
dev_init_stdin(void) {
900000000001d9b4:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001d9b8:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000001d9bc:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000001d9c0:	02c0c076 	addi.d	$r22,$r3,48(0x30)
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
900000000001d9c4:	57f3c7ff 	bl	-3132(0xffff3c4) # 900000000001cd88 <dev_create_inode>
900000000001d9c8:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000001d9cc:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001d9d0:	44001d80 	bnez	$r12,28(0x1c) # 900000000001d9ec <dev_init_stdin+0x38>
        panic("stdin: dev_create_node.\n");
900000000001d9d4:	1c0000c6 	pcaddu12i	$r6,6(0x6)
900000000001d9d8:	02fd90c6 	addi.d	$r6,$r6,-156(0xf64)
900000000001d9dc:	0281ec05 	addi.w	$r5,$r0,123(0x7b)
900000000001d9e0:	1c0000c4 	pcaddu12i	$r4,6(0x6)
900000000001d9e4:	02fde084 	addi.d	$r4,$r4,-136(0xf78)
900000000001d9e8:	56f29bff 	bl	-68968(0xffef298) # 900000000000cc80 <__panic>
    }
    stdin_device_init(vop_info(node, device));
900000000001d9ec:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001d9f0:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
900000000001d9f4:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001d9f8:	40001d80 	beqz	$r12,28(0x1c) # 900000000001da14 <dev_init_stdin+0x60>
900000000001d9fc:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001da00:	2881418c 	ld.w	$r12,$r12,80(0x50)
900000000001da04:	0015018d 	move	$r13,$r12
900000000001da08:	1400002c 	lu12i.w	$r12,1(0x1)
900000000001da0c:	0388d18c 	ori	$r12,$r12,0x234
900000000001da10:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000001da2c <dev_init_stdin+0x78>
900000000001da14:	1c0000c6 	pcaddu12i	$r6,6(0x6)
900000000001da18:	02fd90c6 	addi.d	$r6,$r6,-156(0xf64)
900000000001da1c:	0281f405 	addi.w	$r5,$r0,125(0x7d)
900000000001da20:	1c0000c4 	pcaddu12i	$r4,6(0x6)
900000000001da24:	02fce084 	addi.d	$r4,$r4,-200(0xf38)
900000000001da28:	56f25bff 	bl	-69032(0xffef258) # 900000000000cc80 <__panic>
900000000001da2c:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001da30:	00150184 	move	$r4,$r12
900000000001da34:	57fedbff 	bl	-296(0xffffed8) # 900000000001d90c <stdin_device_init>

    int ret;
    if ((ret = vfs_add_dev("stdin", node, 0)) != 0) {
900000000001da38:	00150006 	move	$r6,$r0
900000000001da3c:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
900000000001da40:	1c0000c4 	pcaddu12i	$r4,6(0x6)
900000000001da44:	02fe0084 	addi.d	$r4,$r4,-128(0xf80)
900000000001da48:	579097ff 	bl	-28524(0xfff9094) # 9000000000016adc <vfs_add_dev>
900000000001da4c:	0015008c 	move	$r12,$r4
900000000001da50:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
900000000001da54:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
900000000001da58:	40002580 	beqz	$r12,36(0x24) # 900000000001da7c <dev_init_stdin+0xc8>
        panic("stdin: vfs_add_dev: %e.\n", ret);
900000000001da5c:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
900000000001da60:	00150187 	move	$r7,$r12
900000000001da64:	1c0000c6 	pcaddu12i	$r6,6(0x6)
900000000001da68:	02fd90c6 	addi.d	$r6,$r6,-156(0xf64)
900000000001da6c:	02820405 	addi.w	$r5,$r0,129(0x81)
900000000001da70:	1c0000c4 	pcaddu12i	$r4,6(0x6)
900000000001da74:	02fba084 	addi.d	$r4,$r4,-280(0xee8)
900000000001da78:	56f20bff 	bl	-69112(0xffef208) # 900000000000cc80 <__panic>
    }
}
900000000001da7c:	03400000 	andi	$r0,$r0,0x0
900000000001da80:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000001da84:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000001da88:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001da8c:	4c000020 	jirl	$r0,$r1,0

900000000001da90 <fence_i>:
static void fence_i(void *va_start, int size) {
900000000001da90:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001da94:	29c0a076 	st.d	$r22,$r3,40(0x28)
900000000001da98:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000001da9c:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000001daa0:	001500ac 	move	$r12,$r5
900000000001daa4:	0040818c 	slli.w	$r12,$r12,0x0
900000000001daa8:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
900000000001daac:	38720000 	dbar	0x0
    void *va_end = va_start + size;
900000000001dab0:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
900000000001dab4:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000001dab8:	0010b1ac 	add.d	$r12,$r13,$r12
900000000001dabc:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
    while (va_start < va_end) {
900000000001dac0:	50002000 	b	32(0x20) # 900000000001dae0 <fence_i+0x50>
        asm volatile("cacop 9, %0 ,0": "=r"(va_start)); // code[2:0]=1->d-cache, code[4:3]=2->index invalidate and writeback
900000000001dac4:	06000189 	cacop	0x9,$r12,0
900000000001dac8:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        asm volatile("cacop 8, %0 ,0": "=r"(va_start)); // code[2:0]=0->i-cache, code[4:3]=2->index invalidate
900000000001dacc:	06000188 	cacop	0x8,$r12,0
900000000001dad0:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
        va_start += CACHELINE_SIZE;
900000000001dad4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000001dad8:	02c0418c 	addi.d	$r12,$r12,16(0x10)
900000000001dadc:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    while (va_start < va_end) {
900000000001dae0:	28ff62cd 	ld.d	$r13,$r22,-40(0xfd8)
900000000001dae4:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001dae8:	6bffddac 	bltu	$r13,$r12,-36(0x3ffdc) # 900000000001dac4 <fence_i+0x34>
900000000001daec:	38728000 	ibar	0x0
}
900000000001daf0:	03400000 	andi	$r0,$r0,0x0
900000000001daf4:	28c0a076 	ld.d	$r22,$r3,40(0x28)
900000000001daf8:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001dafc:	4c000020 	jirl	$r0,$r1,0

900000000001db00 <stdout_open>:
#include <unistd.h>
#include <error.h>
#include <assert.h>

static int
stdout_open(struct device *dev, uint32_t open_flags) {
900000000001db00:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000001db04:	29c06076 	st.d	$r22,$r3,24(0x18)
900000000001db08:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000001db0c:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000001db10:	001500ac 	move	$r12,$r5
900000000001db14:	0040818c 	slli.w	$r12,$r12,0x0
900000000001db18:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
    if (open_flags != O_WRONLY) {
900000000001db1c:	28bf92cc 	ld.w	$r12,$r22,-28(0xfe4)
900000000001db20:	0015018d 	move	$r13,$r12
900000000001db24:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000001db28:	58000dac 	beq	$r13,$r12,12(0xc) # 900000000001db34 <stdout_open+0x34>
        return -E_INVAL;
900000000001db2c:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
900000000001db30:	50000800 	b	8(0x8) # 900000000001db38 <stdout_open+0x38>
    }
    return 0;
900000000001db34:	0015000c 	move	$r12,$r0
}
900000000001db38:	00150184 	move	$r4,$r12
900000000001db3c:	28c06076 	ld.d	$r22,$r3,24(0x18)
900000000001db40:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000001db44:	4c000020 	jirl	$r0,$r1,0

900000000001db48 <stdout_close>:

static int
stdout_close(struct device *dev) {
900000000001db48:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000001db4c:	29c06076 	st.d	$r22,$r3,24(0x18)
900000000001db50:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000001db54:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    return 0;
900000000001db58:	0015000c 	move	$r12,$r0
}
900000000001db5c:	00150184 	move	$r4,$r12
900000000001db60:	28c06076 	ld.d	$r22,$r3,24(0x18)
900000000001db64:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000001db68:	4c000020 	jirl	$r0,$r1,0

900000000001db6c <stdout_io>:

static int
stdout_io(struct device *dev, struct iobuf *iob, bool write) {
900000000001db6c:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000001db70:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000001db74:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000001db78:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000001db7c:	29ff62c4 	st.d	$r4,$r22,-40(0xfd8)
900000000001db80:	29ff42c5 	st.d	$r5,$r22,-48(0xfd0)
900000000001db84:	001500cc 	move	$r12,$r6
900000000001db88:	0040818c 	slli.w	$r12,$r12,0x0
900000000001db8c:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
    if (write) {
900000000001db90:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
900000000001db94:	40005580 	beqz	$r12,84(0x54) # 900000000001dbe8 <stdout_io+0x7c>
        char *data = iob->io_base;
900000000001db98:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001db9c:	28c0018c 	ld.d	$r12,$r12,0
900000000001dba0:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)
        for (; iob->io_resid != 0; iob->io_resid --) {
900000000001dba4:	50003000 	b	48(0x30) # 900000000001dbd4 <stdout_io+0x68>
            kputchar(*data ++);
900000000001dba8:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001dbac:	02c0058d 	addi.d	$r13,$r12,1(0x1)
900000000001dbb0:	29ffa2cd 	st.d	$r13,$r22,-24(0xfe8)
900000000001dbb4:	2800018c 	ld.b	$r12,$r12,0
900000000001dbb8:	00150184 	move	$r4,$r12
900000000001dbbc:	566493ff 	bl	-105328(0xffe6490) # 900000000000404c <kputchar>
        for (; iob->io_resid != 0; iob->io_resid --) {
900000000001dbc0:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001dbc4:	28c0618c 	ld.d	$r12,$r12,24(0x18)
900000000001dbc8:	02fffd8d 	addi.d	$r13,$r12,-1(0xfff)
900000000001dbcc:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001dbd0:	29c0618d 	st.d	$r13,$r12,24(0x18)
900000000001dbd4:	28ff42cc 	ld.d	$r12,$r22,-48(0xfd0)
900000000001dbd8:	28c0618c 	ld.d	$r12,$r12,24(0x18)
900000000001dbdc:	47ffcd9f 	bnez	$r12,-52(0x7fffcc) # 900000000001dba8 <stdout_io+0x3c>
        }
        return 0;
900000000001dbe0:	0015000c 	move	$r12,$r0
900000000001dbe4:	50000800 	b	8(0x8) # 900000000001dbec <stdout_io+0x80>
    }
    return -E_INVAL;
900000000001dbe8:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
}
900000000001dbec:	00150184 	move	$r4,$r12
900000000001dbf0:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000001dbf4:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000001dbf8:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000001dbfc:	4c000020 	jirl	$r0,$r1,0

900000000001dc00 <stdout_ioctl>:

static int
stdout_ioctl(struct device *dev, int op, void *data) {
900000000001dc00:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001dc04:	29c0a076 	st.d	$r22,$r3,40(0x28)
900000000001dc08:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000001dc0c:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000001dc10:	001500ac 	move	$r12,$r5
900000000001dc14:	29ff62c6 	st.d	$r6,$r22,-40(0xfd8)
900000000001dc18:	0040818c 	slli.w	$r12,$r12,0x0
900000000001dc1c:	29bf92cc 	st.w	$r12,$r22,-28(0xfe4)
    return -E_INVAL;
900000000001dc20:	02bff40c 	addi.w	$r12,$r0,-3(0xffd)
}
900000000001dc24:	00150184 	move	$r4,$r12
900000000001dc28:	28c0a076 	ld.d	$r22,$r3,40(0x28)
900000000001dc2c:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001dc30:	4c000020 	jirl	$r0,$r1,0

900000000001dc34 <stdout_device_init>:

static void
stdout_device_init(struct device *dev) {
900000000001dc34:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000001dc38:	29c06076 	st.d	$r22,$r3,24(0x18)
900000000001dc3c:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000001dc40:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
    dev->d_blocks = 0;
900000000001dc44:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001dc48:	29c00180 	st.d	$r0,$r12,0
    dev->d_blocksize = 1;
900000000001dc4c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001dc50:	0280040d 	addi.w	$r13,$r0,1(0x1)
900000000001dc54:	29c0218d 	st.d	$r13,$r12,8(0x8)
    dev->d_open = stdout_open;
900000000001dc58:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001dc5c:	1c00000d 	pcaddu12i	$r13,0
900000000001dc60:	02fa91ad 	addi.d	$r13,$r13,-348(0xea4)
900000000001dc64:	29c0418d 	st.d	$r13,$r12,16(0x10)
    dev->d_close = stdout_close;
900000000001dc68:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001dc6c:	1c00000d 	pcaddu12i	$r13,0
900000000001dc70:	02fb71ad 	addi.d	$r13,$r13,-292(0xedc)
900000000001dc74:	29c0618d 	st.d	$r13,$r12,24(0x18)
    dev->d_io = stdout_io;
900000000001dc78:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001dc7c:	1c00000d 	pcaddu12i	$r13,0
900000000001dc80:	02fbc1ad 	addi.d	$r13,$r13,-272(0xef0)
900000000001dc84:	29c0818d 	st.d	$r13,$r12,32(0x20)
    dev->d_ioctl = stdout_ioctl;
900000000001dc88:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001dc8c:	1c00000d 	pcaddu12i	$r13,0
900000000001dc90:	02fdd1ad 	addi.d	$r13,$r13,-140(0xf74)
900000000001dc94:	29c0a18d 	st.d	$r13,$r12,40(0x28)
}
900000000001dc98:	03400000 	andi	$r0,$r0,0x0
900000000001dc9c:	28c06076 	ld.d	$r22,$r3,24(0x18)
900000000001dca0:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000001dca4:	4c000020 	jirl	$r0,$r1,0

900000000001dca8 <dev_init_stdout>:

void
dev_init_stdout(void) {
900000000001dca8:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000001dcac:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000001dcb0:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000001dcb4:	02c0c076 	addi.d	$r22,$r3,48(0x30)
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
900000000001dcb8:	57f0d3ff 	bl	-3888(0xffff0d0) # 900000000001cd88 <dev_create_inode>
900000000001dcbc:	29ffa2c4 	st.d	$r4,$r22,-24(0xfe8)
900000000001dcc0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001dcc4:	44001d80 	bnez	$r12,28(0x1c) # 900000000001dce0 <dev_init_stdout+0x38>
        panic("stdout: dev_create_node.\n");
900000000001dcc8:	1c0000c6 	pcaddu12i	$r6,6(0x6)
900000000001dccc:	02f480c6 	addi.d	$r6,$r6,-736(0xd20)
900000000001dcd0:	0280dc05 	addi.w	$r5,$r0,55(0x37)
900000000001dcd4:	1c0000c4 	pcaddu12i	$r4,6(0x6)
900000000001dcd8:	02f4d084 	addi.d	$r4,$r4,-716(0xd34)
900000000001dcdc:	56efa7ff 	bl	-69724(0xffeefa4) # 900000000000cc80 <__panic>
    }
    stdout_device_init(vop_info(node, device));
900000000001dce0:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000001dce4:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
900000000001dce8:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001dcec:	40001d80 	beqz	$r12,28(0x1c) # 900000000001dd08 <dev_init_stdout+0x60>
900000000001dcf0:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001dcf4:	2881418c 	ld.w	$r12,$r12,80(0x50)
900000000001dcf8:	0015018d 	move	$r13,$r12
900000000001dcfc:	1400002c 	lu12i.w	$r12,1(0x1)
900000000001dd00:	0388d18c 	ori	$r12,$r12,0x234
900000000001dd04:	58001dac 	beq	$r13,$r12,28(0x1c) # 900000000001dd20 <dev_init_stdout+0x78>
900000000001dd08:	1c0000c6 	pcaddu12i	$r6,6(0x6)
900000000001dd0c:	02f480c6 	addi.d	$r6,$r6,-736(0xd20)
900000000001dd10:	0280e405 	addi.w	$r5,$r0,57(0x39)
900000000001dd14:	1c0000c4 	pcaddu12i	$r4,6(0x6)
900000000001dd18:	02f3d084 	addi.d	$r4,$r4,-780(0xcf4)
900000000001dd1c:	56ef67ff 	bl	-69788(0xffeef64) # 900000000000cc80 <__panic>
900000000001dd20:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000001dd24:	00150184 	move	$r4,$r12
900000000001dd28:	57ff0fff 	bl	-244(0xfffff0c) # 900000000001dc34 <stdout_device_init>

    int ret;
    if ((ret = vfs_add_dev("stdout", node, 0)) != 0) {
900000000001dd2c:	00150006 	move	$r6,$r0
900000000001dd30:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
900000000001dd34:	1c0000c4 	pcaddu12i	$r4,6(0x6)
900000000001dd38:	02f4f084 	addi.d	$r4,$r4,-708(0xd3c)
900000000001dd3c:	578da3ff 	bl	-29280(0xfff8da0) # 9000000000016adc <vfs_add_dev>
900000000001dd40:	0015008c 	move	$r12,$r4
900000000001dd44:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
900000000001dd48:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
900000000001dd4c:	40002580 	beqz	$r12,36(0x24) # 900000000001dd70 <dev_init_stdout+0xc8>
        panic("stdout: vfs_add_dev: %e.\n", ret);
900000000001dd50:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
900000000001dd54:	00150187 	move	$r7,$r12
900000000001dd58:	1c0000c6 	pcaddu12i	$r6,6(0x6)
900000000001dd5c:	02f480c6 	addi.d	$r6,$r6,-736(0xd20)
900000000001dd60:	0280f405 	addi.w	$r5,$r0,61(0x3d)
900000000001dd64:	1c0000c4 	pcaddu12i	$r4,6(0x6)
900000000001dd68:	02f29084 	addi.d	$r4,$r4,-860(0xca4)
900000000001dd6c:	56ef17ff 	bl	-69868(0xffeef14) # 900000000000cc80 <__panic>
    }
}
900000000001dd70:	03400000 	andi	$r0,$r0,0x0
900000000001dd74:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000001dd78:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000001dd7c:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000001dd80:	4c000020 	jirl	$r0,$r1,0
	...

900000000001ddc0 <tlbrefill_handler>:

.align 6
.type tlbrefill_handler, @function
tlbrefill_handler:
    // Save t0 to KS0
    csrwr   t0, LISA_CSR_KS0
900000000001ddc0:	0400c02c 	csrwr	$r12,0x30
    // Save RFPRMD to KS1 and clear RFPRMD
    li.d    t0, 0
900000000001ddc4:	0015000c 	move	$r12,$r0
    csrwr   t0, LISA_CSR_RFPRMD
900000000001ddc8:	04023c2c 	csrwr	$r12,0x8f
    csrwr   t0, LISA_CSR_KS1        //KS1 saved RFPRMD
900000000001ddcc:	0400c42c 	csrwr	$r12,0x31
    // Save BADV to KS4
    csrrd   t0, LISA_CSR_RFBADV
900000000001ddd0:	0402240c 	csrrd	$r12,0x89
    csrwr   t0, LISA_CSR_KS4
900000000001ddd4:	0400d02c 	csrwr	$r12,0x34
    // get tlbrefill_redirector pointer from KS3 as we already set it in kern/init/init.c
    csrrd   t0, LISA_CSR_KS3
900000000001ddd8:	0400cc0c 	csrrd	$r12,0x33
    csrwr   t0, LISA_CSR_RFEPC
900000000001dddc:	0402282c 	csrwr	$r12,0x8a
    // Save RFEPC(ERA) to KS2
    addi.d  t0, t0, -1      //istlbr==0
900000000001dde0:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
    csrwr   t0, LISA_CSR_KS2
900000000001dde4:	0400c82c 	csrwr	$r12,0x32
    ertn
900000000001dde8:	06483800 	ertn

900000000001ddec <tlbrefill_redirector>:

.type tlbrefill_redirector, @function
tlbrefill_redirector:

    // return PRMD from KS1(RFPRMD)
    csrrd   t0, LISA_CSR_KS1
900000000001ddec:	0400c40c 	csrrd	$r12,0x31
    csrwr   t0, LISA_CSR_PRMD
900000000001ddf0:	0400042c 	csrwr	$r12,0x1
    // return EPC(ERA) from KS2
    csrrd   t0, LISA_CSR_KS2
900000000001ddf4:	0400c80c 	csrrd	$r12,0x32
    csrwr   t0, LISA_CSR_EPC
900000000001ddf8:	0400182c 	csrwr	$r12,0x6
    //set ESTAT = tlbrefill exception(ecode=0x3f)(la64)
    li.d    t0, 0x3f0000    
900000000001ddfc:	14007e0c 	lu12i.w	$r12,1008(0x3f0)
    csrwr   t0, LISA_CSR_KS5
900000000001de00:	0400d42c 	csrwr	$r12,0x35
    // return t0 from ks0
    csrrd   t0, LISA_CSR_KS0
900000000001de04:	0400c00c 	csrrd	$r12,0x30
    
    b tlbexception_handler
900000000001de08:	50000800 	b	8(0x8) # 900000000001de10 <tlbexception_handler>
900000000001de0c:	03400000 	andi	$r0,$r0,0x0

900000000001de10 <tlbexception_handler>:

.align 4
.type tlbexception_handler, @function
tlbexception_handler:
    // Save t0 and t1
    csrwr   t0, LISA_CSR_KS0
900000000001de10:	0400c02c 	csrwr	$r12,0x30
    csrwr   t1, LISA_CSR_KS1
900000000001de14:	0400c42d 	csrwr	$r13,0x31
    // Save previous stack pointer in t1
    move    t1, sp
900000000001de18:	0015006d 	move	$r13,$r3
    csrwr   t1, LISA_CSR_KS2
900000000001de1c:	0400c82d 	csrwr	$r13,0x32
        not only just write rd to csr register,
        so you may see the rd changed.
        It's documented in the manual from loongarch.
    */
    // check if user mode
    csrrd   t0, LISA_CSR_PRMD  
900000000001de20:	0400040c 	csrrd	$r12,0x1
    andi    t0, t0, 3
900000000001de24:	03400d8c 	andi	$r12,$r12,0x3
    beq     t0, zero, 1f
900000000001de28:	58002580 	beq	$r12,$r0,36(0x24) # 900000000001de4c <tlbexception_handler+0x3c>

    
    /* Coming from user mode - load kernel stack into sp */
    la      t0, current // current pointer
900000000001de2c:	1c00408c 	pcaddu12i	$r12,516(0x204)
900000000001de30:	28e5518c 	ld.d	$r12,$r12,-1708(0x954)
    ld.d    t0, t0, 0 // proc struct
900000000001de34:	28c0018c 	ld.d	$r12,$r12,0
    ld.d    t0, t0, 0x10 // kstack pointer
900000000001de38:	28c0418c 	ld.d	$r12,$r12,16(0x10)
    addi.d  t1, zero, 1
900000000001de3c:	02c0040d 	addi.d	$r13,$r0,1(0x1)
    slli.d  t1, t1, 13 // KSTACKSIZE=8192=pow(2,13)
900000000001de40:	004135ad 	slli.d	$r13,$r13,0xd
    add.d   sp, t0, t1
900000000001de44:	0010b583 	add.d	$r3,$r12,$r13
    csrrd   t1, LISA_CSR_KS2
900000000001de48:	0400c80d 	csrrd	$r13,0x32
  
1:
    //saved EXST to t0 for save EXST to sp later
    csrrd   t0, LISA_CSR_KS5        //KS5 saved ESTAT
900000000001de4c:	0400d40c 	csrrd	$r12,0x35
    //return KS2
    csrrd   t1, LISA_CSR_KS2
900000000001de50:	0400c80d 	csrrd	$r13,0x32
    b common_exception
900000000001de54:	50005c00 	b	92(0x5c) # 900000000001deb0 <common_exception>
900000000001de58:	03400000 	andi	$r0,$r0,0x0
900000000001de5c:	03400000 	andi	$r0,$r0,0x0

900000000001de60 <exception_handler>:

.align 4
.type exception_handler, @function
exception_handler:
    // Save t0 and t1
    csrwr   t0, LISA_CSR_KS0
900000000001de60:	0400c02c 	csrwr	$r12,0x30
    csrwr   t1, LISA_CSR_KS1
900000000001de64:	0400c42d 	csrwr	$r13,0x31
    // Save previous stack pointer in t1
    move    t1, sp
900000000001de68:	0015006d 	move	$r13,$r3
    csrwr   t1, LISA_CSR_KS2
900000000001de6c:	0400c82d 	csrwr	$r13,0x32
    //t1 saved the vaual of KS2,KS2 saved sp
    // Save BADV to KS4
    csrrd   t0, LISA_CSR_BADV
900000000001de70:	04001c0c 	csrrd	$r12,0x7
    csrwr   t0, LISA_CSR_KS4
900000000001de74:	0400d02c 	csrwr	$r12,0x34
        not only just write rd to csr register,
        so you may see the rd changed.
        It's documented in the manual from loongarch.
    */
    // check if user mode
    csrrd   t0, LISA_CSR_PRMD  
900000000001de78:	0400040c 	csrrd	$r12,0x1
    andi    t0, t0, 3
900000000001de7c:	03400d8c 	andi	$r12,$r12,0x3
    beq     t0, zero, 1f
900000000001de80:	58002580 	beq	$r12,$r0,36(0x24) # 900000000001dea4 <exception_handler+0x44>

    
    /* Coming from user mode - load kernel stack into sp */
    la      t0, current // current pointer
900000000001de84:	1c00408c 	pcaddu12i	$r12,516(0x204)
900000000001de88:	28e3f18c 	ld.d	$r12,$r12,-1796(0x8fc)
    ld.d    t0, t0, 0 // proc struct
900000000001de8c:	28c0018c 	ld.d	$r12,$r12,0
    ld.d    t0, t0, 0x10 // kstack pointer
900000000001de90:	28c0418c 	ld.d	$r12,$r12,16(0x10)
    addi.d  t1, zero, 1
900000000001de94:	02c0040d 	addi.d	$r13,$r0,1(0x1)
    slli.d  t1, t1, 13 // KSTACKSIZE=8192=pow(2,13)
900000000001de98:	004135ad 	slli.d	$r13,$r13,0xd
    add.d   sp, t0, t1
900000000001de9c:	0010b583 	add.d	$r3,$r12,$r13
    csrrd   t1, LISA_CSR_KS2
900000000001dea0:	0400c80d 	csrrd	$r13,0x32
  
1:
    //saved EXST to t0 for save EXST to sp later
    csrrd   t0, LISA_CSR_EXST
900000000001dea4:	0400140c 	csrrd	$r12,0x5
    //return KS2
    csrrd   t1, LISA_CSR_KS2
900000000001dea8:	0400c80d 	csrrd	$r13,0x32
    
    b common_exception
900000000001deac:	50000400 	b	4(0x4) # 900000000001deb0 <common_exception>

900000000001deb0 <common_exception>:
   
   /*
    * Allocate stack space for 35 words to hold the trap frame,
    * plus four more words for a minimal argument block.
    */
    addi.d  sp, sp, -304
900000000001deb0:	02fb4063 	addi.d	$r3,$r3,-304(0xed0)
    st.d    s8, sp, 288
900000000001deb4:	29c4807f 	st.d	$r31,$r3,288(0x120)
    st.d    s7, sp, 280
900000000001deb8:	29c4607e 	st.d	$r30,$r3,280(0x118)
    st.d    s6, sp, 272
900000000001debc:	29c4407d 	st.d	$r29,$r3,272(0x110)
    st.d    s5, sp, 264
900000000001dec0:	29c4207c 	st.d	$r28,$r3,264(0x108)
    st.d    s4, sp, 256
900000000001dec4:	29c4007b 	st.d	$r27,$r3,256(0x100)
    st.d    s3, sp, 248
900000000001dec8:	29c3e07a 	st.d	$r26,$r3,248(0xf8)
    st.d    s2, sp, 240
900000000001decc:	29c3c079 	st.d	$r25,$r3,240(0xf0)
    st.d    s1, sp, 232
900000000001ded0:	29c3a078 	st.d	$r24,$r3,232(0xe8)
    st.d    s0, sp, 224
900000000001ded4:	29c38077 	st.d	$r23,$r3,224(0xe0)
    st.d    fp, sp, 216
900000000001ded8:	29c36076 	st.d	$r22,$r3,216(0xd8)
    st.d    reserved_reg, sp, 208
900000000001dedc:	29c34075 	st.d	$r21,$r3,208(0xd0)
    st.d    t8, sp, 200
900000000001dee0:	29c32074 	st.d	$r20,$r3,200(0xc8)
    st.d    t7, sp, 192
900000000001dee4:	29c30073 	st.d	$r19,$r3,192(0xc0)
    st.d    t6, sp, 184
900000000001dee8:	29c2e072 	st.d	$r18,$r3,184(0xb8)
    st.d    t5, sp, 176
900000000001deec:	29c2c071 	st.d	$r17,$r3,176(0xb0)
    st.d    t4, sp, 168
900000000001def0:	29c2a070 	st.d	$r16,$r3,168(0xa8)
    st.d    t3, sp, 160
900000000001def4:	29c2806f 	st.d	$r15,$r3,160(0xa0)
    st.d    t2, sp, 152
900000000001def8:	29c2606e 	st.d	$r14,$r3,152(0x98)
    //st.w    t1, sp, 144
    //st.w    t0, sp, 136
    st.d    a7, sp, 128
900000000001defc:	29c2006b 	st.d	$r11,$r3,128(0x80)
    st.d    a6, sp, 120
900000000001df00:	29c1e06a 	st.d	$r10,$r3,120(0x78)
    st.d    a5, sp, 112
900000000001df04:	29c1c069 	st.d	$r9,$r3,112(0x70)
    st.d    a4, sp, 104
900000000001df08:	29c1a068 	st.d	$r8,$r3,104(0x68)
    st.d    a3, sp, 96
900000000001df0c:	29c18067 	st.d	$r7,$r3,96(0x60)
    st.d    a2, sp, 88
900000000001df10:	29c16066 	st.d	$r6,$r3,88(0x58)
    st.d    a1, sp, 80
900000000001df14:	29c14065 	st.d	$r5,$r3,80(0x50)
    st.d    a0, sp, 72
900000000001df18:	29c12064 	st.d	$r4,$r3,72(0x48)
    st.d    t1, sp, 64  // replace sp with real sp, now use t1 for free
900000000001df1c:	29c1006d 	st.d	$r13,$r3,64(0x40)
    st.d    tp, sp, 56
900000000001df20:	29c0e062 	st.d	$r2,$r3,56(0x38)
    // save real t0 and t1 after real sp (stored in t1 previously) stored
    csrrd   t1, LISA_CSR_KS1
900000000001df24:	0400c40d 	csrrd	$r13,0x31
    st.d    t1, sp, 144
900000000001df28:	29c2406d 	st.d	$r13,$r3,144(0x90)
    csrrd   t1, LISA_CSR_KS0
900000000001df2c:	0400c00d 	csrrd	$r13,0x30
    st.d    t1, sp, 136
900000000001df30:	29c2206d 	st.d	$r13,$r3,136(0x88)
    
    // replace with real value
    // save tf_era after t0 and t1 saved
    csrrd   t1, LISA_CSR_EPC
900000000001df34:	0400180d 	csrrd	$r13,0x6
    st.d    t1, sp, 296
900000000001df38:	29c4a06d 	st.d	$r13,$r3,296(0x128)
   /*
    * Save remaining exception context information.
    */

    // save ra (note: not in pushregs, it's tf_ra)
    st.d    ra, sp, 48
900000000001df3c:	29c0c061 	st.d	$r1,$r3,48(0x30)
    // save prmd
    csrrd   t1, LISA_CSR_PRMD
900000000001df40:	0400040d 	csrrd	$r13,0x1
    st.w    t1, sp, 44
900000000001df44:	2980b06d 	st.w	$r13,$r3,44(0x2c)
    // save estat
    st.w    t0, sp, 40
900000000001df48:	2980a06c 	st.w	$r12,$r3,40(0x28)
    // now use t0 for free
    // store badv
    csrrd   t0, LISA_CSR_KS4
900000000001df4c:	0400d00c 	csrrd	$r12,0x34
    st.d    t0, sp, 32
900000000001df50:	29c0806c 	st.d	$r12,$r3,32(0x20)
    st.d    zero, sp, 24
900000000001df54:	29c06060 	st.d	$r0,$r3,24(0x18)
    // support nested interrupt

    // IE and PLV will automatically set to 0 when trap occur

    // set trapframe as function argument
    addi.d  a0, sp, 32
900000000001df58:	02c08064 	addi.d	$r4,$r3,32(0x20)
    li.w    t0, 0xb0    # PLV=0, IE=0, PG=1
900000000001df5c:	0382c00c 	ori	$r12,$r0,0xb0
    csrwr   t0, LISA_CSR_CRMD
900000000001df60:	0400002c 	csrwr	$r12,0x0
    la.abs  t0, loongarch_trap
900000000001df64:	140000ac 	lu12i.w	$r12,5(0x5)
900000000001df68:	038d618c 	ori	$r12,$r12,0x358
900000000001df6c:	1600000c 	lu32i.d	$r12,0
900000000001df70:	0324018c 	lu52i.d	$r12,$r12,-1792(0x900)
    jirl    ra, t0, 0
900000000001df74:	4c000181 	jirl	$r1,$r12,0

900000000001df78 <exception_return>:



exception_return:
    // restore prmd
    ld.d    t0, sp, 44
900000000001df78:	28c0b06c 	ld.d	$r12,$r3,44(0x2c)
    li.d    t1, 7
900000000001df7c:	03801c0d 	ori	$r13,$r0,0x7
    csrxchg t0, t1, LISA_CSR_PRMD
900000000001df80:	040005ac 	csrxchg	$r12,$r13,0x1
    csrrd   t0, LISA_CSR_PRMD
900000000001df84:	0400040c 	csrrd	$r12,0x1
    // restore era no k0 and k1 for la64, so must do first
    ld.d    t0, sp, 296
900000000001df88:	28c4a06c 	ld.d	$r12,$r3,296(0x128)
    csrwr   t0, LISA_CSR_EPC
900000000001df8c:	0400182c 	csrwr	$r12,0x6
    // restore general registers
    ld.d    ra, sp, 48
900000000001df90:	28c0c061 	ld.d	$r1,$r3,48(0x30)
    ld.d    tp, sp, 56
900000000001df94:	28c0e062 	ld.d	$r2,$r3,56(0x38)
    //ld.d    sp, sp, 64 (do it finally)
    ld.d    a0, sp, 72
900000000001df98:	28c12064 	ld.d	$r4,$r3,72(0x48)
    ld.d    a1, sp, 80
900000000001df9c:	28c14065 	ld.d	$r5,$r3,80(0x50)
    ld.d    a2, sp, 88
900000000001dfa0:	28c16066 	ld.d	$r6,$r3,88(0x58)
    ld.d    a3, sp, 96
900000000001dfa4:	28c18067 	ld.d	$r7,$r3,96(0x60)
    ld.d    a4, sp, 104
900000000001dfa8:	28c1a068 	ld.d	$r8,$r3,104(0x68)
    ld.d    a5, sp, 112
900000000001dfac:	28c1c069 	ld.d	$r9,$r3,112(0x70)
    ld.d    a6, sp, 120
900000000001dfb0:	28c1e06a 	ld.d	$r10,$r3,120(0x78)
    ld.d    a7, sp, 128
900000000001dfb4:	28c2006b 	ld.d	$r11,$r3,128(0x80)
    ld.d    t0, sp, 136
900000000001dfb8:	28c2206c 	ld.d	$r12,$r3,136(0x88)
    ld.d    t1, sp, 144
900000000001dfbc:	28c2406d 	ld.d	$r13,$r3,144(0x90)
    ld.d    t2, sp, 152
900000000001dfc0:	28c2606e 	ld.d	$r14,$r3,152(0x98)
    ld.d    t3, sp, 160
900000000001dfc4:	28c2806f 	ld.d	$r15,$r3,160(0xa0)
    ld.d    t4, sp, 168
900000000001dfc8:	28c2a070 	ld.d	$r16,$r3,168(0xa8)
    ld.d    t5, sp, 176
900000000001dfcc:	28c2c071 	ld.d	$r17,$r3,176(0xb0)
    ld.d    t6, sp, 184
900000000001dfd0:	28c2e072 	ld.d	$r18,$r3,184(0xb8)
    ld.d    t7, sp, 192
900000000001dfd4:	28c30073 	ld.d	$r19,$r3,192(0xc0)
    ld.d    t8, sp, 200
900000000001dfd8:	28c32074 	ld.d	$r20,$r3,200(0xc8)
    ld.d    reserved_reg, sp, 208
900000000001dfdc:	28c34075 	ld.d	$r21,$r3,208(0xd0)
    ld.d    fp, sp, 216
900000000001dfe0:	28c36076 	ld.d	$r22,$r3,216(0xd8)
    ld.d    s0, sp, 224
900000000001dfe4:	28c38077 	ld.d	$r23,$r3,224(0xe0)
    ld.d    s1, sp, 232
900000000001dfe8:	28c3a078 	ld.d	$r24,$r3,232(0xe8)
    ld.d    s2, sp, 240
900000000001dfec:	28c3c079 	ld.d	$r25,$r3,240(0xf0)
    ld.d    s3, sp, 248
900000000001dff0:	28c3e07a 	ld.d	$r26,$r3,248(0xf8)
    ld.d    s4, sp, 256
900000000001dff4:	28c4007b 	ld.d	$r27,$r3,256(0x100)
    ld.d    s5, sp, 264
900000000001dff8:	28c4207c 	ld.d	$r28,$r3,264(0x108)
    ld.d    s6, sp, 272
900000000001dffc:	28c4407d 	ld.d	$r29,$r3,272(0x110)
    ld.d    s7, sp, 280
900000000001e000:	28c4607e 	ld.d	$r30,$r3,280(0x118)
    ld.d    s8, sp, 288
900000000001e004:	28c4807f 	ld.d	$r31,$r3,288(0x120)
    // rstore sp
    ld.d    sp, sp, 64
900000000001e008:	28c10063 	ld.d	$r3,$r3,64(0x40)
    ertn
900000000001e00c:	06483800 	ertn
900000000001e010:	03400000 	andi	$r0,$r0,0x0
900000000001e014:	03400000 	andi	$r0,$r0,0x0
900000000001e018:	03400000 	andi	$r0,$r0,0x0
900000000001e01c:	03400000 	andi	$r0,$r0,0x0
900000000001e020:	03400000 	andi	$r0,$r0,0x0
900000000001e024:	03400000 	andi	$r0,$r0,0x0
900000000001e028:	03400000 	andi	$r0,$r0,0x0
900000000001e02c:	03400000 	andi	$r0,$r0,0x0
900000000001e030:	03400000 	andi	$r0,$r0,0x0
900000000001e034:	03400000 	andi	$r0,$r0,0x0
900000000001e038:	03400000 	andi	$r0,$r0,0x0
900000000001e03c:	03400000 	andi	$r0,$r0,0x0

900000000001e040 <kernel_thread_entry>:

/* $a0 = arg, $a1 = func
 * see proc.c:kernel_thread
*/
kernel_thread_entry:
    addi.d  sp, sp,  -32
900000000001e040:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
    //goto kernel_thread
    jirl    ra, a1, 0
900000000001e044:	4c0000a1 	jirl	$r1,$r5,0
   // bl a1
    move    a0, v0
900000000001e048:	00150084 	move	$r4,$r4
    //goto do_exit():see proc.c
    la.abs  t0, do_exit 
900000000001e04c:	140001ec 	lu12i.w	$r12,15(0xf)
900000000001e050:	03b6618c 	ori	$r12,$r12,0xd98
900000000001e054:	1600000c 	lu32i.d	$r12,0
900000000001e058:	0324018c 	lu52i.d	$r12,$r12,-1792(0x900)
    jirl    ra, t0, 0
900000000001e05c:	4c000181 	jirl	$r1,$r12,0

900000000001e060 <forkrets>:
.section .text 

.global forkrets
.type forkrets, @function
forkrets:
  addi.d sp, a0, -32
900000000001e060:	02ff8083 	addi.d	$r3,$r4,-32(0xfe0)
  b exception_return
900000000001e064:	53ff17ff 	b	-236(0xfffff14) # 900000000001df78 <exception_return>

900000000001e068 <switch_to>:

.text
.globl switch_to
switch_to:
//save the registers
    st.d    sp, a0, 96
900000000001e068:	29c18083 	st.d	$r3,$r4,96(0x60)
    st.d    fp, a0, 88
900000000001e06c:	29c16096 	st.d	$r22,$r4,88(0x58)
    st.d    ra, a0, 80
900000000001e070:	29c14081 	st.d	$r1,$r4,80(0x50)
    st.d    tp, a0, 72
900000000001e074:	29c12082 	st.d	$r2,$r4,72(0x48)
    st.d	s8, a0, 64
900000000001e078:	29c1009f 	st.d	$r31,$r4,64(0x40)
    st.d	s7, a0, 56
900000000001e07c:	29c0e09e 	st.d	$r30,$r4,56(0x38)
    st.d	s6, a0, 48
900000000001e080:	29c0c09d 	st.d	$r29,$r4,48(0x30)
    st.d	s5, a0, 40
900000000001e084:	29c0a09c 	st.d	$r28,$r4,40(0x28)
    st.d	s4, a0, 32
900000000001e088:	29c0809b 	st.d	$r27,$r4,32(0x20)
    st.d	s3, a0, 24
900000000001e08c:	29c0609a 	st.d	$r26,$r4,24(0x18)
    st.d	s2, a0, 16
900000000001e090:	29c04099 	st.d	$r25,$r4,16(0x10)
    st.d	s1, a0, 8
900000000001e094:	29c02098 	st.d	$r24,$r4,8(0x8)
    st.d	s0, a0, 0
900000000001e098:	29c00097 	st.d	$r23,$r4,0

    //la.abs  t0, print_context
    //jirl    ra, t0, 0
    //use as nop
    dbar    0
900000000001e09c:	38720000 	dbar	0x0

//restore the registers frome another struct context
    ld.d    s0, a1, 0
900000000001e0a0:	28c000b7 	ld.d	$r23,$r5,0
    ld.d    s1, a1, 8
900000000001e0a4:	28c020b8 	ld.d	$r24,$r5,8(0x8)
    ld.d    s2, a1, 16
900000000001e0a8:	28c040b9 	ld.d	$r25,$r5,16(0x10)
    ld.d    s3, a1, 24
900000000001e0ac:	28c060ba 	ld.d	$r26,$r5,24(0x18)
    ld.d    s4, a1, 32
900000000001e0b0:	28c080bb 	ld.d	$r27,$r5,32(0x20)
    ld.d    s5, a1, 40
900000000001e0b4:	28c0a0bc 	ld.d	$r28,$r5,40(0x28)
    ld.d    s6, a1, 48
900000000001e0b8:	28c0c0bd 	ld.d	$r29,$r5,48(0x30)
    ld.d    s7, a1, 56
900000000001e0bc:	28c0e0be 	ld.d	$r30,$r5,56(0x38)
    ld.d    s8, a1, 64
900000000001e0c0:	28c100bf 	ld.d	$r31,$r5,64(0x40)
    ld.d    tp, a1, 72
900000000001e0c4:	28c120a2 	ld.d	$r2,$r5,72(0x48)
    ld.d    ra, a1, 80
900000000001e0c8:	28c140a1 	ld.d	$r1,$r5,80(0x50)
    ld.d    fp, a1, 88
900000000001e0cc:	28c160b6 	ld.d	$r22,$r5,88(0x58)
    ld.d    sp, a1, 96
900000000001e0d0:	28c180a3 	ld.d	$r3,$r5,96(0x60)

    dbar    0
900000000001e0d4:	38720000 	dbar	0x0

    addi.d  t0, ra,0
900000000001e0d8:	02c0002c 	addi.d	$r12,$r1,0
    jirl    ra, t0, 0
900000000001e0dc:	4c000181 	jirl	$r1,$r12,0
900000000001e0e0:	69626c74 	bltu	$r3,$r20,90732(0x1626c) # 900000000003434c <_initrd_begin+0xde2c>
900000000001e0e4:	3d207864 	0x3d207864
900000000001e0e8:	38302520 	fldx.s	$f0,$r9,$r9
900000000001e0ec:	00000a78 	0x00000a78
900000000001e0f0:	626c7473 	blt	$r3,$r19,-103308(0x26c74) # 9000000000004d64 <print_trapframe+0xf0>
900000000001e0f4:	3d207370 	0x3d207370
900000000001e0f8:	38302520 	fldx.s	$f0,$r9,$r9
900000000001e0fc:	00000a78 	0x00000a78
900000000001e100:	72746e65 	0x72746e65
900000000001e104:	69687279 	bltu	$r19,$r25,92272(0x16870) # 9000000000034974 <_initrd_begin+0xe454>
900000000001e108:	25203d20 	stptr.w	$r0,$r9,8252(0x203c)
900000000001e10c:	0a783830 	0x0a783830
	...
900000000001e118:	55485428 	bl	10569812(0xa14854) # 9000000000a3296c <_gp+0x80929c>
900000000001e11c:	5453432e 	bl	-55028928(0xcb85340) # 8ffffffffcba345c <_wrs_kernel_text_start-0x345cba4>
900000000001e120:	736f2029 	vssrarni.du.q	$vr9,$vr1,0x48
900000000001e124:	20736920 	ll.w	$r0,$r9,29544(0x7368)
900000000001e128:	64616f6c 	bge	$r27,$r12,24940(0x616c) # 9000000000024294 <syscalls+0x1e4>
900000000001e12c:	20676e69 	ll.w	$r9,$r19,26476(0x676c)
900000000001e130:	0a2e2e2e 	xvfmadd.d	$xr14,$xr17,$xr11,$xr28
900000000001e134:	0000000a 	0x0000000a
900000000001e138:	65732b2b 	bge	$r25,$r11,95016(0x17328) # 9000000000035460 <_initrd_begin+0xef40>
900000000001e13c:	20707574 	ll.w	$r20,$r11,28788(0x7074)
900000000001e140:	656d6974 	bge	$r11,$r20,93544(0x16d68) # 9000000000034ea8 <_initrd_begin+0xe988>
900000000001e144:	6e692072 	bgeu	$r3,$r18,-104160(0x26920) # 9000000000004a64 <print_context+0x1c>
900000000001e148:	72726574 	0x72726574
900000000001e14c:	73747075 	0x73747075
900000000001e150:	0000000a 	0x0000000a
900000000001e154:	00000000 	0x00000000
900000000001e158:	69726573 	bltu	$r11,$r19,94820(0x17264) # 90000000000353bc <_initrd_begin+0xee9c>
900000000001e15c:	70206c61 	vsubwev.h.b	$vr1,$vr3,$vr27
900000000001e160:	2074726f 	ll.w	$r15,$r19,29808(0x7470)
900000000001e164:	73656f64 	vssrani.wu.d	$vr4,$vr27,0x1b
900000000001e168:	746f6e20 	0x746f6e20
900000000001e16c:	69786520 	bltu	$r9,$r0,96356(0x17864) # 90000000000359d0 <_initrd_begin+0xf4b0>
900000000001e170:	21217473 	sc.w	$r19,$r3,8564(0x2174)
900000000001e174:	0000000a 	0x0000000a
900000000001e178:	65737361 	bge	$r27,$r1,95088(0x17370) # 90000000000354e8 <_initrd_begin+0xefc8>
900000000001e17c:	6f697472 	bgeu	$r3,$r18,-38540(0x36974) # 9000000000014af0 <iobuf_init+0x20>
900000000001e180:	6166206e 	blt	$r3,$r14,91680(0x16620) # 90000000000347a0 <_initrd_begin+0xe280>
900000000001e184:	64656c69 	bge	$r3,$r9,25964(0x656c) # 90000000000246f0 <bootstack+0x218>
900000000001e188:	6564203a 	bge	$r1,$r26,91168(0x16420) # 90000000000345a8 <_initrd_begin+0xe088>
900000000001e18c:	3c6f6e76 	0x3c6f6e76
900000000001e190:	5f58414d 	bne	$r10,$r13,-42944(0x35840) # 90000000000139d0 <file_testfd+0x58>
900000000001e194:	00454449 	srli.d	$r9,$r2,0x11
900000000001e198:	6e72656b 	bgeu	$r11,$r11,-101788(0x27264) # 90000000000053fc <loongarch_trap+0xa4>
900000000001e19c:	6972642f 	bltu	$r1,$r15,94820(0x17264) # 9000000000035400 <_initrd_begin+0xeee0>
900000000001e1a0:	2f726576 	0x2f726576
900000000001e1a4:	2e656469 	0x2e656469
900000000001e1a8:	00000063 	0x00000063
900000000001e1ac:	00000000 	0x00000000
900000000001e1b0:	6e726157 	bgeu	$r10,$r23,-101792(0x27260) # 9000000000005410 <loongarch_trap+0xb8>
900000000001e1b4:	3a676e69 	0x3a676e69
900000000001e1b8:	206f4e20 	ll.w	$r0,$r17,28492(0x6f4c)
900000000001e1bc:	74696e49 	xvavgr.w	$xr9,$xr18,$xr27
900000000001e1c0:	0a216472 	xvfmadd.d	$xr18,$xr3,$xr25,$xr2
900000000001e1c4:	00000000 	0x00000000
900000000001e1c8:	74696e49 	xvavgr.w	$xr9,$xr18,$xr27
900000000001e1cc:	203a6472 	ll.w	$r18,$r3,14948(0x3a64)
900000000001e1d0:	30257830 	vldrepl.w	$vr16,$r1,1400(0x578)
900000000001e1d4:	2d207838 	0x2d207838
900000000001e1d8:	25783020 	stptr.w	$r0,$r1,30768(0x7830)
900000000001e1dc:	2c783830 	vst	$vr16,$r1,-498(0xe0e)
900000000001e1e0:	7a697320 	0x7a697320
900000000001e1e4:	30203a65 	vldrepl.w	$vr5,$r19,56(0x38)
900000000001e1e8:	38302578 	fldx.s	$f24,$r11,$r9
900000000001e1ec:	6d202c78 	bgeu	$r3,$r24,73772(0x1202c) # 9000000000030218 <_initrd_begin+0x9cf8>
900000000001e1f0:	63696761 	blt	$r27,$r1,-38556(0x36964) # 9000000000014b54 <iobuf_move+0x20>
900000000001e1f4:	7830203a 	0x7830203a
900000000001e1f8:	78323025 	0x78323025
900000000001e1fc:	78323025 	0x78323025
900000000001e200:	78323025 	0x78323025
900000000001e204:	78323025 	0x78323025
900000000001e208:	0000000a 	0x0000000a
900000000001e20c:	00000000 	0x00000000
900000000001e210:	646d6172 	bge	$r11,$r18,28000(0x6d60) # 9000000000024f70 <bootstack+0xa98>
900000000001e214:	5f6b7369 	bne	$r27,$r9,-38032(0x36b70) # 9000000000014d84 <fence_i+0x10>
900000000001e218:	74696e69 	xvavgr.w	$xr9,$xr19,$xr27
900000000001e21c:	203a2928 	ll.w	$r8,$r9,14888(0x3a28)
900000000001e220:	74696e69 	xvavgr.w	$xr9,$xr19,$xr27
900000000001e224:	66206472 	bge	$r3,$r18,-122780(0x22064) # 9000000000000288 <reload_timer+0x10>
900000000001e228:	646e756f 	bge	$r11,$r15,28276(0x6e74) # 900000000002509c <bootstack+0xbc4>
900000000001e22c:	616d202c 	blt	$r1,$r12,93472(0x16d20) # 9000000000034f4c <_initrd_begin+0xea2c>
900000000001e230:	3a636967 	0x3a636967
900000000001e234:	25783020 	stptr.w	$r0,$r1,30768(0x7830)
900000000001e238:	2c783830 	vst	$vr16,$r1,-498(0xe0e)
900000000001e23c:	25783020 	stptr.w	$r0,$r1,30768(0x7830)
900000000001e240:	20783830 	ll.w	$r16,$r1,30776(0x7838)
900000000001e244:	73636573 	vssrani.d.q	$vr19,$vr11,0x59
900000000001e248:	0000000a 	0x0000000a
900000000001e24c:	00000000 	0x00000000
900000000001e250:	65737361 	bge	$r27,$r1,95088(0x17370) # 90000000000355c0 <_initrd_begin+0xf0a0>
900000000001e254:	6f697472 	bgeu	$r3,$r18,-38540(0x36974) # 9000000000014bc8 <iobuf_move+0x94>
900000000001e258:	6166206e 	blt	$r3,$r14,91680(0x16620) # 9000000000034878 <_initrd_begin+0xe358>
900000000001e25c:	64656c69 	bge	$r3,$r9,25964(0x656c) # 90000000000247c8 <bootstack+0x2f0>
900000000001e260:	4e49203a 	jirl	$r26,$r1,-112352(0x24920)
900000000001e264:	44525449 	bnez	$r2,2380372(0x245254) # 90000000002634b8 <_gp+0x39de8>
900000000001e268:	5a49535f 	beq	$r26,$r31,-112304(0x24950) # 9000000000002bb8 <rb_delete_fixup+0x17c>
900000000001e26c:	25292845 	stptr.w	$r5,$r2,10536(0x2928)
900000000001e270:	54434553 	bl	88884036(0x54c4344) # 90000000054e25b4 <_gp+0x52b8ee4>
900000000001e274:	455a4953 	bnez	$r10,-3319224(0x4d5a48) # 8fffffffffcf3cbc <_wrs_kernel_text_start-0x30c344>
900000000001e278:	203d3d20 	ll.w	$r0,$r9,15676(0x3d3c)
900000000001e27c:	00000030 	0x00000030
900000000001e280:	6e72656b 	bgeu	$r11,$r11,-101788(0x27264) # 90000000000054e4 <__intr_restore+0xc>
900000000001e284:	6972642f 	bltu	$r1,$r15,94820(0x17264) # 90000000000354e8 <_initrd_begin+0xefc8>
900000000001e288:	2f726576 	0x2f726576
900000000001e28c:	646d6172 	bge	$r11,$r18,28000(0x6d60) # 9000000000024fec <bootstack+0xb14>
900000000001e290:	2e6b7369 	0x2e6b7369
900000000001e294:	00000063 	0x00000063
900000000001e298:	4e52454b 	jirl	$r11,$r10,-110012(0x25244)
900000000001e29c:	494e495f 	bcnez	$fcc2,-176568(0x7d4e48) # 8fffffffffff30e4 <_wrs_kernel_text_start-0xcf1c>
900000000001e2a0:	00445254 	0x00445254
900000000001e2a4:	00000000 	0x00000000
900000000001e2a8:	70736e75 	vmin.w	$vr21,$vr19,$vr27
900000000001e2ac:	66696365 	bge	$r27,$r5,-104096(0x26960) # 9000000000004c0c <print_regs+0x30>
900000000001e2b0:	20646569 	ll.w	$r9,$r11,25700(0x6464)
900000000001e2b4:	6f727265 	bgeu	$r19,$r5,-36240(0x37270) # 9000000000015524 <sysfile_chdir+0x38>
900000000001e2b8:	00000072 	0x00000072
900000000001e2bc:	00000000 	0x00000000
900000000001e2c0:	20646162 	ll.w	$r2,$r11,25696(0x6460)
900000000001e2c4:	636f7270 	blt	$r19,$r16,-37008(0x36f70) # 9000000000015234 <sysfile_write+0x5c>
900000000001e2c8:	00737365 	bstrins.w	$r5,$r27,0x13,0x1c
900000000001e2cc:	00000000 	0x00000000
900000000001e2d0:	61766e69 	blt	$r19,$r9,95852(0x1766c) # 900000000003593c <_initrd_begin+0xf41c>
900000000001e2d4:	2064696c 	ll.w	$r12,$r11,25704(0x6468)
900000000001e2d8:	61726170 	blt	$r11,$r16,94816(0x17260) # 9000000000035538 <_initrd_begin+0xf018>
900000000001e2dc:	6574656d 	bge	$r11,$r13,95332(0x17464) # 9000000000035740 <_initrd_begin+0xf220>
900000000001e2e0:	00000072 	0x00000072
900000000001e2e4:	00000000 	0x00000000
900000000001e2e8:	2074756f 	ll.w	$r15,$r11,29812(0x7474)
900000000001e2ec:	6d20666f 	bgeu	$r19,$r15,73828(0x12064) # 9000000000030350 <_initrd_begin+0x9e30>
900000000001e2f0:	726f6d65 	0x726f6d65
900000000001e2f4:	00000079 	0x00000079
900000000001e2f8:	2074756f 	ll.w	$r15,$r11,29812(0x7474)
900000000001e2fc:	7020666f 	vsubwev.h.b	$vr15,$vr19,$vr25
900000000001e300:	65636f72 	bge	$r27,$r18,90988(0x1636c) # 900000000003466c <_initrd_begin+0xe14c>
900000000001e304:	73657373 	vssrani.wu.d	$vr19,$vr27,0x1c
	...
900000000001e310:	6d676573 	bgeu	$r11,$r19,92004(0x16764) # 9000000000034a74 <_initrd_begin+0xe554>
900000000001e314:	61746e65 	blt	$r19,$r5,95340(0x1746c) # 9000000000035780 <_initrd_begin+0xf260>
900000000001e318:	6e6f6974 	bgeu	$r11,$r20,-102552(0x26f68) # 9000000000005280 <trap_dispatch+0xe8>
900000000001e31c:	75616620 	0x75616620
900000000001e320:	0000746c 	0x0000746c
900000000001e324:	00000000 	0x00000000
900000000001e328:	61766e69 	blt	$r19,$r9,95852(0x1766c) # 9000000000035994 <_initrd_begin+0xf474>
900000000001e32c:	2064696c 	ll.w	$r12,$r11,25704(0x6468)
900000000001e330:	20666c65 	ll.w	$r5,$r3,26220(0x666c)
900000000001e334:	656c6966 	bge	$r11,$r6,93288(0x16c68) # 9000000000034f9c <_initrd_begin+0xea7c>
	...
900000000001e340:	636f7270 	blt	$r19,$r16,-37008(0x36f70) # 90000000000152b0 <sysfile_write+0xd8>
900000000001e344:	20737365 	ll.w	$r5,$r27,29552(0x7370)
900000000001e348:	6b207369 	bltu	$r27,$r9,-57232(0x32070) # 90000000000103b8 <load_icode+0xac>
900000000001e34c:	656c6c69 	bge	$r3,$r9,93292(0x16c6c) # 9000000000034fb8 <_initrd_begin+0xea98>
900000000001e350:	00000064 	0x00000064
900000000001e354:	00000000 	0x00000000
900000000001e358:	696e6170 	bltu	$r11,$r16,93792(0x16e60) # 90000000000351b8 <_initrd_begin+0xec98>
900000000001e35c:	61662063 	blt	$r3,$r3,91680(0x16620) # 900000000003497c <_initrd_begin+0xe45c>
900000000001e360:	72756c69 	0x72756c69
900000000001e364:	00000065 	0x00000065
900000000001e368:	73206f6e 	0x73206f6e
900000000001e36c:	20686375 	ll.w	$r21,$r27,26720(0x6860)
900000000001e370:	69766564 	bltu	$r11,$r4,95844(0x17664) # 90000000000359d4 <_initrd_begin+0xf4b4>
900000000001e374:	00006563 	rdtimeh.w	$r3,$r11
900000000001e378:	69766564 	bltu	$r11,$r4,95844(0x17664) # 90000000000359dc <_initrd_begin+0xf4bc>
900000000001e37c:	6e206563 	bgeu	$r11,$r3,-122780(0x22064) # 90000000000003e0 <fence_i+0x58>
900000000001e380:	6120746f 	blt	$r3,$r15,73844(0x12074) # 90000000000303f4 <_initrd_begin+0x9ed4>
900000000001e384:	6c696176 	bgeu	$r11,$r22,26976(0x6960) # 9000000000024ce4 <bootstack+0x80c>
900000000001e388:	656c6261 	bge	$r19,$r1,93280(0x16c60) # 9000000000034fe8 <_initrd_begin+0xeac8>
900000000001e38c:	00000000 	0x00000000
900000000001e390:	69766564 	bltu	$r11,$r4,95844(0x17664) # 90000000000359f4 <_initrd_begin+0xf4d4>
900000000001e394:	662f6563 	bge	$r11,$r3,-118940(0x22f64) # 90000000000012f8 <ramdisk_init_struct+0x5c>
900000000001e398:	20656c69 	ll.w	$r9,$r3,25964(0x656c)
900000000001e39c:	62207369 	blt	$r27,$r9,-122768(0x22070) # 900000000000040c <__intr_save+0x14>
900000000001e3a0:	00797375 	bstrins.w	$r21,$r27,0x19,0x1c
900000000001e3a4:	00000000 	0x00000000
900000000001e3a8:	73206f6e 	0x73206f6e
900000000001e3ac:	20686375 	ll.w	$r21,$r27,26720(0x6860)
900000000001e3b0:	656c6966 	bge	$r11,$r6,93288(0x16c68) # 9000000000035018 <_initrd_begin+0xeaf8>
900000000001e3b4:	20726f20 	ll.w	$r0,$r25,29292(0x726c)
900000000001e3b8:	65726964 	bge	$r11,$r4,94824(0x17268) # 9000000000035620 <_initrd_begin+0xf100>
900000000001e3bc:	726f7463 	0x726f7463
900000000001e3c0:	00000079 	0x00000079
900000000001e3c4:	00000000 	0x00000000
900000000001e3c8:	61207369 	blt	$r27,$r9,73840(0x12070) # 9000000000030438 <_initrd_begin+0x9f18>
900000000001e3cc:	72696420 	0x72696420
900000000001e3d0:	6f746365 	bgeu	$r27,$r5,-35744(0x37460) # 9000000000015830 <sysfile_getdirentry+0x24>
900000000001e3d4:	00007972 	0x00007972
900000000001e3d8:	20746f6e 	ll.w	$r14,$r27,29804(0x746c)
900000000001e3dc:	69642061 	bltu	$r3,$r1,91168(0x16420) # 90000000000347fc <_initrd_begin+0xe2dc>
900000000001e3e0:	74636572 	xvabsd.wu	$xr18,$xr11,$xr25
900000000001e3e4:	0079726f 	bstrins.w	$r15,$r19,0x19,0x1c
900000000001e3e8:	736f7263 	vssrarni.du.q	$vr3,$vr19,0x5c
900000000001e3ec:	65642073 	bge	$r3,$r19,91168(0x16420) # 900000000003480c <_initrd_begin+0xe2ec>
900000000001e3f0:	65636976 	bge	$r11,$r22,90984(0x16368) # 9000000000034758 <_initrd_begin+0xe238>
900000000001e3f4:	6e696c20 	bgeu	$r1,$r0,-104084(0x2696c) # 9000000000004d60 <print_trapframe+0xec>
900000000001e3f8:	0000006b 	0x0000006b
900000000001e3fc:	00000000 	0x00000000
900000000001e400:	6d696e75 	bgeu	$r19,$r21,92524(0x1696c) # 9000000000034d6c <_initrd_begin+0xe84c>
900000000001e404:	6d656c70 	bgeu	$r3,$r16,91500(0x1656c) # 9000000000034970 <_initrd_begin+0xe450>
900000000001e408:	65746e65 	bge	$r19,$r5,95340(0x1746c) # 9000000000035874 <_initrd_begin+0xf354>
900000000001e40c:	65662064 	bge	$r3,$r4,91680(0x16620) # 9000000000034a2c <_initrd_begin+0xe50c>
900000000001e410:	72757461 	0x72757461
900000000001e414:	00000065 	0x00000065
900000000001e418:	656c6c69 	bge	$r3,$r9,93292(0x16c6c) # 9000000000035084 <_initrd_begin+0xeb64>
900000000001e41c:	206c6167 	ll.w	$r7,$r11,27744(0x6c60)
900000000001e420:	6b656573 	bltu	$r11,$r19,-39580(0x36564) # 9000000000014984 <fs_closeall+0xb0>
900000000001e424:	00000000 	0x00000000
900000000001e428:	206f6f74 	ll.w	$r20,$r27,28524(0x6f6c)
900000000001e42c:	796e616d 	0x796e616d
900000000001e430:	6c696620 	bgeu	$r17,$r0,26980(0x6964) # 9000000000024d94 <bootstack+0x8bc>
900000000001e434:	61207365 	blt	$r27,$r5,73840(0x12070) # 90000000000304a4 <_initrd_begin+0x9f84>
900000000001e438:	6f206572 	bgeu	$r11,$r18,-57244(0x32064) # 900000000001049c <load_icode+0x190>
900000000001e43c:	006e6570 	bstrins.w	$r16,$r11,0xe,0x19
900000000001e440:	656c6966 	bge	$r11,$r6,93288(0x16c68) # 90000000000350a8 <_initrd_begin+0xeb88>
900000000001e444:	20726f20 	ll.w	$r0,$r25,29292(0x726c)
900000000001e448:	65726964 	bge	$r11,$r4,94824(0x17268) # 90000000000356b0 <_initrd_begin+0xf190>
900000000001e44c:	726f7463 	0x726f7463
900000000001e450:	6c612079 	bgeu	$r3,$r25,24864(0x6120) # 9000000000024570 <bootstack+0x98>
900000000001e454:	64616572 	bge	$r11,$r18,24932(0x6164) # 90000000000245b8 <bootstack+0xe0>
900000000001e458:	78652079 	0x78652079
900000000001e45c:	73747369 	0x73747369
	...
900000000001e468:	65726964 	bge	$r11,$r4,94824(0x17268) # 90000000000356d0 <_initrd_begin+0xf1b0>
900000000001e46c:	726f7463 	0x726f7463
900000000001e470:	73692079 	vssrarni.w.d	$vr25,$vr3,0x8
900000000001e474:	746f6e20 	0x746f6e20
900000000001e478:	706d6520 	0x706d6520
900000000001e47c:	00007974 	0x00007974

900000000001e480 <error_string>:
	...
900000000001e488:	0001e2a8 90000000 0001e2c0 90000000     ................
900000000001e498:	0001e2d0 90000000 0001e2e8 90000000     ................
900000000001e4a8:	0001e2f8 90000000 0001e310 90000000     ................
	...
900000000001e4c0:	0001e328 90000000 0001e340 90000000     (.......@.......
900000000001e4d0:	0001e358 90000000 00000000 00000000     X...............
	...
900000000001e4e8:	0001e368 90000000 0001e378 90000000     h.......x.......
900000000001e4f8:	0001e390 90000000 0001e3a8 90000000     ................
900000000001e508:	0001e3c8 90000000 0001e3d8 90000000     ................
900000000001e518:	0001e3e8 90000000 0001e400 90000000     ................
900000000001e528:	0001e418 90000000 0001e428 90000000     ........(.......
900000000001e538:	0001e440 90000000 0001e468 90000000     @.......h.......
900000000001e548:	33323130 37363534 62613938 66656463     0123456789abcdef
	...
900000000001e560:	6f727265 64252072 00000000 00000000     error %d........
900000000001e570:	00007325 00000000 6c756e28 0000296c     %s......(null)..
900000000001e580:	000019e0 90000000 00001d4c 90000000     ........L.......
900000000001e590:	00001d30 90000000 00001d4c 90000000     0.......L.......
900000000001e5a0:	00001d4c 90000000 00001d4c 90000000     L.......L.......
900000000001e5b0:	00001d4c 90000000 000019b8 90000000     L...............
900000000001e5c0:	00001d4c 90000000 00001d4c 90000000     L.......L.......
900000000001e5d0:	00001950 90000000 000019d0 90000000     P...............
900000000001e5e0:	00001d4c 90000000 0000195c 90000000     L.......\.......
900000000001e5f0:	00001968 90000000 00001968 90000000     h.......h.......
900000000001e600:	00001968 90000000 00001968 90000000     h.......h.......
900000000001e610:	00001968 90000000 00001968 90000000     h.......h.......
900000000001e620:	00001968 90000000 00001968 90000000     h.......h.......
900000000001e630:	00001968 90000000 00001d4c 90000000     h.......L.......
900000000001e640:	00001d4c 90000000 00001d4c 90000000     L.......L.......
900000000001e650:	00001d4c 90000000 00001d4c 90000000     L.......L.......
900000000001e660:	00001d4c 90000000 00001d4c 90000000     L.......L.......
900000000001e670:	00001d4c 90000000 00001d4c 90000000     L.......L.......
900000000001e680:	00001d4c 90000000 00001d4c 90000000     L.......L.......
900000000001e690:	00001d4c 90000000 00001d4c 90000000     L.......L.......
900000000001e6a0:	00001d4c 90000000 00001d4c 90000000     L.......L.......
900000000001e6b0:	00001d4c 90000000 00001d4c 90000000     L.......L.......
900000000001e6c0:	00001d4c 90000000 00001d4c 90000000     L.......L.......
900000000001e6d0:	00001d4c 90000000 00001d4c 90000000     L.......L.......
900000000001e6e0:	00001d4c 90000000 00001d4c 90000000     L.......L.......
900000000001e6f0:	00001d4c 90000000 00001d4c 90000000     L.......L.......
900000000001e700:	00001d4c 90000000 00001d4c 90000000     L.......L.......
900000000001e710:	00001d4c 90000000 00001d4c 90000000     L.......L.......
900000000001e720:	00001d4c 90000000 00001d4c 90000000     L.......L.......
900000000001e730:	00001d4c 90000000 00001d4c 90000000     L.......L.......
900000000001e740:	00001d4c 90000000 00001d4c 90000000     L.......L.......
900000000001e750:	00001d4c 90000000 00001d4c 90000000     L.......L.......
900000000001e760:	00001d4c 90000000 00001d4c 90000000     L.......L.......
900000000001e770:	00001d4c 90000000 00001d4c 90000000     L.......L.......
900000000001e780:	00001a1c 90000000 00001c30 90000000     ........0.......
900000000001e790:	00001a48 90000000 00001d4c 90000000     H.......L.......
900000000001e7a0:	00001d4c 90000000 00001d4c 90000000     L.......L.......
900000000001e7b0:	00001d4c 90000000 00001d4c 90000000     L.......L.......
900000000001e7c0:	00001d4c 90000000 00001a0c 90000000     L...............
900000000001e7d0:	00001d4c 90000000 00001d4c 90000000     L.......L.......
900000000001e7e0:	00001d4c 90000000 00001c84 90000000     L...............
900000000001e7f0:	00001d4c 90000000 00001d4c 90000000     L.......L.......
900000000001e800:	00001ad8 90000000 00001d4c 90000000     ........L.......
900000000001e810:	00001d4c 90000000 00001d4c 90000000     L.......L.......
900000000001e820:	00001d4c 90000000 00001cd4 90000000     L...............
900000000001e830:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001e840:	6f63203a 7261706d 3d212065 4c554e20     : compare != NUL
900000000001e850:	0000004c 00000000 6e72656b 62696c2f     L.......kern/lib
900000000001e860:	62722f73 6572745f 00632e65 00000000     s/rb_tree.c.....
900000000001e870:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001e880:	2078203a 74203d21 2d656572 6f6f723e     : x != tree->roo
900000000001e890:	26262074 21207820 696e203d 2626206c     t && x != nil &&
900000000001e8a0:	21207920 696e203d 0000006c 00000000      y != nil.......
900000000001e8b0:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001e8c0:	2821203a 2d6c696e 6465723e 00000029     : !(nil->red)...
900000000001e8d0:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001e8e0:	2821203a 65657274 696e3e2d 723e2d6c     : !(tree->nil->r
900000000001e8f0:	20296465 21202626 65727428 723e2d65     ed) && !(tree->r
900000000001e900:	2d746f6f 6465723e 00000029 00000000     oot->red).......
900000000001e910:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001e920:	2079203a 72203d21 20746f6f 79202626     : y != root && y
900000000001e930:	203d2120 006c696e 65737361 6f697472      != nil.assertio
900000000001e940:	6166206e 64656c69 6e21203a 2d65646f     n failed: !node-
900000000001e950:	6465723e 00000000 65737361 6f697472     >red....assertio
900000000001e960:	6166206e 64656c69 4f43203a 5241504d     n failed: COMPAR
900000000001e970:	72742845 202c6565 65646f6e 6f6e202c     E(tree, node, no
900000000001e980:	3e2d6564 7466656c 3d3e2029 00003020     de->left) >= 0..
900000000001e990:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001e9a0:	6f6e203a 3e2d6564 7466656c 61703e2d     : node->left->pa
900000000001e9b0:	746e6572 203d3d20 65646f6e 00000000     rent == node....
900000000001e9c0:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001e9d0:	4f43203a 5241504d 72742845 202c6565     : COMPARE(tree, 
900000000001e9e0:	65646f6e 6f6e202c 3e2d6564 68676972     node, node->righ
900000000001e9f0:	3c202974 0030203d 65737361 6f697472     t) <= 0.assertio
900000000001ea00:	6166206e 64656c69 6f6e203a 3e2d6564     n failed: node->
900000000001ea10:	68676972 703e2d74 6e657261 3d3d2074     right->parent ==
900000000001ea20:	646f6e20 00000065 65737361 6f697472      node...assertio
900000000001ea30:	6166206e 64656c69 6e21203a 2d65646f     n failed: !node-
900000000001ea40:	66656c3e 723e2d74 26206465 6e212026     >left->red && !n
900000000001ea50:	2d65646f 6769723e 3e2d7468 00646572     ode->right->red.
900000000001ea60:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001ea70:	6268203a 66656c5f 3d3d2074 5f626820     : hb_left == hb_
900000000001ea80:	68676972 00000074 65737361 6f697472     right...assertio
900000000001ea90:	6166206e 64656c69 6572203a 3d212074     n failed: ret !=
900000000001eaa0:	4c554e20 0000004c 65737361 6f697472      NULL...assertio
900000000001eab0:	6166206e 64656c69 7274203a 21206565     n failed: tree !
900000000001eac0:	554e203d 00004c4c 65737361 6f697472     = NULL..assertio
900000000001ead0:	6166206e 64656c69 6e21203a 3e2d6c69     n failed: !nil->
900000000001eae0:	20646572 72202626 2d746f6f 66656c3e     red && root->lef
900000000001eaf0:	3d3d2074 6c696e20 00000000 00000000     t == nil........
900000000001eb00:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001eb10:	616d203a 695b6b72 3d3d205d 00003120     : mark[i] == 1..
900000000001eb20:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001eb30:	6f6e203a 21206564 554e203d 26204c4c     : node != NULL &
900000000001eb40:	6f6e2026 3d206564 2826203d 5b6c6c61     & node == &(all[
900000000001eb50:	3e2d5d69 6c5f6272 296b6e69 00000000     i]->rb_link)....
900000000001eb60:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001eb70:	6f6e203a 21206564 554e203d 26204c4c     : node != NULL &
900000000001eb80:	62722026 6164326e 6e286174 2965646f     & rbn2data(node)
900000000001eb90:	61643e2d 3d206174 0069203d 00000000     ->data == i.....
900000000001eba0:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001ebb0:	6f6e203a 21206564 554e203d 26204c4c     : node != NULL &
900000000001ebc0:	62722026 6164326e 6e286174 2965646f     & rbn2data(node)
900000000001ebd0:	61643e2d 3d206174 616d203d 00000078     ->data == max...
900000000001ebe0:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001ebf0:	6272203a 6572745f 6d655f65 28797470     : rb_tree_empty(
900000000001ec00:	65657274 00000029 33323130 37363534     tree)...01234567
900000000001ec10:	42413938 46454443 00000000 00000000     89ABCDEF........
900000000001ec20:	00002420 00000000 00203a09 00000000      $.......: .....
900000000001ec30:	70617274 6d617266 74612065 00000020     trapframe at ...
900000000001ec40:	0000000a 00000000 61722420 00203a09     ........ $ra.: .
900000000001ec50:	64614220 3a094156 00000020 00000000      BadVA.: .......
900000000001ec60:	74734520 3a097461 00000020 00000000      Estat.: .......
900000000001ec70:	4d525020 203a0944 00000000 00000000      PRMD.: ........
900000000001ec80:	43504520 00203a09 70617254 206e6920      EPC.: .Trap in 
900000000001ec90:	72657375 65646f6d 0000203a 00000000     usermode: ......
900000000001eca0:	70617254 206e6920 6e72656b 203a6c65     Trap in kernel: 
	...
900000000001ecb8:	6e6b6e55 206e776f 65746e69 70757272     Unknown interrup
900000000001ecc8:	00002174 00000000 6e72656b 6172742f     t!......kern/tra
900000000001ecd8:	72742f70 632e7061 00000000 00000000     p/trap.c........
900000000001ece8:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001ecf8:	7563203a 6e657272 3d3d2074 6c646920     : current == idl
900000000001ed08:	6f727065 00000063 61686e75 656c646e     eproc...unhandle
900000000001ed18:	61702064 66206567 746c7561 00000a2e     d page fault....
900000000001ed28:	61686e75 656c646e 67702064 6c756166     unhandled pgfaul
900000000001ed38:	00000074 00000000 20796568 216e616d     t.......hey man!
900000000001ed48:	206f4420 20544f4e 20657375 74616874      Do NOT use that
900000000001ed58:	736e6920 0000216e 20557043 65637865      insn!..CpU exce
900000000001ed68:	6f697470 6873206e 646c756f 746f6e20     ption should not
900000000001ed78:	63636f20 69207275 656b206e 6c656e72      occur in kernel
900000000001ed88:	646f6d20 00002165 67696c41 6e656d6e      mode!..Alignmen
900000000001ed98:	72452074 00726f72 646f6345 203d2065     t Error.Ecode = 
900000000001eda8:	000a7825 00000000 61686e55 656c646e     %x......Unhandle
900000000001edb8:	78452064 74706563 006e6f69 00000000     d Exception.....
900000000001edc8:	000051f4 90000000 00005200 90000000     .Q.......R......
900000000001edd8:	00005210 90000000 00005230 90000000     .R......0R......
900000000001ede8:	00005310 90000000 00005310 90000000     .S.......S......
900000000001edf8:	00005310 90000000 00005310 90000000     .S.......S......
900000000001ee08:	000052cc 90000000 00005310 90000000     .R.......S......
900000000001ee18:	00005310 90000000 000052b0 90000000     .S.......R......
900000000001ee28:	00005310 90000000 00005240 90000000     .S......@R......
900000000001ee38:	00005274 90000000 00005310 90000000     tR.......S......
900000000001ee48:	00005310 90000000 00005310 90000000     .S.......S......
900000000001ee58:	00005310 90000000 00005310 90000000     .S.......S......
900000000001ee68:	00005310 90000000 00005310 90000000     .S.......S......
900000000001ee78:	00005310 90000000 00005310 90000000     .S.......S......
900000000001ee88:	00005310 90000000 00005310 90000000     .S.......S......
900000000001ee98:	00005310 90000000 00005310 90000000     .S.......S......
900000000001eea8:	00005310 90000000 00005310 90000000     .S.......S......
900000000001eeb8:	00005310 90000000 00005310 90000000     .S.......S......
900000000001eec8:	00005310 90000000 00005310 90000000     .S.......S......
900000000001eed8:	00005310 90000000 00005310 90000000     .S.......S......
900000000001eee8:	00005310 90000000 00005310 90000000     .S.......S......
900000000001eef8:	00005310 90000000 00005310 90000000     .S.......S......
900000000001ef08:	00005310 90000000 00005310 90000000     .S.......S......
900000000001ef18:	00005310 90000000 00005310 90000000     .S.......S......
900000000001ef28:	00005310 90000000 00005310 90000000     .S.......S......
900000000001ef38:	00005310 90000000 00005310 90000000     .S.......S......
900000000001ef48:	00005310 90000000 00005310 90000000     .S.......S......
900000000001ef58:	00005310 90000000 00005310 90000000     .S.......S......
900000000001ef68:	00005310 90000000 00005310 90000000     .S.......S......
900000000001ef78:	00005310 90000000 00005310 90000000     .S.......S......
900000000001ef88:	00005310 90000000 00005310 90000000     .S.......S......
900000000001ef98:	00005310 90000000 00005310 90000000     .S.......S......
900000000001efa8:	00005310 90000000 00005310 90000000     .S.......S......
900000000001efb8:	00005310 90000000 00005220 90000000     .S...... R......
900000000001efc8:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001efd8:	206e203a 0030203e 6e72656b 2f6d6d2f     : n > 0.kern/mm/
900000000001efe8:	61666564 5f746c75 2e6d6d70 00000063     default_pmm.c...
900000000001eff8:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001f008:	6150203a 65526567 76726573 70286465     : PageReserved(p
900000000001f018:	00000029 00000000 65737361 6f697472     ).......assertio
900000000001f028:	6166206e 64656c69 5021203a 52656761     n failed: !PageR
900000000001f038:	72657365 28646576 26202970 50212026     eserved(p) && !P
900000000001f048:	50656761 65706f72 28797472 00002970     ageProperty(p)..
900000000001f058:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001f068:	6162203a 2b206573 73616220 703e2d65     : base + base->p
900000000001f078:	65706f72 20797472 70203d21 00000000     roperty != p....
900000000001f088:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001f098:	6150203a 72506567 7265706f 70287974     : PageProperty(p
900000000001f0a8:	00000029 00000000 65737361 6f697472     ).......assertio
900000000001f0b8:	6166206e 64656c69 6f74203a 206c6174     n failed: total 
900000000001f0c8:	6e203d3d 72665f72 705f6565 73656761     == nr_free_pages
900000000001f0d8:	00002928 00000000 65737361 6f697472     ()......assertio
900000000001f0e8:	6166206e 64656c69 3070203a 203d2120     n failed: p0 != 
900000000001f0f8:	4c4c554e 00000000 65737361 6f697472     NULL....assertio
900000000001f108:	6166206e 64656c69 5021203a 50656761     n failed: !PageP
900000000001f118:	65706f72 28797472 00293070 00000000     roperty(p0).....
900000000001f128:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001f138:	696c203a 655f7473 7974706d 72662628     : list_empty(&fr
900000000001f148:	6c5f6565 29747369 00000000 00000000     ee_list)........
900000000001f158:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001f168:	6c61203a 5f636f6c 65676170 3d202928     : alloc_page() =
900000000001f178:	554e203d 00004c4c 65737361 6f697472     = NULL..assertio
900000000001f188:	6166206e 64656c69 6c61203a 5f636f6c     n failed: alloc_
900000000001f198:	65676170 29342873 203d3d20 4c4c554e     pages(4) == NULL
	...
900000000001f1b0:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001f1c0:	6150203a 72506567 7265706f 70287974     : PageProperty(p
900000000001f1d0:	202b2030 26202932 30702026 2e5d325b     0 + 2) && p0[2].
900000000001f1e0:	706f7270 79747265 203d3d20 00000033     property == 3...
900000000001f1f0:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001f200:	7028203a 203d2031 6f6c6c61 61705f63     : (p1 = alloc_pa
900000000001f210:	28736567 20292933 4e203d21 004c4c55     ges(3)) != NULL.
900000000001f220:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001f230:	3070203a 32202b20 203d3d20 00003170     : p0 + 2 == p1..
900000000001f240:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001f250:	6150203a 72506567 7265706f 70287974     : PageProperty(p
900000000001f260:	26202930 30702026 72703e2d 7265706f     0) && p0->proper
900000000001f270:	3d207974 0031203d 65737361 6f697472     ty == 1.assertio
900000000001f280:	6166206e 64656c69 6150203a 72506567     n failed: PagePr
900000000001f290:	7265706f 70287974 26202931 31702026     operty(p1) && p1
900000000001f2a0:	72703e2d 7265706f 3d207974 0033203d     ->property == 3.
900000000001f2b0:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001f2c0:	7028203a 203d2030 6f6c6c61 61705f63     : (p0 = alloc_pa
900000000001f2d0:	29286567 3d3d2029 20327020 0031202d     ge()) == p2 - 1.
900000000001f2e0:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001f2f0:	7028203a 203d2030 6f6c6c61 61705f63     : (p0 = alloc_pa
900000000001f300:	28736567 20292932 70203d3d 202b2032     ges(2)) == p2 + 
900000000001f310:	00000031 00000000 65737361 6f697472     1.......assertio
900000000001f320:	6166206e 64656c69 7028203a 203d2030     n failed: (p0 = 
900000000001f330:	6f6c6c61 61705f63 28736567 20292935     alloc_pages(5)) 
900000000001f340:	4e203d21 004c4c55 65737361 6f697472     != NULL.assertio
900000000001f350:	6166206e 64656c69 726e203a 6572665f     n failed: nr_fre
900000000001f360:	3d3d2065 00003020 65737361 6f697472     e == 0..assertio
900000000001f370:	6166206e 64656c69 6f63203a 20746e75     n failed: count 
900000000001f380:	30203d3d 00000000 65737361 6f697472     == 0....assertio
900000000001f390:	6166206e 64656c69 6f74203a 206c6174     n failed: total 
900000000001f3a0:	30203d3d 00000000 61666564 5f746c75     == 0....default_
900000000001f3b0:	5f6d6d70 616e616d 00726567 00000000     pmm_manager.....

900000000001f3c0 <default_pmm_manager>:
900000000001f3c0:	0001f3a8 90000000 0000554c 90000000     ........LU......
900000000001f3d0:	0000559c 90000000 000057a4 90000000     .U.......W......
900000000001f3e0:	00005a34 90000000 00005f4c 90000000     4Z......L_......
900000000001f3f0:	00005f90 90000000 70326170 20656761     ._......pa2page 
900000000001f400:	6c6c6163 77206465 20687469 61766e69     called with inva
900000000001f410:	2064696c 00006170 6e72656b 2f6d6d2f     lid pa..kern/mm/
900000000001f420:	2e6d6d70 00000068 4444414b 61632052     pmm.h...KADDR ca
900000000001f430:	64656c6c 74697720 6e692068 696c6176     lled with invali
900000000001f440:	61702064 38302520 0000786c 00000000     d pa %08lx......
900000000001f450:	44444150 61632052 64656c6c 74697720     PADDR called wit
900000000001f460:	6e692068 696c6176 766b2064 30252061     h invalid kva %0
900000000001f470:	00786c38 00000000 6c616d6b 5f636f6c     8lx.....kmalloc_
900000000001f480:	74696e69 73202928 65636375 64656465     init() succeeded
900000000001f490:	00000a21 00000000 5f66666f 62616c73     !.......off_slab
900000000001f4a0:	626f203a 7a69736a 203d2065 202c6425     : objsize = %d, 
900000000001f4b0:	206d756e 6425203d 0000002e 00000000     num = %d........
900000000001f4c0:	6e72656b 2f6d6d2f 6c616d6b 2e636f6c     kern/mm/kmalloc.
900000000001f4d0:	00000063 00000000 636c6163 74616c75     c.......calculat
900000000001f4e0:	6c735f65 6f5f6261 3a726576 69616620     e_slab_over: fai
900000000001f4f0:	2e64656c 00000000 6f746567 72656472     led.....getorder
900000000001f500:	69616620 2e64656c 0a642520 00000000      failed. %d.....
900000000001f510:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001f520:	6163203a 70656863 756e3e2d 203e206d     : cachep->num > 
900000000001f530:	00000030 00000000 65737361 6f697472     0.......assertio
900000000001f540:	6166206e 64656c69 6973203a 3e20657a     n failed: size >
900000000001f550:	00003020 00000000 65737361 6f697472      0......assertio
900000000001f560:	6166206e 64656c69 6150203a 6c536567     n failed: PageSl
900000000001f570:	70286261 00000029 20746f6e 6c732061     ab(p)...not a sl
900000000001f580:	70206261 20656761 78383025 0000000a     ab page %08x....
900000000001f590:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001f5a0:	696c203a 655f7473 7974706d 63282628     : list_empty(&(c
900000000001f5b0:	65686361 733e2d70 7362616c 6c75665f     achep->slabs_ful
900000000001f5c0:	0029296c 00000000 65737361 6f697472     l)).....assertio
900000000001f5d0:	6166206e 64656c69 696c203a 655f7473     n failed: list_e
900000000001f5e0:	7974706d 63282628 65686361 733e2d70     mpty(&(cachep->s
900000000001f5f0:	7362616c 746f6e5f 6c6c7566 00002929     labs_notfull))..
900000000001f600:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001f610:	6c73203a 615f6261 636f6c6c 64657461     : slab_allocated
900000000001f620:	3d202928 0030203d 65737361 6f697472     () == 0.assertio
900000000001f630:	6166206e 64656c69 6163203a 70656863     n failed: cachep
900000000001f640:	6f3e2d30 69736a62 3d20657a 3233203d     0->objsize == 32
900000000001f650:	20262620 68636163 2d307065 6d756e3e      && cachep0->num
900000000001f660:	31203e20 20262620 63616321 30706568      > 1 && !cachep0
900000000001f670:	666f3e2d 6c735f66 00006261 00000000     ->off_slab......
900000000001f680:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001f690:	7628203a 203d2030 6c616d6b 28636f6c     : (v0 = kmalloc(
900000000001f6a0:	29293631 203d2120 4c4c554e 00000000     16)) != NULL....
900000000001f6b0:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001f6c0:	6c21203a 5f747369 74706d65 28262879     : !list_empty(&(
900000000001f6d0:	68636163 2d307065 616c733e 6e5f7362     cachep0->slabs_n
900000000001f6e0:	7566746f 29296c6c 00000000 00000000     otfull))........
900000000001f6f0:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001f700:	6c73203a 30706261 6e693e2d 20657375     : slabp0->inuse 
900000000001f710:	31203d3d 20262620 7473696c 78656e5f     == 1 && list_nex
900000000001f720:	28262874 62616c73 3e2d3070 62616c73     t(&(slabp0->slab
900000000001f730:	6e696c5f 2029296b 26203d3d 63616328     _link)) == &(cac
900000000001f740:	30706568 6c733e2d 5f736261 66746f6e     hep0->slabs_notf
900000000001f750:	296c6c75 00000000 65737361 6f697472     ull)....assertio
900000000001f760:	6166206e 64656c69 6150203a 6c536567     n failed: PageSl
900000000001f770:	70286261 00002931 65737361 6f697472     ab(p1)..assertio
900000000001f780:	6166206e 64656c69 4547203a 41505f54     n failed: GET_PA
900000000001f790:	435f4547 45484341 29317028 203d3d20     GE_CACHE(p1) == 
900000000001f7a0:	68636163 20307065 47202626 505f5445     cachep0 && GET_P
900000000001f7b0:	5f454741 42414c53 29317028 203d3d20     AGE_SLAB(p1) == 
900000000001f7c0:	62616c73 00003070 65737361 6f697472     slabp0..assertio
900000000001f7d0:	6166206e 64656c69 3076203a 203d3d20     n failed: v0 == 
900000000001f7e0:	62616c73 3e2d3070 656d5f73 0000006d     slabp0->s_mem...
900000000001f7f0:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001f800:	7628203a 203d2031 6c616d6b 28636f6c     : (v1 = kmalloc(
900000000001f810:	29293631 203d2120 4c4c554e 20262620     16)) != NULL && 
900000000001f820:	3d203176 3076203d 33202b20 00000032     v1 == v0 + 32...
900000000001f830:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001f840:	6c73203a 30706261 72663e2d 3d206565     : slabp0->free =
900000000001f850:	0030203d 00000000 65737361 6f697472     = 0.....assertio
900000000001f860:	6166206e 64656c69 696c203a 655f7473     n failed: list_e
900000000001f870:	7974706d 63282628 65686361 3e2d3070     mpty(&(cachep0->
900000000001f880:	62616c73 6f6e5f73 6c756674 0029296c     slabs_notfull)).
900000000001f890:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001f8a0:	5021203a 53656761 2862616c 00293070     : !PageSlab(p0).
900000000001f8b0:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001f8c0:	6c73203a 30706261 6e693e2d 20657375     : slabp0->inuse 
900000000001f8d0:	63203d3d 65686361 3e2d3070 006d756e     == cachep0->num.
900000000001f8e0:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001f8f0:	696c203a 6e5f7473 28747865 61632826     : list_next(&(ca
900000000001f900:	70656863 733e2d30 7362616c 6c75665f     chep0->slabs_ful
900000000001f910:	2029296c 26203d3d 616c7328 2d307062     l)) == &(slabp0-
900000000001f920:	616c733e 696c5f62 00296b6e 00000000     >slab_link).....
900000000001f930:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001f940:	696c203a 655f7473 7974706d 63282628     : list_empty(&(c
900000000001f950:	65686361 3e2d3070 62616c73 75665f73     achep0->slabs_fu
900000000001f960:	29296c6c 00000000 65737361 6f697472     ll))....assertio
900000000001f970:	6166206e 64656c69 696c203a 6e5f7473     n failed: list_n
900000000001f980:	28747865 6c732826 30706261 6c733e2d     ext(&(slabp0->sl
900000000001f990:	6c5f6261 296b6e69 3d3d2029 73282620     ab_link)) == &(s
900000000001f9a0:	7062616c 733e2d31 5f62616c 6b6e696c     labp1->slab_link
900000000001f9b0:	7c7c2029 73696c20 656e5f74 26287478     ) || list_next(&
900000000001f9c0:	616c7328 2d317062 616c733e 696c5f62     (slabp1->slab_li
900000000001f9d0:	29296b6e 203d3d20 6c732826 30706261     nk)) == &(slabp0
900000000001f9e0:	6c733e2d 6c5f6261 296b6e69 00000000     ->slab_link)....
900000000001f9f0:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001fa00:	696c203a 6e5f7473 28747865 61632826     : list_next(&(ca
900000000001fa10:	70656863 733e2d30 7362616c 746f6e5f     chep0->slabs_not
900000000001fa20:	6c6c7566 3d202929 2826203d 62616c73     full)) == &(slab
900000000001fa30:	3e2d3070 62616c73 6e696c5f 0000296b     p0->slab_link)..
900000000001fa40:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001fa50:	696c203a 6e5f7473 28747865 6c732826     : list_next(&(sl
900000000001fa60:	30706261 6c733e2d 6c5f6261 296b6e69     abp0->slab_link)
900000000001fa70:	3d3d2029 63282620 65686361 3e2d3070     ) == &(cachep0->
900000000001fa80:	62616c73 6f6e5f73 6c756674 0000296c     slabs_notfull)..
900000000001fa90:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001faa0:	3176203a 203d3d20 00003076 00000000     : v1 == v0......
900000000001fab0:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001fac0:	6163203a 70656863 6f3e2d30 735f6666     : cachep0->off_s
900000000001fad0:	2062616c 21202626 68636163 2d317065     lab && !cachep1-
900000000001fae0:	66666f3e 616c735f 00000062 00000000     >off_slab.......
900000000001faf0:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001fb00:	6163203a 70656863 203c2031 68636163     : cachep1 < cach
900000000001fb10:	00307065 00000000 65737361 6f697472     ep0.....assertio
900000000001fb20:	6166206e 64656c69 696c203a 655f7473     n failed: list_e
900000000001fb30:	7974706d 63282628 65686361 3e2d3170     mpty(&(cachep1->
900000000001fb40:	62616c73 75665f73 29296c6c 00000000     slabs_full))....
900000000001fb50:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001fb60:	696c203a 655f7473 7974706d 63282628     : list_empty(&(c
900000000001fb70:	65686361 3e2d3170 62616c73 6f6e5f73     achep1->slabs_no
900000000001fb80:	6c756674 0029296c 65737361 6f697472     tfull)).assertio
900000000001fb90:	6166206e 64656c69 6170203a 6b326567     n failed: page2k
900000000001fba0:	70286176 3d202930 3076203d 00000000     va(p0) == v0....
900000000001fbb0:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001fbc0:	6c21203a 5f747369 74706d65 28262879     : !list_empty(&(
900000000001fbd0:	68636163 2d307065 616c733e 665f7362     cachep0->slabs_f
900000000001fbe0:	296c6c75 00000029 65737361 6f697472     ull))...assertio
900000000001fbf0:	6166206e 64656c69 6c73203a 30706261     n failed: slabp0
900000000001fc00:	203d2120 4c4c554e 00000000 00000000      != NULL........
900000000001fc10:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001fc20:	6c21203a 5f747369 74706d65 28262879     : !list_empty(&(
900000000001fc30:	68636163 2d317065 616c733e 665f7362     cachep1->slabs_f
900000000001fc40:	296c6c75 00000029 65737361 6f697472     ull))...assertio
900000000001fc50:	6166206e 64656c69 6c21203a 5f747369     n failed: !list_
900000000001fc60:	74706d65 28262879 68636163 2d317065     empty(&(cachep1-
900000000001fc70:	616c733e 6e5f7362 7566746f 29296c6c     >slabs_notfull))
	...
900000000001fc88:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001fc98:	6c73203a 31706261 203d2120 4c4c554e     : slabp1 != NULL
	...
900000000001fcb0:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001fcc0:	6150203a 6c536567 70286261 00002930     : PageSlab(p0)..
900000000001fcd0:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001fce0:	4547203a 41505f54 435f4547 45484341     : GET_PAGE_CACHE
900000000001fcf0:	29307028 203d3d20 68636163 20307065     (p0) == cachep0 
900000000001fd00:	47202626 505f5445 5f454741 42414c53     && GET_PAGE_SLAB
900000000001fd10:	29307028 203d3d20 62616c73 00003070     (p0) == slabp0..
900000000001fd20:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001fd30:	726e203a 6572665f 61705f65 5f736567     : nr_free_pages_
900000000001fd40:	726f7473 3d3d2065 5f726e20 65657266     store == nr_free
900000000001fd50:	6761705f 29287365 00000000 00000000     _pages()........
900000000001fd60:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001fd70:	6c73203a 615f6261 636f6c6c 64657461     : slab_allocated
900000000001fd80:	6f74735f 3d206572 6c73203d 615f6261     _store == slab_a
900000000001fd90:	636f6c6c 64657461 00002928 00000000     llocated()......
900000000001fda0:	63656863 6c735f6b 29286261 63757320     check_slab() suc
900000000001fdb0:	64656563 0a216465 00000000 00000000     ceeded!.........
900000000001fdc0:	70326170 20656761 6c6c6163 77206465     pa2page called w
900000000001fdd0:	20687469 61766e69 2064696c 00006170     ith invalid pa..
900000000001fde0:	6e72656b 2f6d6d2f 2e6d6d70 00000068     kern/mm/pmm.h...
900000000001fdf0:	4444414b 61632052 64656c6c 74697720     KADDR called wit
900000000001fe00:	6e692068 696c6176 61702064 38302520     h invalid pa %08
900000000001fe10:	0000786c 00000000 32657470 65676170     lx......pte2page
900000000001fe20:	6c616320 2064656c 68746977 766e6920      called with inv
900000000001fe30:	64696c61 65747020 00000000 00000000     alid pte........
900000000001fe40:	6f6d656d 6d207972 67616e61 6e656d65     memory managemen
900000000001fe50:	00203a74 00000000 0000000a 00000000     t: .............
900000000001fe60:	6f6d656d 6d207972 0a3a7061 00000000     memory map:.....
900000000001fe70:	20202020 0000005b 0000202c 00000000         [..., ......
900000000001fe80:	000a0a5d 00000000 44444150 61632052     ].......PADDR ca
900000000001fe90:	64656c6c 74697720 6e692068 696c6176     lled with invali
900000000001fea0:	766b2064 30252061 00786c38 00000000     d kva %08lx.....
900000000001feb0:	6e72656b 2f6d6d2f 2e6d6d70 00000063     kern/mm/pmm.c...
900000000001fec0:	65657266 206d656d 72617473 74612074     freemem start at
900000000001fed0:	0000203a 00000000 65737361 6f697472     : ......assertio
900000000001fee0:	6166206e 64656c69 626d203a 6e696765     n failed: mbegin
900000000001fef0:	6d203c20 00646e65 65657266 67617020      < mend.free pag
900000000001ff00:	203a7365 00000000 00202323 00000000     es: ....## .....
900000000001ff10:	62616e65 705f656c 6e696761 00000a67     enable_paging...
900000000001ff20:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001ff30:	4750203a 2846464f 2029616c 50203d3d     : PGOFF(la) == P
900000000001ff40:	46464f47 29617028 00000000 00000000     GOFF(pa)........
900000000001ff50:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001ff60:	7470203a 21207065 554e203d 00004c4c     : ptep != NULL..
900000000001ff70:	746f6f62 6c6c615f 705f636f 20656761     boot_alloc_page 
900000000001ff80:	6c696166 0a2e6465 00000000 00000000     failed..........
900000000001ff90:	63656863 6c615f6b 5f636f6c 65676170     check_alloc_page
900000000001ffa0:	73202928 65636375 64656465 00000a21     () succeeded!...
900000000001ffb0:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001ffc0:	706e203a 20656761 4b203d3c 534d454d     : npage <= KMEMS
900000000001ffd0:	20455a49 4750202f 455a4953 00000000     IZE / PGSIZE....
900000000001ffe0:	65737361 6f697472 6166206e 64656c69     assertion failed
900000000001fff0:	6f62203a 705f746f 72696467 203d2120     : boot_pgdir != 
9000000000020000:	4c4c554e 20262620 6e697528 5f323374     NULL && (uint32_
9000000000020010:	47502974 2846464f 746f6f62 6467705f     t)PGOFF(boot_pgd
9000000000020020:	20297269 30203d3d 00000000 00000000     ir) == 0........
9000000000020030:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000020040:	6567203a 61705f74 62286567 5f746f6f     : get_page(boot_
9000000000020050:	69646770 30202c72 202c3078 4c4c554e     pgdir, 0x0, NULL
9000000000020060:	3d3d2029 4c554e20 0000004c 00000000     ) == NULL.......
9000000000020070:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000020080:	6170203a 695f6567 7265736e 6f622874     : page_insert(bo
9000000000020090:	705f746f 72696467 3170202c 7830202c     ot_pgdir, p1, 0x
90000000000200a0:	30202c30 3d3d2029 00003020 00000000     0, 0) == 0......
90000000000200b0:	65737361 6f697472 6166206e 64656c69     assertion failed
90000000000200c0:	7028203a 20706574 6567203d 74705f74     : (ptep = get_pt
90000000000200d0:	6f622865 705f746f 72696467 7830202c     e(boot_pgdir, 0x
90000000000200e0:	30202c30 21202929 554e203d 00004c4c     0, 0)) != NULL..
90000000000200f0:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000020100:	6170203a 67617032 702a2865 29706574     : pa2page(*ptep)
9000000000020110:	203d3d20 00003170 65737361 6f697472      == p1..assertio
9000000000020120:	6166206e 64656c69 6170203a 725f6567     n failed: page_r
9000000000020130:	70286665 3d202931 0031203d 00000000     ef(p1) == 1.....
9000000000020140:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000020150:	6567203a 74705f74 6f622865 705f746f     : get_pte(boot_p
9000000000020160:	72696467 4750202c 455a4953 2930202c     gdir, PGSIZE, 0)
9000000000020170:	203d3d20 70657470 00000000 00000000      == ptep........
9000000000020180:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000020190:	6170203a 695f6567 7265736e 6f622874     : page_insert(bo
90000000000201a0:	705f746f 72696467 3270202c 4750202c     ot_pgdir, p2, PG
90000000000201b0:	455a4953 5450202c 20555f45 5450207c     SIZE, PTE_U | PT
90000000000201c0:	29575f45 203d3d20 00000030 00000000     E_W) == 0.......
90000000000201d0:	65737361 6f697472 6166206e 64656c69     assertion failed
90000000000201e0:	7028203a 20706574 6567203d 74705f74     : (ptep = get_pt
90000000000201f0:	6f622865 705f746f 72696467 4750202c     e(boot_pgdir, PG
9000000000020200:	455a4953 2930202c 3d212029 4c554e20     SIZE, 0)) != NUL
9000000000020210:	0000004c 00000000 65737361 6f697472     L.......assertio
9000000000020220:	6166206e 64656c69 702a203a 20706574     n failed: *ptep 
9000000000020230:	54502026 00555f45 65737361 6f697472     & PTE_U.assertio
9000000000020240:	6166206e 64656c69 702a203a 20706574     n failed: *ptep 
9000000000020250:	54502026 00575f45 65737361 6f697472     & PTE_W.assertio
9000000000020260:	6166206e 64656c69 6f62203a 705f746f     n failed: boot_p
9000000000020270:	72696467 205d305b 54502026 00555f45     gdir[0] & PTE_U.
9000000000020280:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000020290:	6170203a 725f6567 70286665 3d202932     : page_ref(p2) =
90000000000202a0:	0031203d 00000000 65737361 6f697472     = 1.....assertio
90000000000202b0:	6166206e 64656c69 6170203a 695f6567     n failed: page_i
90000000000202c0:	7265736e 6f622874 705f746f 72696467     nsert(boot_pgdir
90000000000202d0:	3170202c 4750202c 455a4953 2930202c     , p1, PGSIZE, 0)
90000000000202e0:	203d3d20 00000030 65737361 6f697472      == 0...assertio
90000000000202f0:	6166206e 64656c69 6170203a 725f6567     n failed: page_r
9000000000020300:	70286665 3d202931 0032203d 00000000     ef(p1) == 2.....
9000000000020310:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000020320:	6170203a 725f6567 70286665 3d202932     : page_ref(p2) =
9000000000020330:	0030203d 00000000 65737361 6f697472     = 0.....assertio
9000000000020340:	6166206e 64656c69 2a28203a 70657470     n failed: (*ptep
9000000000020350:	50202620 555f4554 3d3d2029 00003020      & PTE_U) == 0..
9000000000020360:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000020370:	6170203a 725f6567 70286665 3d202931     : page_ref(p1) =
9000000000020380:	0030203d 00000000 65737361 6f697472     = 0.....assertio
9000000000020390:	6166206e 64656c69 6170203a 725f6567     n failed: page_r
90000000000203a0:	70286665 61703261 62286567 5f746f6f     ef(pa2page(boot_
90000000000203b0:	69646770 5d305b72 3d202929 0031203d     pgdir[0])) == 1.
90000000000203c0:	63656863 67705f6b 28726964 75732029     check_pgdir() su
90000000000203d0:	65656363 21646564 0000000a 00000000     cceeded!........
90000000000203e0:	65737361 6f697472 6166206e 64656c69     assertion failed
90000000000203f0:	6f62203a 705f746f 72696467 205d305b     : boot_pgdir[0] 
9000000000020400:	30203d3d 00000000 65737361 6f697472     == 0....assertio
9000000000020410:	6166206e 64656c69 6170203a 695f6567     n failed: page_i
9000000000020420:	7265736e 6f622874 705f746f 72696467     nsert(boot_pgdir
9000000000020430:	2c70202c 31783020 202c3030 5f455450     , p, 0x100, PTE_
9000000000020440:	3d202957 0030203d 65737361 6f697472     W) == 0.assertio
9000000000020450:	6166206e 64656c69 6170203a 725f6567     n failed: page_r
9000000000020460:	70286665 3d3d2029 00003120 00000000     ef(p) == 1......
9000000000020470:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000020480:	6170203a 695f6567 7265736e 6f622874     : page_insert(bo
9000000000020490:	705f746f 72696467 2c70202c 31783020     ot_pgdir, p, 0x1
90000000000204a0:	2b203030 53475020 2c455a49 45545020     00 + PGSIZE, PTE
90000000000204b0:	2029575f 30203d3d 00000000 00000000     _W) == 0........
90000000000204c0:	65737361 6f697472 6166206e 64656c69     assertion failed
90000000000204d0:	6170203a 725f6567 70286665 3d3d2029     : page_ref(p) ==
90000000000204e0:	00003220 00000000 5245480a 00000a45      2.......HERE...
90000000000204f0:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000020500:	282a203a 2a746e69 31783029 3d203030     : *(int*)0x100 =
9000000000020510:	7830203d 34333231 00000000 00000000     = 0x1234........
9000000000020520:	726f6375 48203a65 6f6c6c65 726f7720     ucore: Hello wor
9000000000020530:	2121646c 00000000 65737361 6f697472     ld!!....assertio
9000000000020540:	6166206e 64656c69 7473203a 706d6372     n failed: strcmp
9000000000020550:	6f762828 2a206469 31783029 202c3030     ((void *)0x100, 
9000000000020560:	696f7628 292a2064 31783028 2b203030     (void *)(0x100 +
9000000000020570:	53475020 29455a49 3d3d2029 00003020      PGSIZE)) == 0..
9000000000020580:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000020590:	7473203a 6e656c72 6f632828 2074736e     : strlen((const 
90000000000205a0:	72616863 30292a20 30303178 3d3d2029     char *)0x100) ==
90000000000205b0:	00003020 00000000 63656863 6f625f6b      0......check_bo
90000000000205c0:	705f746f 72696467 73202928 65636375     ot_pgdir() succe
90000000000205d0:	64656465 00000a21 2d2d2d2d 2d2d2d2d     eded!...--------
90000000000205e0:	2d2d2d2d 2d2d2d2d 2d2d2d2d 47454220     ------------ BEG
90000000000205f0:	2d204e49 2d2d2d2d 2d2d2d2d 2d2d2d2d     IN -------------
9000000000020600:	2d2d2d2d 0a2d2d2d 00000000 00000000     -------.........
9000000000020610:	28454450 00000000 00002029 00000000     PDE(....) ......
9000000000020620:	0000002d 00000000 00000020 00000000     -....... .......
9000000000020630:	2d7c2020 5450202d 00002845 00000000       |-- PTE(......
9000000000020640:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
9000000000020650:	2d2d2d2d 4e45202d 2d2d2044 2d2d2d2d     ----- END ------
9000000000020660:	2d2d2d2d 2d2d2d2d 2d2d2d2d 0a2d2d2d     ---------------.
	...
9000000000020678:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000020688:	7473203a 20747261 47502025 455a4953     : start % PGSIZE
9000000000020698:	203d3d20 26262030 646e6520 50202520      == 0 && end % P
90000000000206a8:	5a495347 3d3d2045 00003020 00000000     GSIZE == 0......
90000000000206b8:	65737361 6f697472 6166206e 64656c69     assertion failed
90000000000206c8:	5355203a 415f5245 53454343 74732853     : USER_ACCESS(st
90000000000206d8:	2c747261 646e6520 00000029 00000000     art, end).......
90000000000206e8:	65737361 6f697472 6166206e 64656c69     assertion failed
90000000000206f8:	6170203a 3d216567 4c4c554e 00000000     : page!=NULL....
9000000000020708:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000020718:	706e203a 21656761 4c554e3d 0000004c     : npage!=NULL...
9000000000020728:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000020738:	6572203a 3d3d2074 00003020 00000000     : ret == 0......
9000000000020748:	70326170 20656761 6c6c6163 77206465     pa2page called w
9000000000020758:	20687469 61766e69 2064696c 00006170     ith invalid pa..
9000000000020768:	6e72656b 2f6d6d2f 2e6d6d70 00000068     kern/mm/pmm.h...
9000000000020778:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000020788:	7270203a 3e2d7665 735f6d76 74726174     : prev->vm_start
9000000000020798:	70203c20 2d766572 5f6d763e 00646e65      < prev->vm_end.
90000000000207a8:	6e72656b 2f6d6d2f 2e6d6d76 00000063     kern/mm/vmm.c...
90000000000207b8:	65737361 6f697472 6166206e 64656c69     assertion failed
90000000000207c8:	7270203a 3e2d7665 655f6d76 3c20646e     : prev->vm_end <
90000000000207d8:	656e203d 3e2d7478 735f6d76 74726174     = next->vm_start
	...
90000000000207f0:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000020800:	656e203a 3e2d7478 735f6d76 74726174     : next->vm_start
9000000000020810:	6e203c20 2d747865 5f6d763e 00646e65      < next->vm_end.
9000000000020820:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000020830:	6d76203a 763e2d61 74735f6d 20747261     : vma->vm_start 
9000000000020840:	6d76203c 763e2d61 6e655f6d 00000064     < vma->vm_end...
9000000000020850:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000020860:	6d6d203a 756f635f 6d28746e 3d20296d     : mm_count(mm) =
9000000000020870:	0030203d 00000000 65737361 6f697472     = 0.....assertio
9000000000020880:	6166206e 64656c69 6d6d203a 203d2120     n failed: mm != 
9000000000020890:	4c4c554e 00000000 65737361 6f697472     NULL....assertio
90000000000208a0:	6166206e 64656c69 6f74203a 203d2120     n failed: to != 
90000000000208b0:	4c4c554e 20262620 6d6f7266 203d2120     NULL && from != 
90000000000208c0:	4c4c554e 00000000 65737361 6f697472     NULL....assertio
90000000000208d0:	6166206e 64656c69 6d6d203a 203d2120     n failed: mm != 
90000000000208e0:	4c4c554e 20262620 635f6d6d 746e756f     NULL && mm_count
90000000000208f0:	296d6d28 203d3d20 00000030 00000000     (mm) == 0.......
9000000000020900:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000020910:	726e203a 6572665f 61705f65 5f736567     : nr_free_pages_
9000000000020920:	726f7473 3d3d2065 5f726e20 65657266     store == nr_free
9000000000020930:	6761705f 29287365 00000000 00000000     _pages()........
9000000000020940:	63656863 6d765f6b 2029286d 63637573     check_vmm() succ
9000000000020950:	65646565 000a2e64 65737361 6f697472     eeded...assertio
9000000000020960:	6166206e 64656c69 6d76203a 3d212061     n failed: vma !=
9000000000020970:	4c554e20 0000004c 65737361 6f697472      NULL...assertio
9000000000020980:	6166206e 64656c69 656c203a 203d2120     n failed: le != 
9000000000020990:	6d6d2826 6d6d3e2d 6c5f7061 29747369     &(mm->mmap_list)
	...
90000000000209a8:	65737361 6f697472 6166206e 64656c69     assertion failed
90000000000209b8:	6d6d203a 3e2d7061 735f6d76 74726174     : mmap->vm_start
90000000000209c8:	203d3d20 202a2069 26262035 616d6d20      == i * 5 && mma
90000000000209d8:	763e2d70 6e655f6d 3d3d2064 2a206920     p->vm_end == i *
90000000000209e8:	2b203520 00003220 65737361 6f697472      5 + 2..assertio
90000000000209f8:	6166206e 64656c69 6d76203a 763e2d61     n failed: vma->v
9000000000020a08:	74735f6d 20747261 6a203d3d 35202a20     m_start == j * 5
9000000000020a18:	20262620 2d616d76 5f6d763e 20646e65      && vma->vm_end 
9000000000020a28:	6a203d3d 35202a20 32202b20 00000000     == j * 5 + 2....
9000000000020a38:	63656863 6d765f6b 74735f61 74637572     check_vma_struct
9000000000020a48:	73202928 65636375 64656465 00000a21     () succeeded!...
9000000000020a58:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000020a68:	6863203a 5f6b6365 735f6d6d 63757274     : check_mm_struc
9000000000020a78:	3d212074 4c554e20 0000004c 00000000     t != NULL.......
9000000000020a88:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000020a98:	6770203a 5b726964 3d205d30 0030203d     : pgdir[0] == 0.
9000000000020aa8:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000020ab8:	6966203a 765f646e 6d28616d 61202c6d     : find_vma(mm, a
9000000000020ac8:	29726464 203d3d20 00616d76 00000000     ddr) == vma.....
9000000000020ad8:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000020ae8:	7573203a 3d3d206d 00393920 00000000     : sum == 99.....
9000000000020af8:	63656863 67705f6b 6c756166 20292874     check_pgfault() 
9000000000020b08:	63637573 65646565 000a2164 00000000     succeeded!......
9000000000020b18:	20746f6e 696c6176 64612064 25207264     not valid addr %
9000000000020b28:	61202c78 2020646e 206e6163 20746f6e     x, and  can not 
9000000000020b38:	646e6966 20746920 76206e69 000a616d     find it in vma..
9000000000020b48:	74697277 6e202c65 7020746f 65736572     write, not prese
9000000000020b58:	6920746e 6f64206e 6667705f 746c7561     nt in do_pgfault
9000000000020b68:	69616620 0a64656c 00000000 00000000      failed.........
9000000000020b78:	64616572 7270202c 6e657365 6e692074     read, present in
9000000000020b88:	5f6f6420 61666770 20746c75 6c696166      do_pgfault fail
9000000000020b98:	000a6465 00000000 64616572 6f6e202c     ed......read, no
9000000000020ba8:	72702074 6e657365 6e692074 5f6f6420     t present in do_
9000000000020bb8:	61666770 20746c75 6c696166 000a6465     pgfault failed..
9000000000020bc8:	73206f6e 20706177 75206e69 65726f63     no swap in ucore
9000000000020bd8:	36616c2d 75622034 74702074 69207065     -la64 but ptep i
9000000000020be8:	78252073 6166202c 64656c69 0000000a     s %x, failed....
9000000000020bf8:	63657053 206c6169 6e72656b 73206c65     Special kernel s
9000000000020c08:	6f626d79 0a3a736c 00000000 00000000     ymbols:.........
9000000000020c18:	6e652020 20797274 00783020 00000000       entry  0x.....
9000000000020c28:	68702820 0a297379 00000000 00000000      (phys).........
9000000000020c38:	74652020 09747865 00007830 00000000       etext.0x......
9000000000020c48:	64652020 09617461 00007830 00000000       edata.0x......
9000000000020c58:	6e652020 78300964 00000000 00000000       end.0x........
9000000000020c68:	6e72654b 65206c65 75636578 6c626174     Kernel executabl
9000000000020c78:	656d2065 79726f6d 6f6f6620 69727074     e memory footpri
9000000000020c88:	203a746e 00000000 000a424b 00000000     nt: ....KB......
9000000000020c98:	6d696e55 00006c70 6e72656b 6265642f     Unimpl..kern/deb
9000000000020ca8:	6b2f6775 75626564 00632e67 00000000     ug/kdebug.c.....
9000000000020cb8:	706c6568 00000000 70736944 2079616c     help....Display 
9000000000020cc8:	73696874 73696c20 666f2074 6d6f6320     this list of com
9000000000020cd8:	646e616d 00002e73 6e72656b 6f666e69     mands...kerninfo
	...
9000000000020cf0:	70736944 2079616c 6f666e69 74616d72     Display informat
9000000000020d00:	206e6f69 756f6261 68742074 656b2065     ion about the ke
9000000000020d10:	6c656e72 0000002e 0d0a0920 00000000     rnel.... .......
9000000000020d20:	206f6f54 796e616d 67726120 6e656d75     Too many argumen
9000000000020d30:	0a2e7374 00000000 6e6b6e55 206e776f     ts......Unknown 
9000000000020d40:	6d6d6f63 20646e61 00000027 00000000     command '.......
9000000000020d50:	00000a27 00000000 636c6557 20656d6f     '.......Welcome 
9000000000020d60:	74206f74 6b206568 656e7265 6564206c     to the kernel de
9000000000020d70:	20677562 696e6f6d 21726f74 00000a21     bug monitor!!...
9000000000020d80:	65707954 65682720 2027706c 20726f66     Type 'help' for 
9000000000020d90:	696c2061 6f207473 6f632066 6e616d6d     a list of comman
9000000000020da0:	0a2e7364 00000000 00203e4b 00000000     ds......K> .....
9000000000020db0:	00202d20 00000000 0000000a 00000000      - .............
9000000000020dc0:	6e72656b 70206c65 63696e61 20746120     kernel panic at 
9000000000020dd0:	253a7325 200a3a64 00202020 00000000     %s:%d:.    .....
9000000000020de0:	0000000a 00000000 6e72656b 77206c65     ........kernel w
9000000000020df0:	696e7261 6120676e 73252074 3a64253a     arning at %s:%d:
9000000000020e00:	2020200a 00000020 6d612049 2e6f4e20     .    ...I am No.
9000000000020e10:	70206425 6f6c6968 68706f73 735f7265     %d philosopher_s
9000000000020e20:	0a616d65 00000000 72657449 2c642520     ema.....Iter %d,
9000000000020e30:	2e6f4e20 70206425 6f6c6968 68706f73      No.%d philosoph
9000000000020e40:	735f7265 20616d65 74207369 6b6e6968     er_sema is think
9000000000020e50:	0a676e69 00000000 72657449 2c642520     ing.....Iter %d,
9000000000020e60:	2e6f4e20 70206425 6f6c6968 68706f73      No.%d philosoph
9000000000020e70:	735f7265 20616d65 65207369 6e697461     er_sema is eatin
9000000000020e80:	00000a67 00000000 252e6f4e 68702064     g.......No.%d ph
9000000000020e90:	736f6c69 6568706f 65735f72 7120616d     ilosopher_sema q
9000000000020ea0:	0a746975 00000000 5f696870 74736574     uit.....phi_test
9000000000020eb0:	6e6f635f 72617664 7473203a 5f657461     _condvar: state_
9000000000020ec0:	646e6f63 5b726176 205d6425 6c6c6977     condvar[%d] will
9000000000020ed0:	74616520 0a676e69 00000000 00000000      eating.........
9000000000020ee0:	5f696870 74736574 6e6f635f 72617664     phi_test_condvar
9000000000020ef0:	6973203a 6c616e67 6c657320 76635f66     : signal self_cv
9000000000020f00:	5d64255b 00000a20 5f696870 656b6174     [%d] ...phi_take
9000000000020f10:	726f665f 635f736b 76646e6f 203a7261     _forks_condvar: 
9000000000020f20:	64206425 276e6469 65672074 6f662074     %d didn't get fo
9000000000020f30:	61206b72 7720646e 206c6c69 74696177     rk and will wait
9000000000020f40:	0000000a 00000000 6d612049 2e6f4e20     ........I am No.
9000000000020f50:	70206425 6f6c6968 68706f73 635f7265     %d philosopher_c
9000000000020f60:	76646e6f 000a7261 72657449 2c642520     ondvar..Iter %d,
9000000000020f70:	2e6f4e20 70206425 6f6c6968 68706f73      No.%d philosoph
9000000000020f80:	635f7265 76646e6f 69207261 68742073     er_condvar is th
9000000000020f90:	696b6e69 000a676e 72657449 2c642520     inking..Iter %d,
9000000000020fa0:	2e6f4e20 70206425 6f6c6968 68706f73      No.%d philosoph
9000000000020fb0:	635f7265 76646e6f 69207261 61652073     er_condvar is ea
9000000000020fc0:	676e6974 0000000a 252e6f4e 68702064     ting....No.%d ph
9000000000020fd0:	736f6c69 6568706f 6f635f72 6176646e     ilosopher_condva
9000000000020fe0:	75712072 000a7469 61657263 4e206574     r quit..create N
9000000000020ff0:	64252e6f 69687020 6f736f6c 72656870     o.%d philosopher
9000000000021000:	6973755f 735f676e 70616d65 65726f68     _using_semaphore
9000000000021010:	69616620 2e64656c 0000000a 00000000      failed.........
9000000000021020:	6e72656b 6e79732f 68632f63 5f6b6365     kern/sync/check_
9000000000021030:	636e7973 0000632e 6c696870 706f736f     sync.c..philosop
9000000000021040:	5f726568 616d6573 6f72705f 00000063     her_sema_proc...
9000000000021050:	61657263 4e206574 64252e6f 69687020     create No.%d phi
9000000000021060:	6f736f6c 72656870 6973755f 635f676e     losopher_using_c
9000000000021070:	76646e6f 66207261 656c6961 000a2e64     ondvar failed...
9000000000021080:	6c696870 706f736f 5f726568 646e6f63     philosopher_cond
9000000000021090:	5f726176 636f7270 00000000 00000000     var_proc........
90000000000210a0:	65737361 6f697472 6166206e 64656c69     assertion failed
90000000000210b0:	756e203a 76635f6d 0000303e 00000000     : num_cv>0......
90000000000210c0:	6e72656b 6e79732f 6f6d2f63 6f74696e     kern/sync/monito
90000000000210d0:	00632e72 00000000 65737361 6f697472     r.c.....assertio
90000000000210e0:	6166206e 64656c69 746d203a 633e2d70     n failed: mtp->c
90000000000210f0:	4e3d2176 004c4c55 646e6f63 6769735f     v!=NULL.cond_sig
9000000000021100:	206c616e 69676562 63203a6e 25207076     nal begin: cvp %
9000000000021110:	63202c78 3e2d7076 6e756f63 64252074     x, cvp->count %d
9000000000021120:	7663202c 6f3e2d70 72656e77 656e3e2d     , cvp->owner->ne
9000000000021130:	635f7478 746e756f 0a642520 00000000     xt_count %d.....
9000000000021140:	646e6f63 6769735f 206c616e 3a646e65     cond_signal end:
9000000000021150:	70766320 2c782520 70766320 6f633e2d      cvp %x, cvp->co
9000000000021160:	20746e75 202c6425 2d707663 6e776f3e     unt %d, cvp->own
9000000000021170:	3e2d7265 7478656e 756f635f 2520746e     er->next_count %
9000000000021180:	00000a64 00000000 646e6f63 6961775f     d.......cond_wai
9000000000021190:	65622074 3a6e6967 76632020 78252070     t begin:  cvp %x
90000000000211a0:	7663202c 633e2d70 746e756f 2c642520     , cvp->count %d,
90000000000211b0:	70766320 776f3e2d 2d72656e 78656e3e      cvp->owner->nex
90000000000211c0:	6f635f74 20746e75 000a6425 00000000     t_count %d......
90000000000211d0:	646e6f63 6961775f 6e652074 20203a64     cond_wait end:  
90000000000211e0:	20707663 202c7825 2d707663 756f633e     cvp %x, cvp->cou
90000000000211f0:	2520746e 63202c64 3e2d7076 656e776f     nt %d, cvp->owne
9000000000021200:	6e3e2d72 5f747865 6e756f63 64252074     r->next_count %d
9000000000021210:	0000000a 00000000 65737361 6f697472     ........assertio
9000000000021220:	6166206e 64656c69 6177203a 3e2d7469     n failed: wait->
9000000000021230:	636f7270 61773e2d 735f7469 65746174     proc->wait_state
9000000000021240:	203d3d20 74696177 6174735f 00006574      == wait_state..
9000000000021250:	6e72656b 6e79732f 65732f63 00632e6d     kern/sync/sem.c.
9000000000021260:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000021270:	6c66203a 20736761 30203d3d 00000000     : flags == 0....
9000000000021280:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000021290:	696c203a 655f7473 7974706d 77282628     : list_empty(&(w
90000000000212a0:	2d746961 6961773e 696c5f74 29296b6e     ait->wait_link))
90000000000212b0:	20262620 74696177 72703e2d 2120636f      && wait->proc !
90000000000212c0:	554e203d 00004c4c 6e72656b 6e79732f     = NULL..kern/syn
90000000000212d0:	61772f63 632e7469 00000000 00000000     c/wait.c........
90000000000212e0:	65737361 6f697472 6166206e 64656c69     assertion failed
90000000000212f0:	6c21203a 5f747369 74706d65 28262879     : !list_empty(&(
9000000000021300:	74696177 61773e2d 6c5f7469 296b6e69     wait->wait_link)
9000000000021310:	26262029 69617720 773e2d74 5f746961     ) && wait->wait_
9000000000021320:	75657571 3d3d2065 65757120 00006575     queue == queue..
9000000000021330:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000021340:	7563203a 6e657272 3d212074 4c554e20     : current != NUL
9000000000021350:	0000004c 00000000 70326170 20656761     L.......pa2page 
9000000000021360:	6c6c6163 77206465 20687469 61766e69     called with inva
9000000000021370:	2064696c 00006170 6e72656b 2f6d6d2f     lid pa..kern/mm/
9000000000021380:	2e6d6d70 00000068 4444414b 61632052     pmm.h...KADDR ca
9000000000021390:	64656c6c 74697720 6e692068 696c6176     lled with invali
90000000000213a0:	61702064 38302520 0000786c 00000000     d pa %08lx......
90000000000213b0:	44444150 61632052 64656c6c 74697720     PADDR called wit
90000000000213c0:	6e692068 696c6176 766b2064 30252061     h invalid kva %0
90000000000213d0:	00786c38 00000000 6e72656b 6f72702f     8lx.....kern/pro
90000000000213e0:	73736563 6f72702f 00632e63 00000000     cess/proc.c.....
90000000000213f0:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000021400:	6c6f203a 73665f64 7274735f 20746375     : old_fs_struct 
9000000000021410:	4e203d21 004c4c55 656c6469 636f7270     != NULL.idleproc
9000000000021420:	69786520 000a2e74 655f6f64 20746978      exit...do_exit 
9000000000021430:	6c6c6977 746f6e20 74657220 216e7275     will not return!
9000000000021440:	64252021 00000a2e 616d5f65 20636967     ! %d....e_magic 
9000000000021450:	00207369 00000000 0000000a 00000000     is .............
9000000000021460:	79745f65 69206570 00002073 00000000     e_type is ......
9000000000021470:	616d5f65 6e696863 73692065 00000020     e_machine is ...
9000000000021480:	65765f65 6f697372 7369206e 00000020     e_version is ...
9000000000021490:	6e655f65 20797274 00207369 00000000     e_entry is .....
90000000000214a0:	68705f65 2066666f 20207369 00000000     e_phoff is  ....
90000000000214b0:	68735f65 2066666f 00207369 00000000     e_shoff is .....
90000000000214c0:	6c665f65 20736761 00207369 00000000     e_flags is .....
90000000000214d0:	68655f65 657a6973 20736920 00000000     e_ehsize is ....
90000000000214e0:	68705f65 206d756e 00207369 00000000     e_phnum is .....
90000000000214f0:	68735f65 73746e65 20657a69 00207369     e_shentsize is .
9000000000021500:	68735f65 206d756e 00207369 00000000     e_shnum is .....
9000000000021510:	68735f65 6e727473 69207864 00002073     e_shstrndx is ..
9000000000021520:	64616f6c 6f63695f 203a6564 72727563     load_icode: curr
9000000000021530:	2d746e65 206d6d3e 7473756d 20656220     ent->mm must be 
9000000000021540:	74706d65 000a2e79 65737361 6f697472     empty...assertio
9000000000021550:	6166206e 64656c69 6528203a 3c20646e     n failed: (end <
9000000000021560:	20616c20 73202626 74726174 203d3d20      la && start == 
9000000000021570:	29646e65 207c7c20 646e6528 203d3e20     end) || (end >= 
9000000000021580:	2620616c 74732026 20747261 6c203d3d     la && start == l
9000000000021590:	00002961 00000000 5f646162 61656c63     a)......bad_clea
90000000000215a0:	5f70756e 70616d6d 00000000 00000000     nup_mmap........
90000000000215b0:	5f646162 5f666c65 61656c63 5f70756e     bad_elf_cleanup_
90000000000215c0:	69646770 00000072 5f646162 69646770     pgdir...bad_pgdi
90000000000215d0:	6c635f72 756e6165 6d6d5f70 00000000     r_cleanup_mm....
90000000000215e0:	5f646162 00006d6d 6c756e3c 25203e6c     bad_mm..<null> %
90000000000215f0:	00000064 00000000 65726c61 20796461     d.......already 
9000000000021600:	74697865 6525203a 00000a2e 00000000     exit: %e........
9000000000021610:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000021620:	7563203a 6e657272 00000074 00000000     : current.......
9000000000021630:	74696177 6c646920 6f727065 726f2063     wait idleproc or
9000000000021640:	696e6920 6f727074 000a2e63 00000000      initproc.......
9000000000021650:	00006873 00000000 6e72656b 655f6c65     sh......kernel_e
9000000000021660:	76636578 70203a65 3d206469 2c642520     xecve: pid = %d,
9000000000021670:	6d616e20 203d2065 22732522 00000a2e      name = "%s"....
9000000000021680:	72657375 69616d5f 7865206e 65766365     user_main execve
9000000000021690:	69616620 2e64656c 0000000a 00000000      failed.........
90000000000216a0:	6b736964 00003a30 20746573 746f6f62     disk0:..set boot
90000000000216b0:	20736620 6c696166 203a6465 0a2e6525      fs failed: %e..
	...
90000000000216c8:	61657263 75206574 5f726573 6e69616d     create user_main
90000000000216d8:	69616620 2e64656c 0000000a 00000000      failed.........
90000000000216e8:	206c6c61 72657375 646f6d2d 72702065     all user-mode pr
90000000000216f8:	7365636f 20736573 65766168 69757120     ocesses have qui
9000000000021708:	000a2e74 00000000 65737361 6f697472     t.......assertio
9000000000021718:	6166206e 64656c69 6e69203a 72707469     n failed: initpr
9000000000021728:	3e2d636f 72747063 203d3d20 4c4c554e     oc->cptr == NULL
9000000000021738:	20262620 74696e69 636f7270 70793e2d      && initproc->yp
9000000000021748:	3d207274 554e203d 26204c4c 6e692026     tr == NULL && in
9000000000021758:	72707469 3e2d636f 7274706f 203d3d20     itproc->optr == 
9000000000021768:	4c4c554e 00000000 65737361 6f697472     NULL....assertio
9000000000021778:	6166206e 64656c69 726e203a 6f72705f     n failed: nr_pro
9000000000021788:	73736563 203d3d20 00000032 00000000     cess == 2.......
9000000000021798:	65737361 6f697472 6166206e 64656c69     assertion failed
90000000000217a8:	696c203a 6e5f7473 28747865 6f727026     : list_next(&pro
90000000000217b8:	696c5f63 20297473 26203d3d 696e6928     c_list) == &(ini
90000000000217c8:	6f727074 6c3e2d63 5f747369 6b6e696c     tproc->list_link
90000000000217d8:	00000029 00000000 65737361 6f697472     ).......assertio
90000000000217e8:	6166206e 64656c69 696c203a 705f7473     n failed: list_p
90000000000217f8:	28766572 6f727026 696c5f63 20297473     rev(&proc_list) 
9000000000021808:	26203d3d 696e6928 6f727074 6c3e2d63     == &(initproc->l
9000000000021818:	5f747369 6b6e696c 00000029 00000000     ist_link).......
9000000000021828:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000021838:	726e203a 6572665f 61705f65 5f736567     : nr_free_pages_
9000000000021848:	726f7473 3d3d2065 5f726e20 65657266     store == nr_free
9000000000021858:	6761705f 29287365 00000000 00000000     _pages()........
9000000000021868:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000021878:	6c73203a 615f6261 636f6c6c 64657461     : slab_allocated
9000000000021888:	6f74735f 3d206572 616b203d 636f6c6c     _store == kalloc
9000000000021898:	64657461 00002928 74696e69 65686320     ated()..init che
90000000000218a8:	6d206b63 726f6d65 61702079 0a2e7373     ck memory pass..
	...
90000000000218c0:	6e6e6163 6120746f 636f6c6c 6c646920     cannot alloc idl
90000000000218d0:	6f727065 000a2e63 61657263 66206574     eproc...create f
90000000000218e0:	74735f73 74637572 64692820 7270656c     s_struct (idlepr
90000000000218f0:	2029636f 6c696166 0a2e6465 00000000     oc) failed......
9000000000021900:	656c6469 00000000 61657263 69206574     idle....create i
9000000000021910:	5f74696e 6e69616d 69616620 2e64656c     nit_main failed.
9000000000021920:	0000000a 00000000 74696e69 00000000     ........init....
9000000000021930:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000021940:	6469203a 7270656c 2120636f 554e203d     : idleproc != NU
9000000000021950:	26204c4c 64692026 7270656c 3e2d636f     LL && idleproc->
9000000000021960:	20646970 30203d3d 00000000 00000000     pid == 0........
9000000000021970:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000021980:	6e69203a 72707469 2120636f 554e203d     : initproc != NU
9000000000021990:	26204c4c 6e692026 72707469 3e2d636f     LL && initproc->
90000000000219a0:	20646970 31203d3d 00000000 00000000     pid == 1........
90000000000219b0:	636f7270 696e695f 75732074 65656363     proc_init succee
90000000000219c0:	0a646564 00000000 69727473 735f6564     ded.....stride_s
90000000000219d0:	64656863 72656c75 00000000 00000000     cheduler........
90000000000219e0:	65686373 6c632064 3a737361 0a732520     sched class: %s.
	...
90000000000219f8:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000021a08:	7270203a 3e2d636f 74617473 3d212065     : proc->state !=
9000000000021a18:	4f525020 4f5a5f43 4549424d 00000000      PROC_ZOMBIE....
9000000000021a28:	6e72656b 6863732f 6c756465 63732f65     kern/schedule/sc
9000000000021a38:	2e646568 00000063 656b6177 72207075     hed.c...wakeup r
9000000000021a48:	616e6e75 20656c62 636f7270 2e737365     unnable process.
9000000000021a58:	0000000a 00000000 65737361 6f697472     ........assertio
9000000000021a68:	6166206e 64656c69 6974203a 2d72656d     n failed: timer-
9000000000021a78:	7078653e 73657269 30203e20 20262620     >expires > 0 && 
9000000000021a88:	656d6974 703e2d72 20636f72 4e203d21     timer->proc != N
9000000000021a98:	004c4c55 00000000 65737361 6f697472     ULL.....assertio
9000000000021aa8:	6166206e 64656c69 696c203a 655f7473     n failed: list_e
9000000000021ab8:	7974706d 74282628 72656d69 69743e2d     mpty(&(timer->ti
9000000000021ac8:	5f72656d 6b6e696c 00002929 00000000     mer_link))......
9000000000021ad8:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000021ae8:	6974203a 2d72656d 7078653e 73657269     : timer->expires
9000000000021af8:	203d2120 00000030 65737361 6f697472      != 0...assertio
9000000000021b08:	6166206e 64656c69 7270203a 3e2d636f     n failed: proc->
9000000000021b18:	74696177 6174735f 26206574 5f545720     wait_state & WT_
9000000000021b28:	45544e49 50555252 00444554 00000000     INTERRUPTED.....
9000000000021b38:	636f7270 20737365 73276425 69617720     process %d's wai
9000000000021b48:	74735f74 20657461 30203d3d 00000a2e     t_state == 0....
9000000000021b58:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000021b68:	7563203a 6e657272 3d212074 4c554e20     : current != NUL
9000000000021b78:	0000004c 00000000 6e72656b 7379732f     L.......kern/sys
9000000000021b88:	6c6c6163 7379732f 6c6c6163 0000632e     call/syscall.c..
9000000000021b98:	65646e75 656e6966 79732064 6c616373     undefined syscal
9000000000021ba8:	6425206c 6970202c 203d2064 202c6425     l %d, pid = %d, 
9000000000021bb8:	656d616e 25203d20 000a2e73 00000000     name = %s.......
9000000000021bc8:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000021bd8:	7366203a 7274735f 20746375 4e203d21     : fs_struct != N
9000000000021be8:	004c4c55 00000000 6e72656b 2f73662f     ULL.....kern/fs/
9000000000021bf8:	656c6966 0000632e 65737361 6f697472     file.c..assertio
9000000000021c08:	6166206e 64656c69 7366203a 756f635f     n failed: fs_cou
9000000000021c18:	6628746e 74735f73 74637572 203e2029     nt(fs_struct) > 
9000000000021c28:	00000030 00000000 65737361 6f697472     0.......assertio
9000000000021c38:	6166206e 64656c69 6f66203a 5f6e6570     n failed: fopen_
9000000000021c48:	6e756f63 69662874 2029656c 30203d3d     count(file) == 0
	...
9000000000021c60:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000021c70:	6966203a 3e2d656c 74617473 3d207375     : file->status =
9000000000021c80:	4446203d 494e495f 7c7c2054 6c696620     = FD_INIT || fil
9000000000021c90:	733e2d65 75746174 3d3d2073 5f444620     e->status == FD_
9000000000021ca0:	534f4c43 00004445 65737361 6f697472     CLOSED..assertio
9000000000021cb0:	6166206e 64656c69 6966203a 3e2d656c     n failed: file->
9000000000021cc0:	74617473 3d207375 4446203d 45504f5f     status == FD_OPE
9000000000021cd0:	0044454e 00000000 65737361 6f697472     NED.....assertio
9000000000021ce0:	6166206e 64656c69 6966203a 3e2d656c     n failed: file->
9000000000021cf0:	74617473 3d207375 4446203d 45504f5f     status == FD_OPE
9000000000021d00:	2044454e 66207c7c 2d656c69 6174733e     NED || file->sta
9000000000021d10:	20737574 46203d3d 4c435f44 4445534f     tus == FD_CLOSED
	...
9000000000021d28:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000021d38:	6f66203a 5f6e6570 6e756f63 69662874     : fopen_count(fi
9000000000021d48:	2029656c 0030203e 65737361 6f697472     le) > 0.assertio
9000000000021d58:	6166206e 64656c69 6966203a 3e2d656c     n failed: file->
9000000000021d68:	74617473 3d207375 4446203d 494e495f     status == FD_INI
9000000000021d78:	26262054 6c696620 6e3e2d65 2065646f     T && file->node 
9000000000021d88:	4e203d21 004c4c55 65737361 6f697472     != NULL.assertio
9000000000021d98:	6166206e 64656c69 6f74203a 74733e2d     n failed: to->st
9000000000021da8:	73757461 203d3d20 495f4446 2054494e     atus == FD_INIT 
9000000000021db8:	66202626 2d6d6f72 6174733e 20737574     && from->status 
9000000000021dc8:	46203d3d 504f5f44 44454e45 00000000     == FD_OPENED....
9000000000021dd8:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000021de8:	5f5f203a 65646f6e 203d2120 4c4c554e     : __node != NULL
9000000000021df8:	20262620 6f6e5f5f 3e2d6564 6f5f6e69      && __node->in_o
9000000000021e08:	21207370 554e203d 26204c4c 5f5f2026     ps != NULL && __
9000000000021e18:	65646f6e 6e693e2d 73706f5f 6f763e2d     node->in_ops->vo
9000000000021e28:	73665f70 20746174 4e203d21 004c4c55     p_fstat != NULL.
9000000000021e38:	61747366 00000074 65737361 6f697472     fstat...assertio
9000000000021e48:	6166206e 64656c69 5f5f203a 65646f6e     n failed: __node
9000000000021e58:	203d2120 4c4c554e 20262620 6f6e5f5f      != NULL && __no
9000000000021e68:	3e2d6564 6f5f6e69 21207370 554e203d     de->in_ops != NU
9000000000021e78:	26204c4c 5f5f2026 65646f6e 6e693e2d     LL && __node->in
9000000000021e88:	73706f5f 6f763e2d 65725f70 21206461     _ops->vop_read !
9000000000021e98:	554e203d 00004c4c 64616572 00000000     = NULL..read....
9000000000021ea8:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000021eb8:	5f5f203a 65646f6e 203d2120 4c4c554e     : __node != NULL
9000000000021ec8:	20262620 6f6e5f5f 3e2d6564 6f5f6e69      && __node->in_o
9000000000021ed8:	21207370 554e203d 26204c4c 5f5f2026     ps != NULL && __
9000000000021ee8:	65646f6e 6e693e2d 73706f5f 6f763e2d     node->in_ops->vo
9000000000021ef8:	72775f70 20657469 4e203d21 004c4c55     p_write != NULL.
9000000000021f08:	74697277 00000065 65737361 6f697472     write...assertio
9000000000021f18:	6166206e 64656c69 5f5f203a 65646f6e     n failed: __node
9000000000021f28:	203d2120 4c4c554e 20262620 6f6e5f5f      != NULL && __no
9000000000021f38:	3e2d6564 6f5f6e69 21207370 554e203d     de->in_ops != NU
9000000000021f48:	26204c4c 5f5f2026 65646f6e 6e693e2d     LL && __node->in
9000000000021f58:	73706f5f 6f763e2d 72745f70 65657379     _ops->vop_trysee
9000000000021f68:	3d21206b 4c554e20 0000004c 00000000     k != NULL.......
9000000000021f78:	73797274 006b6565 65737361 6f697472     tryseek.assertio
9000000000021f88:	6166206e 64656c69 5f5f203a 65646f6e     n failed: __node
9000000000021f98:	203d2120 4c4c554e 20262620 6f6e5f5f      != NULL && __no
9000000000021fa8:	3e2d6564 6f5f6e69 21207370 554e203d     de->in_ops != NU
9000000000021fb8:	26204c4c 5f5f2026 65646f6e 6e693e2d     LL && __node->in
9000000000021fc8:	73706f5f 6f763e2d 73665f70 20636e79     _ops->vop_fsync 
9000000000021fd8:	4e203d21 004c4c55 6e797366 00000063     != NULL.fsync...
9000000000021fe8:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000021ff8:	5f5f203a 65646f6e 203d2120 4c4c554e     : __node != NULL
9000000000022008:	20262620 6f6e5f5f 3e2d6564 6f5f6e69      && __node->in_o
9000000000022018:	21207370 554e203d 26204c4c 5f5f2026     ps != NULL && __
9000000000022028:	65646f6e 6e693e2d 73706f5f 6f763e2d     node->in_ops->vo
9000000000022038:	65675f70 72696474 72746e65 3d212079     p_getdirentry !=
9000000000022048:	4c554e20 0000004c 64746567 6e657269      NULL...getdiren
9000000000022058:	00797274 00000000 65737361 6f697472     try.....assertio
9000000000022068:	6166206e 64656c69 7366203a 7274735f     n failed: fs_str
9000000000022078:	20746375 4e203d21 204c4c55 66202626     uct != NULL && f
9000000000022088:	6f635f73 28746e75 735f7366 63757274     s_count(fs_struc
9000000000022098:	3d202974 0030203d 6e72656b 2f73662f     t) == 0.kern/fs/
90000000000220a8:	632e7366 00000000 65737361 6f697472     fs.c....assertio
90000000000220b8:	6166206e 64656c69 6966203a 3e2d656c     n failed: file->
90000000000220c8:	74617473 3d207375 4446203d 4e4f4e5f     status == FD_NON
90000000000220d8:	00000045 00000000 65737361 6f697472     E.......assertio
90000000000220e8:	6166206e 64656c69 7366203a 7274735f     n failed: fs_str
90000000000220f8:	20746375 4e203d21 204c4c55 66202626     uct != NULL && f
9000000000022108:	6f635f73 28746e75 735f7366 63757274     s_count(fs_struc
9000000000022118:	3e202974 00003020 65737361 6f697472     t) > 0..assertio
9000000000022128:	6166206e 64656c69 6f74203a 203d2120     n failed: to != 
9000000000022138:	4c4c554e 20262620 6d6f7266 203d2120     NULL && from != 
9000000000022148:	4c4c554e 00000000 65737361 6f697472     NULL....assertio
9000000000022158:	6166206e 64656c69 7366203a 756f635f     n failed: fs_cou
9000000000022168:	7428746e 3d20296f 2030203d 66202626     nt(to) == 0 && f
9000000000022178:	6f635f73 28746e75 6d6f7266 203e2029     s_count(from) > 
9000000000022188:	00000030 00000000 65737361 6f697472     0.......assertio
9000000000022198:	6166206e 64656c69 6f69203a 693e2d62     n failed: iob->i
90000000000221a8:	65725f6f 20646973 6e203d3e 00000000     o_resid >= n....
90000000000221b8:	6e72656b 2f73662f 75626f69 00632e66     kern/fs/iobuf.c.
90000000000221c8:	65737361 6f697472 6166206e 64656c69     assertion failed
90000000000221d8:	656c203a 3d3e206e 656c6120 0000006e     : len >= alen...
90000000000221e8:	6e72656b 2f73662f 66737973 2e656c69     kern/fs/sysfile.
90000000000221f8:	00000063 00000000 65737361 6f697472     c.......assertio
9000000000022208:	6166206e 64656c69 6e69203a 5f65646f     n failed: inode_
9000000000022218:	5f666572 6e756f63 6f6e2874 20296564     ref_count(node) 
9000000000022228:	30203d3d 00000000 6e72656b 2f73662f     == 0....kern/fs/
9000000000022238:	2f736676 646f6e69 00632e65 00000000     vfs/inode.c.....
9000000000022248:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000022258:	6e69203a 5f65646f 6e65706f 756f635f     : inode_open_cou
9000000000022268:	6e28746e 2965646f 203d3d20 00000030     nt(node) == 0...
9000000000022278:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000022288:	6e69203a 5f65646f 5f666572 6e756f63     : inode_ref_coun
9000000000022298:	6f6e2874 20296564 0030203e 00000000     t(node) > 0.....
90000000000222a8:	65737361 6f697472 6166206e 64656c69     assertion failed
90000000000222b8:	5f5f203a 65646f6e 203d2120 4c4c554e     : __node != NULL
90000000000222c8:	20262620 6f6e5f5f 3e2d6564 6f5f6e69      && __node->in_o
90000000000222d8:	21207370 554e203d 26204c4c 5f5f2026     ps != NULL && __
90000000000222e8:	65646f6e 6e693e2d 73706f5f 6f763e2d     node->in_ops->vo
90000000000222f8:	65725f70 69616c63 3d21206d 4c554e20     p_reclaim != NUL
9000000000022308:	0000004c 00000000 6c636572 006d6961     L.......reclaim.
9000000000022318:	3a736676 72617720 676e696e 6f76203a     vfs: warning: vo
9000000000022328:	65725f70 69616c63 25203a6d 000a2e65     p_reclaim: %e...
9000000000022338:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000022348:	6e69203a 5f65646f 6e65706f 756f635f     : inode_open_cou
9000000000022358:	6e28746e 2965646f 30203e20 00000000     nt(node) > 0....
9000000000022368:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000022378:	5f5f203a 65646f6e 203d2120 4c4c554e     : __node != NULL
9000000000022388:	20262620 6f6e5f5f 3e2d6564 6f5f6e69      && __node->in_o
9000000000022398:	21207370 554e203d 26204c4c 5f5f2026     ps != NULL && __
90000000000223a8:	65646f6e 6e693e2d 73706f5f 6f763e2d     node->in_ops->vo
90000000000223b8:	6c635f70 2065736f 4e203d21 004c4c55     p_close != NULL.
90000000000223c8:	736f6c63 00000065 3a736676 72617720     close...vfs: war
90000000000223d8:	676e696e 6f76203a 6c635f70 3a65736f     ning: vop_close:
90000000000223e8:	2e652520 0000000a 65737361 6f697472      %e.....assertio
90000000000223f8:	6166206e 64656c69 6f6e203a 21206564     n failed: node !
9000000000022408:	554e203d 26204c4c 6f6e2026 3e2d6564     = NULL && node->
9000000000022418:	6f5f6e69 21207370 554e203d 00004c4c     in_ops != NULL..
9000000000022428:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000022438:	6f6e203a 3e2d6564 6f5f6e69 3e2d7370     : node->in_ops->
9000000000022448:	5f706f76 6967616d 3d3d2063 504f5620     vop_magic == VOP
9000000000022458:	47414d5f 00004349 65737361 6f697472     _MAGIC..assertio
9000000000022468:	6166206e 64656c69 6572203a 6f635f66     n failed: ref_co
9000000000022478:	20746e75 6f203d3e 5f6e6570 6e756f63     unt >= open_coun
9000000000022488:	26262074 65706f20 6f635f6e 20746e75     t && open_count 
9000000000022498:	30203d3e 00000000 65737361 6f697472     >= 0....assertio
90000000000224a8:	6166206e 64656c69 6572203a 6f635f66     n failed: ref_co
90000000000224b8:	20746e75 414d203c 4e495f58 5f45444f     unt < MAX_INODE_
90000000000224c8:	4e554f43 26262054 65706f20 6f635f6e     COUNT && open_co
90000000000224d8:	20746e75 414d203c 4e495f58 5f45444f     unt < MAX_INODE_
90000000000224e8:	4e554f43 00000054 65737361 6f697472     COUNT...assertio
90000000000224f8:	6166206e 64656c69 6564203a 6d616e76     n failed: devnam
9000000000022508:	3d212065 4c554e20 0000004c 00000000     e != NULL.......
9000000000022518:	6e72656b 2f73662f 2f736676 64736676     kern/fs/vfs/vfsd
9000000000022528:	632e7665 00000000 65737361 6f697472     ev.c....assertio
9000000000022538:	6166206e 64656c69 7366203a 203d2120     n failed: fs != 
9000000000022548:	4c4c554e 00000000 65737361 6f697472     NULL....assertio
9000000000022558:	6166206e 64656c69 6428203a 6f6e7665     n failed: (devno
9000000000022568:	3d206564 554e203d 26204c4c 6d212026     de == NULL && !m
9000000000022578:	746e756f 656c6261 7c7c2029 65642820     ountable) || (de
9000000000022588:	646f6e76 3d212065 4c554e20 2626204c     vnode != NULL &&
9000000000022598:	65686320 695f6b63 65646f6e 7079745f      check_inode_typ
90000000000225a8:	65642865 646f6e76 64202c65 63697665     e(devnode, devic
90000000000225b8:	00292965 00000000 65737361 6f697472     e)).....assertio
90000000000225c8:	6166206e 64656c69 6476203a 3e2d7665     n failed: vdev->
90000000000225d8:	6e766564 20656d61 4e203d21 204c4c55     devname != NULL 
90000000000225e8:	76202626 2d766564 756f6d3e 6261746e     && vdev->mountab
90000000000225f8:	0000656c 00000000 65737361 6f697472     le......assertio
9000000000022608:	6166206e 64656c69 5f5f203a 65646f6e     n failed: __node
9000000000022618:	203d2120 4c4c554e 20262620 63656863      != NULL && chec
9000000000022628:	6e695f6b 5f65646f 65707974 6e5f5f28     k_inode_type(__n
9000000000022638:	2c65646f 76656420 29656369 00000000     ode, device)....
9000000000022648:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000022658:	6476203a 3e2d7665 21207366 554e203d     : vdev->fs != NU
9000000000022668:	00004c4c 00000000 3a736676 756f6d20     LL......vfs: mou
9000000000022678:	2520746e 000a2e73 3a736676 6d6e7520     nt %s...vfs: unm
9000000000022688:	746e756f 2e732520 0000000a 00000000     ount %s.........
9000000000022698:	3a736676 72617720 676e696e 7973203a     vfs: warning: sy
90000000000226a8:	6620636e 656c6961 6f662064 73252072     nc failed for %s
90000000000226b8:	6525203a 00000a2e 3a736676 72617720     : %e....vfs: war
90000000000226c8:	676e696e 6e75203a 6e756f6d 61662074     ning: unmount fa
90000000000226d8:	64656c69 726f6620 3a732520 2e652520     iled for %s: %e.
90000000000226e8:	0000000a 00000000 65737361 6f697472     ........assertio
90000000000226f8:	6166206e 64656c69 5f5f203a 65646f6e     n failed: __node
9000000000022708:	203d2120 4c4c554e 20262620 6f6e5f5f      != NULL && __no
9000000000022718:	3e2d6564 6f5f6e69 21207370 554e203d     de->in_ops != NU
9000000000022728:	26204c4c 5f5f2026 65646f6e 6e693e2d     LL && __node->in
9000000000022738:	73706f5f 6f763e2d 72635f70 65746165     _ops->vop_create
9000000000022748:	203d2120 4c4c554e 00000000 00000000      != NULL........
9000000000022758:	6e72656b 2f73662f 2f736676 66736676     kern/fs/vfs/vfsf
9000000000022768:	2e656c69 00000063 61657263 00006574     ile.c...create..
9000000000022778:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000022788:	6f6e203a 21206564 554e203d 00004c4c     : node != NULL..
9000000000022798:	65737361 6f697472 6166206e 64656c69     assertion failed
90000000000227a8:	5f5f203a 65646f6e 203d2120 4c4c554e     : __node != NULL
90000000000227b8:	20262620 6f6e5f5f 3e2d6564 6f5f6e69      && __node->in_o
90000000000227c8:	21207370 554e203d 26204c4c 5f5f2026     ps != NULL && __
90000000000227d8:	65646f6e 6e693e2d 73706f5f 6f763e2d     node->in_ops->vo
90000000000227e8:	706f5f70 21206e65 554e203d 00004c4c     p_open != NULL..
90000000000227f8:	6e65706f 00000000 65737361 6f697472     open....assertio
9000000000022808:	6166206e 64656c69 5f5f203a 65646f6e     n failed: __node
9000000000022818:	203d2120 4c4c554e 20262620 6f6e5f5f      != NULL && __no
9000000000022828:	3e2d6564 6f5f6e69 21207370 554e203d     de->in_ops != NU
9000000000022838:	26204c4c 5f5f2026 65646f6e 6e693e2d     LL && __node->in
9000000000022848:	73706f5f 6f763e2d 72745f70 61636e75     _ops->vop_trunca
9000000000022858:	21206574 554e203d 00004c4c 00000000     te != NULL......
9000000000022868:	6e757274 65746163 00000000 00000000     truncate........
9000000000022878:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000022888:	702a203a 20687461 27203d3d 0000273a     : *path == ':'..
9000000000022898:	6e72656b 2f73662f 2f736676 6c736676     kern/fs/vfs/vfsl
90000000000228a8:	756b6f6f 00632e70 65737361 6f697472     ookup.c.assertio
90000000000228b8:	6166206e 64656c69 6f6e203a 3e2d6564     n failed: node->
90000000000228c8:	665f6e69 3d212073 4c554e20 0000004c     in_fs != NULL...
90000000000228d8:	65737361 6f697472 6166206e 64656c69     assertion failed
90000000000228e8:	5f5f203a 65646f6e 203d2120 4c4c554e     : __node != NULL
90000000000228f8:	20262620 6f6e5f5f 3e2d6564 6f5f6e69      && __node->in_o
9000000000022908:	21207370 554e203d 26204c4c 5f5f2026     ps != NULL && __
9000000000022918:	65646f6e 6e693e2d 73706f5f 6f763e2d     node->in_ops->vo
9000000000022928:	6f6c5f70 70756b6f 203d2120 4c4c554e     p_lookup != NULL
	...
9000000000022940:	6b6f6f6c 00007075 65737361 6f697472     lookup..assertio
9000000000022950:	6166206e 64656c69 5f5f203a 65646f6e     n failed: __node
9000000000022960:	203d2120 4c4c554e 20262620 6f6e5f5f      != NULL && __no
9000000000022970:	3e2d6564 6f5f6e69 21207370 554e203d     de->in_ops != NU
9000000000022980:	26204c4c 5f5f2026 65646f6e 6e693e2d     LL && __node->in
9000000000022990:	73706f5f 6f763e2d 65675f70 70797474     _ops->vop_gettyp
90000000000229a0:	3d212065 4c554e20 0000004c 00000000     e != NULL.......
90000000000229b0:	6e72656b 2f73662f 2f736676 70736676     kern/fs/vfs/vfsp
90000000000229c0:	2e687461 00000063 74746567 00657079     ath.c...gettype.
90000000000229d0:	65737361 6f697472 6166206e 64656c69     assertion failed
90000000000229e0:	6f6e203a 3e2d6564 665f6e69 3d212073     : node->in_fs !=
90000000000229f0:	4c554e20 0000004c 65737361 6f697472      NULL...assertio
9000000000022a00:	6166206e 64656c69 5f5f203a 65646f6e     n failed: __node
9000000000022a10:	203d2120 4c4c554e 20262620 6f6e5f5f      != NULL && __no
9000000000022a20:	3e2d6564 6f5f6e69 21207370 554e203d     de->in_ops != NU
9000000000022a30:	26204c4c 5f5f2026 65646f6e 6e693e2d     LL && __node->in
9000000000022a40:	73706f5f 6f763e2d 616e5f70 6966656d     _ops->vop_namefi
9000000000022a50:	2120656c 554e203d 00004c4c 00000000     le != NULL......
9000000000022a60:	656d616e 656c6966 00000000 00000000     namefile........
9000000000022a70:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000022a80:	626e203a 20737469 30203d21 20262620     : nbits != 0 && 
9000000000022a90:	7469626e 202b2073 44524f57 5449425f     nbits + WORD_BIT
9000000000022aa0:	203e2053 7469626e 00000073 00000000     S > nbits.......
9000000000022ab0:	6e72656b 2f73662f 2f736673 6d746962     kern/fs/sfs/bitm
9000000000022ac0:	632e7061 00000000 65737361 6f697472     ap.c....assertio
9000000000022ad0:	6166206e 64656c69 626e203a 20737469     n failed: nbits 
9000000000022ae0:	4f57202f 425f4452 20535449 69203d3d     / WORD_BITS == i
9000000000022af0:	00000078 00000000 65737361 6f697472     x.......assertio
9000000000022b00:	6166206e 64656c69 766f203a 69627265     n failed: overbi
9000000000022b10:	3e207374 26203020 766f2026 69627265     ts > 0 && overbi
9000000000022b20:	3c207374 524f5720 49425f44 00005354     ts < WORD_BITS..
9000000000022b30:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000022b40:	0030203a 00000000 65737361 6f697472     : 0.....assertio
9000000000022b50:	6166206e 64656c69 6e69203a 20786564     n failed: index 
9000000000022b60:	6962203c 70616d74 626e3e2d 00737469     < bitmap->nbits.
9000000000022b70:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000022b80:	2821203a 726f772a 20262064 6b73616d     : !(*word & mask
9000000000022b90:	00000029 00000000 6b736964 00000030     ).......disk0...
9000000000022ba0:	6c696166 203a6465 3a736673 73667320     failed: sfs: sfs
9000000000022bb0:	756f6d5f 203a746e 0a2e6525 00000000     _mount: %e......
9000000000022bc0:	6e72656b 2f73662f 2f736673 2e736673     kern/fs/sfs/sfs.
9000000000022bd0:	00000063 00000000 65737361 6f697472     c.......assertio
9000000000022be0:	6166206e 64656c69 5f5f203a 21207366     n failed: __fs !
9000000000022bf0:	554e203d 26204c4c 68632026 5f6b6365     = NULL && check_
9000000000022c00:	745f7366 28657079 73665f5f 6673202c     fs_type(__fs, sf
9000000000022c10:	00002973 00000000 6e72656b 2f73662f     s)......kern/fs/
9000000000022c20:	2f736673 5f736673 632e7366 00000000     sfs/sfs_fs.c....
9000000000022c30:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000022c40:	5f5f203a 65646f6e 203d2120 4c4c554e     : __node != NULL
9000000000022c50:	20262620 6f6e5f5f 3e2d6564 6f5f6e69      && __node->in_o
9000000000022c60:	21207370 554e203d 26204c4c 5f5f2026     ps != NULL && __
9000000000022c70:	65646f6e 6e693e2d 73706f5f 6f763e2d     node->in_ops->vo
9000000000022c80:	73665f70 20636e79 4e203d21 004c4c55     p_fsync != NULL.
9000000000022c90:	6e797366 00000063 64616f6c 73667320     fsync...load sfs
9000000000022ca0:	6f6f7220 61662074 64656c69 6525203a      root failed: %e
	...
9000000000022cb8:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000022cc8:	7321203a 3e2d7366 65707573 69645f72     : !sfs->super_di
9000000000022cd8:	00797472 00000000 3a736673 656c6320     rty.....sfs: cle
9000000000022ce8:	70756e61 2527203a 28202773 252f6425     anup: '%s' (%d/%
9000000000022cf8:	64252f64 00000a29 3a736673 6e797320     d/%d)...sfs: syn
9000000000022d08:	72652063 3a726f72 73252720 25203a27     c error: '%s': %
9000000000022d18:	000a2e65 00000000 65737361 6f697472     e.......assertio
9000000000022d28:	6166206e 64656c69 6164203a 21206174     n failed: data !
9000000000022d38:	554e203d 26204c4c 656c2026 3d3d206e     = NULL && len ==
9000000000022d48:	6c626e20 2a20736b 53465320 4b4c425f      nblks * SFS_BLK
9000000000022d58:	455a4953 00000000 3a736673 6f727720     SIZE....sfs: wro
9000000000022d68:	6d20676e 63696761 206e6920 65707573     ng magic in supe
9000000000022d78:	6f6c6272 202e6b63 38302528 68732078     rblock. (%08x sh
9000000000022d88:	646c756f 20656220 78383025 000a2e29     ould be %08x)...
9000000000022d98:	3a736673 20736620 20736168 62206425     sfs: fs has %d b
9000000000022da8:	6b636f6c 64202c73 63697665 61682065     locks, device ha
9000000000022db8:	64252073 6f6c6220 2e736b63 0000000a     s %d blocks.....
9000000000022dc8:	3a736673 756f6d20 203a746e 27732527     sfs: mount: '%s'
9000000000022dd8:	64252820 2f64252f 0a296425 00000000      (%d/%d/%d).....

9000000000022de8 <sfs_node_dirops>:
9000000000022de8:	8c4ba476 00000000 0001a5bc 90000000     v.K.............
9000000000022df8:	0001a648 90000000 00000000 00000000     H...............
	...
9000000000022e10:	0001acdc 90000000 0001ae44 90000000     ........D.......
9000000000022e20:	0001af70 90000000 0001b3b4 90000000     p...............
9000000000022e30:	0001b554 90000000 0001b848 90000000     T.......H.......
	...
9000000000022e58:	0001bcec 90000000 00000000 00000000     ................

9000000000022e68 <sfs_node_fileops>:
9000000000022e68:	8c4ba476 00000000 0001a618 90000000     v.K.............
9000000000022e78:	0001a648 90000000 0001ac5c 90000000     H.......\.......
9000000000022e88:	0001ac9c 90000000 0001acdc 90000000     ................
9000000000022e98:	0001ae44 90000000 00000000 00000000     D...............
	...
9000000000022eb0:	0001b554 90000000 0001b848 90000000     T.......H.......
9000000000022ec0:	0001b990 90000000 0001baa8 90000000     ................
	...
9000000000022ee8:	61766e69 2064696c 656c6966 70797420     invalid file typ
9000000000022ef8:	64252065 00000a2e 6e72656b 2f73662f     e %d....kern/fs/
9000000000022f08:	2f736673 5f736673 646f6e69 00632e65     sfs/sfs_inode.c.
9000000000022f18:	5f736673 636f6c62 6e695f6b 3a657375     sfs_block_inuse:
9000000000022f28:	6c616320 2064656c 2074756f 7220666f      called out of r
9000000000022f38:	65676e61 2c302820 29642520 2e642520     ange (0, %d) %d.
9000000000022f48:	0000000a 00000000 65737361 6f697472     ........assertio
9000000000022f58:	6166206e 64656c69 6673203a 733e2d73     n failed: sfs->s
9000000000022f68:	72657075 756e752e 5f646573 636f6c62     uper.unused_bloc
9000000000022f78:	3e20736b 00003020 65737361 6f697472     ks > 0..assertio
9000000000022f88:	6166206e 64656c69 6673203a 6c625f73     n failed: sfs_bl
9000000000022f98:	5f6b636f 73756e69 66732865 2a202c73     ock_inuse(sfs, *
9000000000022fa8:	5f6f6e69 726f7473 00002965 00000000     ino_store)......
9000000000022fb8:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000022fc8:	6673203a 6c625f73 5f6b636f 73756e69     : sfs_block_inus
9000000000022fd8:	66732865 69202c73 00296f6e 00000000     e(sfs, ino).....
9000000000022fe8:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000022ff8:	5f5f203a 65646f6e 203d2120 4c4c554e     : __node != NULL
9000000000023008:	20262620 63656863 6e695f6b 5f65646f      && check_inode_
9000000000023018:	65707974 6e5f5f28 2c65646f 73667320     type(__node, sfs
9000000000023028:	6f6e695f 00296564 65737361 6f697472     _inode).assertio
9000000000023038:	6166206e 64656c69 535f203a 495f5346     n failed: _SFS_I
9000000000023048:	45444f4e 5445475f 494c4e5f 28534b4e     NODE_GET_NLINKS(
9000000000023058:	296e6964 203d2120 00000030 00000000     din) != 0.......
9000000000023068:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000023078:	6e69203a 20786564 4653203c 4c425f53     : index < SFS_BL
9000000000023088:	454e5f4b 5952544e 00000000 00000000     K_NENTRY........
9000000000023098:	65737361 6f697472 6166206e 64656c69     assertion failed
90000000000230a8:	6964203a 693e2d6e 7269646e 20746365     : din->indirect 
90000000000230b8:	30203d3d 00000000 65737361 6f697472     == 0....assertio
90000000000230c8:	6166206e 64656c69 6e69203a 3d3d206f     n failed: ino ==
90000000000230d8:	7c203020 6673207c 6c625f73 5f6b636f      0 || sfs_block_
90000000000230e8:	73756e69 66732865 69202c73 00296f6e     inuse(sfs, ino).
90000000000230f8:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000023108:	6673203a 6c625f73 5f6b636f 73756e69     : sfs_block_inus
9000000000023118:	66732865 65202c73 2029746e 69202626     e(sfs, ent) && i
9000000000023128:	7865646e 53203c20 425f5346 4e5f4b4c     ndex < SFS_BLK_N
9000000000023138:	52544e45 00000059 65737361 6f697472     ENTRY...assertio
9000000000023148:	6166206e 64656c69 6e69203a 20786564     n failed: index 
9000000000023158:	64203d3c 3e2d6e69 636f6c62 0000736b     <= din->blocks..
9000000000023168:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000023178:	6964203a 623e2d6e 6b636f6c 3d212073     : din->blocks !=
9000000000023188:	00003020 00000000 65737361 6f697472      0......assertio
9000000000023198:	6166206e 64656c69 535f203a 495f5346     n failed: _SFS_I
90000000000231a8:	45444f4e 5445475f 5059545f 69732845     NODE_GET_TYPE(si
90000000000231b8:	643e2d6e 20296e69 53203d3d 545f5346     n->din) == SFS_T
90000000000231c8:	5f455059 20524944 28202626 746f6c73     YPE_DIR && (slot
90000000000231d8:	203d3e20 26262030 6f6c7320 203c2074      >= 0 && slot < 
90000000000231e8:	2d6e6973 6e69643e 6c623e2d 736b636f     sin->din->blocks
90000000000231f8:	00000029 00000000 65737361 6f697472     ).......assertio
9000000000023208:	6166206e 64656c69 7473203a 6e656c72     n failed: strlen
9000000000023218:	6d616e28 3c202965 4653203d 414d5f53     (name) <= SFS_MA
9000000000023228:	4e465f58 5f454d41 004e454c 00000000     X_FNAME_LEN.....
9000000000023238:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000023248:	5f5f203a 65646f6e 203d2120 4c4c554e     : __node != NULL
9000000000023258:	20262620 6f6e5f5f 3e2d6564 6f5f6e69      && __node->in_o
9000000000023268:	21207370 554e203d 26204c4c 5f5f2026     ps != NULL && __
9000000000023278:	65646f6e 6e693e2d 73706f5f 6f763e2d     node->in_ops->vo
9000000000023288:	73665f70 20636e79 4e203d21 004c4c55     p_fsync != NULL.
9000000000023298:	6e797366 00000063 65737361 6f697472     fsync...assertio
90000000000232a8:	6166206e 64656c69 535f203a 495f5346     n failed: _SFS_I
90000000000232b8:	45444f4e 5445475f 5059545f 69642845     NODE_GET_TYPE(di
90000000000232c8:	2120296e 4653203d 59545f53 445f4550     n) != SFS_TYPE_D
90000000000232d8:	00005249 00000000 65737361 6f697472     IR......assertio
90000000000232e8:	6166206e 64656c69 5f5f203a 21207366     n failed: __fs !
90000000000232f8:	554e203d 26204c4c 68632026 5f6b6365     = NULL && check_
9000000000023308:	745f7366 28657079 73665f5f 6673202c     fs_type(__fs, sf
9000000000023318:	00002973 00000000 65737361 6f697472     s)......assertio
9000000000023328:	6166206e 64656c69 5f5f203a 65646f6e     n failed: __node
9000000000023338:	203d2120 4c4c554e 20262620 6f6e5f5f      != NULL && __no
9000000000023348:	3e2d6564 6f5f6e69 21207370 554e203d     de->in_ops != NU
9000000000023358:	26204c4c 5f5f2026 65646f6e 6e693e2d     LL && __node->in
9000000000023368:	73706f5f 6f763e2d 65675f70 70797474     _ops->vop_gettyp
9000000000023378:	3d212065 4c554e20 0000004c 00000000     e != NULL.......
9000000000023388:	74746567 00657079 00002e2e 00000000     gettype.........
9000000000023398:	65737361 6f697472 6166206e 64656c69     assertion failed
90000000000233a8:	6e69203a 3d21206f 6e697320 6e693e2d     : ino != sin->in
90000000000233b8:	2626206f 46535f20 4e495f53 5f45444f     o && _SFS_INODE_
90000000000233c8:	5f544547 45505954 6e697328 69643e2d     GET_TYPE(sin->di
90000000000233d8:	3d20296e 4653203d 59545f53 445f4550     n) == SFS_TYPE_D
90000000000233e8:	00005249 00000000 65737361 6f697472     IR......assertio
90000000000233f8:	6166206e 64656c69 6973203a 723e2d6e     n failed: sin->r
9000000000023408:	616c6365 635f6d69 746e756f 30203e20     eclaim_count > 0
	...
9000000000023420:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000023430:	5f5f203a 65646f6e 203d2120 4c4c554e     : __node != NULL
9000000000023440:	20262620 6f6e5f5f 3e2d6564 6f5f6e69      && __node->in_o
9000000000023450:	21207370 554e203d 26204c4c 5f5f2026     ps != NULL && __
9000000000023460:	65646f6e 6e693e2d 73706f5f 6f763e2d     node->in_ops->vo
9000000000023470:	72745f70 61636e75 21206574 554e203d     p_truncate != NU
9000000000023480:	00004c4c 00000000 6e757274 65746163     LL......truncate
	...
9000000000023498:	65737361 6f697472 6166206e 64656c69     assertion failed
90000000000234a8:	6274203a 20736b6c 64203d3d 3e2d6e69     : tblks == din->
90000000000234b8:	636f6c62 0000736b 65737361 6f697472     blocks..assertio
90000000000234c8:	6166206e 64656c69 6964203a 623e2d6e     n failed: din->b
90000000000234d8:	6b636f6c 3d3d2073 6c627420 0000736b     locks == tblks..
90000000000234e8:	65737361 6f697472 6166206e 64656c69     assertion failed
90000000000234f8:	702a203a 20687461 27203d21 2027305c     : *path != '\0' 
9000000000023508:	2a202626 68746170 203d2120 00272f27     && *path != '/'.
9000000000023518:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000023528:	6228203a 6f6e6b6c 203d2120 7c7c2030     : (blkno != 0 ||
9000000000023538:	68632120 296b6365 20262620 6e6b6c62      !check) && blkn
9000000000023548:	203c206f 2d736673 7075733e 622e7265     o < sfs->super.b
9000000000023558:	6b636f6c 00000073 6e72656b 2f73662f     locks...kern/fs/
9000000000023568:	2f736673 5f736673 632e6f69 00000000     sfs/sfs_io.c....
9000000000023578:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000023588:	666f203a 74657366 203d3e20 26262030     : offset >= 0 &&
9000000000023598:	66666f20 20746573 4653203c 4c425f53      offset < SFS_BL
90000000000235a8:	5a49534b 26262045 66666f20 20746573     KSIZE && offset 
90000000000235b8:	656c202b 3d3c206e 53465320 4b4c425f     + len <= SFS_BLK
90000000000235c8:	455a4953 00000000 65737361 6f697472     SIZE....assertio
90000000000235d8:	6166206e 64656c69 5f5f203a 65646f6e     n failed: __node
90000000000235e8:	203d2120 4c4c554e 20262620 63656863      != NULL && chec
90000000000235f8:	6e695f6b 5f65646f 65707974 6e5f5f28     k_inode_type(__n
9000000000023608:	2c65646f 76656420 29656369 00000000     ode, device)....
9000000000023618:	6e72656b 2f73662f 73766564 7665642f     kern/fs/devs/dev
9000000000023628:	0000632e 00000000 65737361 6f697472     .c......assertio
9000000000023638:	6166206e 64656c69 5f5f203a 65646f6e     n failed: __node
9000000000023648:	203d2120 4c4c554e 20262620 6f6e5f5f      != NULL && __no
9000000000023658:	3e2d6564 6f5f6e69 21207370 554e203d     de->in_ops != NU
9000000000023668:	26204c4c 5f5f2026 65646f6e 6e693e2d     LL && __node->in
9000000000023678:	73706f5f 6f763e2d 65675f70 70797474     _ops->vop_gettyp
9000000000023688:	3d212065 4c554e20 0000004c 00000000     e != NULL.......
9000000000023698:	74746567 00657079                       gettype.

90000000000236a0 <dev_node_ops>:
90000000000236a0:	8c4ba476 00000000 0001c768 90000000     v.K.....h.......
90000000000236b0:	0001c814 90000000 0001c898 90000000     ................
90000000000236c0:	0001c928 90000000 0001ca58 90000000     (.......X.......
	...
90000000000236f0:	0001cba0 90000000 0001cc38 90000000     ........8.......
	...
9000000000023710:	0001ccfc 90000000 0001c9b8 90000000     ................
9000000000023720:	6b736964 72203a30 20646165 6e6b6c62     disk0: read blkn
9000000000023730:	203d206f 28206425 74636573 3d206f6e     o = %d (sectno =
9000000000023740:	29642520 626e202c 20736b6c 6425203d      %d), nblks = %d
9000000000023750:	736e2820 20736365 6425203d 30203a29      (nsecs = %d): 0
9000000000023760:	38302578 000a2e78 6e72656b 2f73662f     x%08x...kern/fs/
9000000000023770:	73766564 7665642f 7369645f 632e306b     devs/dev_disk0.c
	...
9000000000023788:	6b736964 77203a30 65746972 6b6c6220     disk0: write blk
9000000000023798:	3d206f6e 20642520 63657328 206f6e74     no = %d (sectno 
90000000000237a8:	6425203d 6e202c29 736b6c62 25203d20     = %d), nblks = %
90000000000237b8:	6e282064 73636573 25203d20 203a2964     d (nsecs = %d): 
90000000000237c8:	30257830 0a2e7838 00000000 00000000     0x%08x..........
90000000000237d8:	65737361 6f697472 6166206e 64656c69     assertion failed
90000000000237e8:	6f63203a 64656970 203d2120 26262030     : copied != 0 &&
90000000000237f8:	706f6320 20646569 72203d3c 64697365      copied <= resid
9000000000023808:	20262620 69706f63 25206465 53494420      && copied % DIS
9000000000023818:	425f304b 49534b4c 3d20455a 0030203d     K0_BLKSIZE == 0.
9000000000023828:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000023838:	6f63203a 64656970 203d3d20 6e656c61     : copied == alen
9000000000023848:	20262620 69706f63 25206465 53494420      && copied % DIS
9000000000023858:	425f304b 49534b4c 3d20455a 0030203d     K0_BLKSIZE == 0.
9000000000023868:	6b736964 65642030 65636976 6e736920     disk0 device isn
9000000000023878:	61207427 6c696176 656c6261 00000a2e     't available....
9000000000023888:	6b736964 6c612030 20636f6c 66667562     disk0 alloc buff
9000000000023898:	66207265 656c6961 000a2e64 00000000     er failed.......
90000000000238a8:	6b736964 64203a30 635f7665 74616572     disk0: dev_creat
90000000000238b8:	6f6e5f65 0a2e6564 00000000 00000000     e_node..........
90000000000238c8:	65737361 6f697472 6166206e 64656c69     assertion failed
90000000000238d8:	5f5f203a 65646f6e 203d2120 4c4c554e     : __node != NULL
90000000000238e8:	20262620 63656863 6e695f6b 5f65646f      && check_inode_
90000000000238f8:	65707974 6e5f5f28 2c65646f 76656420     type(__node, dev
9000000000023908:	29656369 00000000 6b736964 00000030     ice)....disk0...
9000000000023918:	6b736964 76203a30 615f7366 645f6464     disk0: vfs_add_d
9000000000023928:	203a7665 0a2e6525 00000000 00000000     ev: %e..........
9000000000023938:	69647473 64203a6e 635f7665 74616572     stdin: dev_creat
9000000000023948:	6f6e5f65 0a2e6564 00000000 00000000     e_node..........
9000000000023958:	6e72656b 2f73662f 73766564 7665642f     kern/fs/devs/dev
9000000000023968:	6474735f 632e6e69 00000000 00000000     _stdin.c........
9000000000023978:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000023988:	5f5f203a 65646f6e 203d2120 4c4c554e     : __node != NULL
9000000000023998:	20262620 63656863 6e695f6b 5f65646f      && check_inode_
90000000000239a8:	65707974 6e5f5f28 2c65646f 76656420     type(__node, dev
90000000000239b8:	29656369 00000000 69647473 0000006e     ice)....stdin...
90000000000239c8:	69647473 76203a6e 615f7366 645f6464     stdin: vfs_add_d
90000000000239d8:	203a7665 0a2e6525 00000000 00000000     ev: %e..........
90000000000239e8:	6f647473 203a7475 5f766564 61657263     stdout: dev_crea
90000000000239f8:	6e5f6574 2e65646f 0000000a 00000000     te_node.........
9000000000023a08:	6e72656b 2f73662f 73766564 7665642f     kern/fs/devs/dev
9000000000023a18:	6474735f 2e74756f 00000063 00000000     _stdout.c.......
9000000000023a28:	65737361 6f697472 6166206e 64656c69     assertion failed
9000000000023a38:	5f5f203a 65646f6e 203d2120 4c4c554e     : __node != NULL
9000000000023a48:	20262620 63656863 6e695f6b 5f65646f      && check_inode_
9000000000023a58:	65707974 6e5f5f28 2c65646f 76656420     type(__node, dev
9000000000023a68:	29656369 00000000 6f647473 00007475     ice)....stdout..
9000000000023a78:	6f647473 203a7475 5f736676 5f646461     stdout: vfs_add_
9000000000023a88:	3a766564 2e652520 0000000a 00000000     dev: %e.........
	...
